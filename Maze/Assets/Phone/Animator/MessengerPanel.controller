le:///C:/" };
            yield return new object[] { @"C|\", "file:///C:/", "file:///C:/" };

            // Explicit windows drive
            yield return new object[] { "file:///C:/", "file:///C:/", "file:///C:/" };
            yield return new object[] { "file://C:/", "file:///C:/", "file:///C:/" };
            yield return new object[] { @"file:///C:\", "file:///C:/", "file:///C:/" };
            yield return new object[] { @"file://C:\", "file:///C:/", "file:///C:/" };
            yield return new object[] { "file:///C|/", "file:///C:/", "file:///C:/" };
            yield return new object[] { "file://C|/", "file:///C:/", "file:///C:/" };
            yield return new object[] { @"file:///C|\", "file:///C:/", "file:///C:/" };
            yield return new object[] { @"file://C|\", "file:///C:/", "file:///C:/" };

            // Unix path
            if (!s_isWindowsSystem)
            {
                // Implicit File
                yield return new object[] { "/", "file:///", "file:///" };
                yield return new object[] { "/path/filename", "file:///path/filename", "file:///path/filename" };
            }

            // Compressed
            yield return new object[] { "http://host/path1/../path2", "http://host/path2", "http://host/path2" };
            yield return new object[] { "http://host/../", "http://host/", "http://host/" };
        }

        [Theory]
        [MemberData(nameof(OriginalString_AbsoluteUri_ToString_TestData))]
        public void OriginalString_AbsoluteUri_ToString(string uriString, string absoluteUri, string toString)
        {
            PerformAction(uriString, UriKind.Absolute, uri =>
            {
                Assert.Equal(uriString, uri.OriginalString);
                Assert.Equal(absoluteUri, uri.AbsoluteUri);
                Assert.Equal(toString, uri.ToString());
            });
        }

        public static IEnumerab
         new[] {keyedItem1}.Where(ki => ki.Key != null)
                                          .ToArray
                            <IKeyedItem<TKey, TValue>>());

                collection.MyChangeItemKey(tempKeyedItem, default(TKey));
                collection.Verify(keys, items, itemsWithKeys);
            }
        }

        [Theory]
        [MemberData(nameof(ClassData))]
        public void ChangeItemKeyNullToNonNull(
            int collectionSize,
            Named<KeyedCollectionGetKeyedValue<TKey, TValue>>
                generateKeyedItem)
        {
            if (default(TKey) == null)
            {
                TKey[] keys;
                IKeyedItem<TKey, TValue>[] items;
                IKeyedItem<TKey, TValue>[] itemsWithKeys;
                TValue item1 = GenerateValue();
                TValue item2 = GenerateValue();
                TKey key1 = GetKeyForItem(item1);
                TKey key2 = GetKeyForItem(item2);
                var keyedItem1 = new KeyedItem<TKey, TValue>(
                    key1,
                    item1);
                var collection =
                    new TestKeyedCollectionOfIKeyedItem<TKey, TValue>();
                collection.AddItems(
                    generateKeyedItem.Value.Bind(
                        GenerateValue,
                        GetKeyForItem),
                    ki => ki.Key,
                    collectionSize,
                    out keys,
                    out items,
                    out itemsWithKeys);
                collection.Add(keyedItem1);
                var tempKeyedItem =
                    new KeyedItem<TKey, TValue>(default(TKey), item2);
                collection.Add(tempKeyedItem);
                keys = keys.Push(key1);
                items = items.Push(keyedItem1, tempKeyedItem);
                itemsWithKeys =
                    itemsWithKeys.Push(
                        new[] {keyedItem1, tempKeyedItem}.Where(
                            ki => ki.Key != null)
                                                         .ToArray
                            <IKeyedItem<TKey, TValue>>());

                collection.MyChangeItemKey(tempKeyedItem, key2);
                tempKeyedItem.Key = key2;
                collection.Verify(keys, items, itemsWithKeys);
            }
        }

        [Theory]
        [MemberData(nameof(ClassData))]
        public void ChangeItemKeyNonNullToNull(
            int collectionSize,
            Named<KeyedCollectionGetKeyedValue<TKey, TValue>>
                generateKeyedItem)
        {
            if (default(TKey) == null)
            {
                TKey[] keys;
                IKeyedItem<TKey, TValue>[] items;
                IKeyedItem<TKey, TValue>[] itemsWithKeys;
                TValue item1 = GenerateValue();
                TValue item2 = GenerateValue();
                TKey key1 = GetKeyForItem(item1);
                TKey key2 = GetKeyForItem(item2);
                var keyedItem1 = new KeyedItem<TKey, TValue>(
                    key1,
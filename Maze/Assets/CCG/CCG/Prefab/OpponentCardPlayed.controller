TValue item1 = GenerateValue();
            TValue item2 = GenerateValue();
            TValue item3 = GenerateValue();
            TKey key1 = GetKeyForItem(item1);
            TKey key2 = GetKeyForItem(item2);
            TKey key3 = GetKeyForItem(item3);
            var keyedItem1 = new KeyedItem<TKey, TValue>(key1, item1);
            var keyedItem2 = new KeyedItem<TKey, TValue>(key2, item2);
            var collection =
                new TestKeyedCollectionOfIKeyedItem<TKey, TValue>();
            collection.AddItems(
                generateKeyedItem.Value.Bind(
                    GenerateValue,
                    GetKeyForItem),
                ki => ki.Key,
                collectionSize,
                out keys,
                out items,
                out itemsWithKeys);

            collection.Add(keyedItem1);
            collection.Add(keyedItem2);
            keys = keys.Push(key1, collectionSize >= 32 ? key2 : key3);
            items = items.Push(keyedItem1, keyedItem2);
            itemsWithKeys = itemsWithKeys.Push(keyedItem1, keyedItem2);
            keyedItem2.Key = key3;
            if (collectionSize >= 32)
            {
                AssertExtensions.Throws<ArgumentException>(null, () => collection.MyChangeItemKey(keyedItem2, key2));
            }
            else
            {
                collection.MyChangeItemKey(keyedItem2, key2);
            }
            collection.Verify(keys, items, itemsWithKeys);
        }

        [Theory]
        [MemberData(nameof(ClassData2))]
        public void ChangeItemKeyKeyAlreadyChangedNewKeyIsDifferent(
            int collectionSize,
            Named<KeyedCollectionGetKeyedValue<TKey, TValue>>
                generateKeyedItem)
        {
            TKey[] keys;
            IKeyedItem<TKey, TValue>[] items;
            IKeyedItem<TKey,
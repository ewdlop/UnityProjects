       .ToArray
                            <IKeyedItem<TKey, TValue>>());

                collection.MyChangeItemKey(keyedItem2, default(TKey));
                collection.Verify(keys, items, itemsWithKeys);
            }
        }

        [Theory]
        [MemberData(nameof(CollectionSizes))]
        public void ChangeItemKeyNullItemNotPresent(int collectionSize)
        {
            if (default(TKey) == null)
            {
                TKey[] keys;
                TValue[] items;
                TValue[] itemsWithKeys;
                TValue item1 = GenerateValue();
                TValue item2 = GenerateValue();
                TKey key1 = GetKeyForItem(item1);
                TKey key2 = GetKeyForItem(item2);
                var collection =
                    new TestKeyedCollection<TKey, TValue>(GetKeyForItem);
                collection.AddItems(
                    GenerateValue,
                    GetKeyForItem,
                    collectionSize,
                    out keys,
                    out items,
                    out itemsWithKeys);
                collection.Add(item1);
                AssertExtensions.Throws<ArgumentException>(null, () => collection.MyChangeItemKey(default(TValue), key2));
                collection.Verify(
                    keys.Push(key1),
                    items.Push(item1),
                    itemsWithKeys.Push(item1));
            }
        }

        [Theory]
        [MemberData(nameof(CollectionSizes))]
        public void ChangeItemKeyNullItemPresent(int collectionSize)
        {
            if (default(TKey) == null)
            {
                TKey[] keys;
                TValue[] items;
                TValue[] itemsWithKeys;
                TValue item1 = GenerateValue();
                TValue item2 = GenerateValue();
                TKey key1 = GetKeyForItem(item1);
                TKey key2 = GetKeyForItem(item2);
                var collection =
                    new TestKeyedCollection<TKey, TValue>(GetKeyForItem);
                collection.AddItems(
                    GenerateValue,
                    GetKeyForItem,
                    collectionSize,
                    out keys,
                    out items,
                    out itemsWithKeys);
                collection.Add(item1);
                collection.Add(default(TValue));
                collection.MyChangeItemKey(default(TValue), key2);
                collection.Verify(
                    keys.Push(key1),
                    items.Push(item1, default(TValue)),
                    itemsWithKeys.Push(item1));
            }
        }

        [Theory]
        [MemberData(nameof(CollectionSizes))]
        public void ChangeItemKeyNullKeyNotPresent(int collectionSize)
        {
            if (default(TKey) == null)
            {
                TKey[] keys;
                TValue[] items;
                TValue[] itemsWithKeys;
                TValue item1 = GenerateValue();
                var collection =
                    new TestKeyedCollection<TKey, TValue>(GetKeyForItem);
                collection.AddItems(
                    GenerateValue,
                    GetKeyForItem,
                    collectionSize,
                    out keys,
                    out items,
                    out itemsWithKeys);
                collection.Add(item1);
                collection.MyChangeItemKey(item1, default(TKey));
                collection.Verify(
                    keys,
                    items.Push(item1),
                    itemsWithKeys);
            }
        }

        [Theory]
        [MemberData(nameof(CollectionSizes))]
        public void ChangeItemKeyNullKeyPresent(int collectionSize)
        {
            if (default(TKey) == null)
            {
                TKey[] keys;
                TValue[] items;
                TValue[] itemsWithKeys;
                TValue item1 = GenerateValue();
                var collection =
                    new TestKeyedCollection<TKey, TValue>(GetKeyForItem);
                collection.AddItems(
                    GenerateValue,
                    GetKeyForItem,
                    collectionSize,
                    out keys,
                    out items,
                    out itemsWithKeys);
   
                      tempKeyedItem,
                        default(TKey));
                }
                collection.Verify(keys, items, itemsWithKeys);
            }
        }

        [Theory]
        [MemberData(nameof(ClassData2))]
        public void ChangeItemKeyNullToOtherKey(
            int collectionSize,
            Named<KeyedCollectionGetKeyedValue<TKey, TValue>>
                generateKeyedItem)
        {
            if (default(TKey) == null)
            {
                TKey[] keys;
                IKeyedItem<TKey, TValue>[] items;
                IKeyedItem<TKey, TValue>[] itemsWithKeys;
                TValue item1 = GenerateValue();
                TValue item2 = GenerateValue();
                TValue item3 = GenerateValue();
                TValue item4 = GenerateValue();
                TKey key1 = GetKeyForItem(item1);
                TKey key3 = GetKeyForItem(item3);
                TKey key4 = GetKeyForItem(item4);
                var keyedItem1 = new KeyedItem<TKey, TValue>(
                    key1,
                    item1);
                var collection =
                    new TestKeyedCollectionOfIKeyedItem<TKey, TValue>();
                collection.AddItems(
                    generateKeyedItem.Value.Bind(
                        GenerateValue,
                        GetKeyForItem),
                    ki => ki.Key,
                    collectionSize,
                    out keys,
                    out items,
                    out itemsWithKeys);

                collection.Add(keyedItem1);
                var tempKeyedItem =
                    new KeyedItem<TKey, TValue>(default(TKey), item2);
                collection.Add(tempKeyedItem);
                keys = keys.Push(key1);
                if (collectionSize < 32)
                {
                    keys = keys.Push(key3);
                }
                items = items.Push(keyedItem1, tempKeyedItem);
                itemsWithKeys = itemsWithKeys.Push(keyedItem1);
                if (collectionSize < 32)
                {
                    itemsWithKeys = itemsWithKeys.Push(tempKeyedItem);
                }
                tempKeyedItem.Key = key3;
                if (collectionSize >= 32)
                {
                    AssertExtensions.Throws<ArgumentException>(null, () => collection.MyChangeItemKey(tempKeyedItem, key4));
                }
                else
                {
                    collection.MyChangeItemKey(tempKeyedItem, key4);
                }
                collection.Verify(keys, items, itemsWithKeys);
            }
        }

        [Theory]
        [MemberData(nameof(ClassData2))]
        public void ChangeItemKeySetKeyNonNullToNull(
    
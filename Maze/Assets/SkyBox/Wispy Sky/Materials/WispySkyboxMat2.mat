if D3D11_ALLOW_STATE_CACHE
		*DepthStencilState = CurrentDepthStencilState;
		*StencilRef = CurrentReferenceStencil;
		if (CurrentDepthStencilState)
		{
			CurrentDepthStencilState->AddRef();
		}
#else
		Direct3DDeviceIMContext->OMGetDepthStencilState(DepthStencilState, StencilRef);
#endif
	}

	D3D11_STATE_CACHE_INLINE void SetVertexShader(ID3D11VertexShader* Shader)
	{
#if D3D11_ALLOW_STATE_CACHE
		D3D11_STATE_CACHE_VERIFY_PRE();
		if ((CurrentVertexShader != Shader) || GD3D11SkipStateCaching)
		{
			CurrentVertexShader = Shader;
			Direct3DDeviceIMContext->VSSetShader(Shader, nullptr, 0);
		}
		D3D11_STATE_CACHE_VERIFY_POST();
#else
		Direct3DDeviceIMContext->VSSetShader(Shader, nullptr, 0);
#endif
	}

	D3D11_STATE_CACHE_INLINE void GetVertexShader(ID3D11VertexShader** VertexShader)
	{
#if D3D11_ALLOW_STATE_CACHE
		*VertexShader = CurrentVertexShader;
		if (CurrentVertexShader)
		{
			CurrentVertexShader->AddRef();
		}
#else
		Direct3DDeviceIMContext->VSGetShader(VertexShader, nullptr, nullptr);
#endif
	}

	D3D11_STATE_CACHE_INLINE void SetHullShader(ID3D11HullShader* Shader)
	{
#if D3D11_ALLOW_STATE_CACHE
		D3D11_STATE_CACHE_VERIFY_PRE();
		if ((CurrentHullShader != Shader) || GD3D11SkipStateCaching)
		{
			CurrentHullShader = Shader;
			Direct3DDeviceIMContext->HSSetShader(Shader, nullptr, 0);
		}
		D3D11_STATE_CACHE_VERIFY_POST();
#else
		Direct3DDeviceIMContext->HSSetShader(Shader, nullptr, 0);
#endif
	}

	D3D11_STATE_CACHE_INLINE void GetHullShader(ID3D11HullShader** HullShader)
	{
#if D3D11_ALLOW_STATE_CACHE
		*HullShader = CurrentHullShader;
		if (CurrentHullShader)
		{
			CurrentHullShader->AddRef();
		}
#else
		Direct3DDeviceIMContext->HSGetShader(HullShader, nullptr, nullptr);
#endif
	}

	D3D11_STATE_CACHE_INLINE void SetDomainShader(ID3D11DomainShader* Shader)
	{
#if D3D11_ALLOW_STATE_CACHE
		D3D11_STATE_CACHE_VERIFY_PRE();
		if ((CurrentDomainShader != Shader) || GD3D11SkipStateCaching)
		{
			CurrentDomainShader = Shader;
			Direct3DDeviceIMContext->DSSetShader(Shader, nullptr, 0);
		}
		D3D11_STATE_CACHE_VERIFY_POST();
#else
		Direct3DDeviceIMContext->DSSetShader(Shader, nullptr, 0);
#endif
	}

	D3D11_STATE_CACHE_INLINE void GetDomainShader(ID3D11DomainShader** DomainShader)
	{
#if D3D11_ALLOW_STATE_CACHE
		*DomainShader = CurrentDomainShader;
		if (CurrentDomainShader)
		{
			CurrentDomainShader->AddRef();
		}
#else
		Direct3DDeviceIMContext->DSGetShader(DomainShader, nullptr, nullptr);
#endif
	}

	D3D11_STATE_CACHE_INLINE void SetGeometryShader(ID3D11GeometryShader* Shader)
	{
#if D3D11_ALLOW_STATE_CACHE
		D3D11_STATE_CACHE_VERIFY_PRE();
		if ((CurrentGeometryShader != Shader) || GD3D11SkipStateCaching)
		{
			CurrentGeometryShader = Shader;
			Direct3DDeviceIMContext->GSSetShader(Shader, nullptr, 0);
		}
		D3D11_STATE_CACHE_VERIFY_POST();
#else
		Direct3DDeviceIMContext->GSSetShader(Shader, nullptr, 0);
#endif
	}

	D3D11_STATE_CACHE_INLINE void GetGeometryShader(ID3D11GeometryShader** GeometryShader)
	{
#if D3D11_ALLOW_STATE_CACHE
		*GeometryShader = CurrentGeometryShader;
		if (CurrentGeometryShader)
		{
			CurrentGeometryShader->AddRef();
		}
#else
		Direct3DDeviceIMContext->GSGetShader(GeometryShader, nullptr, nullptr);
#endif
	}

	D3D11_STATE_CACHE_INLINE void SetPixelShader(ID3D11PixelShader* Shader)
	{
#if D3D11_ALLOW_STATE_CACHE
		D3D11_STATE_CACHE_VERIFY_PRE();
		if ((CurrentPixelShader != Shader) || GD3D11SkipStateCaching)
		{
			CurrentPixelShader = Shader;
			Direct3DDeviceIMContext->PSSetShader(Shader, nullptr, 0);
		}
		D3D11_STATE_CACHE_VERIFY_POST();
#else
		Direct3DDeviceIMContext->PSSetShader(Shader, nullptr, 0);
#endif
	}

	D3D11_STATE_CACHE_INLINE void GetPixelShader(ID3D11PixelShader** PixelShader)
	{
#if D3D11_ALLOW_STATE_CACHE
		*PixelShader = CurrentPixelShader;
		if (CurrentPixelShader)
		{
			CurrentPixelShader->AddRef();
		}
#else
		Direct3DDeviceIMContext->PSGetShader(PixelShader, nullptr, nullptr);
#endif
	}

	D3D11_STATE_CACHE_INLINE void SetComputeShader(ID3D11ComputeShader* Shader)
	{
#if D3D11_ALLOW_STATE_CACHE
		D3D11_STATE_CACHE_VERIFY_PRE();
		if ((CurrentComputeShader != Shader) || GD3D11SkipStateCaching)
		{
			CurrentComputeShader = Shader;
			Direct3DDeviceIMContext->CSSetShader(Shader, nullptr, 0);
		}
		D3D11_STATE_CACHE_VERIFY_POST();
#else
		Direct3DDeviceIMContext->CSSetShader(Shader, nullptr, 0);
#endif
	}

	D3D11_STATE_CACHE_INLINE void GetComputeShader(ID3D11ComputeShader** ComputeShader)
	{
#if D3D11_ALLOW_STATE_CACHE
		*ComputeShader = CurrentComputeShader;
		if (CurrentComputeShader)
		{
			CurrentComputeShader->AddRef();
		}
#else
		Direct3DDeviceIMContex
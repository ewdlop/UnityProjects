:const_reverse_iterator
    //! ...
    typedef map_type::const_reverse_iterator const_reverse_iterator;

    //! reference promoted from map_type::reference
    //! ...
    typedef map_type::reference reference;

    //! const_reference promoted from map_type::const_reference
    //! ...
    typedef map_type::const_reference const_reference;

    //-*************************************************************************
    // CONSTRUCTORS
    //-*************************************************************************
    //! \brief Default constructor
    //!     Map is initialized with no entries. Values can be added using
    //!     The \ref set and \ref setUnique member functions
    TokenMap() {}

    //-*************************************************************************
    //! \brief Explicit constructor
    //!     Map is initialized from given string, using the delimiter scheme
    //!     as presented. If the 'unique' bool is 'true', it will use
    //!     the \ref setUnique function, obeying the 'quiet' bool accordingly.
    //!     Otherwise it will use the \ref set function.
    explicit TokenMap( const std::string &config,
                       char pairSeparator = ';',
                       char assignSeparator = '=',
                       bool unique = false,
                       bool quiet = true )
    {
        if ( unique )
        {
            setUnique( config, pairSeparator, assignSeparator, quiet );
        }
        else
        {
            set( config, pairSeparator, assignSeparator );
        }
    }

    //-*************************************************************************
    //! Using default copy constructor
    //! ...

    //-*************************************************************************
    //! Using default assignment operator.
    //! ...

    //-*************************************************************************
    // SET
    //! \brief This function sets the token/value pairs in the map by
    //!     deserializing them from a doubly-delimited string.
    //!
    //! \details The delimiter scheme defaults to:
    //!     "token=value;token=value;token=value" but may be overridden
    //!     using the optional separator arguments. Values are added to the
    //!     map one-by-one, overwriting any values that were there before.
    //!     To avoid overwriting, use the \ref setUnique function, which can
    //!     silently or rigidly deal with conflicts
    void set( const std::string &config,
              char pairSeparator = ';',
              char assignSeparator = '=' );

    //-*************************************************************************
    // SET UNIQUE
    //! \brief This function sets only unique (not already stored) token/value
    //!     pairs by deserializing them from a doubly-delimited string.
    //!
    //! \details The delimiter scheme and rules are the same as \ref set ,
    //!     the main difference here is that the class will not overwrite
    //!     values that already exist. If the function is called with
    //!     the default value of 'true' for the 'quiet' parameter, it will
    //!     simply not write those values. Otherwise, it will throw a
    //!     \ref Alembic::Util::Exception
    void setUnique( const s
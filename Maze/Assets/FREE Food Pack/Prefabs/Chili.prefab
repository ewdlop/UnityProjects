nels) & 0xFF);
		break;
	case EDatasmithTransformType::Rotation:
		Result |= (ETransformChannelComponents) (((uint16)Channels >> 3) & 0xFF);
		break;
	case EDatasmithTransformType::Scale:
		Result |= (ETransformChannelComponents) (((uint16)Channels >> 6) & 0xFF);
		break;
	default:
		break;
	}

	return Result;
}

EDatasmithTransformChannels FDatasmithAnimationUtils::SetChannelTypeComponents(ETransformChannelComponents Components, EDatasmithTransformType TransformType)
{
	EDatasmithTransformChannels Result = EDatasmithTransformChannels::None;

	switch (TransformType)
	{
	case EDatasmithTransformType::Translation:
		Result |= (EDatasmithTransformChannels) ((uint16)Components);
		break;
	case EDatasmithTransformType::Rotation:
		Result |= (EDatasmithTransformChannels) ((uint16)Components << 3);
		break;
	case EDatasmithTransformType::Scale:
		Result |= (EDatasmithTransformChannels) ((uint16)Components << 6);
		break;
	default:
		break;
	}

	return Result;
}

namespace DatasmithSceneUtilsImpl
{
	template<typename IElementType>
	void GetAllActorsChildRecursive(const TSharedPtr<IDatasmithActorElement>& ActorElement, EDatasmithElementType ElementType, TArray<TSharedPtr<IElementType>>& OutResult)
	{
		if (ActorElement->IsA(ElementType))
		{
			OutResult.Add(StaticCastSharedPtr<IElementType>(ActorElement));
		}

		const int32 ChildrenCount = ActorElement->GetChildrenCount();
		for (int32 ChildIndex = 0; ChildIndex < ChildrenCount; ++ChildIndex)
		{
			DatasmithSceneUtilsImpl::GetAllActorsChildRecursive(ActorElement->GetChild(ChildIndex), ElementType, OutResult);
		}
	}

	template<typename IElementType>
	void GetAllActorsChildRecursive(const TSharedPtr<IDatasmithScene>& Scene, EDatasmithElementType ElementType, TArray<TSharedPtr<IElementType>>& OutResult)
	{
		const int32 ActorsCount = Scene->GetActorsCount();
		for (int32 ActorIndex = 0; ActorIndex < ActorsCount; ++ActorIndex)
		{
			DatasmithSceneUtilsImpl::GetAllActorsChildRecursive(Scene->GetActor(ActorIndex), ElementType, OutResult);
		}
	}
}

TArray<TSharedPtr<IDatasmithCameraActorElement>> FDatasmithSceneUtils::GetAllCameraActorsFromScene(const TSharedPtr<IDatasmithScene>& Scene)
{
	TArray<TSharedPtr<IDatasmithCameraActorElement>> Result
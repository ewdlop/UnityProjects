RawMesh.WedgeTexCoords[ UVChannel ].Reserve( Mesh.GetFacesCount() * 3 );

		for ( int32 FaceIndex = 0; FaceIndex < Mesh.GetFacesCount(); ++FaceIndex )
		{
			int32 UVIndex1;
			int32 UVIndex2;
			int32 UVIndex3;

			Mesh.GetFaceUV( FaceIndex, UVChannel, UVIndex1, UVIndex2, UVIndex3 );

			RawMesh.WedgeTexCoords[ UVChannel ].Add( Mesh.GetUV( UVChannel, UVIndex1 ) );
			RawMesh.WedgeTexCoords[ UVChannel ].Add( Mesh.GetUV( UVChannel, UVIndex2 ) );
			RawMesh.WedgeTexCoords[ UVChannel ].Add( Mesh.GetUV( UVChannel, UVIndex3 ) );
		}
	}


	RawMesh.WedgeColors.Reserve( Mesh.GetVertexColorCount() );
	for ( int32 i = 0; i < Mesh.GetVertexColorCount(); i++ )
	{
		RawMesh.WedgeColors.Add( Mesh.GetVertexColor( i ) );
	}

	// Verify RawMesh is actually valid;
	if (bValidateRawMesh && !RawMesh.IsValid())
	{
		RawMesh.Empty();
		return false;
	}

	return true;
}

bool FDatasmithMeshUtils::ToMeshDescription(FDatasmithMesh& DsMesh, FMeshDescription& MeshDescription)
{
	MeshDescription.Empty();

	TVertexAttributesRef<FVector> VertexPositions = MeshDescription.VertexAttributes().GetAttributesRef<FVector>(MeshAttribute::Vertex::Position);
	TVertexInstanceAttributesRef<FVector> VertexInstanceNormals = MeshDescription.VertexInstanceAttributes().GetAttributesRef<FVector>(MeshAttribute::VertexInstance::Normal);
	TVertexInstanceAttributesRef<FVector2D> VertexInstanceUVs = MeshDescription.VertexInstanceAttributes().GetAttributesRef<FVector2D>(MeshAttribute::VertexInstance::TextureCoordinate);
	TPolygonGroupAttributesRef<FName> PolygonGroupImportedMaterialSlotNames = MeshDescription.PolygonGroupAttributes().GetAttributesRef<FName>(MeshAttribute::PolygonGroup::ImportedMaterialSlotName);

	// Prepared for static mesh usage ?
	if (!ensure(VertexPositions.IsValid())
	 || !ensure(VertexInstanceNormals.IsValid())
	 || !ensure(VertexInstanceUVs.IsValid())
	 || !ensure(PolygonGroupImportedMaterialSlotNames.IsValid()) )
	{
		return false;
	}

	// Reserve space for attributes.
	int32 VertexCount = DsMesh.GetVerticesCount();
	int32 TriangleCount = DsMesh.GetFacesCount();
	int32 VertexInstanceCount = 3 * TriangleCount;
	int32 MaterialCount = DsMesh.GetMaterialsCount();
	MeshDescription.ReserveNewVertices(VertexCount);
	MeshDescription.R
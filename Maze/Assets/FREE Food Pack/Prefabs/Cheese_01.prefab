en;
				for (; Index < InStringLen; ++Index)
				{
					if (!FChar::IsDigit(InString[Index]))
					{
						break;
					}
				}

				// Input name is formatted as "[InvalidNames][_]%d". Append "_SAFE"
				if (Index == InStringLen)
				{
					InString += TEXT("_SAFE");
				}
			}

			break;
		}
	}

	return InString;
}

FString FDatasmithUtils::SanitizeFileName(FString InString)
{
	const FString Invalid = TEXT(" \"'*:.,;<>?/\\|&$Â·#");
	for (int32 i = 0; i < Invalid.Len(); i++)
	{
		InString.ReplaceCharInline(Invalid[i], TCHAR('_'), ESearchCase::CaseSensitive);
	}
	SanitizeNameInplace(InString);
	return InString;
}

void FDatasmithUtils::GetCleanFilenameAndExtension(const FString& InFilePath, FString& OutFilename, FString& OutExtension)
{
	FString BaseFile = FPaths::GetCleanFilename(InFilePath);
	BaseFile.Split(TEXT("."), &OutFilename, &OutExtension, ESearchCase::CaseSensitive, ESearchDir::FromEnd);

	if (!OutExtension.IsEmpty() && FCString::IsNumeric(*OutExtension))
	{
		BaseFile = OutFilename;
		BaseFile.Split(TEXT("."), &OutFilename, &OutExtension, ESearchCase::CaseSensitive, ESearchDir::FromEnd);
		OutExtension = OutExtension + TEXT(".*");
		return;
	}

	if (OutExtension.IsEmpty())
	{
		OutFilename = BaseFile;
	}
}

int32 FDatasmithUtils::GetEnterpriseVersionAsInt()
{
	const int32 PatchVersion = FEngineVersion::Current().GetPatch();
	const int32 MinorVersion = FEngineVersion::Current().GetMinor() * 10;
	int32 MinorNumberOfDigits = 1;
	for (int32 Version = MinorVersion; Version /= 10; MinorNumberOfDigits++);

	const int32 MajorVersion = FEngineVersion::Current().GetMajor() * FMath::Pow(10, MinorNumberOfDigits);

	return MajorVersion + MinorVersion + PatchVersion;
}

FString FDatasmithUtils::GetEnterpriseVersionAsString()
{
	return FEngineVersion::Current().ToString( EVersionComponent::Patch );
}

float FDatasmithUtils::GetDatasmithFormatVersionAsFloat()
{
	return DATASMITH_FORMAT_VERSION;
}

int32 FDatasmithUtils::GetDatasmithFormatVersionAsInt()
{
	return (int32)DATASMITH_FORMAT_VERSION * 100;
}

FString FDatasmithUtils::GetDatasmithFormatVersionAsString()
{
	return FString::SanitizeFloat(DATASMITH_FORMAT_VERSION, 2);
}

const TCHAR* FDatasmithUtils::GetFileExtension()
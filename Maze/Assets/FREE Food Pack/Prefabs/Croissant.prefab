void ScanMeshElement(TSharedPtr<IDatasmithMeshElement >& MeshElement)
		{
			for (int32 Index = 0; Index < MeshElement->GetMaterialSlotCount(); Index++)
			{
				ScanMaterialIDElement( MeshElement->GetMaterialSlotAt(Index).Get() );
			}
		}

		void ScanMasterMaterialElement(IDatasmithMasterMaterialElement* MaterialElement)
		{
			for ( int32 Index = 0; Index < MaterialElement->GetPropertiesCount(); ++Index )
			{
				TSharedPtr< IDatasmithKeyValueProperty > Property = MaterialElement->GetProperty(Index);

				if (Property->GetPropertyType() == EDatasmithKeyValuePropertyType::Texture && FCString::Strlen(Property->GetValue()) > 0)
				{
					FString TexturePathName = Property->GetValue();

					if (TexturePathName[0] != '/')
					{
						ReferencedTextures.Add(TexturePathName);
					}
				}
			}
		}

		void ScanPbrMaterialElement(IDatasmithUEPbrMaterialElement* MaterialElement)
		{
			TFunction<void(IDatasmithMaterialExpression*)> ParseExpressionElement;
			ParseExpressionElement = [this, &ParseExpressionElement](IDatasmithMaterialExpression* ExpressionElement) -> void
			{
				if (ExpressionElement)
				{
					if (ExpressionElement->IsA(EDatasmithMaterialExpressionType::Texture))
					{
						const IDatasmithMaterialExpressionTexture* TextureExpression = static_cast<IDatasmithMaterialExpressionTexture*>(ExpressionElement);
						if (FCString::Strlen(TextureExpression->GetTexturePathName()) > 0)
						{
							FString TexturePathName(TextureExpression->GetTexturePathName());
							if (TexturePathName[0] != '/')
							{
								this->ReferencedTextures.Add(TexturePathName);
							}
						}
					}
					else if (ExpressionElement->IsA(EDatasmithMaterialExpressionType::Generic))
					{
						const IDatasmithMaterialExpressionGeneric* GenericExpression = static_cast<IDatasmithMaterialExpressionGeneric*>(ExpressionElement);

						for ( int32 PropertyIndex = 0; PropertyIndex < GenericExpression->GetPropertiesCount(); ++PropertyIndex )
						{
							if ( const TSharedPtr< IDatasmithKeyValueProperty >& Property = GenericExpression->GetProperty( PropertyIndex ) )
							{
								if ( Property->GetPropertyType() == EDatasmithKeyValuePropertyType::Texture )
								{
									this->ReferencedTextures.Add( Pr
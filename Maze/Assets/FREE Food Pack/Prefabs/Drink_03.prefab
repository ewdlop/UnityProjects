ionElement.Get());
						bValidSequence = ActorsInScene.Contains(TransformAnimation->GetName());
					}
					else if (AnimationElement->IsSubType((uint64)EDatasmithElementAnimationSubType::VisibilityAnimation))
					{
						const IDatasmithVisibilityAnimationElement* VisibilityAnimation = static_cast<IDatasmithVisibilityAnimationElement*>(AnimationElement.Get());
						bValidSequence = ActorsInScene.Contains(VisibilityAnimation->GetName());
					}
				}

				if (bValidSequence)
				{
					ValidSequences.Add(SequenceElement);
				}
			}

			for (int32 Index = LevelSequencesLastIndex; Index >= 0; --Index)
			{
				TSharedPtr< IDatasmithLevelSequenceElement > SequenceElement = Scene->GetLevelSequence(Index);
				if (ValidSequences.Contains(SequenceElement))
				{
					continue;
				}

				bool bValidSequence = false;

				const int32 NumAnimations = SequenceElement->GetAnimationsCount();
				for (int32 AnimIndex = 0; AnimIndex < NumAnimations && !bValidSequence; ++AnimIndex)
				{
					TSharedPtr<IDatasmithBaseAnimationElement> AnimationElement = SequenceElement->GetAnimation(AnimIndex);
					if (!AnimationElement)
					{
						continue;
					}

					if (AnimationElement->IsSubType((uint64)EDatasmithElementAnimationSubType::TransformAnimation))
					{
						const IDatasmithTransformAnimationElement* TransformAnimation = static_cast<IDatasmithTransformAnimationElement*>(AnimationElement.Get());
						bValidSequence = ActorsInScene.Contains(TransformAnimation->GetName());
					}
					else if (AnimationElement->IsSubType((uint64)EDatasmithElementAnimationSubType::VisibilityAnimation))
					{
						const IDatasmithVisibilityAnimationElement* VisibilityAnimation = static_cast<IDatasmithVisibilityAnimationElement*>(AnimationElement.Get());
						bValidSequence = ActorsInScene.Contains(VisibilityAnimation->GetName());
					}
					else if (AnimationElement->IsSubType((uint64)EDatasmithElementAnimationSubType::SubsequenceAnimation))
					{
						TSharedRef<IDatasmithSubsequenceAnimationElement> SubsequenceAnimation = StaticCastSharedRef<IDatasmithSubsequenceAnimationElement>(AnimationElement.ToSharedRef());
						bValidSequence = ValidSequences.Contains(SubsequenceAnimation->GetSubsequence().Pin());
					}
				}


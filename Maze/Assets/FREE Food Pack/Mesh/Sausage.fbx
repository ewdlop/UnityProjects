# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    def selectFromCustomSet(self, controls, *args):
        character = cmds.symbolButton(self.widgets["activeCharacterThumb"], q = True, ann = True)

        cmds.select(clear = True)

        for each in controls:
            if cmds.objExists(character + ":" + each):
                cmds.select(character + ":" + each, add = True)

    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    def selectEverything(self, *args):
        character = cmds.symbolButton(self.widgets["activeCharacterThumb"], q = True, ann = True)
        controls = list(self.controls)
        controls.append("Rig_Settings")

        #need to find all space switch nodes for the current character
        cmds.select(character + ":*_space_switcher_follow")
        nodes = cmds.ls(sl = True)
        spaceSwitchers = []
        for node in nodes:
            if node.find("invis") == -1:
                spaceSwitchers.append(node)


        selectNodes = []
        for control in spaceSwitchers:
            spaceSwitchNode = control.rpartition("_follow")[0]
            selectNodes.append(spaceSwitchNode)

        cmds.select(clear = True)


        for control in controls:
            if cmds.objExists(character + ":" + control):
                cmds.select(character + ":" + control, add = True)

        for node in ["fk_orient_world_loc_l", "fk_orient_world_loc_r", "fk_orient_body_loc_l", "fk_orient_body_loc_r", "head_fk_orient_neck", "head_fk_orient_shoulder", "head_fk_orient_body", "head_fk_orient_world"]:
            if cmds.objExists(character + ":" + node):
                cmds.select(character + ":" + node, add = True)

        for node in selectNodes:
            cmds.select(node, add = True)




    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    def selectAll(self, *args):
        character = cmds.symbolButton(self.widgets["activeCharacterThumb"], q = True, ann = True)
        controls = list(self.controls)
        controls.append("Rig_Settings")

        for control in controls:
            if cmds.objExists(character + ":" + control):
                cmds.select(character + ":" + control, add = True)

        cmds.warning("Custom Controls and Toes not implemented yet into select all")

    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    def resetAll(self, *args):
        character = cmds.symbolButton(self.widgets["activeCharacterThumb"], q = True, ann = True)

        avoidAttrs = ["global_scale", "scaleX", "scaleY", "scaleZ", "stretch", "twist_amount", "bias", "spine_01_twistAmount", "spine_02_twistAmount", "spine_03_twistAmount", "spine_04_twistAmount", "spine_05_twistAmount", "sticky", "fkOrientation"]

        #reset fk arm orientation
        cmds.setAttr(character + ":Rig_Settings.lFkArmOrient", 0)
        cmds.setAttr(character + ":Rig_Settings.rFkArmOrient", 0)

        for control in self.controls:


            if cmds.objExists(character + ":" + control):
                attrs = cmds.listAttr(character + ":" + control, keyable = True, unlocked = True)
                if attrs != None:
                    for attr in attrs:
                        if attr not in avoidAttrs:
                            cmds.setAttr(character + ":" + control + "." + attr, 0)

                        if attr in ["global_scale", "scaleX", "scaleY", "scaleZ"]:
                            cmds.setAttr(character + ":" + control + "." + attr, 1)			

        cmds.warning("Custom Controls and Toes not implemented yet into reset all")

    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    def resetSelection(self, *args):

        character = cmds.symbolButton(self.widgets["activeCharacterThumb"], q = True, ann = True)
        selection = cmds.ls(sl = True)


        for each in selection:
            if each.find(character + ":") == 0:
                attrs = cmds.listAttr(each, keyable = True, unlocked = True)
                avoidAttrs = ["global_scale", "scaleX", "scaleY", "scaleZ", "stretch", "twist_amount", "bias", "spine_01_twistAmount", "spine_02_twistAmount", "spine_03_twistAmount", "spine_04_twistAmount", "spine_05_twistAmount", "sticky", "fkOrientation"]


                if attrs != None:
                    for attr in attrs:
                        if attr not in avoidAttrs:
                            cmds.setAttr(each + "." + attr, 0)

                        if attr in ["global_scale", "scaleX", "scaleY", "scaleZ"]:
                            cmds.setAttr(each + "." + attr, 1)

    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    def importMotion(self, *args):

        import ART_importMotion
        reload(ART_importMotion)
        ART_importMotion.ImportMotionUI()

    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    def exportMotion(self, *args):

        import ART_exportMotion
        reload(ART_exportMotion)
        ART_exportMotion.ExportMotionUI()


    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    def setHeadSpace(self, mode, *args):
        character = cmds.symbolButton(self.widgets["activeCharacterThumb"], q = True, ann = True)

        if mode == 0:
            cmds.menuItem(self.widgets["neckSpaceRB"], edit = True, rb = True)
            cmds.setAttr(character + ":" + "head_fk_anim.fkOrientation", 0)

        if mode == 1:
            cmds.menuItem(self.widgets["shoulderSpaceRB"], edit = True, rb = True)
            cmds.setAttr(character + ":" + "head_fk_anim.fkOrientation", 1)

        if mode == 2:
            cmds.menuItem(self.widgets["bodySpaceRB"], edit = True, rb = True)
            cmds.setAttr(character + ":" + "head_fk_anim.fkOrientation", 2)

        if mode == 3:
            cmds.menuItem(self.widgets["worldSpaceRB"], edit = True, rb = True)
            cmds.setAttr(character + ":" + "head_fk_anim.fkOrientation", 3)


    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    def getHeadSpace(self, *args):

        character = cmds.symbolButton(self.widgets["activeCharacterThumb"], q = True, ann = True)
        space = cmds.getAttr(character + ":" + "head_fk_anim.fkOrientation")

        if space == 0:
            cmds.menuItem(self.widgets["neckSpaceRB"], edit = True, rb = True)

        if space == 1:
            cmds.menuItem(self.widgets["shoulderSpaceRB"], edit = True, rb = True)

        if space == 2:
            cmds.menuItem(self.widgets["bodySpaceRB"], edit = True, rb = True)

        if space == 3:
            cmds.menuItem(self.widgets["worldSpaceRB"], edit = True, rb = True)



    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    def getNeckSpace(self, *args):

        character = cmds.symbolButton(self.widgets["activeCharacterThumb"], q = True, ann = True)
        space = cmds.getAttr(character + ":" + "neck_01_fk_anim.fkOrientation")

        if space == 0:
            cmds.menuItem(self.widgets["neckOrientShoulderSpaceRB"], edit = True, rb = True)

        if space == 1:
            cmds.menuItem(self.widgets["neckOrientBodySpaceRB"], edit = True, rb = True)

        if space == 2:
            cmds.menuItem(self.widgets["neckOrientWorldSpaceRB"], edit = True, rb = True)

    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    def setControlSpace(self, spaceSwitchNode, attr, *args):
        character = cmds.symbolButton(self.widgets["activeCharacterThumb"], q = True, ann = True)

        #get match and match method settings
        matching = cmds.menuItem(self.widgets["spaceSwitch_MatchToggleCB"], q = True, cb = True)
        matchToControl = cmds.menuItem(self.widgets["spaceSwitch_MatchMethodCB"], q = True, cb = True)



        if attr == None:

            if matching:
                #create temp locator to snap the space switch node to
                control = character + ":" + spaceSwitchNode.rpartition("_space")[0]
                currentTime = cmds.currentTime(q = True)

                #set pre-frame key
                if matchToControl == False:
                    cmds.setKeyframe(character + ":" + spaceSwitchNode, t = (currentTime - 1))
                    cmds.setKeyframe(control, t = (currentTime - 1))

                else:
                    cmds.setKeyframe(character + ":" + spaceSwitchNode, t = (currentTime - 1))
                    cmds.setKeyframe(control, t = (currentTime - 1))
                    cmds.currentTime(currentTime - 1)
                    loc = cmds.spaceLocator()[0]
                    constraint = cmds.parentConstraint(control, loc)[0]
                    cmds.delete(constraint)

                    constraint = cmds.parentConstraint(loc, control)[0]
                    cmds.setKeyframe(control, t = (cmds.currentTime(q = True)))
                    cmds.delete(constraint)
                    cmds.delete(loc)


                #create our temp loc
                tempLoc = cmds.spaceLocator()
                cmds.currentTime(currentTime)

                #constrain temp loc
                if matchToControl == False:
                    constraint = cmds.parentConstraint(character + ":" + spaceSwitchNode, tempLoc[0])[0]

                else:
                    constraint = cmds.parentConstraint(control, tempLoc[0])[0]
                cmds.delete(constraint)


                #match and switch space

                attrs = []
                try:
                    attrs.extend(cmds.listAttr(character + ":" + spaceSwitchNode, string = "space_*"))
                except:
                    pass

                try:
                    attrs.extend(cmds.listAttr(control, string = "space_*"))
                except:
                    pass

                for attribute in attrs:
                    if cmds.objExists(character + ":" + spaceSwitchNode+ "." + attribute):
                        cmds.setAttr(character + ":" + spaceSwitchNode+ "." + attribute, 0)

                    if cmds.objExists(control +  "." + attribute):
                        cmds.setAttr(control + "." + attribute, 0)


                if matchToControl == False:
                    constraint = cmds.parentConstraint(tempLoc[0], character + ":" + spaceSwitchNode)[0]
                    cmds.setKeyframe(character + ":" + spaceSwitchNode, t = currentTime)
                    cmds.setKeyframe(control, t = currentTime)
                    cmds.delete(constraint)
                    cmds.delete(tempLoc)
                    cmds.select(clear = True)

                else:
                    try:
                        constraint = cmds.parentConstraint(tempLoc[0], control)[0]
                    except:
                        constraint = cmds.pointConstraint(tempLoc[0], control)[0]


                    #zero out space node
                    for attr in [".tx", ".ty", ".tz", ".rx", ".ry", ".rz"]:
                        cmds.setAttr(character + ":" + spaceSwitchNode + attr, 0)


                    cmds.setKeyframe(control, t = currentTime)
                    cmds.delete(constraint)
                    cmds.delete(tempLoc)
                    cmds.select(clear = True)		    


            #if we are not matching, just set attrs
            else:
                currentTime = cmds.currentTime(q = True)
                cmds.setKeyframe(character + ":" + spaceSwitchNode, t = (currentTime - 1))

                attrs = []
                try:
                    attrs.extend(cmds.listAttr(character + ":" + spaceSwitchNode, string = "space_*"))
                except:
                    pass

                try:
                    attrs.extend(cmds.listAttr(control, string = "space_*"))
                except:
                    pass

                for attr in attrs:

                    if cmds.objExists(character + ":" + spaceSwitchNode+ "." + attribute):
                        cmds.setAttr(character + ":" + spaceSwitchNode+ "." + attribute, 0)

                    if cmds.objExists(control +  "." + attribute):
                        cmds.setAttr(control + "." + attribute, 0)

                cmds.setKeyframe(character + ":" + spaceSwitchNode, t = currentTime)
                cmds.setKeyframe(control, t = currentTime)




        #if switching to a space other than default
        else:

            if matching:
                #create temp locator to snap the space switch node to
                control = character + ":" + spaceSwitchNode.rpartition("_space")[0]
                currentTime = cmds.currentTime(q = True)

                #set pre-frame key
                if matchToControl == False:
                    cmds.currentTime(currentTime - 1)
                    cmds.setKeyframe(character + ":" + spaceSwitchNode)
                    cmds.setKeyframe(control)

                else:
                    cmds.currentTime(currentTime - 1)
                    cmds.setKeyframe(character + ":" + spaceSwitchNode)
                    cmds.setKeyframe(control)
                    cmds.currentTime(currentTime - 1)
                    loc = cmds.spaceLocator()[0]

                    try:
                        constraint = cmds.parentConstraint(control, loc)[0]
                    except:
                        constraint = cmds.pointConstraint(control, loc)[0]
                    cmds.delete(constraint)

                    try:
                        constraint = cmds.parentConstraint(loc, control)[0]

                    except:
                        constraint = cmds.pointConstraint(loc, control)[0]

                    cmds.setKeyframe(control, t = (cmds.currentTime(q = True)))
                    cmds.delete(constraint)
                    cmds.delete(loc)



                #create our temp loc
                tempLoc = cmds.spaceLocator()[0]
                cmds.currentTime(currentTime)

                #constrain temp loc
                if matchToControl == False:
                    constraint = cmds.parentConstraint(character + ":" + spaceSwitchNode, tempLoc)[0]
                else:
                    constraint = cmds.parentConstraint(control, tempLoc)[0]
                cmds.delete(constraint)



                #match and switch space
                attrs = []
                try:
                    attrs.extend(cmds.listAttr(character + ":" + spaceSwitchNode, string = "space_*"))
                except:
                    pass

                try:
                    attrs.extend(cmds.listAttr(control, string = "space_*"))
                except:
                    pass


                for attribute in attrs:
                    cmds.currentTime(currentTime)

                    if cmds.objExists(character + ":" + spaceSwitchNode + "." + attribute):
                        cmds.setAttr(character + ":" + spaceSwitchNode + "." + attribute, 0)
                        cmds.setKeyframe(character + ":" + spaceSwitchNode, t = currentTime)

                    if cmds.objExists(control + "." + attribute):
                        cmds.setAttr(control + "." + attribute, 0)
                        cmds.setKeyframe(control, t = currentTime)

                if cmds.objExists(character + ":" + spaceSwitchNode + "." + attr):
                    cmds.setAttr(character + ":" + spaceSwitchNode + "." + attr, 1)
                    cmds.setKeyframe(character + ":" + spaceSwitchNode, attribute = attr, t = currentTime)

                if cmds.objExists(control + "." + attr):
                    cmds.setAttr(control + "." + attr, 1)
                    cmds.setKeyframe(control, attribute = attr, t = currentTime)


                if matchToControl == False:
                    constraint = cmds.parentConstraint(tempLoc, character + ":" + spaceSwitchNode)[0]
                    cmds.setKeyframe(character + ":" + spaceSwitchNode, t = currentTime)
                    cmds.delete(constraint)
                    cmds.delete(tempLoc)
                    cmds.select(clear = True)

                else:
                    try:
                        constraint = cmds.parentConstraint(tempLoc, control)[0]
                    except:
                        constraint = cmds.pointConstraint(tempLoc, control)[0]

                    #zero out space node
                    for attribute in [".tx", ".ty", ".tz", ".rx", ".ry", ".rz"]:
                        cmds.setAttr(character + ":" + spaceSwitchNode + attribute, 0)		    

                    cmds.setKeyframe(control, t = currentTime)
                    cmds.delete(constraint)
                    cmds.delete(tempLoc)
                    cmds.select(clear = True)		    


            #if we are not matching, just set attrs
            else:
                currentTime = cmds.currentTime(q = True)
                cmds.setKeyframe(character + ":" + spaceSwitchNode, t = (currentTime - 1))
                cmds.setKeyframe(control, t = (currentTime - 1))

                attrs = []
                try:
                    attrs.extend(cmds.listAttr(character + ":" + spaceSwitchNode, string = "space_*"))
                except:
                    pass

                try:
                    attrs.extend(cmds.listAttr(control, string = "space_*"))
                except:
                    pass


                for attribute in attrs:
                    if cmds.objExists(character + ":" + spaceSwitchNode+ "." + attribute):
                        cmds.setAttr(character + ":" + spaceSwitchNode+ "." + attribute, 0)

                    if cmds.objExists(control + "." + attribute):
                        cmds.setAttr(control + "." + attribute, 0)

                if cmds.objExists(character + ":" + spaceSwitchNode+ "." + attr):
                    cmds.setAttr(character + ":" + spaceSwitchNode + "." + attr, 1)
                    cmds.setKeyframe(character + ":" + spaceSwitchNode, attribute = attr, t = currentTime)

                if cmds.objExists(control + "." + attribute):
                    cmds.setAttr(control + "." + attr, 1)
                    cmds.setKeyframe(control, attribute = attr, t = currentTime)


        #set the current time back
        cmds.currentTime(currentTime)






    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    def getControlSpaces(self, popupMenu, radioCollection, spaceSwitchNode, *args):
        character = cmds.symbolButton(self.widgets["activeCharacterThumb"], q = True, ann = True)

        #delete any existing children of the radioCollection
        menuItems = cmds.lsUI(mi = True)
        for item in menuItems:
            if cmds.menuItem(item,q = True, docTag = True) == str(radioCollection):
                cmds.deleteUI(item)

        #add spaces to radio menu item collection
        if cmds.objExists(character + ":" + spaceSwitchNode):
            children = cmds.popupMenu(popupMenu, q = True, itemArray = True)

            for child in children:

                label = cmds.menuItem(child, q = True, label = True)
                if label == "Space Switching":
                    parentSpace = cmds.listRelatives(character + ":" + spaceSwitchNode + "_follow", parent = True)[0]
                    parentSpace = parentSpace.partition(":")[2]

                    #add the default space
                    defMenu = cmds.menuItem(label = "default [" + parentSpace + "]", parent = child, cl = radioCollection, rb = False, docTag = str(radioCollection), c = partial(self.setControlSpace, spaceSwitchNode, None))


                    #add the rest of the spaces foud on the space switch node
                    control = spaceSwitchNode.partition("_space")[0]
                    attrs = []

                    try:
                        attrs.extend(cmds.listAttr(character + ":" + spaceSwitchNode, string = "space_*"))
                    except:
                        pass

                    try:
                        attrs.extend(cmds.listAttr(character + ":" + control, string = "space_*"))
                    except:
                        pass


                    found = False
                    for attr in attrs:
                        label = attr.partition("space_")[2]

                        if cmds.objExists(character + ":" + spaceSwitchNode + "." + attr):
                            value = cmds.getAttr(character + ":" + spaceSwitchNode + "." + attr)

                        if cmds.objExists(character + ":" + control + "." + attr):
                            value = cmds.getAttr(character + ":" + control + "." + attr)

                        if value == True:
                            found = True

                        cmds.menuItem(label = label, parent = child, cl = radioCollection, rb = value, docTag = str(radioCollection), c = partial(self.setControlSpace, spaceSwitchNode, attr))

                    if found == False:
                        cmds.menuItem(defMenu, edit = True, rb = True)


    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    def spaceSwitcher(self, *args):
        if cmds.symbolButton(self.widgets["activeCharacterThumb"], q= True, exists = True):
            character = cmds.symbolButton(self.widgets["activeCharacterThumb"], q = True, ann = True)
            import ART_spaceSwitcher
            reload(ART_spaceSwitcher)
            ART_spaceSwitcher.SpaceSwitcher(character, self)

        else:
            cmds.deleteUI("spaceSwitcherUI")


    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    def createSpace(self, *args):
        if cmds.symbolButton(self.widgets["activeCharacterThumb"], q= True, exists = True):
            character = cmds.symbolButton(self.widgets["activeCharacterThumb"], q = True, ann = True)	

            import ART_spaceSwitcher
            reload(ART_spaceSwitcher)
            inst = ART_spaceSwitcher.SpaceSwitcher(character, self)
            cmds.deleteUI("spaceSwitcherUI")
            inst.createSpaceSwitcherSpace()

        else:
            cmds.warning("No Animation UI detected")




    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    def poseEditor(self, *args):

        character = cmds.symbolButton(self.widgets["activeCharacterThumb"], q = True, ann = True)

        import ART_poseEditor
        reload(ART_poseEditor)

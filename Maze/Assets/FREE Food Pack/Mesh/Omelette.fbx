ts != []:
            for mat in self.mats:
                face = mat[0]
                sg = mat[1]
                cmds.sets(face, forceElement = sg)


        if cmds.objExists("isoSelect_M"):
            cmds.delete("isoSelect_M")

        if cmds.objExists("isoSelect_Set"):
            cmds.delete("isoSelect_Set")

        for checkbox in [[self.widgets["isoSelect_Torso"], "Torso"], [self.widgets["isoSelect_LeftArm"], "LeftArm"], [self.widgets["isoSelect_RightArm"], "RightArm"], [self.widgets["isoSelect_LeftLeg"], "LeftLeg"], [self.widgets["isoSelect_RightLeg"], "RightLeg"], [self.widgets["isoSelect_Head"], "Head"]]:
            cb = checkbox[0]
            cmds.menuItem(cb, edit = True, cb = True)

    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    def isoSelect(self, *args):

        #unIsolate

        isoPnl = cmds.getPanel(wf=True)
        try:
            isoCrnt = cmds.isolateSelect(isoPnl, q=True, s=True)
            if isoCrnt != False:
                mel.eval('enableIsolateSelect %s %d' % (isoPnl,not isoCrnt) )

        except:
            cmds.warning("Invalid viewport for isolate select command")


        if self.mats != []:
            for mat in self.mats:
                face = mat[0]
                sg = mat[1]
                cmds.sets(face, forceElement = sg)


        if cmds.objExists("isoSelect_M"):
            cmds.delete("isoSelect_M")

        if cmds.objExists("isoSelect_Set"):
            cmds.delete("isoSelect_Set")



        #find isolation method
        classic = cmds.menuItem(self.widgets["isoMethodClassic"], q = True, rb = True)
        material = cmds.menuItem(self.widgets["isoMethodMaterial"], q = True, rb = True)


        # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
        if material:

            #find checkbox values
            isolatedItems = []


            for checkbox in [[self.widgets["isoSelect_Torso"], "Torso"], [self.widgets["isoSelect_LeftArm"], "LeftArm"], [self.widgets["isoSelect_RightArm"], "RightArm"], [self.widgets["isoSelect_LeftLeg"], "LeftLeg"], [self.widgets["isoSelect_RightLeg"], "RightLeg"], [self.widgets["isoSelect_Head"], "Head"]]:
                cb = checkbox[0]
                part = checkbox[1]

                value = cmds.menuItem(cb, q = True, cb = True)
                if value == False:

                    if part == "Torso":
                        cmds.select(self.torsoFaces)
                        isolatedItems.append(self.torsoFaces)

                    if part == "LeftArm":
                        isolatedItems.append(self.leftArmFaces)

                    if part == "RightArm":
                        isolatedItems.append(self.rightArmFaces)

                    if part == "LeftLeg":
                        isolatedItems.append(self.leftLegFaces)

                    if part == "RightLeg":
                        isolatedItems.append(self.rightLegFaces)

                    if part == "Head":
                        isolatedItems.append(self.headFaces)



            #create your iso selection
            cmds.select(clear = True)
            for each in [self.torsoFaces, self.leftArmFaces, self.rightArmFaces, self.leftLegFaces, self.rightLegFaces, self.headFaces]:
                if each in isolatedItems:
                    cmds.select(each, add = True)



            #grab the current selection
            selection = cmds.ls(sl = True)
            self.mats = []

            #get assinged material
            faces = cmds.ls(sl = True)
            for face in faces:
                shaders = cmds.ls(type = "shadingEngine")

                for each in shaders:
                    connectedFaces = cmds.sets(each, q = True)
                    if connectedFaces != None:
                        for obj in connectedFaces:


                            if obj.find(face.rpartition(".")[0]) != -1:
                                self.mats.append([face, each])


            newMat = cmds.shadingNode("lambert", asShader = True, name = "isoSelect_M")
            cmds.setAttr(newMat + ".transparency", 1, 1, 1, type = "double3")

            shadingGroup = cmds.sets(name = "isoSelect_Set", renderable = True, noSurfaceShader = True, empty = True)
            cmds.connectAttr(newMat + ".outColor", shadingGroup + ".surfaceShader")

            if selection:
                cmds.select(selection)

                for each in selection:
                    cmds.sets(each, forceElement = shadingGroup)

        # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
        if classic:
            #find checkbox values
            isolatedItems = []

            cmds.select(clear = True)
            for checkbox in [[self.widgets["isoSelect_Torso"], "Torso"], [self.widgets["isoSelect_LeftArm"], "LeftArm"], [self.widgets["isoSelect_RightArm"], "RightArm"], [self.widgets["isoSelect_LeftLeg"], "LeftLeg"], [self.widgets["isoSelect_RightLeg"], "RightLeg"], [self.widgets["isoSelect_Head"], "Head"]]:
                cb = checkbox[0]
                part = checkbox[1]

                value = cmds.menuItem(cb, q = True, cb = True)


                if value == True:

                    if part == "Torso":
                        cmds.select(self.torsoFaces, add = True)

                    if part == "LeftArm":
                        cmds.select(self.leftArmFaces, add = True)

                    if part == "RightArm":
                        cmds.select(self.rightArmFaces, add = True)

                    if part == "LeftLeg":
                        cmds.select(self.leftLegFaces, add = True)

                    if part == "RightLeg":
                        cmds.select(self.rightLegFaces, add = True)

                    if part == "Head":
                        cmds.select(self.headFaces, add = True)



            #isolate the selection
            isoPnl = cmds.getPanel(wf=True)
            try:
                isoCrnt = cmds.isolateSelect(isoPnl, q=True, s=True)
                mel.eval('enableIsolateSelect %s %d' % (isoPnl,not isoCrnt) )

            except:
                cmds.warning("Invalid viewport for isolate select command")


        cmds.select(clear = True)


    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    def killUIScriptJob(self):



        #delete script job
        cmds.scriptJob(kill = self.mainScriptJob)

        if cmds.dockControl("artAnimUIDock", exists = True):

            channelBox = cmds.formLayout("ART_cbFormLayout", q = True, childArray = True)
            if channelBox != None:
                channelBox = channelBox[0]

                #reparent the channelBox Layout back to maya's window
                cmds.control(channelBox, e = True, p = "MainChannelsLayersLayout")
                channelBoxLayout = mel.eval('$temp1=$gChannelsLayersForm')
                channelBoxForm = mel.eval('$temp1 = $gChannelButtonForm')

                #edit the channel box pane's attachment to the formLayout
                cmds.formLayout(channelBoxLayout, edit = True, af = [(channelBox, "left", 0),(channelBox, "right", 0), (channelBox, "bottom", 0)], attachControl = (channelBox, "top", 0, channelBoxForm))


            cmds.deleteUI("artAnimUIDock")
            if cmds.window("artAnimUI", exists = True):
                cmds.deleteUI("artAnimUI")

    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    def interfaceScriptJob(self, *args):

        #unisolate any isolated parts
        self.exitIso()



        if cmds.dockControl(self.widgets["dock"], q = True, visible = True) == False:
            #re-sort out the channel box
            channelBox = cmds.formLayout("ART_cbFormLayout", q = True, childArray = True)
            if channelBox != None:
                channelBox = channelBox[0]

                #reparent the channelBox Layout back to maya's window
                cmds.control(channelBox, e = True, p = "MainChannelsLayersLayout")
                channelBoxLayout = mel.eval('$temp1=$gChannelsLayersForm')
                channelBoxForm = mel.eval('$temp1 = $gChannelButtonForm')

                #edit the channel box pane's attachment to the formLayout
                cmds.formLayout(channelBoxLayout, edit = True, af = [(channelBox, "left", 0),(channelBox, "right", 0), (channelBox, "bottom", 0)], attachControl = (channelBox, "top", 0, channelBoxForm))


    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    def loadUISettings(self, *args):
        settingsLocation = self.mayaToolsDir + "/General/Scripts/settings.txt"
        if os.path.exists(settingsLocation):
            f = open(settingsLocation, 'r')
            settings = cPickle.load(f)

            #set the UI settings based on file
            channelBox = settings.get("ChannelBox")
            if channelBox == True:
                cmds.menuItem(self.widgets["menuBar_settings_channelBox"], edit = True, checkBox = True)
                self.showChannelBox()

            if channelBox == False:
                cmds.menuItem(self.widgets["menuBar_settings_channelBox"], edit = True, checkBox = False)
                self.showChannelBox()

            #space switch settings
            match = settings.get("Match")
            if match == True:
                cmds.menuItem(self.widgets["spaceSwitch_MatchToggleCB"], edit = True, checkBox = True)

            if match == False:
                cmds.menuItem(self.widgets["spaceSwitch_MatchToggleCB"], edit = True, checkBox = False)


            f.close()




    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    def saveUISettings(self, *args):

        #this function will save out the user's preferences they have set in the UI to disk
        settingsLocation = self.mayaToolsDir + "/General/Scripts/settings.txt"
        f = open(settingsLocation, 'w')

        #Channel Box display settings
        value = cmds.menuItem(self.widgets["menuBar_settings_channelBox"], q = True, checkBox = True)

        #Space switch settings
        match = cmds.menuItem(self.widgets["spaceSwitch_MatchToggleCB"], q = True, cb = True)
        method = cmds.menuItem(self.widgets["spaceSwitch_MatchMethodCB"], q = True, cb = True)

        #create a dictionary with these values
        settings = {}
        settings["ChannelBox"] = value
        settings["Match"] = match
        settings["MatchMethod"] = method

        #write our dictionary to file
        cPickle.dump(settings, f)
        f.close()

    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    def showChannelBox(self, *args):
        #get the value of the checkbox in the menu Item
        value = cmds.menuItem(self.widgets["menuBar_settings_channelBox"], q = True, checkBox = True)
        self.channelBoxLayout = mel.eval('$temp1=$gChannelsLayersForm')
        self.channelBoxForm = mel.eval('$temp1 = $gChannelButtonForm')




        if value == True:
            self.channelBox = mel.eval('$temp1=$gChannelsLayersPane;')

            #unhide the column that will house the channel box
            cmds.rowColumnLayout(self.widgets["rowColLayout"], edit = True, cw = [(1, 400), (2, 50), (3, 220)])

            #parent the channel box to our anim UI
            cmds.control(self.channelBox, e = True, p = self.widgets["cbFormLayout"])
            cmds.formLayout(self.widgets["cbFormLayout"], edit = True, af = [(self.channelBox, "left", 0),(self.channelBox, "right", 0), (self.channelBox, "bottom", 0), (self.channelBox, "top", 0)])
            channelBox = cmds.formLayout(self.widgets["cbFormLayout"], q = True, childArray = True)[0]
            self.channelBox = channelBox

        if value == False:

            #hide the column for the channel box in our anim UI
            cmds.rowColumnLayout(self.widgets["rowColLayout"], edit = True, cw = [(1, 400), (2, 50), (3, 1)])

            try:
                #reparent the channelBox Layout back to maya's window
                cmds.control(self.channelBox, e = True, p = "MainChannelsLayersLayout")

                #edit the channel box pane's attachment to the formLayout
                cmds.formLayout(self.channelBoxLayout, edit = True, af = [(self.channelBox, "left", 0),(self.channelBox, "right", 0), (self.channelBox, "bottom", 0)], attachControl = (self.channelBox, "top", 0, self.channelBoxForm))

            except AttributeError:
                print "channel box restored"


        self.saveUISettings()


    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    def setThumbnail(self, characterName, project):
        projects = os.listdir(self.mayaToolsDir + "/General/Icons/ART/Thumbnails/")
        thumbnailPath = self.mayaToolsDir + "/General/Icons/ART/Thumbnails/" + self.project + "/"


        thumbs = os.listdir(thumbnailPath)


        found = False
        for thumb in thumbs:
            if thumb.find("_small") != -1:
                thumbName = thumb.rpartition(".")[0]
                thumbName = thumbName.partition("_small")[0]
                if thumbName.find(characterName[0:-1]) == 0:
                    cmds.symbolButton(self.widgets["activeCharacterThumb"], edit = True, image = thumbnailPath + thumb, ann = characterName)
                    found = True


        #if our character wasn't in the self.project, but possibly another project, check now
        if found == False:
            for project in projects:

                thumbnailPath = self.mayaToolsDir + "/General/Icons/ART/Thumbnails/" + project + "/"
                thumbs = os.listdir(thumbnailPath)
                for thumb in thumbs:
                    if thumb.find("_small") != -1:
                        thumbName = thumb.rpartition(".")[0]
                        thumbName = thumbName.partition("_small")[0]
                        if thumbName.find(characterName[0:-1]) == 0:
                            cmds.symbolButton(self.widgets["activeCharacterThumb"], edit = True, image = thumbnailPath + thumb, ann = characterName)


        #lstly, repopulate self.controls
        self.controls = []
        for control in ["head_fk_anim", "neck_01_fk_anim", "neck_02_fk_anim", "neck_03_fk_anim", "spine_01_anim", "spine_02_anim", "spine_03_anim", "spine_04_anim", "spine_05_anim", "mid_ik_anim", "chest_ik_anim",
                        "body_anim", "hip_anim", "clavicle_l_anim", "clavicle_r_anim", "fk_arm_l_anim", "fk_arm_r_anim", "fk_elbow_l_anim", "fk_elbow_r_anim", "fk_wrist_l_anim", "fk_wrist_r_anim",
                        "ik_elbow_l_anim", "ik_elbow_r_anim", "ik_wrist_l_anim", "ik_wrist_r_anim", "fk_thigh_l_anim", "fk_thigh_r_anim", "fk_calf_l_anim", "fk_calf_r_anim", "fk_foot_l_anim", "fk_foot_r_anim",
                        "fk_ball_l_anim", "fk_ball_r_anim", "ik_foot_anim_l", "ik_foot_anim_r", "heel_ctrl_l", "heel_ctrl_r", "toe_wiggle_ctrl_l", "toe_wiggle_ctrl_r",
                        "toe_tip_ctrl_l", "toe_tip_ctrl_r", "master_anim", "offset_anim", "root_anim", "upperarm_l_twist_anim", "upperarm_l_twist_2_anim", "upperarm_l_twist_3_anim", "upperarm_r_twist_anim", "upperarm_r_twist_2_anim", "upperarm_r_twist_3_anim", "l_thigh_twist_01_anim", "r_thigh_twist_01_anim",
                        "pinky_metacarpal_ctrl_l", "pinky_metacarpal_ctrl_r", "pinky_finger_fk_ctrl_1_l", "pinky_finger_fk_ctrl_1_r", "pinky_finger_fk_ctrl_2_l", "pinky_finger_fk_ctrl_2_r", "pinky_finger_fk_ctrl_3_l", "pinky_finger_fk_ctrl_3_r",
                        "ring_metacarpal_ctrl_l", "ring_metacarpal_ctrl_r", "ring_finger_fk_ctrl_1_l", "ring_finger_fk_ctrl_1_r", "ring_finger_fk_ctrl_2_l", "ring_finger_fk_ctrl_2_r", "ring_finger_fk_ctrl_3_l", "ring_finger_fk_ctrl_3_r",
                        "middle_metacarpal_ctrl_l", "middle_metacarpal_ctrl_r", "middle_finger_fk_ctrl_1_l", "middle_finger_fk_ctrl_1_r", "middle_finger_fk_ctrl_2_l", "middle_finger_fk_ctrl_2_r", "middle_finger_fk_ctrl_3_l", "middle_finger_fk_ctrl_3_r",
                        "index_metacarpal_ctrl_l", "index_metacarpal_ctrl_r", "index_finger_fk_ctrl_1_l", "index_finger_fk_ctrl_1_r", "index_finger_fk_ctrl_2_l", "index_finger_fk_ctrl_2_r", "index_finger_fk_ctrl_3_l", "index_finger_fk_ctrl_3_r",
                        "thumb_finger_fk_ctrl_1_l", "thumb_finger_fk_ctrl_1_r", "thumb_finger_fk_ctrl_2_l", "thumb_finger_fk_ctrl_2_r", "thumb_finger_fk_ctrl_3_l", "thumb_finger_fk_ctrl_3_r",
                        "index_l_ik_anim", "index_r_ik_anim", "middle_l_ik_anim", "middle_r_ik_anim", "ring_l_ik_anim", "ring_r_ik_anim", "pinky_l_ik_anim", "pinky_r_ik_anim", "thumb_l_ik_anim", "thumb_r_ik_anim",
                        "index_l_poleVector", "index_r_poleVector", "middle_l_poleVector", "middle_r_poleVector", "ring_l_poleVector", "ring_r_poleVector", "pinky_l_poleVector", "pinky_r_poleVector", "thumb_l_poleVector", "thumb_r_poleVector",
                        "l_global_ik_anim", "r_global_ik_anim", "lowerarm_l_twist_anim", "lowerarm_l_twist2_anim", "lowerarm_l_twist3_anim", "lowerarm_r_twist_anim", "lowerarm_r_twist2_anim", "lowerarm_r_twist3_anim", "calf_r_twist_anim", "calf_r_twist2_anim", "calf_r_twist3_anim",
                        "calf_l_twist_anim", "calf_l_twist2_anim", "calf_l_twist3_anim", "thigh_l_twist_2_anim", "thigh_l_twist_3_anim", "thigh_r_twist_2_anim", "thigh_r_twist_3_anim"]:
            self.controls.append(control)


        #hack
        character = characterName
        for obj in ["fk_clavicle_l_anim", "fk_clavicle_r_anim"]:
            if cmds.objExists(character + ":" + obj):
                self.controls.append(obj)	

        #find custom joints
        character = characterName
        customJoints = []
        attrs = cmds.listAttr(character + ":" + "Skeleton_Settings")
        for attr in attrs:
            if attr.find("extraJoint") == 0:
                customJoints.append(attr)

        for joint in customJoints:
            attribute = cmds.getAttr(character + ":" + "Skeleton_Settings." + joint, asString = True)
            jointType = attribute.partition("/")[2].partition("/")[0]
            label = attribute.rpartition("/")[2]

            if jointType == "leaf":
                label = label.partition(" (")[0]
                control = label + "_anim"
                self.controls.append(control)

            if jointType == "jiggle":
                control = label + "_anim"
                self.controls.append(control)

            if jointType == "chain" or jointType == "dynamic":
                numJointsInChain = label.partition("(")[2].partition(")")[0]
                label = label.partition(" (")[0]
                self.controls.append(label + "_dyn_anim")

                cmds.select("*:" + label + "_ik_*_anim")
                selection = cmds.ls(sl = True)
                for each in selection:
                    niceName = each.partition(":")[2]
                    self.controls.append(niceName)		

                for i in range(int(numJointsInChain)):
                    self.controls.append("fk_" + label + "_0" + str(i + 1) + "_anim")
                    self.controls.append(label + "_cv_" + str(i) + "_anim")	


    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    def populateCharacterRigList(self, *args):

        characters = self.getCharacters()
        for character in characters:
            cmds.menuItem(label = character, parent = self.widgets["characterRigList"], c = partial(self.switchActiveCharacter, character))


    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    def switchActiveCharacter(self, character, *args):

        #change the thumbnail
        self.setThumbnail(character, self.project)

        #change the visibility of the character pickers and show the correct one
        characters = self.getCharacters()
        for char in characters:
            cmds.columnLayout(self.widgets[char + "_characterPickerLayout"], edit = True, visible = False)
            cmds.columnLayout(self.widgets[char + "_rigSettingsMainColumn"], edit = True, visible = False)
            cmds.scrollLayout(self.widgets[char + "_listViewMainLayout"], edit = True, visible = False)

        cmds.columnLayout(self.widgets[character + "_characterPickerLayout"], edit = True, visible = True)
        cmds.columnLayout(self.widgets[character + "_rigSettingsMainColumn"], edit = True, visible = True)
        cmds.scrollLayout(self.widgets[character + "_listViewMainLayout"], edit = True, visible = True)


        #set the visibility toggle iconTextCheckBox to represent the current character's control visibility
        shape = cmds.listRelatives(character + ":" + "body_anim", shapes = True)[0]
        visible = cmds.getAttr(shape + ".v")

        if visible == False:
            cmds.iconTextCheckBox(self.widgets["pickerControlVisibility"], edit = True, value = False)

        if visible == True:
            cmds.iconTextCheckBox(self.widgets["pickerControlVisibility"], edit = True, value = True)

        #check to see if space switch window is open
        if cmds.window("spaceSwitcherUI", exists = True):
            title = cmds.window("spaceSwitcherUI", q = True, title = True)
            if character != title:
                if cmds.button("spaceSwitchSyncStatusButton", q = True, exists = True):
                    cmds.button("spaceSwitchSyncStatusButton", edit = True, visible = True)

                else:
                    cmds.deleteUI("spaceSwitcherUI")


        #check to see if pose editor is open
        if cmds.window("poseEditorUI", exists = True):
            peTitle = cmds.window("poseEditorUI", q = True, title = True)
            if character != peTitle:
                if cmds.button("poseEditor_syncStatusButton", q = True, exists = True):
                    cmds.button("poseEditor_syncStatusButton", edit = True, visible = True)

                else:
                    cmds.deleteUI("poseEditorUI")

        #enable menu items
        cmds.menuItem(self.widgets["isoSelect_Torso"], edit = True, enable = False)
        cmds.menuItem(self.widgets["isoSelect_LeftArm"], edit = True, enable = False)
        cmds.menuItem(self.widgets["isoSelect_RightArm"], edit = True, enable = False)
        cmds.menuItem(self.widgets["isoSelect_LeftLeg"], edit = True, enable = False)
        cmds.menuItem(self.widgets["isoSelect_RightLeg"], edit = True, enable = False)
        cmds.menuItem(self.widgets["isoSelect_Head"], edit = True, enable = False)
        cmds.menuItem(self.widgets["isoSelect_ShowAll"], edit = True, enable = False)
        cmds.menuItem(self.widgets["isoSelect_Generate"], edit = True, enable = True)








    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    def getCharacters(self):

        referenceNodes = []
        references = cmds.ls(type = "reference")
        print references

        for reference in references:
            niceName = reference.rpartition("RN")[0]
            print niceName
            suffix = reference.rpartition("RN")[2]
            print suffix
            if suffix != "":
                if cmds.objExists(niceName + suffix + ":" + "Skeleton_Settings"):
                    referenceNodes.append(niceName + suffix)

            else:
                if cmds.objExists(niceName + ":" + "Skeleton_Settings"):
                    referenceNodes.append(niceName)

        print referenceNodes
        return referenceNodes


    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    def createCharacterPicker(self, name, layout):
        #fist thing to do is create the form layout that needs to be parented to the passed in layout
        self.widgets[name + "_characterPickerLayout"] = cmds.columnLayout(w = 470, h = 700, parent = layout, visible = False)
        self.formsToHide.append(self.widgets[name + "
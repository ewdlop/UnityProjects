tchTo == "IK":

                #check to see if user has any project specific match scripts (Fortnite custom)
                if cmds.objExists(character + ":spine_02_anim.driven"):
                    #furthermore, if the plusMinusAvg nodes exist, then import custom matching
                    if os.path.exists(self.mayaToolsDir + "/General/Scripts/fortniteRotoMatch.py"):

                        result = cmds.confirmDialog(title = "Match Options", icon = "question", message = "Which match option would you like to use?", button = ["Standard", "Rotoscope"])

                        if result == "Standard":

                            try:
                                cmds.setAttr(character + ":spine_02_anim.driven", 0)
                                cmds.setAttr(character + ":spine_04_anim.driven", 0)
                            except:
                                pass

                            if cmds.objExists(character + ":spine_01_anim"):
                                cmds.orientConstraint("driver_spine_01", character + ":spine_01_anim")
                                cmds.setKeyframe(character + ":spine_01_anim")
                            
                            if cmds.objExists(character + ":spine_02_anim"):
                                cmds.orientConstraint("driver_spine_02", character + ":spine_02_anim")
                                cmds.setKeyframe(character + ":spine_02_anim")

                            if cmds.objExists(character + ":spine_03_anim"):
                                cmds.orientConstraint("driver_spine_03", character + ":spine_03_anim")
                                cmds.setKeyframe(character + ":spine_03_anim")

                            if cmds.objExists(character + ":spine_04_anim"):
                                cmds.orientConstraint("driver_spine_04", character + ":spine_04_anim")
                                cmds.setKeyframe(character + ":spine_04_anim")

                            if cmds.objExists(character + ":spine_05_anim"):
                                cmds.orientConstraint("driver_spine_05", character + ":spine_05_anim")
                                cmds.setKeyframe(character + ":spine_05_anim")

                            #for each in spineBones:
                                #if cmds.objExists(character + ":" + each + "_anim"):
                                    #cmds.setKeyframe(character + ":" + each + "_anim")


                        if result == "Rotoscope":
                            import fortniteRotoMatch as fnRm
                            reload(fnRm)
                            fnRm.RotoSpineMatch(character)


                else:
                    if cmds.objExists(character + ":spine_01_anim"):
                        cmds.orientConstraint("driver_spine_01", character + ":spine_01_anim")
                        cmds.setKeyframe(character + ":spine_01_anim")
                    
                    if cmds.objExists(character + ":spine_02_anim"):
                        cmds.orientConstraint("driver_spine_02", character + ":spine_02_anim")
                        cmds.setKeyframe(character + ":spine_02_anim")

                    if cmds.objExists(character + ":spine_03_anim"):
                        cmds.orientConstraint("driver_spine_03", character + ":spine_03_anim")
                        cmds.setKeyframe(character + ":spine_03_anim")

                    if cmds.objExists(character + ":spine_04_anim"):
                        cmds.orientConstraint("driver_spine_04", character + ":spine_04_anim")
                        cmds.setKeyframe(character + ":spine_04_anim")

                    if cmds.objExists(character + ":spine_05_anim"):
                        cmds.orientConstraint("driver_spine_05", character + ":spine_05_anim")
                        cmds.setKeyframe(character + ":spine_05_anim")

                    #for each in spineBones:
                        #if cmds.objExists(character + ":" + each + "_anim"):
                            #cmds.setKeyframe(character + ":" + each + "_anim")

            # Switching to IK
            if matchTo == "FK":

                if cmds.objExists(character + ":chest_ik_anim"):

                    #find highest spine joint
                    numSpineBones = cmds.getAttr(character + ":Skeleton_Settings.numSpineBones")
                    if numSpineBones == 5:
                        endSpine = "driver_spine_05"
                        midSpine = ["driver_spine_03"]

                    if numSpineBones == 4:
                        endSpine = "driver_spine_04"
                        midSpine = ["driver_spine_02", "driver_spine_03"]

                    if numSpineBones == 3:
                        endSpine = "driver_spine_03"
                        midSpine = ["driver_spine_02"]

                    if cmds.objExists("chest_ik_anim_MATCH"):
                        cmds.parentConstraint("chest_ik_anim_MATCH", character + ":chest_ik_anim")
                        cmds.parentConstraint("mid_ik_anim_MATCH", character + ":mid_ik_anim")
                    else:
                        cmds.parentConstraint(endSpine, character + ":chest_ik_anim")
                        for each in midSpine:
                            cmds.parentConstraint(each, character + ":mid_ik_anim")

                cmds.setKeyframe([character + ":chest_ik_anim", character + ":mid_ik_anim"])


            #delete the original mode pose joints
            cmds.delete(dupeNodes[0])


        #reselect selection before entering process
        if len(currentSelection) > 0:
            cmds.select(currentSelection)



    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    def match_frameRange_bakeMotionToRefJoints(self, character, parts, start, end, *args):
        constraints = []
        bakeJoints = []

        armBones = ["upperarm_", "lowerarm_", "hand_"]
        spineBones = ["spine_01", "spine_02", "spine_03", "spine_04", "spine_05"]
        legBones = ["thigh_", "calf_", "foot_", "ball_"]


        #go through each part, and duplicate the appropriate part of the skeleton for constraining the rig to
        for part in parts:

            if part == character + ":" + "Left Arm":

                #duplicate the current skeleton pose for the limb
                dupeNodes = cmds.duplicate(character + ":" + armBones[0] + "l")
                for node in dupeNodes:
                    bakeJoints.append(node)
                parent = cmds.listRelatives(dupeNodes[0], parent = True)
                if parent != None:
                    cmds.parent(dupeNodes[0], world = True)

                #bake anim data onto dupe nodes
                for node in dupeNodes:

                    constraint = cmds.parentConstraint(character + ":" + node, node)[0]
                    constraints.append(constraint)



            if part == character + ":" + "Right Arm":

                #duplicate the current skeleton pose for the limb
                dupeNodes = cmds.duplicate(character + ":" + armBones[0] + "r")
                for node in dupeNodes:
                    bakeJoints.append(node)
                parent = cmds.listRelatives(dupeNodes[0], parent = True)
                if parent != None:
                    cmds.parent(dupeNodes[0], world = True)

                #bake anim data onto dupe nodes
                for node in dupeNodes:
                    constraint = cmds.parentConstraint(character + ":" + node, node)[0]
                    constraints.append(constraint)		    


            if part == character + ":" + "Left Leg":

                #duplicate the current skeleton pose for the limb
                dupeNodes = cmds.duplicate(character + ":" + legBones[0] + "l")
                for node in dupeNodes:
                    bakeJoints.append(node)
                parent = cmds.listRelatives(dupeNodes[0], parent = True)
                if parent != None:
                    cmds.parent(dupeNodes[0], world = True)

                #bake anim data onto dupe nodes
                for node in dupeNodes:
                    try:
                        constraint = cmds.parentConstraint(character + ":" + node, node)[0]
                        constraints.append(constraint)
                    except:
                        pass


            if part == character + ":" + "Right Leg":

                #duplicate the current skeleton pose for the limb
                dupeNodes = cmds.duplicate(character + ":" + legBones[0] + "r")
                for node in dupeNodes:
                    bakeJoints.append(node)
                parent = cmds.listRelatives(dupeNodes[0], parent = True)
                if parent != None:
                    cmds.parent(dupeNodes[0], world = True)

                #bake anim data onto dupe nodes
                for node in dupeNodes:
                    try:
                        constraint = cmds.parentConstraint(character + ":" + node, node)[0]
                        constraints.append(constraint)
                    except:
                        pass


            if part == character + ":" + "Spine":

                #duplicate the current skeleton pose for the limb
                dupeNodes = cmds.duplicate(character + ":" + spineBones[0])

                #delete children after last spine bone
                lastSpine = "spine_02"

                if cmds.objExists("spine_03"):
                    lastSpine = "spine_03"

                if cmds.objExists("spine_04"):
                    lastSpine = "spine_04"

                if cmds.objExists("spine_05"):
                    lastSpine = "spine_05"

                children = cmds.listRelatives(lastSpine, children = True)
                for child in children:
                    cmds.delete(child)

                cmds.select(dupeNodes[0], hi = True)
                newNodes = cmds.ls(sl = True)

                for node in newNodes:
                    bakeJoints.append(node)

                parent = cmds.listRelatives(newNodes[0], parent = True)
                if parent != None:
                    cmds.parent(newNodes[0], world = True)

                #bake anim data onto dupe nodes
                for node in newNodes:
                    constraint = cmds.parentConstraint(character + ":" + node, node)[0]
                    constraints.append(constraint)



        #bake down all bakeJoints
        if len(bakeJoints) > 0:
            cmds.select(clear = True)
            for each in bakeJoints:
                cmds.select(each, add = True)

            cmds.bakeResults(simulation = True, t= (start, end), preserveOutsideKeys = True)
            for each in constraints:
                cmds.delete(each)

        #return bake joints
        return bakeJoints


    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    def ikHeelSolve_frameRange(self, character, side, start, end, *args):

        values = []

        for i in range(int(start), int(end + 1)):
            cmds.currentTime(i)

            if cmds.objExists("ball_" + side):
                value = cmds.getAttr("ball_" + side + ".rz")
                values.append(value)

        x = 0
        for i in range(int(start), int(end + 1)):
            cmds.currentTime(i)
            if cmds.objExists("ball_" + side):
                if values[x] > 10:
                    cmds.setAttr(character + ":ik_foot_anim_" + side + ".rx", 0)
                    cmds.setAttr(character + ":ik_foot_anim_" + side + ".ry", 0)
                    cmds.setAttr(character + ":ik_foot_anim_" + side + ".rz", 0)
                    cmds.setKeyframe(character + ":ik_foot_anim_" + side)

                    cmds.setAttr(character + ":heel_ctrl_" + side + ".rz", values[x] * -1)
                    cmds.setKeyframe(character + ":heel_ctrl_" + side + ".rz")

                    footPos = cmds.xform("foot_" + side, q = True, ws = True, t = True)
                    ikFootPos = cmds.xform(character + ":ik_leg_foot_" + side, q = True, ws = True, t = True)
                    yDiff = footPos[1] - ikFootPos[1]
                    zDiff = footPos[2] - ikFootPos[2]

                    cmds.xform(character + ":ik_foot_anim_" + side, r = True, t = [0, yDiff, zDiff])
                    cmds.setKeyframe(character + ":ik_foot_anim_" + side)

                else:
                    cmds.setAttr(character + ":heel_ctrl_" + side + ".rz", 0)
                    cmds.setKeyframe(character + ":heel_ctrl_" + side + ".rz")

            #iterate x
            x = x + 1

    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    def checkDistance(self, character, distanceNode, distanceAttr, originalValue,  side):


        if distanceAttr > 1:
            currentAttr = cmds.getAttr(character + ":ik_foot_anim_" + side + ".knee_twist")

            try:
                cmds.setAttr(character + ":ik_foot_anim_" + side + ".knee_twist", currentAttr + 1)
                cmds.setKeyframe(character + ":ik_foot_anim_" + side + ".knee_twist")
                newDist = cmds.getAttr(distanceNode + ".distance")


                if newDist < originalValue:
                    self.checkDistance(character, distanceNode, newDist, newDist, side)
                    cmds.progressWindow(self.progWindow, edit=True, progress= (cmds.progressWindow(q = True, progress = True) + 3), status= "Solving IK Pole Vectors" )

                if newDist > originalValue:
                    cmds.setAttr(character + ":ik_foot_anim_" + side + ".knee_twist", currentAttr - 2)
                    cmds.setKeyframe(character + ":ik_foot_anim_" + side + ".knee_twist")
                    newDist = cmds.getAttr(distanceNode + ".distance")

                    self.checkDistance(character, distanceNode, newDist, newDist, side)
                    cmds.progressWindow(self.progWindow, edit=True, progress= (cmds.progressWindow(q = True, progress = True) + 3), status= "Solving IK Pole Vectors" )


            except:
                pass





    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    def ikKneeSolve_frameRange(self, character, side, start, end, *args):

        length = abs(cmds.getAttr("calf_" + side + ".tx"))

        startPoint = cmds.xform(character + ":ik_leg_calf_" + side, q = True, ws = True, t = True)
        endPoint = cmds.xform("calf_" + side, q = True, ws = True, t = True)
        dist = cmds.distanceDimension( sp=(startPoint[0],startPoint[1],startPoint[2]), ep=(endPoint[0], endPoint[1], endPoint[2]) )
        distParent = cmds.listRelatives(dist, parent = True)[0]

        locs = cmds.listConnections(dist)
        startLoc = locs[0]
        endLoc = locs[1]

        cmds.pointConstraint(character + ":ik_leg_calf_" + side, startLoc)
        cmds.pointConstraint("calf_" + side, endLoc)

        cmds.currentTime(int(start))

        #get distance between rig knees and mocap knees
        for i in range(int(start), int(end) + 1):
            cmds.currentTime(i)

            distance =  cmds.getAttr(dist + ".distance")
            self.checkDistance(character, dist, distance, distance, side)



        #clean up
        cmds.delete([startLoc, endLoc, dist, distParent])



    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 

    def match_frameRange_UI_Process(self, *args):

        character = cmds.symbolButton(self.widgets["activeCharacterThumb"], q = True, ann = True)

        #get the body parts to match from the text scroll list
        parts = cmds.textScrollList(self.widgets["matchFrameRange_RigList"] , q = True, si = True)

        if parts == None:
            cmds.warning("Nothing selected in the parts list.")
            return

        #get match method
        button = cmds.iconTextRadioCollection(self.widgets["matchFrameRange_RadioCollection"], q = True, sl = True)
        method = cmds.iconTextRadioButton(button, q = True, ann = True)

        #get frame range
        start = cmds.intFieldGrp(self.widgets["matchFrameRange_FrameRange"], q = True, value1 = True)
        end = cmds.intFieldGrp(self.widgets["matchFrameRange_FrameRange"], q = True, value2 = True)


        #for frame in frame range, for each part selected in the list, run the match function
        for i in range(start, end + 1):
            cmds.currentTime(i)	    
            for part in parts:
                if part == character + ":" + "Right Leg":
                    if method == "fk":
                        self.match_singleFrame("leg", "r", "FK", "IK")
                    if method == "ik":
                        self.match_singleFrame("leg", "r", "IK", "FK")


                if part == character + ":" + "Left Leg":
                    if method == "fk":
                        self.match_singleFrame("leg", "l", "FK", "IK")
                    if method == "ik":
                        self.match_singleFrame("leg", "l", "IK", "FK")		



                if part == character + ":" + "Left Arm":
                    if method == "fk":
                        self.match_singleFrame("arm", "l", "FK", "IK")
                    if method == "ik":
                        self.match_singleFrame("arm", "l", "IK", "FK")		


                if part == character + ":" + "Right Arm":
                    if method == "fk":
                        self.match_singleFrame("arm", "r", "FK", "IK")
                    if method == "ik":
                        self.match_singleFrame("arm", "r", "IK", "FK")			



                if part == character + ":" + "Spine":
                    if method == "fk":
                        self.match_singleFrame("spine", None, "FK", "IK")
                    if method == "ik":
                        self.match_singleFrame("spine", None, "IK", "FK")		




    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    def match_frameRange_UI_Cancel(self, *args):

        cmds.deleteUI(self.widgets["matchFrameRange_Window"])


    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    def match_frameRange_UI(self, *args):

        if cmds.window("matchOverFrameRange_UI", exists = True):
            cmds.deleteUI("matchOverFrameRange_UI")

        character = cmds.symbolButton(self.widgets["activeCharacterThumb"], q = True, ann = True)

        self.widgets["matchFrameRange_Window"] = cmds.window("matchOverFrameRange_UI", w = 500, h = 300, sizeable = True, title = "Match Over Frame Range", titleBarMenu = False)

        #main layout
        self.widgets["matchFrameRange_MainLayout"] = cmds.formLayout(w = 500, h = 300)

        #create the UI elements we need

        #rig part list
        self.widgets["matchFrameRange_RigList"] = cmds.textScrollList(w = 200, h = 250, parent = self.widgets["matchFrameRange_MainLayout"], allowMultiSelection = True)

        #populate the list with the current character's limbs that can match
        for part in ["Left Arm", "Right Arm", "Left Leg", "Right Leg", "Spine"]:
            cmds.textScrollList(self.widgets["matchFrameRange_RigList"], edit = True, append = character + ":" + part)


        #frame range
        start = cmds.playbackOptions(q = True, min = True)
        end = cmds.playbackOptions(q = True, max = True)
        self.widgets["matchFrameRange_FrameRange"] = cmds.intFieldGrp(numberOfFields=2, label='Frame Range:', value1 = start, value2 = end, cw = [(1, 100), (2,80), (3, 80)] )


        #radio buttons for match method
        self.widgets["matchFrameRange_RadioCollection"] = cmds.iconTextRadioCollection()
        self.widgets["matchFrameRange_FkToIk"] = cmds.iconTextRadioButton( ann = "fk", select = True, st='iconOnly', image = self.mayaToolsDir + "/General/Icons/ART/fktoik_off.bmp", selectionImage = self.mayaToolsDir + "/General/Icons/ART/fktoik_on.bmp", w =  125, h = 50, collection = self.widgets["matchFrameRange_RadioCollection"], parent =  self.widgets["matchFrameRange_MainLayout"])
        self.widgets["matchFrameRange_IkToFk"] = cmds.iconTextRadioButton( ann = "ik", st='iconOnly', image = self.mayaToolsDir + "/General/Icons/ART/iktofk_off.bmp", selectionImage = self.mayaToolsDir + "/General/Icons/ART/iktofk_on.bmp", w =  125, h = 50, collection = self.widgets["matchFrameRange_RadioCollection"] , parent =  self.widgets["matchFrameRange_MainLayout"])


        #process button and cancel button
        self.widgets["matchFrameRange_Process"] = cmds.button(w = 125, h = 50, label = "Process", c = self.match_frameRange_UI_Process)
        self.widgets["matchFrameRange_Cancel"] = cmds.button(w = 125, h = 50, label = "Cancel", c = self.match_frameRange_UI_Cancel)


        #ik solve options
        label = cmds.text(label = "IK Solve Options:", font = "boldLabelFont")
        self.widgets["matchFR_RollSolveCB"] = cmds.checkBox(label = "Solve Foot Roll", v = False, parent = self.widgets["matchFrameRange_MainLayout"])
        self.widgets["matchFR_KneeSolveCB"] = cmds.checkBox(label = "Solve Knee Vectors", v = True, parent = self.widgets["matchFrameRange_MainLayout"])

        #place UI widgets
        cmds.formLayout(self.widgets["matchFrameRange_MainLayout"], edit = True, af = [(self.widgets["matchFrameRange_RigList"], 'left', 10), (self.widgets["matchFrameRange_RigList"], 'top', 25)])
        cmds.formLayout(self.widgets["matchFrameRange_MainLayout"], edit = True, af = [(self.widgets["matchFrameRange_FrameRange"], 'left', 210), (self.widgets["matchFrameRange_FrameRange"], 'top', 25)])
        cmds.formLayout(self.widgets["matchFrameRange_MainLayout"], edit = True, af = [(self.widgets["matchFrameRange_FkToIk"], 'left', 230), (self.widgets["matchFrameRange_FkToIk"], 'top', 75)])
        cmds.formLayout(self.widgets["matchFrameRange_MainLayout"], edit = True, af = [(self.widgets["matchFrameRange_IkToFk"], 'right', 10), (self.widgets["matchFrameRange_IkToFk"], 'top', 75)])
        cmds.formLayout(self.widgets["matchFrameRange_MainLayout"], edit = True, af = [(self.widgets["matchFrameRange_Process"], 'left', 230), (self.widgets["matchFrameRange_Process"], 'bottom', 25)])
        cmds.formLayout(self.widgets["matchFrameRange_MainLayout"], edit = True, af = [(self.widgets["matchFrameRange_Cancel"], 'right', 10), (self.widgets["matchFrameRange_Cancel"], 'bottom', 25)])

        cmds.formLayout(self.widgets["matchFrameRange_MainLayout"], edit = True, af = [(label, 'left', 230), (label, 'bottom', 140)])
        cmds.formLayout(self.widgets["matchFrameRange_MainLayout"], edit = True, af = [(self.widgets["matchFR_RollSolveCB"], 'left', 230), (self.widgets["matchFR_RollSolveCB"], 'bottom', 115)])
        cmds.formLayout(self.widgets["matchFrameRange_MainLayout"], edit = True, af = [(self.widgets["matchFR_KneeSolveCB"], 'right', 10), (self.widgets["matchFR_KneeSolveCB"], 'bottom', 115)])


        #show the window
        cmds.showWindow(self.widgets["matchFrameRange_Window"])




    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    def control_scale_init(self, *args):

        #launch a simple UI with a slider to control the scale
        if cmds.window("controlScaleWindow", exists = True):
            cmds.deleteUI("controlScaleWindow")

        self.widgets["controlScaleWindow"] = cmds.window("controlScaleWindow", title = "CV Scale", w = 150, h = 50, sizeable = True, mnb = False, mxb = False)
        mainLayout = cmds.formLayout(w = 150, h = 50)

        smallerButton = cmds.button(label = "v", w = 50, h = 30, c = partial(self.control_scale_execute, .9))
        largerButton = cmds.button(label = "^", w = 50, h = 30, c = partial(self.control_scale_execute, 1.1))


        cmds.formLayout(mainLayout, edit = True, af = [(smallerButton, 'left', 25), (smallerButton, 'top', 10)])
        cmds.formLayout(mainLayout, edit = True, af = [(largerButton, 'right', 25), (largerButton, 'top', 10)])


        cmds.showWindow(self.widgets["controlScaleWindow"])




    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # #
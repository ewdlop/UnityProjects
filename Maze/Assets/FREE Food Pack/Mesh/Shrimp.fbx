          cmds.select(clear = True)
            for data in poseData:
                control = data[0]
                ctrl = control

                if control.find("_l") != -1:
                    ctrl = control.rpartition("_l")[0] + "_r"

                if control.find("_l_") != -1:
                    prefix = control.partition("_l_")[0]
                    suffix = control.partition("_l_")[2]
                    ctrl = prefix + "_r_" + suffix

                if control.find("_r") != -1:
                    ctrl = control.rpartition("_r")[0] + "_l"

                if control.find("_r_") != -1:
                    prefix = control.partition("_r_")[0]
                    suffix = control.partition("_r_")[2]
                    ctrl = prefix + "_l_" + suffix

                cmds.select(character + ":" + ctrl, add = True)


    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    def pastePoseOpposite(self, *args):

        #load pose from poseCache file
        poseCacheFile = self.mayaToolsDir + "/poseCache.txt"
        character = cmds.symbolButton(self.widgets["activeCharacterThumb"], q = True, ann = True)
        mirrorAllTransControls =  []
        mirrorxTransControls = ["ik_elbow_l_anim", "ik_elbow_r_anim", "clavicle_l_anim", "clavicle_r_anim","ik_foot_anim_l", "ik_foot_anim_r", "ik_wrist_l_anim", "ik_wrist_r_anim"]
        mirrorRotateZandY = ["ik_foot_anim_l", "ik_foot_anim_r", "ik_wrist_l_anim", "ik_wrist_r_anim"]
        #mirrorRotateY = ["ik_wrist_l_anim", "ik_wrist_r_anim"]

        if os.path.exists(poseCacheFile):
            f  = open(poseCacheFile, 'r')
            poseData = cPickle.load(f)
            f.close()


            #sort through pose data, finding control, and values
            for data in poseData:
                control = data[0]
                newData = []
                for i in range(1, int(len(data))):
                    newData.append(data[i])

                attrs = cmds.listAttr(character + ":" + control, keyable = True, unlocked = True)

                if control.find("_l") != -1:
                    if control.rpartition("_l")[2] == "":
                        ctrl = control.rpartition("_l")[0] + "_r"

                        if ctrl in mirrorAllTransControls:
                            for attr in attrs:
                                if attr.find("translateX") == 0:
                                    index =  attrs.index(attr)
                                    newData[index] = newData[index] * -1
                                if attr.find("translateY") == 0:
                                    index =  attrs.index(attr)
                                    newData[index] = newData[index] * -1
                                if attr.find("translateZ") == 0:
                                    index =  attrs.index(attr)
                                    newData[index] = newData[index] * -1

                        if ctrl in mirrorxTransControls:
                            for attr in attrs:
                                if attr.find("translateX") == 0:
                                    index =  attrs.index(attr)
                                    newData[index] = newData[index] * -1

                        if ctrl in mirrorRotateZandY:
                            for attr in attrs:
                                if attr.find("rotateY") == 0:
                                    index =  attrs.index(attr)
                                    newData[index] = newData[index] * -1
                                if attr.find("rotateZ") == 0:
                                    index =  attrs.index(attr)
                                    newData[index] = newData[index] * -1


                        for i in range(int(len(attrs))):
                            cmds.setAttr(character + ":" + ctrl + "." + attrs[i], newData[i])




                if control.find("_l_") != -1:
                    prefix = control.partition("_l_")[0]
                    suffix = control.partition("_l_")[2]
                    ctrl = prefix + "_r_" + suffix

                    if ctrl in mirrorAllTransControls:
                        for attr in attrs:
                            if attr.find("translateX") == 0:
                                index =  attrs.index(attr)
                                newData[index] = newData[index] * -1
                            if attr.find("translateY") == 0:
                                index =  attrs.index(attr)
                                newData[index] = newData[index] * -1
                            if attr.find("translateZ") == 0:
                                index =  attrs.index(attr)
                                newData[index] = newData[index] * -1

                    if ctrl in mirrorxTransControls:
                        for attr in attrs:
                            if attr.find("translateX") == 0:
                                index =  attrs.index(attr)
                                newData[index] = newData[index] * -1

                    if ctrl in mirrorRotateZandY:
                        for attr in attrs:
                            if attr.find("rotateY") == 0:
                                index =  attrs.index(attr)
                                newData[index] = newData[index] * -1
                            if attr.find("rotateZ") == 0:
                                index =  attrs.index(attr)
                                newData[index] = newData[index] * -1


                    for i in range(int(len(attrs))):
                        cmds.setAttr(character + ":" + ctrl + "." + attrs[i], newData[i])



                if control.find("_r") != -1:
                    if control.rpartition("_r")[2] == "":
                        ctrl = control.rpartition("_r")[0] + "_l"

                        if ctrl in mirrorAllTransControls:
                            for attr in attrs:
                                if attr.find("translateX") == 0:
                                    index =  attrs.index(attr)
                                    newData[index] = newData[index] * -1
                                if attr.find("translateY") == 0:
                                    index =  attrs.index(attr)
                                    newData[index] = newData[index] * -1
                                if attr.find("translateZ") == 0:
                                    index =  attrs.index(attr)
                                    newData[index] = newData[index] * -1

                        if ctrl in mirrorxTransControls:
                            for attr in attrs:
                                if attr.find("translateX") == 0:
                                    index =  attrs.index(attr)
                                    newData[index] = newData[index] * -1

                        if ctrl in mirrorRotateZandY:
                            for attr in attrs:
                                if attr.find("rotateY") == 0:
                                    index =  attrs.index(attr)
                                    newData[index] = newData[index] * -1
                                if attr.find("rotateZ") == 0:
                                    index =  attrs.index(attr)
                                    newData[index] = newData[index] * -1


                        for i in range(int(len(attrs))):
                            cmds.setAttr(character + ":" + ctrl + "." + attrs[i], newData[i])


                if control.find("_r_") != -1:
                    prefix = control.partition("_r_")[0]
                    suffix = control.partition("_r_")[2]
                    ctrl = prefix + "_l_" + suffix

                    if ctrl in mirrorAllTransControls:
                        for attr in attrs:
                            if attr.find("translateX") == 0:
                                index =  attrs.index(attr)
                                newData[index] = newData[index] * -1
                            if attr.find("translateY") == 0:
                                index =  attrs.index(attr)
                                newData[index] = newData[index] * -1
                            if attr.find("translateZ") == 0:
                                index =  attrs.index(attr)
                                newData[index] = newData[index] * -1

                    if ctrl in mirrorxTransControls:
                        for attr in attrs:
                            if attr.find("translateX") == 0:
                                index =  attrs.index(attr)
                                newData[index] = newData[index] * -1

                    if ctrl in mirrorRotateZandY:
                        for attr in attrs:
                            if attr.find("rotateY") == 0:
                                index =  attrs.index(attr)
                                newData[index] = newData[index] * -1
                            if attr.find("rotateZ") == 0:
                                index =  attrs.index(attr)
                                newData[index] = newData[index] * -1



                    for i in range(int(len(attrs))):
                        cmds.setAttr(character + ":" + ctrl + "." + attrs[i], newData[i])



    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    def toggleControlVis(self, visibility, *args):
        character = cmds.symbolButton(self.widgets["activeCharacterThumb"], q = True, ann = True)

        controls = []
        for control in ["head_fk_anim", "neck_01_fk_anim", "neck_02_fk_anim", "neck_03_fk_anim", "spine_01_anim", "spine_02_anim", "spine_03_anim", "spine_04_anim", "spine_05_anim", "mid_ik_anim", "chest_ik_anim",
                        "body_anim", "hip_anim", "clavicle_l_anim", "clavicle_r_anim", "fk_arm_l_anim", "fk_arm_r_anim", "fk_elbow_l_anim", "fk_elbow_r_anim", "fk_wrist_l_anim", "fk_wrist_r_anim",
                        "ik_elbow_l_anim", "ik_elbow_r_anim", "ik_wrist_l_anim", "ik_wrist_r_anim", "fk_thigh_l_anim", "fk_thigh_r_anim", "fk_calf_l_anim", "fk_calf_r_anim", "fk_foot_l_anim", "fk_foot_r_anim",
                        "fk_ball_l_anim", "fk_ball_r_anim", "ik_foot_anim_l", "ik_foot_anim_r", "heel_ctrl_l", "heel_ctrl_r", "toe_wiggle_ctrl_l", "toe_wiggle_ctrl_r",
                        "toe_tip_ctrl_l", "toe_tip_ctrl_r", "master_anim", "offset_anim", "root_anim", "upperarm_l_twist_anim", "upperarm_l_twist_2_anim", "upperarm_l_twist_3_anim", "upperarm_r_twist_anim", "upperarm_r_twist_2_anim", "upperarm_r_twist_3_anim", "l_thigh_twist_01_anim", "r_thigh_twist_01_anim",
                        "pinky_metacarpal_ctrl_l", "pinky_metacarpal_ctrl_r", "pinky_finger_fk_ctrl_1_l", "pinky_finger_fk_ctrl_1_r", "pinky_finger_fk_ctrl_2_l", "pinky_finger_fk_ctrl_2_r", "pinky_finger_fk_ctrl_3_l", "pinky_finger_fk_ctrl_3_r",
                        "ring_metacarpal_ctrl_l", "ring_metacarpal_ctrl_r", "ring_finger_fk_ctrl_1_l", "ring_finger_fk_ctrl_1_r", "ring_finger_fk_ctrl_2_l", "ring_finger_fk_ctrl_2_r", "ring_finger_fk_ctrl_3_l", "ring_finger_fk_ctrl_3_r",
                        "middle_metacarpal_ctrl_l", "middle_metacarpal_ctrl_r", "middle_finger_fk_ctrl_1_l", "middle_finger_fk_ctrl_1_r", "middle_finger_fk_ctrl_2_l", "middle_finger_fk_ctrl_2_r", "middle_finger_fk_ctrl_3_l", "middle_finger_fk_ctrl_3_r",
                        "index_metacarpal_ctrl_l", "index_metacarpal_ctrl_r", "index_finger_fk_ctrl_1_l", "index_finger_fk_ctrl_1_r", "index_finger_fk_ctrl_2_l", "index_finger_fk_ctrl_2_r", "index_finger_fk_ctrl_3_l", "index_finger_fk_ctrl_3_r",
                        "thumb_finger_fk_ctrl_1_l", "thumb_finger_fk_ctrl_1_r", "thumb_finger_fk_ctrl_2_l", "thumb_finger_fk_ctrl_2_r", "thumb_finger_fk_ctrl_3_l", "thumb_finger_fk_ctrl_3_r",
                        "index_l_ik_anim", "index_r_ik_anim", "middle_l_ik_anim", "middle_r_ik_anim", "ring_l_ik_anim", "ring_r_ik_anim", "pinky_l_ik_anim", "pinky_r_ik_anim", "thumb_l_ik_anim", "thumb_r_ik_anim",
                        "index_l_poleVector", "index_r_poleVector", "middle_l_poleVector", "middle_r_poleVector", "ring_l_poleVector", "ring_r_poleVector", "pinky_l_poleVector", "pinky_r_poleVector", "thumb_l_poleVector", "thumb_r_poleVector",
                        "l_global_ik_anim", "r_global_ik_anim", "lowerarm_l_twist_anim", "lowerarm_l_twist2_anim", "lowerarm_l_twist3_anim", "lowerarm_r_twist_anim", "lowerarm_r_twist2_anim", "lowerarm_r_twist3_anim", "calf_r_twist_anim", "calf_r_twist2_anim", "calf_r_twist3_anim",
                        "calf_l_twist_anim", "calf_l_twist2_anim", "calf_l_twist3_anim", "thigh_l_twist_2_anim", "thigh_l_twist_3_anim", "thigh_r_twist_2_anim", "thigh_r_twist_3_anim"]:
            controls.append(control)

        #find custom joints
        customJoints = []
        attrs = cmds.listAttr(character + ":" + "Skeleton_Settings")
        for attr in attrs:
            if attr.find("extraJoint") == 0:
                customJoints.append(attr)

        for joint in customJoints:
            attribute = cmds.getAttr(character + ":" + "Skeleton_Settings." + joint, asString = True)
            jointType = attribute.partition("/")[2].partition("/")[0]
            label = attribute.rpartition("/")[2]

            if jointType == "leaf":
                label = label.partition(" (")[0]
                control = label + "_anim"
                controls.append(control)

            if jointType == "jiggle":
                control = label + "_anim"
                controls.append(control)

            if jointType == "chain" or jointType == "dynamic":
                numJointsInChain = label.partition("(")[2].partition(")")[0]
                label = label.partition(" (")[0]

                for i in range(int(numJointsInChain)):
                    controls.append("fk_" + label + "_0" + str(i + 1) + "_anim")
                controls.append(label + "_cv_0_anim")
                controls.append(label + "_dyn_anim")

                cmds.select("*:" + label + "_ik_*_anim")
                selection = cmds.ls(sl = True)
                for each in selection:
                    niceName = each.partition(":")[2]
                    controls.append(niceName)



        for control in controls:
            if cmds.objExists(character + ":" + control):
                shape = cmds.listRelatives(character + ":" + control, shapes = True)[0]
                if visibility == False:
                    cmds.setAttr(shape + ".v", 0)
                if visibility == True:
                    cmds.setAttr(shape + ".v", 1)



    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    def updateUI_scriptJob(self, *args):
        self.mainScriptJob = cmds.scriptJob(event = ["timeChanged", self.updateUI], parent = self.widgets["window"], kws = True)

    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    def updateUI(self, *args):
        name = cmds.symbolButton(self.widgets["activeCharacterThumb"], q = True, ann = True)

        customJoints = []
        attrs = cmds.listAttr(name + ":" + "Skeleton_Settings")
        for attr in attrs:
            if attr.find("extraJoint") == 0:
                customJoints.append(attr)

        for joint in customJoints:
            attribute = cmds.getAttr(name + ":" + "Skeleton_Settings." + joint, asString = True)
            jointType = attribute.partition("/")[2].partition("/")[0]
            label = attribute.rpartition("/")[2]

            if jointType == "chain" or jointType == "dynamic":
                label = label.partition(" (")[0]

                mode1 =cmds.getAttr(name + ":Rig_Settings." + label + "_fk")
                mode2 =cmds.getAttr(name + ":Rig_Settings." + label + "_ik")
                mode3 =cmds.getAttr(name + ":Rig_Settings." + label + "_dynamic")

                cmds.iconTextRadioButton(self.widgets[name + "_rigSettings_customJoints_" + label + "fkModeButton"], edit = True, select = mode1)
                cmds.iconTextRadioButton(self.widgets[name + "_rigSettings_customJoints_" + label + "ikModeButton"], edit = True, select = mode2)
                cmds.iconTextRadioButton(self.widgets[name + "_rigSettings_customJoints_" + label + "dynModeButton"], edit = True, select = mode3)





        mode = cmds.getAttr(name + ":Rig_Settings.rArmMode")
        if mode == 0:
            cmds.iconTextRadioButton(self.widgets[name + "_rigSettings_rightArmFkModeButton"], edit = True, select = True)
        if mode == 1:
            cmds.iconTextRadioButton(self.widgets[name + "_rigSettings_rightArmIkModeButton"], edit = True, select = True)


        mode = cmds.getAttr(name + ":Rig_Settings.lArmMode")
        if mode == 0:
            cmds.iconTextRadioButton(self.widgets[name + "_rigSettings_leftArmFkModeButton"], edit = True, select = True)
        if mode == 1:
            cmds.iconTextRadioButton(self.widgets[name + "_rigSettings_leftArmIkModeButton"], edit = True, select = True)

        mode = cmds.getAttr(name + ":Rig_Settings.lLegMode")
        if mode == 0:
            cmds.iconTextRadioButton(self.widgets[name + "_rigSettings_leftLegFkModeButton"], edit = True, select = True)
        if mode == 1:
            cmds.iconTextRadioButton(self.widgets[name + "_rigSettings_leftLegIkModeButton"], edit = True, select = True)


        mode = cmds.getAttr(name + ":Rig_Settings.rLegMode")
        if mode == 0:
            cmds.iconTextRadioButton(self.widgets[name + "_rigSettings_rightLegFkModeButton"], edit = True, select = True)
        if mode == 1:
            cmds.iconTextRadioButton(self.widgets[name + "_rigSettings_rightLegIkModeButton"], edit = True, select = True)


        mode1 = cmds.getAttr(name + ":Rig_Settings.spine_fk")
        mode2 = cmds.getAttr(name + ":Rig_Settings.spine_ik")
        if mode1 > mode2:
            cmds.iconTextRadioButton(self.widgets[name + "_rigSettings_spineFkModeButton"], edit = True, select = True)
        else:
            cmds.iconTextRadioButton(self.widgets[name + "_rigSettings_spineIkModeButton"], edit = True, select = True)


        mode = cmds.getAttr(name + ":head_fk_anim.fkOrientation")
        if mode == 0:
            cmds.iconTextRadioButton(self.widgets[name + "_rigSettings_headFkOrientModeButton"], edit = True, select = True)
        if mode == 1:
            cmds.iconTextRadioButton(self.widgets[name + "_rigSettings_headShoulderOrientModeButton"], edit = True, select = True)
        if mode == 2:
            cmds.iconTextRadioButton(self.widgets[name + "_rigSettings_headBodyOrientModeButton"], edit = True, select = True)
        if mode == 3:
            cmds.iconTextRadioButton(self.widgets[name + "_rigSettings_headWorldOrientModeButton"], edit = True, select = True)

        try:
            mode = cmds.getAttr(name + ":neck_01_fk_anim.fkOrientation")

            if mode == 0:
                cmds.iconTextRadioButton(self.widgets[name + "_rigSettings_neckShoulderOrientModeButton"], edit = True, select = True)
            if mode == 1:
                cmds.iconTextRadioButton(self.widgets[name + "_rigSettings_neckBodyOrientModeButton"], edit = True, select = True)
            if mode == 2:
                cmds.iconTextRadioButton(self.widgets[name + "_rigSettings_neckWorldOrientModeButton"], edit = True, select = True)

        except:
            pass


        for finger in ["index", "middle", "ring", "pinky", "thumb"]:
            if cmds.objExists(name + ":" + finger + "_l_ik_anim"):
                mode = cmds.getAttr(name + ":" + finger + "_finger_l_mode_anim.FK_IK")
                if mode == 0:
                    cmds.iconTextRadioButton(self.widgets[name + "rigSettings_LeftFinger_" + finger + "_FkModeButton"], edit = True, select = True)
                if mode == 1:
                    cmds.iconTextRadioButton(self.widgets[name + "rigSettings_LeftFinger_" + finger + "_IkModeButton"], edit = True, select = True)


        for finger in ["index", "middle", "ring", "pinky", "thumb"]:
            if cmds.objExists(name + ":" + finger + "_l_ik_anim"):
                mode = cmds.getAttr(name + ":" + finger + "_finger_r_mode_anim.FK_IK")
                if mode == 0:
                    cmds.iconTextRadioButton(self.widgets[name + "rigSettings_RightFinger_" + finger + "_FkModeButton"], edit = True, select = True)
                if mode == 1:
                    cmds.iconTextRadioButton(self.widgets[name + "rigSettings_RightFinger_" + finger + "_IkModeButton"], edit = True, select = True)


        try:
            mode = cmds.getAttr(name + ":Rig_Settings.rFkArmOrient")
            for button in[self.widgets[name + "_rightClavPickerButton"], self.widgets[name + "_rightShoulderPickerButton"], self.widgets[name + "_rightElbowPickerButton"], self.widgets[name + "_rightHandPickerButton"], self.widgets[name + "_rightIkElbowPickerButton"], self.widgets[name + "_rightIkHandPickerButton"]]:


                if mode == 0:
                    clavVal = True
                    bodyVal = False
                    worldVal = False

                if mode == 1:
                    clavVal = False
                    bodyVal = True
                    worldVal = False

                if mode == 2:
                    clavVal = False
                    bodyVal = False
                    worldVal = True


                cmds.menuItem(self.widgets[name + "_" + button + "_rightArm_ClavSpace"], edit = True, rb = clavVal)
                cmds.menuItem(self.widgets[name + "_" + button + "_rightArm_BodySpace"], edit = True, rb = bodyVal)
                cmds.menuItem(self.widgets[name + "_" + button + "_rightArm_WrldSpace"], edit = True, rb = worldVal)

        except:
            pass


        try:
            mode = cmds.getAttr(name + ":Rig_Settings.lFkArmOrient")
            for button in[self.widgets[name + "_leftClavPickerButton"], self.widgets[name + "_leftShoulderPickerButton"], self.widgets[name + "_leftElbowPickerButton"], self.widgets[name + "_leftHandPickerButton"], self.widgets[name + "_leftIkElbowPickerButton"], self.widgets[name + "_leftIkHandPickerButton"]]:

                if mode == 0:
                    clavVal = True
                    bodyVal = False
                    worldVal = False

                if mode == 1:
                    clavVal = False
                    bodyVal = True
                    worldVal = False

                if mode == 2:
                    clavVal = False
                    bodyVal = False
                    worldVal = True


                cmds.menuItem(self.widgets[name + "_" + button + "_leftArm_ClavSpace"], edit = True, rb = clavVal)
                cmds.menuItem(self.widgets[name + "_" + button + "_leftArm_BodySpace"], edit = True, rb = bodyVal)
                cmds.menuItem(self.widgets[name + "_" + button + "_leftArm_WrldSpace"], edit = True, rb = worldVal)

        except:
            pass


    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    def ikKneeSolve(self, character, side, *args):



        startPoint = cmds.xform(character + ":ik_leg_calf_" + side, q = True, ws = True, t = True)
        endPoint = cmds.xform("calf_" + side, q = True, ws = True, t = True)
        dist = cmds.distanceDimension( sp=(startPoint[0],startPoint[1],startPoint[2]), ep=(endPoint[0], endPoint[1], endPoint[2]) )
        distParent = cmds.listRelatives(dist, parent = True)[0]

        locs = cmds.listConnections(dist)
        startLoc = locs[0]
        endLoc = locs[1]

        cmds.pointConstraint(character + ":ik_leg_calf_" + side, startLoc)
        cmds.pointConstraint("calf_" + side, endLoc)



        #get distance between rig knees and mocap knees
        distance =  cmds.getAttr(dist + ".distance")
        self.checkDistance(character, dist, distance, distance, side)


        #clean up
        cmds.delete([locs[0], locs[1],  dist, distParent])







    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    def ikHeelSolve(self, character, side, *args):


        if cmds.objExists("ball_" + side):
            value = cmds.getAttr("ball_" + side + ".rz")

            if value > 10:
                cmds.setAttr(character + ":ik_foot_anim_" + side + ".rx", 0)
                cmds.setAttr(character + ":ik_foot_anim_" + side + ".ry", 0)
                cmds.setAttr(character + ":ik_foot_anim_" + side + ".rz", 0)
                cmds.setKeyframe(character + ":ik_foot_anim_" + side + "")

                cmds.setAttr(character + ":heel_ctrl_" + side + ".rz", value * -1)
                cmds.setKeyframe(character + ":heel_ctrl_" + side + ".rz")

                footPos = cmds.xform("foot_" + side, q = True, ws = True, t = True)
                ikFootPos = cmds.xform(character + ":ik_leg_foot_" + side, q = True, ws = True, t = True)
                yDiff = footPos[1] - ikFootPos[1]
                zDiff = footPos[2] - ikFootPos[2]

                cmds.xform(character + ":ik_foot_anim_" + side, r = True, t = [0, yDiff, zDiff])
                cmds.setKeyframe(character + ":ik_foot_anim_" + side)

            else:
                cmds.setAttr(character + ":heel_ctrl_" + side + ".rz", 0)
                cmds.setKeyframe(character + ":heel_ctrl_" + side + ".rz")



    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    def match_singleFrame(self, limb, side, matchFrom, matchTo, *args):

        #get the passed in limb, and duplicate the skeleton for that limb's current mode
        #for example, if limb is left arm, and matchFrom is IK, then dupe the driver joints (in IK pose) for the left arm and parent to world
        character = cmds.symbolButton(self.widgets["activeCharacterThumb"], q = True, ann = True)

        armBones = ["upperarm_", "lowerarm_", "hand_"]
        spineBones = ["driver_spine_01", "driver_spine_02", "driver_spine_03", "driver_spine_04", "driver_spine_05"]
        legBones = ["thigh_", "calf_", "foot_", "ball_"]

        #grab current selection
        currentSelection = cmds.ls(sl = True)

        #arm matching
        if limb == "arm":
            #setup constraints based on mode info
            if matchTo == "IK":

                constraint1 = cmds.orientConstraint(character + ":ik_upperarm_fk_matcher_" + side, character + ":fk_arm_" + side + "_anim")[0]
                constraint2 = cmds.orientConstraint(character + ":ik_lowerarm_fk_matcher_" + side, character + ":fk_elbow_" + side + "_anim")[0]
                constraint3 = cmds.orientConstraint(character + ":hand_match_loc_" + side, character + ":fk_wrist_" + side + "_anim")[0]

                cmds.setKeyframe(character + ":fk_arm_" + side + "_anim")
                cmds.setKeyframe(character + ":fk_elbow_" + side + "_anim")
                cmds.setKeyframe(character + ":fk_wrist_" + side + "_anim")

                cmds.delete(constraint1)
                cmds.delete(constraint2)
                cmds.delete(constraint3)



            if matchTo == "FK":

                dupeNodes = cmds.duplicate(character + ":driver_" + armBones[0] + side)

                parent = cmds.listRelatives(dupeNodes[0], parent = True)
                if parent != None:
                    cmds.parent(dupeNodes[0], world = True)

                cmds.pointConstraint("driver_hand_" + side, character + ":ik_wrist_" + side + "_anim")
                constraint = cmds.orientConstraint(character + ":fk_wrist_" + side + "_anim", character + ":ik_wrist_" + side + "_anim")[0]
                
                # CRA NEW CODE - For making sure the elbow match doesnt cause any weird twisting issues.
                if cmds.objExists(character + ":elbowswitch_"+side):
                    print "NEW CODE WORKING"
                    ptCnst = cmds.pointConstraint(character + ":el
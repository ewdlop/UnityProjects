artial(self.multiButtonSelectCommand, name, ["index_metacarpal_ctrl_r", "index_finger_fk_ctrl_1_r", "index_finger_fk_ctrl_2_r", "index_finger_fk_ctrl_3_r"]))
        cmds.formLayout(layout, edit = True, af = [(self.widgets[name + "_rightIndexColumnPickerButton"], "top", 7), (self.widgets[name + "_rightIndexColumnPickerButton"], "left", 107)])

        self.widgets[name + "_rightMiddleColumnPickerButton"] = cmds.button(w = 20, h = 20, label = "", parent = layout, bgc = self.green, c = partial(self.multiButtonSelectCommand, name, ["middle_metacarpal_ctrl_r", "middle_finger_fk_ctrl_1_r", "middle_finger_fk_ctrl_2_r", "middle_finger_fk_ctrl_3_r"]))
        cmds.formLayout(layout, edit = True, af = [(self.widgets[name + "_rightMiddleColumnPickerButton"], "top", 7), (self.widgets[name + "_rightMiddleColumnPickerButton"], "left", 82)])

        self.widgets[name + "_rightRingColumnPickerButton"] = cmds.button(w = 20, h = 20, label = "", parent = layout, bgc = self.green, c = partial(self.multiButtonSelectCommand, name, ["ring_metacarpal_ctrl_r", "ring_finger_fk_ctrl_1_r", "ring_finger_fk_ctrl_2_r", "ring_finger_fk_ctrl_3_r"]))
        cmds.formLayout(layout, edit = True, af = [(self.widgets[name + "_rightRingColumnPickerButton"], "top", 7), (self.widgets[name + "_rightRingColumnPickerButton"], "left", 57)])

        self.widgets[name + "_rightPinkyColumnPickerButton"] = cmds.button(w = 20, h = 20, label = "", parent = layout, bgc = self.green, c = partial(self.multiButtonSelectCommand, name, ["pinky_metacarpal_ctrl_r", "pinky_finger_fk_ctrl_1_r", "pinky_finger_fk_ctrl_2_r", "pinky_finger_fk_ctrl_3_r"]))
        cmds.formLayout(layout, edit = True, af = [(self.widgets[name + "_rightPinkyColumnPickerButton"], "top", 7), (self.widgets[name + "_rightPinkyColumnPickerButton"], "left", 32)])

        #Right thumb global
        self.widgets[name + "_rightThumbColumnPickerButton"] = cmds.button(w = 20, h = 20, label = "", parent = layout, bgc = self.green, c = partial(self.multiButtonSelectCommand, name, ["thumb_finger_fk_ctrl_1_r", "thumb_finger_fk_ctrl_2_r", "thumb_finger_fk_ctrl_3_r"]))
        cmds.formLayout(layout, edit = True, af = [(self.widgets[name + "_rightThumbColumnPickerButton"], "top", 7), (self.widgets[name + "_rightThumbColumnPickerButton"], "left", 132)])


        #Right Finger IK
        if cmds.objExists(name + ":index_r_ik_anim"):
            self.widgets[name + "_rightIndexFingerIKPickerButton"] = cmds.button(w = 20, h = 20, label = "", parent = layout, bgc = self.orange, c = partial(self.buttonSelectCommand, name, "index_r_ik_anim"))
            cmds.formLayout(layout, edit = True, af = [(self.widgets[name + "_rightIndexFingerIKPickerButton"], "top", 130), (self.widgets[name + "_rightIndexFingerIKPickerButton"], "left", 107)])
            menu = cmds.popupMenu(b = 3, parent = self.widgets[name + "_rightIndexFingerIKPickerButton"])
            cmds.menuItem(label = "Finger FK Mode", parent = menu, c = partial(self.switchFingerMode, name, "index", 0, "r"))
            cmds.menuItem(label = "Finger IK Mode", parent = menu, c = partial(self.switchFingerMode, name, "index", 1, "r"))

        if cmds.objExists(name + ":middle_r_ik_anim"):
            self.widgets[name + "_rightMiddleFingerIKPickerButton"] = cmds.button(w = 20, h = 20, label = "", parent = layout, bgc = self.orange, c = partial(self.buttonSelectCommand, name, "middle_r_ik_anim"))
            cmds.formLayout(layout, edit = True, af = [(self.widgets[name + "_rightMiddleFingerIKPickerButton"], "top", 130), (self.widgets[name + "_rightMiddleFingerIKPickerButton"], "left", 82)])
            menu = cmds.popupMenu(b = 3, parent = self.widgets[name + "_rightMiddleFingerIKPickerButton"])
            cmds.menuItem(label = "Finger FK Mode", parent = menu, c = partial(self.switchFingerMode, name, "middle", 0, "r"))
            cmds.menuItem(label = "Finger IK Mode", parent = menu, c = partial(self.switchFingerMode, name, "middle", 1, "r"))

        if cmds.objExists(name + ":ring_r_ik_anim"):
            self.widgets[name + "_rightRingFingerIKPickerButton"] = cmds.button(w = 20, h = 20, label = "", parent = layout, bgc = self.orange, c = partial(self.buttonSelectCommand, name, "ring_r_ik_anim"))
            cmds.formLayout(layout, edit = True, af = [(self.widgets[name + "_rightRingFingerIKPickerButton"], "top", 130), (self.widgets[name + "_rightRingFingerIKPickerButton"], "left", 57)])
            menu = cmds.popupMenu(b = 3, parent = self.widgets[name + "_rightRingFingerIKPickerButton"])
            cmds.menuItem(label = "Finger FK Mode", parent = menu, c = partial(self.switchFingerMode, name, "ring", 0, "r"))
            cmds.menuItem(label = "Finger IK Mode", parent = menu, c = partial(self.switchFingerMode, name, "ring", 1, "r"))

        if cmds.objExists(name + ":pinky_r_ik_anim"):
            self.widgets[name + "_rightPinkyFingerIKPickerButton"] = cmds.button(w = 20, h = 20, label = "", parent = layout, bgc = self.orange, c = partial(self.buttonSelectCommand, name, "pinky_r_ik_anim"))
            cmds.formLayout(layout, edit = True, af = [(self.widgets[name + "_rightPinkyFingerIKPickerButton"], "top", 130), (self.widgets[name + "_rightPinkyFingerIKPickerButton"], "left", 32)])
            menu = cmds.popupMenu(b = 3, parent = self.widgets[name + "_rightPinkyFingerIKPickerButton"])
            cmds.menuItem(label = "Finger FK Mode", parent = menu, c = partial(self.switchFingerMode, name, "pinky", 0, "r"))
            cmds.menuItem(label = "Finger IK Mode", parent = menu, c = partial(self.switchFingerMode, name, "pinky", 1, "r"))

        if cmds.objExists(name + ":thumb_r_ik_anim"):
            self.widgets[name + "_rightThumbFingerIKPickerButton"] = cmds.button(w = 20, h = 20, label = "", parent = layout, bgc = self.orange, c = partial(self.buttonSelectCommand, name, "thumb_r_ik_anim"))
            cmds.formLayout(layout, edit = True, af = [(self.widgets[name + "_rightThumbFingerIKPickerButton"], "top", 107), (self.widgets[name + "_rightThumbFingerIKPickerButton"], "left", 152)])
            menu = cmds.popupMenu(b = 3, parent = self.widgets[name + "_rightThumbFingerIKPickerButton"])
            cmds.menuItem(label = "Finger FK Mode", parent = menu, c = partial(self.switchFingerMode, name, "thumb", 0, "r"))
            cmds.menuItem(label = "Finger IK Mode", parent = menu, c = partial(self.switchFingerMode, name, "thumb", 1, "r"))

        self.widgets[name + "_rightIkFingersRowPickerButton"] = cmds.button(w = 20, h = 20, label = "", parent = layout, bgc = self.green, c = partial(self.multiButtonSelectCommand, name, ["index_r_ik_anim", "middle_r_ik_anim", "ring_r_ik_anim", "pinky_r_ik_anim", "thumb_r_ik_anim"]))
        cmds.formLayout(layout, edit = True, af = [(self.widgets[name + "_rightIkFingersRowPickerButton"], "top", 130), (self.widgets[name + "_rightIkFingersRowPickerButton"], "left", 7)])

        #Right Finger IK Pole Vectors
        if cmds.objExists(name + ":index_r_ik_anim"):
            self.widgets[name + "_rightIndexIkPvPickerButton"] = cmds.button(w = 10, h = 10, label = "", parent = layout, bgc = self.orange, c = partial(self.buttonSelectCommand, name, "index_r_poleVector"))
            cmds.formLayout(layout, edit = True, af = [(self.widgets[name + "_rightIndexIkPvPickerButton"], "top", 155), (self.widgets[name + "_rightIndexIkPvPickerButton"], "left", 112)])

        if cmds.objExists(name + ":middle_r_ik_anim"):
            self.widgets[name + "_rightMiddleIkPvPickerButton"] = cmds.button(w = 10, h = 10, label = "", parent = layout, bgc = self.orange, c = partial(self.buttonSelectCommand, name, "middle_r_poleVector"))
            cmds.formLayout(layout, edit = True, af = [(self.widgets[name + "_rightMiddleIkPvPickerButton"], "top", 155), (self.widgets[name + "_rightMiddleIkPvPickerButton"], "left", 87)])

        if cmds.objExists(name + ":ring_r_ik_anim"):
            self.widgets[name + "_rightRingIkPvPickerButton"] = cmds.button(w = 10, h = 10, label = "", parent = layout, bgc = self.orange, c = partial(self.buttonSelectCommand, name, "ring_r_poleVector"))
            cmds.formLayout(layout, edit = True, af = [(self.widgets[name + "_rightRingIkPvPickerButton"], "top", 155), (self.widgets[name + "_rightRingIkPvPickerButton"], "left", 62)])

        if cmds.objExists(name + ":pinky_r_ik_anim"):
            self.widgets[name + "_rightPinkyIkPvPickerButton"] = cmds.button(w = 10, h = 10, label = "", parent = layout, bgc = self.orange, c = partial(self.buttonSelectCommand, name, "pinky_r_poleVector"))
            cmds.formLayout(layout, edit = True, af = [(self.widgets[name + "_rightPinkyIkPvPickerButton"], "top", 155), (self.widgets[name + "_rightPinkyIkPvPickerButton"], "left", 37)])

        if cmds.objExists(name + ":thumb_r_ik_anim"):
            self.widgets[name + "_rightThumbIkPvPickerButton"] = cmds.button(w = 10, h = 10, label = "", parent = layout, bgc = self.orange, c = partial(self.buttonSelectCommand, name, "thumb_r_poleVector"))
            cmds.formLayout(layout, edit = True, af = [(self.widgets[name + "_rightThumbIkPvPickerButton"], "top", 132), (self.widgets[name + "_rightThumbIkPvPickerButton"], "left", 157)])

        self.widgets[name + "_rightIkFingersPvsPickerButton"] = cmds.button(w = 10, h = 10, label = "", parent = layout, bgc = self.green, c = partial(self.multiButtonSelectCommand, name, ["index_r_poleVector", "middle_r_poleVector", "ring_r_poleVector", "pinky_r_poleVector", "thumb_r_poleVector"]))
        cmds.formLayout(layout, edit = True, af = [(self.widgets[name + "_rightIkFingersPvsPickerButton"], "top", 155), (self.widgets[name + "_rightIkFingersPvsPickerButton"], "left", 12)])


        #Right IK Global Control
        self.widgets[name + "_rightIkGlobalCtrlPickerButton"] = cmds.button(w = 20, h = 20, label = "", parent = layout, bgc = self.orange, c = partial(self.buttonSelectCommand, name, "r_global_ik_anim"))
        cmds.formLayout(layout, edit = True, af = [(self.widgets[name + "_rightIkGlobalCtrlPickerButton"], "top", 7), (self.widgets[name + "_rightIkGlobalCtrlPickerButton"], "left", 7)])

        menu = cmds.popupMenu(b = 3, parent = self.widgets[name + "_rightIkGlobalCtrlPickerButton"])
        spaceMenu = cmds.menuItem(label = "Space Switching", parent = menu, subMenu = True)
        self.widgets[name + "_rIkGlobalCtrl_RadioCollection"] = cmds.radioMenuItemCollection(parent = spaceMenu)
        cmds.menuItem(spaceMenu, edit = True, postMenuCommand = partial(self.getControlSpaces, menu, self.widgets[name + "_rIkGlobalCtrl_RadioCollection"] ,  "r_global_ik_anim_space_switcher"))




    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    def buttonSelectCommand(self, name, control, *args):
        #when a picker button gets clicked, we need to select the corresponding item(taking into account selection modifiers), and color the button white
        mods = cmds.getModifiers()

        if (mods & 1) > 0:
            if cmds.objExists(name + ":" + control):
                cmds.select(name + ":" + control, tgl = True)

        if (mods & 1) == 0:
            if cmds.objExists(name + ":" + control):
                cmds.select(name + ":" + control)


    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    def clavSelectCommand(self, name, fkControl, ikControl, *args):
        #when a picker button gets clicked, we need to select the corresponding item(taking into account selection modifiers), and color the button white

        #get the clavicle mode
        clavMode = 1
        try:
            #fk_clavicle_l_anim
            side = fkControl.partition("clavicle_")[2].partition("_")[0]
            clavMode = cmds.getAttr(name + ":Rig_Settings." + side + "ClavMode")

        except:
            pass


        mods = cmds.getModifiers()

        if clavMode == 0:
            if (mods & 1) > 0:
                if cmds.objExists(name + ":" + fkControl):
                    cmds.select(name + ":" + fkControl, tgl = True)

            if (mods & 1) == 0:
                if cmds.objExists(name + ":" + fkControl):
                    cmds.select(name + ":" + fkControl)


        if clavMode == 1:
            if (mods & 1) > 0:
                if cmds.objExists(name + ":" + ikControl):
                    cmds.select(name + ":" + ikControl, tgl = True)

            if (mods & 1) == 0:
                if cmds.objExists(name + ":" + ikControl):
                    cmds.select(name + ":" + ikControl)	    


    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    def multiButtonSelectCommand(self, name, controls, *args):
        #when a picker button gets clicked, we need to select the corresponding item(taking into account selection modifiers), and color the button white
        mods = cmds.getModifiers()

        if (mods & 1) > 0:
            selection = cmds.ls(sl = True)
            for control in controls:
                if cmds.objExists(name + ":" + control):
                    cmds.select(name + ":" + control, tgl = True)

        if (mods & 1) == 0:
            cmds.select(clear = True)
            for control in controls:
                if cmds.objExists(name + ":" + control):
                    cmds.select(name + ":" + control, add = True)



    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    def switchSpineMode(self, name, mode, *args):

        match = cmds.menuItem(self.widgets["menuBar_settings_matching"], q = True, checkBox = True)
        if mode == "FK":

            #if match on switch is checked, match as well
            if match == True:
                self.match_singleFrame("spine", None, "FK", "IK")

            cmds.setAttr(name + ":Rig_Settings.spine_ik", 0)
            cmds.setAttr(name + ":Rig_Settings.spine_fk", 1)
            cmds.setKeyframe(name + ":Rig_Settings.spine_ik")
            cmds.setKeyframe(name + ":Rig_Settings.spine_fk")




        if mode == "IK":
            if match == True:
                self.match_singleFrame("spine", None, "IK", "FK")

            cmds.setAttr(name + ":Rig_Settings.spine_ik", 1)
            cmds.setAttr(name + ":Rig_Settings.spine_fk", 0)
            cmds.setKeyframe(name + ":Rig_Settings.spine_ik")
            cmds.setKeyframe(name + ":Rig_Settings.spine_fk")

    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    def switchClavMode(self, name, mode, side, *args):
        match = cmds.menuItem(self.widgets["menuBar_settings_matching"], q = True, checkBox = True)

        if mode == "FK":
            if match == True:
                self.match_singleFrame("clav", side, "FK", "IK")

            cmds.setAttr(name + ":Rig_Settings." + side + "ClavMode", 0)
            cmds.setKeyframe(name + ":Rig_Settings." + side + "ClavMode")

        if mode == "IK":
            if match == True:
                self.match_singleFrame("clav", side, "IK", "FK")

            cmds.setAttr(name + ":Rig_Settings." + side + "ClavMode", 1)
            cmds.setKeyframe(name + ":Rig_Settings." + side + "ClavMode")            


    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    def switchArmMode(self, name, mode, side, *args):
        match = cmds.menuItem(self.widgets["menuBar_settings_matching"], q = True, checkBox = True)

        if mode == "FK":
            if match == True:
                self.match_singleFrame("arm", side, "FK", "IK")

            cmds.setAttr(name + ":Rig_Settings." + side + "ArmMode", 0)
            cmds.setKeyframe(name + ":Rig_Settings." + side + "ArmMode")

        if mode == "IK":
            if match == True:
                self.match_singleFrame("arm", side, "IK", "FK")

            cmds.setAttr(name + ":Rig_Settings." + side + "ArmMode", 1)
            cmds.setKeyframe(name + ":Rig_Settings." + side + "ArmMode")

    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    def switchArmOrientMode(self, name, mode, side, *args):


        currentMode = cmds.getAttr(name + ":Rig_Settings." + side + "FkArmOrient")

        if currentMode != mode:

            if mode == 2:
                constraint = cmds.parentConstraint(name + ":fk_orient_master_loc_" + side, name + ":fk_orient_world_loc_" + side)[0]
                cmds.setKeyframe(name + ":fk_orient_world_loc_" + side)
                cmds.delete(constraint)

            if mode == 1:
                constraint = cmds.parentConstraint(name + ":fk_orient_master_loc_" + side, name + ":fk_orient_body_loc_" + side)[0]
                cmds.setKeyframe(name + ":fk_orient_body_loc_" + side)
                cmds.delete(constraint)

            cmds.setAttr(name + ":Rig_Settings." + side + "FkArmOrient", mode)


    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    def switchHeadOrientMode(self, name, mode, *args):

        currentSelection = cmds.ls(sl = True)

        currentMode = cmds.getAttr(name + ":head_fk_anim.fkOrientation")
        currentFrame = cmds.currentTime(q = True)


        if currentMode != mode:

            cmds.currentTime(currentFrame - 1)
            cmds.setKeyframe(name + ":head_fk_anim")

            cmds.currentTime(currentFrame)

            #create temp locator
            tempLoc = cmds.spaceLocator(name = "headSnapTempLoc")[0]
            constraint = cmds.parentConstraint(name + ":head_fk_anim", tempLoc)[0]
            cmds.delete(constraint)

            constraint = cmds.orientConstraint(tempLoc, name + ":head_fk_anim")[0]

            cmds.setAttr(name + ":head_fk_anim.fkOrientation", mode)


            cmds.setKeyframe(name + ":head_fk_anim")
            cmds.delete(constraint)
            cmds.delete(tempLoc)

        if len(currentSelection) > 0:
            cmds.select(currentSelection)




    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    def switchNeckOrientMode(self, name, mode, *args):

        currentSelection = cmds.ls(sl = True)

        currentMode = cmds.getAttr(name + ":neck_01_fk_anim.fkOrientation")
        currentFrame = cmds.currentTime(q = True)


        if currentMode != mode:

            cmds.currentTime(currentFrame - 1)
            cmds.setKeyframe(name + ":neck_01_fk_anim")

            cmds.currentTime(currentFrame)

            #create temp locator
            tempLoc = cmds.spaceLocator(name = "neckSnapTempLoc")[0]
            constraint = cmds.parentConstraint(name + ":neck_01_fk_anim", tempLoc)[0]
            cmds.delete(constraint)

            constraint = cmds.orientConstraint(tempLoc, name + ":neck_01_fk_anim")[0]

            cmds.setAttr(name + ":neck_01_fk_anim.fkOrientation", mode)


            cmds.setKeyframe(name + ":neck_01_fk_anim")
            cmds.delete(constraint)
            cmds.delete(tempLoc)

        if len(currentSelection) > 0:
            cmds.select(currentSelection)
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    def switchLegMode(self, name, mode, side, *args):

        match = cmds.menuItem(self.widgets["menuBar_settings_matching"], q = True, checkBox = True)

        if mode == "FK":
            if match == True:
                self.match_singleFrame("leg", side, "FK", "IK")
            cmds.setAttr(name + ":Rig_Settings." + side + "LegMode", 0)
            cmds.setKeyframe(name + ":Rig_Settings." + side + "LegMode")

        if mode == "IK":
            if match == True:
                self.match_singleFrame("leg", side, "IK", "FK")
            cmds.setAttr(name + ":Rig_Settings." + side + "LegMode", 1)
            cmds.setKeyframe(name + ":Rig_Settings." + side + "LegMode")


    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    def switchCustomChainMode(self, character, controlPrefix, mode, *args):

        if mode == "FK":
            cmds.setAttr(character + ":Rig_Settings." + controlPrefix + "_fk", 1)
            cmds.setAttr(character + ":Rig_Settings." + controlPrefix + "_ik", 0)
            cmds.setAttr(character + ":Rig_Settings." + controlPrefix + "_dynamic", 0)
            cmds.setKeyframe(character + ":Rig_Settings." + controlPrefix + "_fk")
            cmds.setKeyframe(character + ":Rig_Settings." + controlPrefix + "_ik")
            cmds.setKeyframe(character + ":Rig_Settings." + controlPrefix + "_dynamic")

        if mode == "IK":
            cmds.setAttr(character + ":Rig_Settings." + controlPrefix + "_ik", 1)
            cmds.setAttr(character + ":Rig_Settings." + controlPrefix + "_fk", 0)
            cmds.setAttr(character + ":Rig_Settings." + controlPrefix + "_dynamic", 0)
            cmds.setKeyframe(character + ":Rig_Settings." + controlPrefix + "_fk")
            cmds.setKeyframe(character + ":Rig_Settings." + controlPrefix + "_ik")
            cmds.setKeyframe(character + ":Rig_Settings." + controlPrefix + "_dynamic")

        if mode == "DYNAMIC":
            cmds.setAttr(character + ":Rig_Settings." + controlPrefix + "_dynamic", 1)
            cmds.setAttr(character + ":Rig_Settings." + controlPrefix + "_fk", 0)
            cmds.setAttr(character + ":Rig_Settings." + controlPrefix + "_ik", 0)
            cmds.setKeyframe(character + ":Rig_Settings." + controlPrefix + "_fk")
            cmds.setKeyframe(character + ":Rig_Settings." + controlPrefix + "_ik")
            cmds.setKeyframe(character + ":Rig_Settings." + controlPrefix + "_dynamic")




    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    def switchFingerMode(self, name, finger, mode, side, *args):

        cmds.setAttr(name + ":" + finger + "_finger_" + side + "_mode_anim.FK_IK", mode)
        cmds.setKeyframe(name + ":" + finger + "_finger_" + side + "_mode_anim.FK_IK")

    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    def listView_selAllBelow(self, name, *args):

        mods = cmds.getModifiers()

        #get all controls below
        children = cmds.treeView(self.widgets[name + "_treeViewWidget"], q = True, children = args[0])

        if (mods & 1) > 0:
            for child in children:
                if cmds.objExists(name + ":" + child):
                    cmds.select(name + ":" + child, tgl = True)
                    #hilight object in listView
                    cmds.treeView(self.widgets[name + "_treeViewWidget"], edit = True, selectItem = [child, True])

        if (mods & 1) == 0:
            cmds.select(clear = True)
            for child in children:
                if cmds.objExists(name + ":" + child):
                    cmds.select(name + ":" + child, add = True)
                    #hilight object in listView
                    cmds.treeView(self.widgets[name + "_treeViewWidget"], edit = True, selectItem = [child, True])

        #self.listView_ScriptJob(name)
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    def listViewSelectItem(self, name, *args):

        mods = cmds.getModifiers()

        selected = cmds.treeView(self.widgets[name + "_treeViewWidget"], q = True, selectItem = True)
        if (mods & 1) > 0:
            for item in selected:
                if cmds.objExists(name + ":" + item):
                    cmds.select(name + ":" + item, tgl = True)

        if (mods & 1) == 0:
            cmds.select(clear = True)

            for item in selected:
                if cmds.objExists(name + ":" + item):
                    cmds.select(name + ":" + item, add = True)

        #clearSelection

        #self.listView_ScriptJob(name)
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
    # # # # # # # # #
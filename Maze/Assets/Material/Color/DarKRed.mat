       PerformAction(uriString, UriKind.Absolute, uri =>
            {
                if (segments == null)
                {
                    localPath = Uri.UnescapeDataString(path);
                    segmentsPath = path;
                    if (uri.IsUnc)
                    {
                        localPath = @"\\" + uri.Host + path;
                        localPath = localPath.Replace('/', '\\');
                        // Unescape '\\'
                        localPath = localPath.Replace("%5C", "\\");
                        if (path == "/")
                        {
                            localPath = localPath.Substring(0, localPath.Length - 1);
                        }
                    }
                    else if (path.Length > 2 && path[1] == ':' && path[2] == '/')
                    {
                        segmentsPath = '/' + segmentsPath;
                        localPath = localPath.Replace('/', '\\');
                    }
                    segments = Regex.Split(segmentsPath, @"(?<=/)").TakeWhile(s => s.Length != 0);
                }

                Assert.Equal(path, uri.AbsolutePath);
                Assert.Equal(localPath, uri.LocalPath);
                Assert.Equal(path + query, uri.PathAndQuery);
                Assert.Equal(segments, uri.Segments);
                Assert.Equal(query, uri.Query);
                Assert.Equal(fragment, uri.Fragment);
                Assert.True(uri.IsAbsoluteUri);
                Assert.False(uri.UserEscaped);
            });
        }
        
        public static IEnumerable<object[]> IsFile_IsUnc_TestData()
        { // Explicit file with windows drive with path
            yield return new object[] { "file://C:/path", true, false };
            yield return new object[] { "file://C|/path", true, false };
            yield return new object[] { @"file://C:\path", true, false };
            yield return new object[] { @"file://C|\path", true, fa
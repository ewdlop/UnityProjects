/host/", false, false };
        }

        [Theory]
        [MemberData(nameof(IsFile_IsUnc_TestData))]
        public void IsFile_IsUnc(string uriString, bool isFile, bool isUnc)
        {
            PerformAction(uriString, UriKind.Absolute, uri =>
            {
                Assert.Equal(isFile, uri.IsFile);
                Assert.Equal(isUnc, uri.IsUnc);
            });
        }

        public static IEnumerable<object[]> Relative_TestData()
        {
            yield return new object[] { "path1/page.htm?query1=value#fragment", true };
            yield return new object[] { "/", true };
            yield return new object[] { "?query", true };
            yield return new object[] { "#fragment", true };
            yield return new object[] { @"C:\abc", false };
            yield return new object[] { @"C|\abc", false };
            yield return new object[] { @"\\servername\sharename\path\filename", false };
        }

        public void Relative(string uriString, bool relativeOrAbsolute)
        {
            PerformAction(uriString, UriKind.Relative, uri =>
            {
                VerifyRelativeUri(uri, uriString, uriString);
            });
            PerformAction(uriString, UriKind.RelativeOrAbsolute, uri =>
            {
                if (relativeOrAbsolute)
                {
                    VerifyRelativeUri(uri, uriString, uriString);
                }
                else
                {
                    Assert.True(uri.IsAbsoluteUri);
                }
            });
        }

        [Fact]
        public void Create_String_Null_Throws_ArgumentNullException()
        {
            AssertExtensions.Throws<ArgumentNullException>("uriString", () => new Uri(null));
            AssertExtensions.Throws<ArgumentNullException>("uriString", () => new Uri(null, UriKind.Absolute));

            Uri uri;
            Assert.False(Uri.TryCreate(null, UriKind.Absolute, out uri));
            Assert.Null(uri);
        }

        [Fact]
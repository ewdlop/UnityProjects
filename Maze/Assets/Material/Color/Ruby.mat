oid Scheme_Authority_IdnHost(string uriString, string scheme, string userInfo, string host, string idnHost, string dnsSafeHost, UriHostNameType hostNameType, int port, bool isDefaultPort, bool isLoopback)
        {
            string authority = host;
            if (!isDefaultPort)
            {
                authority += ":" + port.ToString();
            }
            PerformAction(uriString, UriKind.Absolute, uri =>
            {
                Assert.Equal(scheme, uri.Scheme);
                Assert.Equal(authority, uri.Authority);
                Assert.Equal(userInfo, uri.UserInfo);
                Assert.Equal(host, uri.Host);
                Assert.Equal(idnHost, uri.IdnHost);
                Assert.Equal(dnsSafeHost, uri.DnsSafeHost);
                Assert.Equal(hostNameType, uri.HostNameType);
                Assert.Equal(port, uri.Port);
                Assert.Equal(isDefaultPort, uri.IsDefaultPort);
                Assert.Equal(isLoopback, uri.IsLoopback);
                Assert.True(uri.IsAbsoluteUri);
                Assert.False(uri.UserEscaped);
            });
        }
        
        public static IEnumerable<object[]> Path_Query_Fragment_TestData()
        {
            // Http
            yield return new object[] { "http://host", "/", "", "" };
            yield return new object[] { "http://host?query", "/", "?query", "" };
            yield return new object[] { "http://host#fragment", "/", "", "#fragment" };
            yield return new object[] { "http://host?query#fragment", "/", "?query", "#fragment" };
            yield return new object[] { "http://host/PATH?QUERY#FRAGMENT", "/PATH", "?QUERY", "#FRAGMENT" };
            yield return new object[] { "http://host/", "/", "", "" };
            yield return new object[] { "http://host/path1/path2", "/path1/path2", "", "" };
            yield return new object[] { "http://host/path1/path2/", "/path1/path2/", "", "" };
            yield return new object[] { "http://host
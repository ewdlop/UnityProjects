/**
 * \file
 * Windows specific socket code.
 *
 * Copyright 2016 Microsoft
 * Licensed under the MIT license. See LICENSE file in the project root for full license information.
 */

#include <config.h>
#include <glib.h>

#include <string.h>
#include <stdlib.h>
#include <ws2tcpip.h>
#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif
#include <errno.h>

#include <sys/types.h>

#include "w32socket.h"
#include "w32socket-internals.h"

#include "utils/w32api.h"
#include "utils/mono-os-wait.h"
#include "icall-decl.h"

#define LOGDEBUG(...)  

void
mono_w32socket_initialize (void)
{
}

void
mono_w32socket_cleanup (void)
{
}

// See win32_wait_interrupt_handler for details.
static void
win32_io_interrupt_handler(gpointer ignored)
{
}

#define INTERRUPTABLE_SOCKET_CALL(blocking, ret, op, sock, ...) \
	MonoThreadInfo *info = mono_thread_info_current (); \
	gboolean alerted = FALSE; \
	if (blocking && info) { \
		mono_thread_info_install_interrupt (win32_io_interrupt_handler, NULL, &alerted); \
		if (alerted) { \
			WSASetLastError (WSAEINTR); \
		} else { \
			mono_win32_enter_blocking_io_call (info, (HANDLE)sock); \
		} \
	} \
	if (!alerted) { \
		MONO_ENTER_GC_SAFE; \
		if (blocking && info && mono_thread_info_is_interrupt_state (info)) { \
			WSASetLastError (WSAEINTR); \
		} else { \
			ret = op (sock, __VA_ARGS__); \
		} \
		MONO_EXIT_GC_SAFE; \
	} \
	if (blocking && info && !alerted) { \
		mono_win32_leave_blocking_io_call (info, (HANDLE)sock); \
		mono_thread_info_uninstall_interrupt (&alerted); \
	}

SOCKET mono_w32socket_accept (SOCKET s, struct sockaddr *addr, socklen_t *addrlen, gboolean blocking)
{
	SOCKET ret = INVALID_SOCKET;
	INTERRUPTABLE_SOCKET_CALL (blocking, ret, accept, s, addr, addrlen);
	return ret;
}

int mono_w32socket_connect (SOCKET s, const struct sockaddr *name, int namelen, gboolean blocking)
{
	int ret = SOCKET_ERROR;
	INTERRUPTABLE_SOCKET_CALL (blocking, ret, connect, s, name, namelen);
	return ret;
}

int mono_w32socket_recv (SOCKET s, char *buf, int len, int flags, gboolean blocking)
{
	int ret = SOCKET_ERROR;
	INTERRUPTABLE_SOCKET_CALL (blocking, ret, recv, s, buf, len, flags);
	return ret;
}

int mono_w32socket_recvfrom (SOCKET s, ch
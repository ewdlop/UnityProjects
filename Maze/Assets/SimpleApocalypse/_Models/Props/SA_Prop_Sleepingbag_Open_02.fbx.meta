c_byteorder_big_endian(), (pl_vm_address_t)&opcodes, 0, sizeof(opcodes)), @"Failed to initialize opcode stream");
    
    uint64_t val;
    STAssertTrue(stream.read_uleb128(&val), @"Failed to read");    
    STAssertEquals(val, (uint64_t)0x1, @"Incorrect value read");
    
    plcrash_async_mobject_free(&mobj);
}

/**
 * Test sleb128 read from an opcode stream.
 */
- (void) testReadSLEB128 {
    plcrash_async_mobject_t mobj;
    uint8_t opcodes[] = { 0x1 };
    
    STAssertEquals(PLCRASH_ESUCCESS, plcrash_async_mobject_init(&mobj, mach_task_self(), (pl_vm_address_t)&opcodes, sizeof(opcodes), true), @"Failed to initialize mobj");
    
    dwarf_opstream stream;
    STAssertEquals(PLCRASH_ESUCCESS, stream.init(&mobj, plcrash_async_byteorder_big_endian(), (pl_vm_address_t)&opcodes, 0, sizeof(opcodes)), @"Failed to initialize opcode stream");
    
    int64_t val;
    STAssertTrue(stream.read_sleb128(&val), @"Failed to read");
    STAssertEquals(val, (int64_t)0x1, @"Incorrect value read");
    
    plcrash_async_mobject_free(&mobj);
}

/**
 * Test pointer read from an opcode stream.
 */
- (void) testReadGNUEHPointer {
    plcrash_async_mobject_t mobj;

    /* Set up an opcode stream with a 4 byte 'pointer' value */
    uint8_t opcodes[] = { 0x1, 0x2, 0x3, 0x4 };
    STAssertEquals(PLCRASH_ESUCCESS, plcrash_async_mobject_init(&mobj, mach_task_self(), (pl_vm_address_t)&opcodes, sizeof(opcodes), true), @"Failed to initialize mobj");

    /* Configure the stream */
    dwarf_opstream stream;
    STAssertEquals(PLCRASH_ESUCCESS, stream.init(&mobj, plcrash_async_byteorder_big_endian(), (pl_vm_address_t)&opcodes, 0, sizeof(
ctionary];
      NSString *path = [carbonDict objectForKey:@"BundlePath"];
      if (path) {
        [cocoaDict setObject:path forKey:@"NSApplicationPath"];
      }
      NSString *name = [carbonDict objectForKey:(id)kCFBundleNameKey];
      if (name) {
        [cocoaDict setObject:name forKey:@"NSApplicationName"];
      }
      NSString *bundleID = [carbonDict objectForKey:(id)kCFBundleIdentifierKey];
      if (bundleID) {
        [cocoaDict setObject:bundleID forKey:@"NSApplicationBundleIdentifier"];
      }
      NSNumber *pid = [carbonDict objectForKey:@"pid"];
      if (pid) {
        [cocoaDict setObject:pid forKey:@"NSApplicationProcessIdentifier"];
      }
      [cocoaDict setObject:[NSNumber numberWithUnsignedLong:psn.highLongOfPSN]
                    forKey:@"NSApplicationProcessSerialNumberHigh"];
      [cocoaDict setObject:[NSNumber numberWithUnsignedLong:psn.lowLongOfPSN]
                    forKey:@"NSApplicationProcessSerialNumberLow"];
      [launchedApps addObject:cocoaDict];
    }
  }
  return launchedApps;
}


- (NSArray *)launchedApplications {
  NSArray *localReturn = nil;
  @synchronized (self) {
    if (!launchedApps_) {
      launchedApps_ = [[self currentApps] retain];
      NSWorkspace *ws = [NSWorkspace sharedWorkspace];
      NSNotificationCenter *workSpaceNC = [ws notificationCenter];
      [workSpaceNC addObserver:self
                      selector:@selector(didLaunchOrTerminateApp:)
                          name:NSWorkspaceDidLaunchApplicationNotification
                        object:nil];
      [workSpaceNC addObserver:self
                      selector:@selector(didLaun
 { throw null; } }
        public bool IsNameScope { get { throw null; } }
        public bool IsNameValid { get { throw null; } }
        public bool IsNullable { get { throw null; } }
        public bool IsPublic { get { throw null; } }
        public bool IsUnknown { get { throw null; } }
        public bool IsUsableDuringInitialization { get { throw null; } }
        public bool IsWhitespaceSignificantCollection { get { throw null; } }
        public bool IsXData { get { throw null; } }
        public System.Xaml.XamlType ItemType { get { throw null; } }
        public System.Xaml.XamlType KeyType { get { throw null; } }
        public System.Xaml.XamlType MarkupExtensionReturnType { get { throw null; } }
        public string Name { get { throw null; } }
        public string PreferredXamlNamespace { get { throw null; } }
        public System.Xaml.XamlSchemaContext SchemaContext { get { throw null; } }
        public bool TrimSurroundingWhitespace { get { throw null; } }
        public System.Collections.Generic.IList<System.Xaml.XamlType> TypeArguments { get { throw null; } }
        public System.Xaml.Schema.XamlValueConverter<System.ComponentModel.TypeConverter> TypeConverter { get { throw null; } }
        public System.Type UnderlyingType { [System.Security.SecuritySafeCriticalAttribute]get { throw null; } }
        public System.Xaml.Schema.XamlValueConverter<System.Windows.Markup.ValueSerializer> ValueSerializer { get { throw null; } }
        public virtual bool CanAssignTo(System.Xaml.XamlType xamlType) { throw null; }
        public override bool Equals(object obj) { throw null; }
        public bool Equals(System.Xaml.XamlType other) { throw null; }
        public System.Xaml.XamlMember GetAliasedProperty(System.Xaml.XamlDirective directive) { throw null; }
        public System.Collections.Generic.ICollection<System.Xaml.XamlMember> GetAllAttachableMembers() { throw null; }
        public System.Collections.Generic.ICollection<System.Xaml.XamlMember> GetAllMembers() { throw null; }
        public System.Xaml.XamlMember GetAttachableMember(string name) { throw null; }
        public override int GetHashCode() { throw null; }
        public System.Xaml.XamlMember GetMember(string name) { throw null; }
        public System.Collections.Generic.IList<System.Xaml.XamlType> GetPositionalParameters(int parameterCount) { throw null; }
        public virtual System.Collections.Generic.IList<string> GetXamlNamespaces() { throw null; }
        protected virtual System.Xaml.XamlMember LookupAliasedProperty(System.Xaml.XamlDirective directive) { throw null; }
        protected virtual System.Collections.Generic.IEnumerable<System.Xaml.XamlMember> LookupAllAttachableMembers() { throw null; }
        protected virtual System.Collections.Generic.IEnumerable<System.Xaml.XamlMember> LookupAllMembers() { throw null; }
        protected virtual System.Collections.Generic.IList<System.Xaml.XamlType> LookupAllowedContentTypes() { throw null; }
        protected virtual System.Xaml.XamlMember LookupAttachableMember(string name) { throw null; }
        protected virtual System.Xaml.XamlType LookupBaseType() { throw null; }
        protected virtual System.Xaml.Schema.XamlCollectionKind LookupCollectionKind() { throw null; }
        protected virtual bool LookupConstructionRequiresArguments() { throw null; }
        protected virtual System.Xaml.XamlMember LookupContentProperty() { throw null; }
        protected virtual System.Collections.Generic.IList<System.Xaml.XamlType> LookupContentWrappers() { throw null; }
        protected virtual System.Reflection.ICustomAttributeProvider LookupCustomAttributeProvider() { throw null; }
        protected virtual System.Xaml.Schema.XamlValueConverter<System.Xaml.XamlDeferringLoader> LookupDeferringLoader() { throw null; }
        protected virtual System.Xaml.Schema.XamlTypeInvoker LookupInvoker() { throw null; }
        protected virtual bool LookupIsAmbient() { throw null; }
        protected virtual bool LookupIsConstructible() { throw null; }
        protected virtual bool LookupIsMarkupExtension() { throw null; }
        protected virtual bool LookupIsNameScope() { throw null; }
        protected virtual bool LookupIsNullable() { throw null; }
        protected virtual bool LookupIsPublic() { throw null; }
        protected virtual bool LookupIsUnknown() { throw null; }
        protected virtual bool LookupIsWhitespaceSignificantCollection() { throw null; }
        protected virtual bool LookupIsXData() { throw null; }
        protected virtual System.Xaml.XamlType LookupItemType() { throw null; }
        protected virtual System.Xaml.XamlType LookupKeyType() { throw null; }
        protected virtual System.Xaml.XamlType LookupMarkupExtensionReturnType() { throw null; }
        protected virtual System.Xaml.XamlMember LookupMember(string name, bool skipReadOnlyCheck) { throw null; }
        protected virtual System.Collections.Generic.IList<System.Xaml.XamlType> LookupPositionalParameters(int parameterCount) { throw null; }
        protected virtual System.EventHandler<System.Windows.Markup.XamlSetMarkupExtensionEventArgs> LookupSetMarkupExtensionHandler() { throw null; }
        protected virtual System.EventHandler<System.Windows.Markup.XamlSetTypeConverterEventArgs> LookupSetTypeConverterHandler() { throw null; }
        protected virtual bool LookupTrimSurroundingWhitespace() { throw null; }
        protected virtual System.Xaml.Schema.XamlValueConverter<System.ComponentModel.TypeConverter> LookupTypeConverter() { throw null; }
        protected virtual System.Type LookupUnderlyingType() { throw null; }
        protected virtual bool LookupUsableDuringInitialization() { throw null; }
        protected virtual System.Xaml.Schema.XamlValueConverter<System.Windows.Markup.ValueSerializer> LookupValueSerializer() { throw null; }
        public static bool operator ==(System.Xaml.XamlType xamlType1, System.Xaml.XamlType xamlType2) { throw null; }
        public static bool operator !=(System.Xaml.XamlType xamlType1, System.Xaml.XamlType xamlType2) { throw null; }
        public override string ToString() { throw null; }
    }
    public abstract partial class XamlWriter : System.IDisposable
    {
        protected XamlWriter() { }
        protected bool IsDisposed { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        public abstract System.Xaml.XamlSchemaContext SchemaContext { get; }
        public void Close() { }
        protected virtual void Dispose(bool disposing) { }
        void System.IDisposable.Dispose() { }
        public abstract void WriteEndMember();
        public abstract void WriteEndObject();
        public abstract void WriteGetObject();
        public abstract void WriteNamespace(System.Xaml.NamespaceDeclaration namespaceDeclaration);
        public void WriteNode(System.Xaml.XamlReader reader) { }
        public abstract void WriteStartMember(System.Xaml.XamlMember xamlMember);
        public abstract void WriteStartObject(System.Xaml.XamlType type);
        public abstract void WriteValue(object value);
    }
    public partial class XamlWriterSettings
    {
        public XamlWriterSettings() { }
        public XamlWriterSettings(System.Xaml.XamlWriterSettings settings) { }
    }
    public partial class XamlXmlReader : System.Xaml.XamlReader, System.Xaml.IXamlLineInfo
    {
        public XamlXmlReader(System.IO.Stream stream) { }
        public XamlXmlReader(System.IO.Stream stream, System.Xaml.XamlSchemaContext schemaContext) { }
        public XamlXmlReader(System.IO.Stream stream, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.XamlXmlReaderSettings settings) { }
        public XamlXmlReader(System.IO.Stream stream, System.Xaml.XamlXmlReaderSettings settings) { }
        public XamlXmlReader(System.IO.TextReader textReader) { }
        public XamlXmlReader(System.IO.TextReader textReader, System.Xaml.XamlSchemaContext schemaContext) { }
        public XamlXmlReader(System.IO.TextReader textReader, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.XamlXmlReaderSettings settings) { }
        public XamlXmlReader(System.IO.TextReader textReader, System.Xaml.XamlXmlReaderSettings settings) { }
        public XamlXmlReader(string fileName) { }
        public XamlXmlReader(string fileName, System.Xaml.XamlSchemaContext schemaContext) { }
        public XamlXmlReader(string fileName, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.XamlXmlReaderSettings settings) { }
        public XamlXmlReader(string fileName, System.Xaml.XamlXmlReaderSettings settings) { }
        public XamlXmlReader(System.Xml.XmlReader xmlReader) { }
        public XamlXmlReader(System.Xml.XmlReader xmlReader, System.Xaml.XamlSchemaContext schemaContext) { }
        public XamlXmlReader(System.Xml.XmlReader xmlReader, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.XamlXmlReaderSettings settings) { }
        public XamlXmlReader(System.Xml.XmlReader xmlReader, System.Xaml.XamlXmlReaderSettings settings) { }
        public bool HasLineInfo { get { throw null; } }
        public override bool IsEof { get { throw null; } }
        public int LineNumber { get { throw null; } }
        public int LinePosition { get { throw null; } }
        public override System.Xaml.XamlMember Member { get { throw null; } }
        public override System.Xaml.NamespaceDeclaration Namespace { get { throw null; } }
        public override System.Xaml.XamlNodeType NodeType { get { throw null; } }
        public override System.Xaml.XamlSchemaContext SchemaContext { get { throw null; } }
        public override System.Xaml.XamlType Type { get { throw null; } }
        public override object Value { get { throw null; } }
        public override bool Read() { throw null; }
    }
    public partial class XamlXmlReaderSettings : System.Xaml.XamlReaderSettings
    {
        public XamlXmlReaderSettings() { }
        public XamlXmlReaderSettings(System.Xaml.XamlXmlReaderSettings settings) { }
        public bool CloseInput { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public bool SkipXmlCompatibilityProcessing { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public string XmlLang { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public bool XmlSpacePreserve { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
    }
    public partial class XamlXmlWriter : System.Xaml.XamlWriter
    {
        public XamlXmlWriter(System.IO.Stream stream, System.Xaml.XamlSchemaContext schemaContext) { }
        public XamlXmlWriter(System.IO.Stream stream, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.XamlXmlWriterSettings settings) { }
        public XamlXmlWriter(System.IO.TextWriter textWriter, System.Xaml.XamlSchemaContext schemaContext) { }
        public XamlXmlWriter(System.IO.TextWriter textWriter, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.XamlXmlWriterSettings settings) { }
        public XamlXmlWriter(System.Xml.XmlWriter xmlWriter, System.Xaml.XamlSchemaContext schemaContext) { }
        public XamlXmlWriter(System.Xml.XmlWriter xmlWriter, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.XamlXmlWriterSettings settings) { }
        public override System.Xaml.XamlSchemaContext SchemaContext { get { throw null; } }
        public System.Xaml.XamlXmlWriterSettings Settings { get { throw null; } }
        protected override void Dispose(bool disposing) { }
        public void Flush() { }
        public override void WriteEndMember() { }
        public override void WriteEndObject() { }
        public override void WriteGetObject() { }
        public override void WriteNamespace(System.Xaml.NamespaceDeclaration namespaceDeclaration) { }
        public override void WriteStartMember(System.Xaml.XamlMember property) { }
        public override void WriteStartObject(System.Xaml.XamlType type) { }
        public override void WriteValue(object value) { }
    }
    [System.SerializableAttribute]
    public partial class XamlXmlWriterException : System.Xaml.XamlException
    {
        public XamlXmlWriterException() { }
        protected XamlXmlWriterException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
        public XamlXmlWriterException(string message) { }
        public XamlXmlWriterException(string message, System.Exception innerException) { }
    }
    public partial class XamlXmlWriterSettings : System.Xaml.XamlWriterSettings
    {
        public XamlXmlWriterSettings() { }
        public bool AssumeValidInput { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public bool CloseOutput { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public System.Xaml.XamlXmlWriterSettings Copy() { throw null; }
    }
}
namespace System.Xaml.Permissions
{
    [System.SerializableAttribute]
    public partial class XamlAccessLevel
    {
        internal XamlAccessLevel() { }
        public System.Reflection.AssemblyName AssemblyAccessToAssemblyName { get { throw null; } }
        public string PrivateAccessToTypeName { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        public static System.Xaml.Permissions.XamlAccessLevel AssemblyAccessTo(System.Reflection.Assembly assembly) { throw null; }
        public static System.Xaml.Permissions.XamlAccessLevel AssemblyAccessTo(System.Reflection.AssemblyName assemblyName) { throw null; }
        public static System.Xaml.Permissions.XamlAccessLevel PrivateAccessTo(string assemblyQualifiedTypeName) { throw null; }
        public static System.Xaml.Permissions.XamlAccessLevel PrivateAccessTo(System.Type type) { throw null; }
    }
    [System.SerializableAttribute]
    public sealed partial class XamlLoadPermission : System.Security.CodeAccessPermission, System.Security.Permissions.IUnrestrictedPermission
    {
        public XamlLoadPermission(System.Collections.Generic.IEnumerable<System.Xaml.Permissions.XamlAccessLevel> allowedAccess) { }
        public XamlLoadPermission(System.Security.Permissions.PermissionState state) { }
        public XamlLoadPermission(System.Xaml.Permissions.XamlAccessLevel allowedAccess) { }
        public System.Collections.Generic.IList<System.Xaml.Permissions.XamlAccessLevel> AllowedAccess { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        public override System.Security.IPermission Copy() { throw null; }
        public override void FromXml(System.Security.SecurityElement elem) { }
        public bool Includes(System.Xaml.Permissions.XamlAccessLevel requestedAccess) { throw null; }
        public override System.Security.IPermission Intersect(System.Security.IPermission target) { throw null; }
        public override bool IsSubsetOf(System.Security.IPermission target) { throw null; }
        public bool IsUnrestricted() { throw null; }
        public override System.Security.SecurityElement ToXml() { throw null; }
        public override System.Security.IPermission Union(System.Security.IPermission other) { throw null; }
    }
}
namespace System.Xaml.Schema
{
    [System.FlagsAttribute]
    public enum AllowedMemberLocations
    {
        Any = 3,
        Attribute = 1,
        MemberElement = 2,
        None = 0,
    }
    public enum ShouldSerializeResult
    {
        Default = 0,
        False = 2,
        True = 1,
    }
    public enum XamlCollectionKind : byte
    {
        Array = (byte)3,
        Collection = (byte)1,
        Dictionary = (byte)2,
        None = (byte)0,
    }
    public partial class XamlMemberInvoker
    {
        protected XamlMemberInvoker() { }
        public XamlMemberInvoker(System.Xaml.XamlMember member) { }
        public System.Reflection.MethodInfo UnderlyingGetter { get { throw null; } }
        public System.Reflection.MethodInfo UnderlyingSetter { get { throw null; } }
        public static System.Xaml.Schema.XamlMemberInvoker UnknownInvoker { get { throw null; } }
        public virtual object GetValue(object instance) { throw null; }
        public virtual void SetValue(object instance, object value) { }
        public virtual System.Xaml.Schema.ShouldSerializeResult ShouldSerializeValue(object instance) { throw null; }
    }
    public partial class XamlTypeInvoker
    {
        protected XamlTypeInvoker() { }
        public XamlTypeInvoker(System.Xaml.XamlType type) { }
        public System.EventHandler<System.Windows.Markup.XamlSetMarkupExtensionEventArgs> SetMarkupExtensionHandler { get { throw null; } }
        public System.EventHandler<System.Windows.Markup.XamlSetTypeConverterEventArgs> SetTypeConverterHandler { get { throw null; } }
        public static System.Xaml.Schema.XamlTypeInvoker UnknownInvoker { get { throw null; } }
        public virtual void AddToCollection(object instance, object item) { }
        public virtual void AddToDictionary(object instance, object key, object item) { }
        public virtual object CreateInstance(object[] arguments) { throw null; }
        public virtual System.Reflection.MethodInfo GetAddMethod(System.Xaml.XamlType contentType) { throw null; }
        public virtual System.Reflection.MethodInfo GetEnumeratorMethod() { throw null; }
        public virtual System.Collections.IEnumerator GetItems(object instance) { throw null; }
    }
    [System.Diagnostics.DebuggerDisplayAttribute("{{{Namespace}}}{Name}{TypeArgStringForDebugger}")]
    public partial class XamlTypeName
    {
        public XamlTypeName() { }
        public XamlTypeName(string xamlNamespace, string name) { }
        public XamlTypeName(string xamlNamespace, string name, System.Collections.Generic.IEnumerable<System.Xaml.Schema.XamlTypeName> typeArguments) { }
        public XamlTypeName(System.Xaml.XamlType xamlType) { }
        public string Name { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public string Namespace { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public System.Collections.Generic.IList<System.Xaml.Schema.XamlTypeName> TypeArguments { get { throw null; } }
        public static System.Xaml.Schema.XamlTypeName Parse(string typeName, System.Xaml.IXamlNamespaceResolver namespaceResolver) { throw null; }
        public static System.Collections.Generic.IList<System.Xaml.Schema.XamlTypeName> ParseList(string typeNameList, System.Xaml.IXamlNamespaceResolver namespaceResolver) { throw null; }
        public override string ToString() { throw null; }
        public static string ToString(System.Collections.Generic.IList<System.Xaml.Schema.XamlTypeName> typeNameList, System.Xaml.INamespacePrefixLookup prefixLookup) { throw null; }
        public string ToString(System.Xaml.INamespacePrefixLookup prefixLookup) { throw null; }
        public static bool TryParse(string typeName, System.Xaml.IXamlNamespaceResolver namespaceResolver, out System.Xaml.Schema.XamlTypeName result) { throw null; }
        public static bool TryParseList(string typeNameList, System.Xaml.IXamlNamespaceResolver namespaceResolver, out System.Collections.Generic.IList<System.Xaml.Schema.XamlTypeName> result) { throw null; }
    }
    public partial class XamlTypeTypeConverter : System.ComponentModel.TypeConverter
    {
        public XamlTypeTypeConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { throw null; }
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { throw null; }
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { throw null; }
    }
    public partial class XamlValueConverter<TConverterBase> : System.IEquatable<System.Xaml.Schema.XamlValueConverter<TConverterBase>> where TConverterBase : class
    {
        public XamlValueConverter(System.Type converterType, System.Xaml.XamlType targetType) { }
        public XamlValueConverter(System.Type converterType, System.Xaml.XamlType targetType, string name) { }
        public TConverterBase ConverterInstance { get { throw null; } }
        public System.Type ConverterType { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        
                      
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                            
<?xpacket end="w"?>g6¥    cHRM  z%  ÄÉ  ˘ˇ  ÄÈ  u0  Í`  :ò  oí_≈F  ÒIDATx⁄ÃS=´⁄`}MÃË x;twR∏ÙtÎË1Búù:dp(-⁄M—@Ë*h§&C[§`≈/4ñ¥∑“‚«≠ﬁH’_„”È^ÓGÎ‚“g<ûsŒc tt$ÑJ&ìŒJ•RöNßK”4≠˝~ø◊4Ìj0®Ç §”ÈÙ…?  µ€Ìû$I≥ŸL h4sè«Û!7õÕÊ|µZaûÁﬂ  ∫OîÕf_å«„+á√Ò^◊u `Ω^°“5ÅÄºX,∂˝~ˇ+«qßw$I˙çF{°EQ≤$IE…∑B%∑€-ñÀÂü∫ÆõÖB·’ç¡d2Y˙|æO,À™€Ì÷dYVΩ/æÕH$“∆ÔÍı˙Y"ëp⁄√ÿë$)båü€Ìvcº#IR<î|(:I&ìß≠V´MÜa9ùŒG«ùcå≠\.7:$¶i˙q,Û ≤\Ø’jœê¢(Á◊7S%W´’Y0|êÅÀÂxûˇÅ16ã≈‚ÎõÚ˘¸KUUj¡Ô˜◊ÁÛ˘v8~œd2OÔ¥¿0—Ìvøt:ùÀÂrâ zΩﬁ•◊Î˝H”tSñÂ˘f≥1xûÀ0Ò` Ä‚Ò8)ä‚ª—hÙÀ0åùeY{M”tEQæ	Ç¿¶R©'  €ˇÒL«‡œ ÉãT˙/”ﬁ    IENDÆB`Ç                                                                                                                                                                                                                                                                                                                    p…±Á£~0ò∂ãH të…ótÙcárπæCo-ˇlP[ì».zÙ ˛~e∏∂ÁırH»¥!ÿàÚéRÎõ@Bc]ç⁄ZËy<¡¿€÷Û·D,‘¨iƒøq:9®k–è˝£?jk$áG!ﬁyV~Îö{_2¯PZåõ⁄=£¨ÓÉ…[Ó∞q˚K@Sõr≈XΩŒàÅKﬁ◊gÀ© ∫VtH¯ Dû
”ÃâûÔFîaá!=ÁW¿¯‡Åi Ê‰Ìü«˚=Vñ˛ﬂ∫ÉJ]¯⁄∫ÁYä=#„‚¸P^bKÛ`)ñç‹∂—ˆ§ãvK‹Xôô‘:%U99%ï!/Ã˛U)*mr≠€tì[QΩı∞à(¸„°⁄D⁄˜è·ËîWô«c—èùD‹w)áiW.]ÉdÄ *Näˇó%])ÑnèE¿»ã°k∂ª¢…ÒCÊ…0⁄;ÿ}“WÁ‚Õô8õı«/!ˇÛÓâ6îÔíŒ?$GûµíáfÑªÛêC<|‹HSlsûÅæyK(ßuKY0À$s√ÂÄõÒéøó¡p1>x•È'$è≠4X⁄ï;"&0v@ˇ%c?7…_gP«ÀApÈ€Iû‰ûDñ¿ŸûÈƒ˙?x∆q9!≤6˘8‡4 hÒFÒœÇüÑ€z1ØZ£SÆ™Ωƒ€PôglY3∆7àdUJRm∆ªçø\x®Øπ‰jÑ›–yQø$/ïyRí¬Ô1KàRe5G/á$^¶üzóæ…˘Ü2eΩqHT¶OØË≥C‡ëæ7.LÆ„Ja⁄µ±fÃ¿&4Õå∫tGÖÂ∑•$π`63Ú¶yË˚A?≥C∆±™Ãä.{	ÄÊø∑z1ŸíoiT± ~©LÎ«{,‰ıÊóEïºJ”ñÌ,∂£ÊVÇG\%éêÁåVñ[Wƒ=ØMÊåO ËTÉ∏àãZ@-Ë”Ür‡]Ãa∏Ø`>údòã`|s¢yÓN"›¨¢5@3„·˘Ú¯8’(m±'ì_Ú¨πÍÅDDiçM®≤#Uá≈ÈÎ+Kg2'Ï¿HÅÛ„AH∞ñißÈjL]≠˚Æ ‰Aº™ÿTf£,ZòÖ$‡Àçí*Ö–ed°€<ËBgì∂Eù„r,+cD—”§É#“â¸Lû{ºçú„ó„Î/•	◊Q‰íµÕ"æ@
m&énö-$≤ŸM$ﬂ&¸`ò:uÅs®röıö&Àé©Wó6eâ;p∂ÿftVƒ7¡·eAr[âﬁÎæ>ÚY!ß-∞˜ˇŒÍ”à2ÔqÍ›K ©˚l≠¯‚hT4¸UôöLæ¨W©1˘˝kŸ˙3ˆıπˆ3ˇﬁÈ%pœ3»ssÄuÇh•´,z3»«Ò:ÂlEtõj8D(1’ÿ5Rüi≤–ƒdı¨v¥—_Œ„@ìﬁ|≥Z∞q,Ú‡
6Ä≥çÙâfI0;˘ò≠önˆƒ¡•4
ÊÖîsj∞Ó€;Úπ‡<i‡85Ä€Z£Ó§»–.Õ¡ŒÓ$“íËrP¬WLmÔyêoπ5ÅEâ<∞ΩejS‚¸Ó∂©´rÅô9Õ≤ºÁú‘ze€‚25%nz1≈ÊüÖ Qh®å)»¡¿ô3ï é1„‹?R¬∆$¥ÍWtæÍF8HoÙ®∫rpfX˜&	*∆ºGùë‹w¬Y_#QL÷pk›PR◊ﬂ≠øñÊ¥ÛÔ£“ÒdVr˝ÎÇåÁÍ&ÉGDøDbl◊Ü…üÊ¸ÇÛãt5P∑ÓΩFπ˘∫©öŒp®Í%Ê)qÇ®{˚∫q˘ÃoWáXË∏~úƒ∂Beœwåi®∑7ò¥^‹qÿÇÉ¡Äwù¨n_Ê|†;Áõ_˛{+3˜‰8yâè≥äáÅ^§Up`Ω9Yn‘çmîxQM‹Ê_g«Gõ\ºõ§∆âxXµC=:∞ÇΩ’òÑÀ9µ<qÁ–$–à¸ˆFÌ.@r9{{i/»∆f„v˙õÁNSæ√Åçàeq}9W€Éu“I aG.e⁄MÌmÙ3a◊Œø8±HÉ˙}÷
˛µÆAéÜ„Ûi0ˆbæ„=Õÿ~…P U-yoÜÓ˜!·Z’—Ò∑¬EmÙ8Ô´añI9.ÿqø¨/3gÒ;cınÃ&ˇô0	Fmieƒ¨6~HÇ∞öâXwÚ>yÙàsòÎ–1$|Ω„v•S<˚Ø\ ÛÅbw
üﬁ,'l˜ÿ˜,Œ(CZõ©óôçâz¬,	 )ÔÒå˝]#ƒ|ªŸG∂æÏµ„ ∏πÙ˙)Hf÷åœá©‹‚2üÈÎö"y»ráâk⁄.m‹ÊsÉÜU[◊'òÙ©3X<Ø:M[Ò—∏V?ryQVƒF¨∏X“W2Ä¿ÜÕÜ±KÁôòê∂»Në]ã9WOƒúJ¬2†#Oø(Y	…â7Ø=4Ïñ§äÄÒôåLØ√är¯,2ÌN≠I$ùR“í∂~f@FËÁZÚNríÆ=¿iÆËx#yTä9T‰RÚ»pœ˜á=ƒîRxŸB’∂wMùRQïIı<Ö°≥¥’ÇË©$A9=`ó–›ÍX‹iO!Ù\eöQ5ønÄÊ:*±hûÂÏ¬ì≈ßàhm¿◊§T&H
N)C5´≥}I%[Cöµô‰1.ª_‚∏;√#ñ¯˚a⁄È:Èc;Îˆ3K˙⁄Â«J‰Êb]≠¨·›S‰ˆã˛a5Î¬óø-†uÇ~'Î//== CallGraph.h - AST-based Call graph  ------------------------*- C++ -*--==//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
//  This file declares the AST-based CallGraph.
//
//  A call graph for functions whose definitions/bodies are available in the
//  current translation unit. The graph has a "virtual" root node that contains
//  edges to all externally available functions.
//===----------------------------------------------------------------------===//

#ifndef LLVM_CLANG_ANALYSIS_CALLGRAPH_H
#define LLVM_CLANG_ANALYSIS_CALLGRAPH_H

#include "clang/AST/DeclBase.h"
#include "clang/AST/RecursiveASTVisitor.h"
#include "llvm/ADT/DenseMap.h"
#include "llvm/ADT/GraphTraits.h"
#include "llvm/ADT/SetVector.h"

namespace clang {
class CallGraphNode;

/// \brief The AST-based call graph.
///
/// The call graph extends itself with the given declarations by implementing
/// the recursive AST visitor, which constructs the graph by visiting the given
/// declarations.
class CallGraph : public RecursiveASTVisitor<CallGraph> {
  friend class CallGraphNode;

  typedef llvm::DenseMap<const Decl *, CallGraphNode *> FunctionMapTy;

  /// FunctionMap owns all CallGraphNodes.
  FunctionMapTy FunctionMap;

  /// This is a virtual root node that has edges to all the functions.
  CallGraphNode *Root;

public:
  CallGraph();
  ~CallGraph();

  /// \brief Populate the call graph with the functions in the given
  /// declaration.
  ///
  /// Recursively walks the declaration to find all the dependent Decls as well.
  void addToCallGraph(Decl *D) {
    TraverseDecl(D);
  }

  /// \brief Determine if a declaration should be included in the graph.
  static bool includeInGraph(const Decl *D);

  /// \brief Lookup the node for the given declaration.
  CallGraphNode *getNode(const Decl *) const;

  /// \brief Lookup the node for the given declaration. If none found, insert
  /// one into the graph.
  CallGraphNode *getOrInsertNode(Decl *);

  /// Iterators through all the elements in the graph. Note, this gives
  /// non-deterministic order.
  typedef FunctionMapTy::iterator iterator;
  typedef FunctionMapTy::const_iterator const_iterator;
  iterator begin() { return FunctionMap.begin(); }
  iterator end()   { return FunctionMap.end();   }
  const_iterator begin() const { return FunctionMap.begin(); }
  const_iterator end()   const { return FunctionMap.end();   }

  /// \brief Get the number of nodes in the graph.
  unsigned size() const { return FunctionMap.size(); }

  /// \ brief Get the virtual root of the graph, all the functions available
  /// externally are represented as callees of the node.
  CallGraphNode *getRoot() const { return Root; }

  /// Iterators through all the nodes of the graph that have no parent. These
  /// are the unreachable nodes, which are either unused or are due to us
  /// failing to add a call edge due to the analysis imprecision.
  typedef llvm::SetVector<CallGraphNode *>::iterator nodes_iterator;
  typedef llvm::SetVector<CallGraphNode *>::const_iterator const_nodes_iterator;

  void print(raw_ostream &os) const;
  void dump() const;
  void viewGraph() const;

  void addNodesForBlocks(DeclContext *D);

  /// Part of recursive declaration visitation. We recursively visit all the
  /// declarations to collect the root functions.
  bool VisitFunctionDecl(FunctionDecl *FD) {
    // We skip function template definitions, as their semantics is
    // only determined when they are instantiated.
    if (includeInGraph(FD)) {
      // Add all blocks declared inside this function to the graph.
      addNodesForBlocks(FD);
      // If this function has external linkage, anything could call it.
      // Note, we are not precise here. For example, the function could have
      // its address taken.
      addNodeForDecl(FD, FD->isGlobal());
    }
    return true;
  }

  /// Part of recursive declaration visitation.
  bool VisitObjCMethodDecl(ObjCMethodDecl *MD) {
    if (includeInGraph(MD)) {
      addNodesForBlocks(MD);
      addNodeForDecl(MD, true);
    }
    return true;
  }

  // We are only collecting the declarations, so do not step into the bodies.
  bool TraverseStmt(Stmt *S) { return true; }

  bool shouldWalkTypesOfTypeLocs() const { return false; }

private:
  /// \brief Add the given declaration to the call graph.
  void addNodeForDecl(Decl *D, bool IsGlobal);

  /// \brief Allocate a new node in the graph.
  CallGraphNode *allocateNewNode(Decl *);
};

class CallGraphNode {
public:
  typedef CallGraphNode* CallRecord;

private:
  /// \brief The function/method declaration.
  Decl *FD;

  /// \brief The list of functions called from this node.
  SmallVector<CallRecord, 5> CalledFunctions;

public:
  CallGraphNode(Decl *D) : FD(D) {}

  typedef SmallVectorImpl<CallRecord>::iterator iterator;
  typedef SmallVectorImpl<CallRecord>::const_iterator const_iterator;

  /// Iterators through all the callees/children of the node.
  inline iterator begin() { return CalledFunctions.begin(); }
  inline iterator end()   { return CalledFunctions.end(); }
  inline const_iterator begin() const { return CalledFunctions.begin(); }
  inline const_iterator end()   const { return CalledFunctions.end();   }

  inline bool empty() const {return CalledFunctions.empty(); }
  inline unsigned size() const {return CalledFunctions.size(); }

  void addCallee(CallGraphNode *N, CallGraph *CG) {
    CalledFunctions.push_back(N);
  }

  Decl *getDecl() const { return FD; }

  void print(raw_ostream &os) const;
  void dump() const;
};

} // end clang namespace

// Graph traits for iteration, viewing.
namespace llvm {
template <> struct GraphTraits<clang::CallGraphNode*> {
  typedef clang::CallGraphNode NodeType;
  typedef clang::CallGraphNode::CallRecord CallRecordTy;
  static clang::CallGraphNode *CGNDeref(CallRecordTy P) {
    return P;
  }
  static NodeType *getEntryNode(clang::CallGraphNode *CGN) { return CGN; }
  typedef mapped_iterator<NodeType::iterator, decltype(&CGNDeref)> ChildIteratorType;
  static inline ChildIteratorType child_begin(NodeType *N) {
    return ChildIteratorType(N->begin(), &CGNDeref);
  }
  static inline ChildIteratorType child_end  (NodeType *N) {
    return ChildIteratorType(N->end(), &CGNDeref);
  }
};

template <> struct GraphTraits<const clang::CallGraphNode*> {
  typedef const clang::CallGraphNode NodeType;
  typedef NodeType::const_iterator ChildIteratorType;
  static NodeType *getEntryNode(const clang::CallGraphNode *CGN) { return CGN; }
  static inline ChildIteratorType child_begin(NodeType *N) { return N->begin();}
  static inline ChildIteratorType child_end(NodeType *N) { return N->end(); }
};

template <> struct GraphTraits<clang::CallGraph*>
  : public GraphTraits<clang::CallGraphNode*> {

  static NodeType *getEntryNode(clang::CallGraph *CGN) {
    return CGN->getRoot();  // Start at the external node!
  }
  typedef std::pair<const clang::Decl*, clang::CallGraphNode*> PairTy;

  static clang::CallGraphNode &CGdereference(PairTy P) {
    return *(P.second);
  }

  // nodes_iterator/begin/end - Allow iteration over all nodes in the graph
  typedef mapped_iterator<clang::CallGraph::iterator, decltype(&CGdereference)> nodes_iterator;

  static nodes_iterator nodes_begin(clang::CallGraph *CG) {
    return nodes_iterator(CG->begin(), &CGdereference);
  }
  static nodes_iterator nodes_end  (clang::CallGraph *CG) {
    return nodes_iterator(CG->end(), &CGdereference);
  }

  static unsigned size(clang::CallGraph *CG) {
    return CG->size();
  }
};

template <> struct GraphTraits<const clang::CallGraph*> :
  public GraphTraits<const clang::CallGraphNode*> {
  static NodeType *getEntryNode(const clang::CallGraph *CGN) {
    return CGN->getRoot();
  }
  typedef std::pair<const clang::Decl*, clang::CallGraphNode*> PairTy;

  static clang::CallGraphNode &CGdereference(PairTy P) {
    return *(P.second);
  }

  // nodes_iterator/begin/end - Allow iteration over all nodes in the graph
  typedef mapped_iterator<clang::CallGraph::const_iterator,
                          decltype(&CGdereference)> nodes_iterator;

  static nodes_iterator nodes_begin(const clang::CallGraph *CG) {
    return nodes_iterator(CG->begin(), &CGdereference);
  }
  static nodes_iterator nodes_end(const clang::CallGraph *CG) {
    return nodes_iterator(CG->end(), &CGdereference);
  }

  static unsigned size(const clang::CallGraph *CG) {
    return CG->size();
  }
};

} // end llvm namespace

#endif
                                                                                                                                                                                                                                                                                                                          ^0™∑¸_nt¸ÚJÄs®ÔX°è¶Å’j…¨»ı å#tõGtìü¢ ¿sæGÖ∫?€©Õ|ûÀ\√Ω5}¶ñùπFJXw,˙LBÊsø…ˇV‹Ö ⁄+X≥14◊‰\}⁄ÎƒŸ5¡Ôx√ZÏæ≈'ÊÛöî©ˇ8w&ÏMp»?&‚/Fêò˛™Ûtä ´gºr⁄bYo#5˘Lr0˚ŒÓÛØ3TàSl®(€?XF$Áı‹£ƒ òcßèqŸYpTPXØ◊cÍô√Ñ,∂œ¬∞Êœd6®«–~Aı¸i∑7;≈˘ëÒ¿tdT`Ê Ôå'svüó€†µÙ&ﬂ#Û+À≥Vª€Ï\Ì‹ôÌ˙ﬁö%22öì}b;¬À2è¯NK∂Pœêx,ùxã6ìyizŒµzVV⁄…AWæ®å§«sŒòlÏÊr◊ùÎN‹kä]2ÑZ3É é™Ô1éß≥ç]πÿ¯-≠&j˘à≈5c†ªWlC©öáâﬁË˝aécáùŸj"Á#µiïÓ©1C0F2≥t)(∆sæƒdÏvÛüÒêÖ:ù|’yT\%Dê!dN4†ıI„A`<ô ≈#8ˆYj˚L√⁄Äm$˘µ∆+¡[S7yÛÈBPÚWøw€\√Éê\Å[
éŸ;R¨Bp◊Fy‘Ç“z6‡”Ÿg"(íÎ3pÃ,Rˆì<≈IÖ´N¬+≠ÊeKy‰“KN◊5·m≈k,ÀjW;π˛Ë‘ƒ”©.ﬂvlF2¥Û®¢óY˘∆Ä}çë2Ha5T; |ˆüSÒÏËæ€ÍÂ ´ƒÚ"}+Àêe¢Â∞€)EFÌq@◊^„∂∑äïø,>P®tõ¶T(Æá¨9iÜØï.Ñ#R—±‚‚Ü≥ƒˆÙÊ†$∂dhéÛS≈q•ü9·)R˚ÓÓaÍ†"q‹#©ìJáÏ?¨À¿÷ÕÃC†œf]§íFÍpåÙKµm* Íü+/àü>8òÁôxP_<›„c—¿Ì9}ù—ZLÑÊ}é§∑ÓûÉ[îΩQ›oíˇ∫˘fYf¡Ñ¡E˝Ü1ûÄ|Q±√;¨_·üVq∑sS}úäaÅènèdŸ˘KL¬˝Äî‘»Û†2‡~ƒÿ#ÙR∫¥,cs≈æ‘iÖ0À )Ú&Ø1∆l'ü\t&ì7:¢f„QLÔ‘`ﬂnUâ´°›µh:ô°™Ú œ—YΩãúœ˜$a˜ÄÕËãXﬁ¢Ô©">S—ˇõ$ﬁl›9∆ÁORTy>íÚ»÷CuJLÉ¬¿Ë›eó 4•Û£†JiˇM≥ C»t:‰á¸ps¿& 45¥Rsªö )b¶í±æº]“ª”%3DÒ˙Ó]Î!d®,<Äë°d≠ÿ–òØÑ‘cqÑ4>è‰$U ±êTTjô˙*U«/~¬ﬁ–'|¢É˘SÜ’;;=wkb´HhH—Ò◊≈ö7~ù}B∫AZsœ]#à#≥ÆÚåB•ƒú gÖ7¥/wnÜÅõï]˚o9j¶ﬁ±ÖpAÃr°∑V†ÇCÈ—ë0Q∫äÙŸı˝Ü∑˘ÁÂcÂG∏§Ø;Ùµí;M‹à(ç¿îî≈˚V•Ã‚ﬁàŸG8ò&e+bö9FNÂÈ,º§%Pf{"\˜Úkg‚ÄùdDæ£C8∏†I÷Œ6m“ÅOU‡ÈèÎf‘“Ω…W÷ˆª«ôk®’Ü&åóﬁp·Àî¯L@
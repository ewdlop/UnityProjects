// This code is in the public domain -- castanyo@yahoo.es

#ifndef NV_CORE_DEBUG_H
#define NV_CORE_DEBUG_H

#include <nvcore/nvcore.h>

#if defined(HAVE_STDARG_H)
#	include <stdarg.h>	// va_list
#endif

#define NV_ABORT_DEBUG		1
#define NV_ABORT_IGNORE		2
#define NV_ABORT_EXIT		3

#undef assert	// avoid conflicts with assert method.

#define nvNoAssert(exp) \
	do { \
		(void)sizeof(exp); \
	} while(0)

#if NV_NO_ASSERT

#	define nvAssert(exp) nvNoAssert(exp)
#	define nvCheck(exp) nvNoAssert(exp)
#	define nvDebugAssert(exp) nvNoAssert(exp)
#	define nvDebugCheck(exp) nvNoAssert(exp)
#	define nvDebugBreak() nvNoAssert(0)

#else // NV_NO_ASSERT

#	if NV_CC_MSVC
		// @@ Does this work in msvc-6 and earlier?
		// @@ Do I have to include <intrin.h> ?
#		define nvDebugBreak()		__debugbreak()
		// define nvDebugBreak()		__asm int 3
#	elif NV_CC_GNUC && NV_CPU_PPC && NV_OS_DARWIN
#		define nvDebugBreak()		__asm__ volatile ("trap");
#	elif NV_CC_GNUC && NV_CPU_X86 && NV_OS_DARWIN
#		define nvDebugBreak()		__asm__ volatile ("int3");
#	elif NV_CC_GNUC && NV_CPU_X86 
#		define nvDebugBreak()		__asm__ ( "int %0" : :"I"(3) )
#	else
#		include <signal.h>
#		define nvDebugBreak()		raise(SIGTRAP); 
		// define nvDebugBreak() 		*((int *)(0)) = 0
#	endif

#	define nvAssertMacro(exp) \
		do { \
			if(!(exp)) { \
				if( nvAbort(#exp, __FILE__, __LINE__, __FUNC__) == NV_ABORT_DEBUG ) { \
					nvDebugBreak(); \
				} \
			} \
		} while(false)

#	define nvAssert(exp)	nvAssertMacro(exp)
#	define nvCheck(exp)		nvAssertMacro(exp)

#	if defined(_DEBUG)
#		define nvDebugAssert(exp)	nvAssertMacro(exp)
#		define 
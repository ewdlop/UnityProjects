      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> control supports data caching. While data is cached, the <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> retrieves data from the cache rather than from the underlying data file. When the cache expires, it retrieves data from the underlying file and re-caches the data.</para>
          <para>You can set the <see cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" /> property to create a dependency between all cache entries created by the <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> control and the key. You can programmatically invalidate all the cache entries at any time by expiring the key.</para>
          <para>Because of the properties used to create the <see cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />, it is possible that multiple <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> controls can use the same cache in scenarios where they load the same data from the same XML file and transform file and have the same <see cref="P:System.Web.UI.WebControls.XmlDataSource.CacheDuration" /> and <see cref="P:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy" /> set.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a user-defined key dependency that is linked to all data cache objects created by the data source control. All cache objects explicitly expire when the key expires.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public virtual string Data { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.ComponentModel.Design.MultilineStringEditor,System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>In declarative scenarios, the <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" /> property is specified as a multiline inner property of the <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> object. An inner property is compatible with XML data, because it enables you to format the XML data in any way and ignore character padding issues, such as padding quote characters.</para>
          <para>If both the <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> and <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" /> properties are set, the <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> property takes precedence and the data in the XML file is used instead of the XML data specified in the <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" /> property.</para>
          <para>If you change the value of the <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" /> property, the <see cref="E:System.Web.UI.IDataSource.DataSourceChanged" /> event is raised. If caching is enabled and you change the value of <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" />, the cache is invalidated.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a block of XML data that the data source control binds to.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DataFile">
      <MemberSignature Language="C#" Value="public virtual string DataFile { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.XmlDataFileEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If both the <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> and <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" /> properties are set, the <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> property takes precedence and the data in the XML file is used instead of the XML data specified in the <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" /> property.</para>
          <para>If you change the value of the <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> property, the <see cref="E:System.Web.UI.IDataSource.DataSourceChanged" /> event is raised. If caching is enabled and you change the value of <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />, the cache is invalidated.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Specifies the file name of an XML file that the data source binds to.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="EnableCaching">
      <MemberSignature Language="C#" Value="public virtual bool EnableCaching { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> control automatically caches data when the <see cref="P:System.Web.UI.WebControls.XmlDataSource.EnableCaching" /> property is set to true. By default, the <see cref="P:System.Web.UI.WebControls.XmlDataSource.CacheDuration" /> property is set to 0, which indicates an indefinite cache, and the data source will cache data until the XML file that it depends on is changed. If you set the <see cref="P:System.Web.UI.WebControls.XmlDataSource.CacheDuration" /> property to a value greater than 0, the cache stores data for that many seconds before retrieving a fresh set.</para>
          <para>If the <see cref="P:System.Web.UI.WebControls.XmlDataSource.EnableCaching" /> property is set to true and the <see cref="P:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList" /> property is set, the cache entries are not automatically invalidated when the parameters change in the transforms argument list. In that case, you must write code to invalidate the cache by setting the <see cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" /> property.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a value indicating whether the <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> control has data caching enabled.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="GetHierarchicalView">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.HierarchicalDataSourceView GetHierarchicalView (string viewPath);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Web.UI.HierarchicalDataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewPath" Type="System.String" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>You can call the <see cref="M:System.Web.UI.WebControls.XmlDataSource.GetHierarchicalView(System.String)" /> method to retrieve a <see cref="T:System.Web.UI.WebControls.XmlHierarchicalDataSourceView" /> object associated with the <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> control. If you specify <paramref name="viewPath" /> value, the <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> control returns a data source view object that represents the view on the node identified by <paramref name="viewPath" />, along with all its child nodes. If you set <paramref name="viewPath" /> to <see cref="F:System.String.Empty" />, the <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> control checks the <see cref="P:System.Web.UI.WebControls.XmlDataSource.XPath" /> property to determine the root node from which to build the data source view. If the <see cref="P:System.Web.UI.WebControls.XmlDataSource.XPath" /> property is set, the <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> control uses it to return a data source view in the same way the <paramref name="viewPath" /> expression is used. If the <see cref="P:System.Web.UI.WebControls.XmlDataSource.XPath" /> property is not set, the <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> control returns a view of all the data nodes in the XML data.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the data source view object for the <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> control. The <paramref name="viewPath" /> parameter can be an XPath expression.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns an <see cref="T:System.Web.UI.WebControls.XmlHierarchicalDataSourceView" /> object that represents a single view of the data starting with the data node identified by <paramref name="viewPath" />.</para>
        </returns>
        <param name="viewPath">
          <attribution license="cc4" from="Microsoft" modified="false" />An XPath expression that identifies a node from which the current hierarchical view is built. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="GetXmlDocument">
      <MemberSignature Language="C#" Value="public System.Xml.XmlDocument GetXmlDocument ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Xml.XmlDocument</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="M:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument" /> method for direct access to an in-memory representation of the underlying XML data.</para>
          <para>You can manipulate the returned <see cref="T:System.Xml.XmlDataDocument" /> object and then call <see cref="M:System.Web.UI.WebControls.XmlDataSource.Save" /> to persist your changes to the XML file specified by the <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> property. Several requirements must be met before the <see cref="T:System.Xml.XmlDataDocument" /> object can be saved successfully. For more information, see the <see cref="M:System.Web.UI.WebControls.XmlDataSource.Save" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Loads the XML data into memory, either directly from the underlying data storage or from the cache, and returns it in the form of an <see cref="T:System.Xml.XmlDataDocument" /> object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An <see cref="T:System.Xml.XmlDataDocument" /> object that represents the XML specified in the <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" /> property or in the file identified by the <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> property, with any transformations and <see cref="P:System.Web.UI.WebControls.XmlDataSource.XPath" /> queries applied.</para>
        </returns>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="OnTransforming">
      <MemberSignature Language="C#" Value="protected virtual void OnTransforming (EventArgs e);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="01e4f1bc-e55e-413f-98c7-6588493e5f67">Consuming Events</a></format>.</para>
          <para>The <see cref="M:System.Web.UI.WebControls.XmlDataSource.OnTransforming(System.EventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Web.UI.WebControls.XmlDataSource.Transforming" /> event before the <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> control performs an XSLT transformation on its XML data.</para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.EventArgs" /> that contains the event data. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>While the <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> control is typically used in read-only data-binding scenarios, you can use the <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> control to edit XML data in the underlying XML data file. In these scenarios, XML data is loaded from an XML file by the <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> control. You modify the <see cref="T:System.Xml.XmlDataDocument" /> in memory using the <see cref="M:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument" /> method, and then save to the XML data file by calling the <see cref="M:System.Web.UI.WebControls.XmlDataSource.Save" /> method. This editable XML scenario is possible when the following conditions are met:</para>
          <list type="bullet">
            <item>
              <para>The XML data is loaded from an XML file indicated by the <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> property, not from inline XML data specified in the <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" /> property.</para>
            </item>
            <item>
              <para>No XSLT transformation is specified in the <see cref="P:System.Web.UI.WebControls.XmlDataSource.Transform" /> or <see cref="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" /> properties.</para>
            </item>
          </list>
          <para>The <see cref="M:System.Web.UI.WebControls.XmlDataSource.Save" /> method does not handle concurrent save operations by different requests. If more than one user is editing an XML file through the <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> control, there is no guarantee that all users are operating with the same data. It is also possible for a <see cref="M:System.Web.UI.WebControls.XmlDataSource.Save" /> operation to fail due to these same concurrency issues.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Saves the XML data currently held in memory by the <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> control to disk if the <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> property is set.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.ContainsListCollection">
      <MemberSignature Language="C#" Value="bool System.ComponentModel.IListSource.ContainsListCollection { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
     
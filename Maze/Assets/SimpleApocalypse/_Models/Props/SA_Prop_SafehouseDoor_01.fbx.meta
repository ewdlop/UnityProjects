trDest,sizeInBytes,strSource, count));}
	MI_INLINE void strcpy_s(char* dest, size_t size, const char* src) {::strcpy_s(dest, size, src);}
	MI_INLINE void strcat_s(char* dest, size_t size, const char* src) {::strcat_s(dest, size, src);}
	MI_INLINE MiI32 _vsnprintf(char* dest, size_t size, const char* src, va_list arg) 
	{
		MiI32 r = ::_vsnprintf(dest, size, src, arg);

		return r;
	}
	MI_INLINE MiI32 vsprintf_s(char* dest, size_t size, const char* src, va_list arg)
	{
		MiI32 r = ::vsprintf_s(dest, size, src, arg);

		return r;
	}

	MI_INLINE MiI32 sprintf_s( char * _DstBuf, size_t _DstSize, const char * _Format, ...)
	{
		va_list arg;
		va_start( arg, _Format );
		MiI32 r = ::vsprintf_s(_DstBuf, _DstSize, _Format, arg);
		va_end(arg);

		return r;
	}
	MI_INLINE MiI32 sscanf_s( const char *buffer, const char *format,  ...)
	{
		va_list arg;
		va_start( arg, format );
		MiI32 r = ::sscanf_s(buffer, format, arg);
		va_end(arg);

		return r;
	};

	MI_INLINE void strlwr(char* str)
	{
		while ( *str )
		{
			if ( *str>='A' &&  *str<='Z' ) *str+=32;
			str++;
		}
	}

	MI_INLINE void strupr(char* str)
	{
		while ( *str )
		{
			if ( *str>='a' &&  *str<='z' ) *str-=32;
			str++;
		}
	}


}; // end of string namespace
}; // end of mimp namesapce


namespace mimp
{

	namespace intrinsics
	{
		static MI_FORCE_INLINE bool isFinite(float a)
		{
			return _finite(a) ? true : false;
		}
		static MI_FORCE_INLINE bool isFinite(double a)
		{
			return _finite(a) ? true : false;
		}

	}

};

#define MESH_IMPORT_STRING mimp::string
#define MESH_IMPORT_INTRINSICS mimp::intrinsics

#endif


#
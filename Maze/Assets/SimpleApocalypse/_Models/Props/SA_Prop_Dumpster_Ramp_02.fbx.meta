rveEditorKeyDragOperation> KeyDrag = CreateKeyDrag(MouseDownPoint->PointType);

					KeyDrag->Initialize(CurveEditor.Get(), MouseDownPoint);

					DragOperation = FCurveEditorDelayedDrag(MousePixel, MouseEvent.GetEffectingButton());
					DragOperation->DragImpl = MoveTemp(KeyDrag);

					return FReply::Handled().PreventThrottling();
				}
			}
		}
	}

	return FReply::Unhandled();
}

FReply SInteractiveCurveEditorView::OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)
{
	TSharedPtr<FCurveEditor> CurveEditor = WeakCurveEditor.Pin();
	TSharedPtr<SCurveEditorPanel> EditorPanel = CurveEditor.IsValid() ? CurveEditor->GetPanel() : nullptr;
	if (!CurveEditor || !EditorPanel)
	{
		return FReply::Unhandled();
	}

	FVector2D MousePosition = MyGeometry.AbsoluteToLocal(MouseEvent.GetScreenSpacePosition());
	if (DragOperation.IsSet())
	{
		if (DragOperation->IsDragging())
		{
			FVector2D InitialPosition = DragOperation->GetInitialPosition();
			DragOperation->DragImpl->EndDrag(InitialPosition, MousePosition, MouseEvent);

			DragOperation.Reset();
			return FReply::Handled().ReleaseMouseCapture();
		}
	}

	DragOperation.Reset();

	if (MouseEvent.GetEffectingButton() == EKeys::LeftMouseButton)
	{
		// Curve Selection Testing.
		TOptional<FCurveModelID> HitCurve = GetHoveredCurve();
		if (!HitPoint(MousePosition).IsSet() && HitCurve.IsSet() && !MouseEvent.IsAltDown())
		{
			FCurveModel* CurveModel = CurveEditor->FindCurve(HitCurve.GetValue());

			TArray<FKeyHandle> KeyHandles;
			KeyHandles.Reserve(CurveModel->GetNumKeys());
			CurveModel->GetKeys(*CurveEditor, TNumericLimits<double>::Lo
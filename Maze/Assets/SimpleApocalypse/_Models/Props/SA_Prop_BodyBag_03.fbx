//-------------------------------------------------------------
// <copyright company=’Microsoft Corporation’>
//   Copyright © Microsoft Corporation. All Rights Reserved.
// </copyright>
//-------------------------------------------------------------
// @owner=alexgor, deliant
//=================================================================
//  File:		ChartArea.cs
//
//  Namespace:	System.Web.UI.WebControls[Windows.Forms].Charting
//
//	Classes:	ChartArea
//
//  Purpose:	The ChartArea class represents one chart area within 
//              a chart image, and is used to plot one or more chart 
//              series. The number of chart series that can be plotted 
//              in a chart area is unlimited.
//
//	Reviewed:	GS - August 6, 2002
//				AG - August 7, 2002
//              AG - Microsoft 16, 2007
//
//===================================================================

#region Used namespaces
using System;
using System.Collections;
using System.Collections.Specialized;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.Data;
using System.Drawing;
using System.Drawing.Design;
using System.Drawing.Drawing2D;
using System.Globalization;
using System.Diagnostics.CodeAnalysis;

#if Microsoft_CONTROL

	using System.Windows.Forms.DataVisualization.Charting.Data;
	using System.Windows.Forms.DataVisualization.Charting.ChartTypes;
	using System.Windows.Forms.DataVisualization.Charting.Utilities;
	using System.Windows.Forms.DataVisualization.Charting.Borders3D;
	using System.Windows.Forms.DataVisualization.Charting;
	using System.ComponentModel.Design.Serialization;
	using System.Reflection;
	using System.Windows.Forms.Design;
#else
	using System.Web;
	using System.Web.UI;
	using System.Web.UI.DataVisualization.Charting;
	using System.Web.UI.DataVisualization.Charting.Data;
	using System.Web.UI.DataVisualization.Charting.ChartTypes;
	using System.Web.UI.DataVisualization.Charting.Utilities;
	using System.Web.UI.DataVisualization.Charting.Borders3D;
#endif


#endregion

#if Microsoft_CONTROL
	namespace System.Windows.Forms.DataVisualization.Charting
#else
namespace System.Web.UI.DataVisualization.Charting
#endif
{
	#region Chart area aligment enumerations

    /// <summary>
    /// An enumeration of the alignment orientations of a ChartArea
    /// </summary>
		[Flags]
		public enum AreaAlignmentOrientations
		{
			/// <summary>
            /// Chart areas are not automatically aligned.
			/// </summary>
			None = 0,

			/// <summary>
            /// Chart areas are aligned vertically.
			/// </summary>
			Vertical = 1,

			/// <summary>
            /// Chart areas are aligned horizontally.
			/// </summary>
			Horizontal = 2,

			/// <summary>
            /// Chart areas are aligned using all values (horizontally and vertically).
			/// </summary>
			All = Vertical | Horizontal
		}

        /// <summary>
        /// An enumeration of the alignment styles of a ChartArea
        /// </summary>
		[Flags]
		public enum AreaAlignmentStyles
		{
			/// <summary>
            /// Chart areas are not automatically aligned.
			/// </summary>
			None = 0,

			/// <summary>
            /// Chart areas are aligned by positions.
			/// </summary>
			Position = 1,

			/// <summary>
            /// Chart areas are aligned by inner plot positions.
			/// </summary>
			PlotPosition = 2,

            /// <summary>
            /// Chart areas are aligned by axes views.
            /// </summary>
            AxesView = 4,

#if Microsoft_CONTROL

			/// <summary>
			/// Cursor and Selection alignment.
			/// </summary>
			Cursor = 8,

			/// <summary>
			/// Complete alignment.
			/// </summary>
			All = Position | PlotPosition | Cursor | AxesView
#else // Microsoft_CONTROL

   			/// <summary>
			/// Complete alignment.
			/// </summary>
            All = Position | PlotPosition | AxesView

#endif // Microsoft_CONTROL
        }

	#endregion

	/// <summary>
	/// The ChartArea class is used to create and display a chart 
	/// area within a chart image. The chart area is a rectangular 
	/// area on a chart image.  It has 4 axes, horizontal and vertical grids. 
    /// A chart area can contain more than one different chart type.  
    /// The number of chart series that can be plotted in a chart area 
    /// is unlimited.
    /// 
    /// ChartArea class exposes all the properties and methods
    /// of its base ChartArea3D class.
	/// </summary>
		[
		DefaultProperty("Axes"),
		SRDescription("DescriptionAttributeChartArea_ChartArea"),
		]
#if ASPPERM_35
	[AspNetHostingPermission(System.Security.Permissions.SecurityAction.InheritanceDemand, Level = AspNetHostingPermissionLevel.Minimal)]
        [AspNetHostingPermission(System.Security.Permissions.SecurityAction.LinkDemand, Level = AspNetHostingPermissionLevel.Minimal)]
#endif
        public partial class ChartArea : ChartNamedElement
		{
		    #region Chart Area Fields

            /// <summary>
            /// Plot area position
            /// </summary>
            internal ElementPosition PlotAreaPosition;

			// Private data members, which store properties values
			private Axis[]					_axisArray = new Axis[4];
			private Color					_backColor = Color.Empty;
			private ChartHatchStyle			_backHatchStyle = ChartHatchStyle.None;
			private string					_backImage = "";
			private ChartImageWrapMode		_backImageWrapMode = ChartImageWrapMode.Tile;
			private Color					_backImageTransparentColor = Color.Empty;
			private ChartImageAlignmentStyle			_backImageAlignment = ChartImageAlignmentStyle.TopLeft;
			private GradientStyle			_backGradientStyle = GradientStyle.None;
			private Color					_backSecondaryColor = Color.Empty;
			private Color					_borderColor = Color.Black;
			private int						_borderWidth = 1;
			private ChartDashStyle			_borderDashStyle = ChartDashStyle.NotSet;
			private int						_shadowOffset = 0;
			private Color					_shadowColor = Color.FromArgb(128, 0, 0, 0);
			private ElementPosition			_areaPosition = null;
			private ElementPosition			_innerPlotPosition = null;
			internal int					IterationCounter = 0;

			private		bool				_isSameFontSizeForAllAxes = false;
			internal	float				axesAutoFontSize = 8f;

            private string                      _alignWithChartArea = Constants.NotSetValue;
			private		AreaAlignmentOrientations	_alignmentOrientation = AreaAlignmentOrientations.Vertical;
			private		AreaAlignmentStyles			_alignmentStyle = AreaAlignmentStyles.All;
			private		int						_circularSectorNumber = int.MinValue;
			private		int						_circularUsePolygons = int.MinValue;

			// Flag indicates that chart area is acurrently aligned
			internal	bool					alignmentInProcess = false;

			// Chart area position before adjustments
			internal	RectangleF				originalAreaPosition = RectangleF.Empty;

			// Chart area inner plot position before adjustments
			internal	RectangleF				originalInnerPlotPosition = RectangleF.Empty;

            // Chart area position before adjustments
            internal    RectangleF              lastAreaPosition = RectangleF.Empty;


			// Center of the circulat chart area
			internal	PointF					circularCenter = PointF.Empty;

			private		ArrayList				_circularAxisList = null;

#if Microsoft_CONTROL
			// Buffered plotting area image
			internal		Bitmap				areaBufferBitmap = null;

            private	Cursor                      _cursorX = new Cursor();
            private Cursor                      _cursorY = new Cursor();
#endif

            // Area SmartLabel class
			internal		SmartLabel			smartLabels = new SmartLabel();

			// Gets or sets a flag that specifies whether the chart area is visible.
			private			bool				_visible = true;

		#endregion

		    #region Chart Area Cursor properties

#if Microsoft_CONTROL

			/// <summary>
			/// Gets or sets a Cursor object that is used for cursors and selected ranges along the X-axis.
			/// </summary>
			[
			SRCategory("CategoryAttributeCursor"),
			Bindable(true),
			DefaultValue(null),
			SRDescription("DescriptionAttributeChartArea_CursorX"),
			DesignerSerializationVisibility(DesignerSerializationVisibility.Content),
			TypeConverter(typeof(NoNameExpandableObjectConverter)),
			]
			public Cursor CursorX
			{
				get
				{
					return _cursorX;
				}
				set
				{
					_cursorX = value;

					// Initialize chart object
					_cursorX.Initialize(this, AxisName.X);
				}
			}

			/// <summary>
			/// Gets or sets a Cursor object that is used for cursors and selected ranges along the Y-axis.
			/// </summary>
			[
			SRCategory("CategoryAttributeCursor"),
			Bindable(true),
			DefaultValue(null),
			SRDescription("DescriptionAttributeChartArea_CursorY"),
			DesignerSerializationVisibility(DesignerSerializationVisibility.Content),
			TypeConverter(typeof(NoNameExpandableObjectConverter)),
			]
			public Cursor CursorY
			{
				get
				{
					return _cursorY;
				}
				set
				{
					_cursorY = value;

					// Initialize chart object
					_cursorY.Initialize(this, AxisName.Y);
				}
			}

#endif // Microsoft_CONTROL

            #endregion

            #region Chart Area properties

			/// <summary>
			/// Gets or sets a flag that specifies whether the chart area is visible.
			/// </summary>
			/// <remarks>
			/// When this flag is set to false, all series, legends, titles and annotation objects 
			/// associated with the chart area will also be hidden.
			/// </remarks>
			/// <value>
			/// <b>True</b> if the chart area is visible; <b>false</b> otherwise.
			/// </value>
			[
			SRCategory("CategoryAttributeAppearance"),
			DefaultValue(true),
			SRDescription("DescriptionAttributeChartArea_Visible"),
			ParenthesizePropertyNameAttribute(true),
			]
			virtual public bool Visible
			{
				get
				{
					return _visible;
				}
				set
				{
					_visible = value;
					this.Invalidate();
				}
			}

			/// <summary>
            /// Gets or sets the name of the ChartArea object to which this chart area should be aligned.
			/// </summary>
			[
			SRCategory("CategoryAttributeAlignment"),
			Bindable(true),
            DefaultValue(Constants.NotSetValue),
			SRDescription("DescriptionAttributeChartArea_AlignWithChartArea"),
			TypeConverter(typeof(LegendAreaNameConverter)),
		#if !Microsoft_CONTROL
		PersistenceMode(PersistenceMode.Attribute)
		#endif
			]
			public string AlignWithChartArea
			{
				get
				{
					return _alignWithChartArea;
				}
				set
				{
                    if (value != _alignWithChartArea)
                    {
                        if (String.IsNullOrEmpty(value))
                        {
                            _alignWithChartArea = Constants.NotSetValue;
                        }
                        else
                        {
                            if (Chart != null && Chart.ChartAreas != null)
                            {
                                Chart.ChartAreas.VerifyNameReference(value);
                            }
                            _alignWithChartArea = value;
                        }
                        Invalidate();
                    }
				}
			}

			/// <summary>
            /// Gets or sets the alignment orientation of a chart area.
			/// </summary>
			[
            SRCategory("CategoryAttributeAlignment"),
			Bindable(true),
			DefaultValue(AreaAlignmentOrientations.Vertical),
			SRDescription("DescriptionAttributeChartArea_AlignOrientation"),
            Editor(Editors.FlagsEnumUITypeEditor.Editor, Editors.FlagsEnumUITypeEditor.Base),
		    #if !Microsoft_CONTROL
		    PersistenceMode(PersistenceMode.Attribute)
		    #endif
			]
			public AreaAlignmentOrientations	AlignmentOrientation
			{
				get
				{
					return _alignmentOrientation;
				}
				set
				{
					_alignmentOrientation = value;
					Invalidate();
				}
			}


			/// <summary>
			/// Gets or sets the alignment style of the ChartArea.
			/// </summary>
			[
            SRCategory("CategoryAttributeAlignment"),
			Bindable(true),
			DefaultValue(AreaAlignmentStyles.All),
			SRDescription("DescriptionAttributeChartArea_AlignType"),
            Editor(Editors.FlagsEnumUITypeEditor.Editor, Editors.FlagsEnumUITypeEditor.Base),
		#if !Microsoft_CONTROL
		PersistenceMode(PersistenceMode.Attribute)
		#endif
			]
			public AreaAlignmentStyles AlignmentStyle
			{
				get
				{
					return _alignmentStyle;
				}
				set
				{
					_alignmentStyle = value;
					Invalidate();
				}
			}

			/// <summary>
            /// Gets or sets an array that represents all axes for a chart area.
			/// </summary>
			[
			SRCategory("CategoryAttributeAxes"),
			Bindable(true),
			SRDescription("DescriptionAttributeChartArea_Axes"),
			TypeConverter(typeof(AxesArrayConverter)),
            Editor(Editors.AxesArrayEditor.Editor, Editors.AxesArrayEditor.Base),
			DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden),
			SerializationVisibilityAttribute(SerializationVisibility.Hidden)
			]
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays")]
			public Axis[] Axes
			{
				get
				{
					return _axisArray;
				}
				set
				{
					AxisX = value[0];
					AxisY = value[1];
					AxisX2 = value[2];
					AxisY2 = value[3];
					Invalidate();
				}
			}

			/// <summary>
			/// Avoid serialization of the axes array
			/// </summary>
            [EditorBrowsableAttribute(EditorBrowsableState.Never)]
			internal bool ShouldSerializeAxes()
			{
				return false;
			}

			/// <summary>
            /// Gets or sets an Axis object that represents the primary Y-axis. 
			/// </summary>
			[
			SRCategory("CategoryAttributeAxis"),
			Bindable(true),
			Browsable(false),
			SRDescription("DescriptionAttributeChartArea_AxisY"),
#if Microsoft_CONTROL
			DesignerSerializationVisibility(DesignerSerializationVisibility.Content), 
#else
		PersistenceMode(PersistenceMode.InnerProperty),
#endif
			TypeConverter(typeof(NoNameExpandableObjectConverter))
			]
			public Axis AxisY
			{
				get
				{
					return axisY;
				}
				set
				{
					axisY = value;
					axisY.Initialize(this, AxisName.Y);
					_axisArray[1] = axisY;
					Invalidate();
				}
			}

			/// <summary>
            /// Gets or sets an Axis object that represents the primary X-axis. 
			/// </summary>
			[
			SRCategory("CategoryAttributeAxis"),
			Bindable(true),
			Browsable(false),
			SRDescription("DescriptionAttributeChartArea_AxisX"),
#if Microsoft_CONTROL
			DesignerSerializationVisibility(DesignerSerializationVisibility.Content), 
#else
		PersistenceMode(PersistenceMode.InnerProperty),
#endif
			TypeConverter(typeof(NoNameExpandableObjectConverter))
			]
			public Axis AxisX
			{
				get
				{
					return axisX;
				}
				set
				{
					axisX = value;
					axisX.Initialize(this, AxisName.X);
					_axisArray[0] = axisX;
					Invalidate();
				}
			}

			/// <summary>
            /// Gets or sets an Axis object that represents the secondary X-axis. 
			/// </summary>
			[
			SRCategory("CategoryAttributeAxis"),
			Bindable(true),
			Browsable(false),
			SRDescription("DescriptionAttributeChartArea_AxisX2"),
#if Microsoft_CONTROL
			DesignerSerializationVisibility(DesignerSerializationVisibility.Content), 
#else
		PersistenceMode(PersistenceMode.InnerProperty),
#endif
			TypeConverter(typeof(NoNameExpandableObjectConverter))
			]
			public Axis AxisX2
			{
				get
				{
					return axisX2;
				}
				set
				{
					axisX2 = value;
					axisX2.Initialize(this, AxisName.X2);
					_axisArray[2] = axisX2;
					Invalidate();
				}
			}

			/// <summary>
            /// Gets or sets an Axis object that represents the secondary Y-axis.
			/// </summary>
			[
			SRCategory("CategoryAttributeAxis"),
			Bindable(true),
			Browsable(false),
			SRDescription("DescriptionAttributeChartArea_AxisY2"),
#if Microsoft_CONTROL
			DesignerSerializationVisibility(DesignerSerializationVisibility.Content), 
#else
		PersistenceMode(PersistenceMode.InnerProperty),
#endif
			TypeConverter(typeof(NoNameExpandableObjectConverter))
			]
			public Axis AxisY2
			{
				get
				{
					return axisY2;
				}
				set
				{
					axisY2 = value;
					axisY2.Initialize(this, AxisName.Y2);
					_axisArray[3] = axisY2;
					Invalidate();
				}
			}

			/// <summary>
            /// Gets or sets an ElementPosition object, which defines the position of a chart area object within the chart image.
			/// </summary>
			[
			SRCategory("CategoryAttributeAppearance"),
			Bindable(true),
			SRDescription("DescriptionAttributeChartArea_Position"),
#if Microsoft_CONTROL
			DesignerSerializationVisibility(DesignerSerializationVisibility.Content), 
#else
		    PersistenceMode(PersistenceMode.InnerProperty),
#endif
			NotifyParentPropertyAttribute(true),
			TypeConverter(typeof(ElementPositionConverter)),
			SerializationVisibilityAttribute(SerializationVisibility.Element)
			]
			public ElementPosition Position
			{
				get
				{	
					// Serialize only position values if Auto set to false
					if(this.Chart != null && this.Chart.serializationStatus == SerializationStatus.Saving )
					{
						if(_areaPosition.Auto)
						{
							return new ElementPosition();	
						}
						else
						{
							ElementPosition newPosition = new ElementPosition();
#if Microsoft_CONTROL
							newPosition.Auto = false;
#else
						newPosition.Auto = true;
#endif
							newPosition.SetPositionNoAuto(_areaPosition.X, _areaPosition.Y, _areaPosition.Width, _areaPosition.Height);
							return newPosition;
						}
					}
					return _areaPosition;
				}
				set
				{
					_areaPosition = value;
					_areaPosition.Parent = this;
					_areaPosition.resetAreaAutoPosition = true;
					Invalidate();
				}
			}

            /// <summary>
            /// Determoines if this position should be serialized.
            /// </summary>
            /// <returns></returns>
            internal bool ShouldSerializePosition()
            {
                return !this.Position.Auto;
            }

			/// <summary>
            /// Gets or sets an ElementPosition object, which defines the inner plot position of a chart area object.  
			/// </summary>
			[
			SRCategory("CategoryAttributeAppearance"),
			Bindable(true),
			SRDescription("DescriptionAttributeChartArea_InnerPlotPosition"),
#if Microsoft_CONTROL
			DesignerSerializationVisibility(DesignerSerializationVisibility.Content), 
#else
		    PersistenceMode(PersistenceMode.InnerProperty),
#endif
			NotifyParentPropertyAttribute(true),
			TypeConverter(typeof(ElementPositionConverter)),
			SerializationVisibilityAttribute(SerializationVisibility.Element)
			]
			public ElementPosition InnerPlotPosition
			{
				get
				{	
					// Serialize only position values if Auto set to false
                    if (this.Common != null && this.Common.Chart != null && this.Common.Chart.serializationStatus == SerializationStatus.Saving)
					{
						if(_innerPlotPosition.Auto)
						{
							return new ElementPosition();	
						}
						else
						{
							ElementPosition newPosition = new ElementPosition();
#if Microsoft_CONTROL
							newPosition.Auto = false;
#else
						newPosition.Auto = true;
#endif
							newPosition.SetPositionNoAuto(_innerPlotPosition.X, _innerPlotPosition.Y, _innerPlotPosition.Width, _innerPlotPosition.Height);
							return newPosition;
						}
					}
					return _innerPlotPosition;
				}
				set
				{
					_innerPlotPosition = value;
					_innerPlotPosition.Parent = this;
					Invalidate();
				}
			}

            /// <summary>
            /// Determoines if this position should be serialized.
            /// </summary>
            /// <returns></returns>
            internal bool ShouldSerializeInnerPlotPosition()
            {
                return !this.InnerPlotPosition.Auto;
            }

			/// <summary>
            /// Gets or sets the background color of a ChartArea object. 
			/// </summary>
			[

			SRCategory("CategoryAttributeAppearance"),
			Bindable(true),
			DefaultValue(typeof(Color), ""),
            SRDescription("DescriptionAttributeBackColor"),
			NotifyParentPropertyAttribute(true),
            TypeConverter(typeof(ColorConverter)),
            Editor(Editors.ChartColorEditor.Editor, Editors.ChartColorEditor.Base),
		#if !Microsoft_CONTROL
		PersistenceMode(PersistenceMode.Attribute)
		#endif
			]
			public Color BackColor
			{
				get
				{
					return _backColor;
				}
				set
				{
					_backColor = value;
					Invalidate();
				}
			}

			/// <summary>
            /// Gets or sets the hatching style of a ChartArea object.
			/// </summary>
			[


			SRCategory("CategoryAttributeAppearance"),
			Bindable(true),
			DefaultValue(ChartHatchStyle.None),
			NotifyParentPropertyAttribute(true),
            SRDescription("DescriptionAttributeBackHatchStyle"),
		#if !Microsoft_CONTROL
		PersistenceMode(PersistenceMode.Attribute),
		#endif
            Editor(Editors.HatchStyleEditor.Editor, Editors.HatchStyleEditor.Base)

			]
			public ChartHatchStyle BackHatchStyle
			{
				get
				{
					return _backHatchStyle;
				}
				set
				{
					_backHatchStyle = value;
					Invalidate();
				}
			}

			/// <summary>
            /// Gets or sets the background image of a ChartArea object. 
			/// </summary>
			[
			SRCategory("CategoryAttributeAppearance"),
			Bindable(true),
			DefaultValue(""),
            SRDescription("DescriptionAttributeBackImage"),
            Editor(Editors.ImageValueEditor.Editor, Editors.ImageValueEditor.Base),
#if !Microsoft_CONTROL
		PersistenceMode(PersistenceMode.Attribute),
#endif
			NotifyParentPropertyAttribute(true)
			]
			public string BackImage
			{
				get
				{
					return _backImage;
				}
				set
				{
					_backImage = value;
					Invalidate();
				}
			}

			/// <summary>
            /// Gets or sets the drawing mode of the background image of a ChartArea object.
			/// </summary>
			[
			SRCategory("CategoryAttributeAppearance"),
			Bindable(true),
			DefaultValue(ChartImageWrapMode.Tile),
			NotifyParentPropertyAttribute(true),
            SRDescription("DescriptionAttributeImageWrapMode"),
		#if !Microsoft_CONTROL
		PersistenceMode(PersistenceMode.Attribute)
		#endif
			]
			public ChartImageWrapMode BackImageWrapMode
			{
				get
				{
					return _backImageWrapMode;
				}
				set
				{
					_backImageWrapMode = value;
					Invalidate();
				}
			}

			/// <summary>
            /// Gets or sets the color of a ChartArea object's background image that will be drawn as transparent.  
			/// </summary>
			[
			SRCategory("CategoryAttributeAppearance"),
			Bindable(true),
			DefaultValue(typeof(Color), ""),
			NotifyParentPropertyAttribute(true),
            SRDescription("DescriptionAttributeImageTransparentColor"),
            TypeConverter(typeof(ColorConverter)),
            Editor(Editors.ChartColorEditor.Editor, Editors.ChartColorEditor.Base),
		#if !Microsoft_CONTROL
		PersistenceMode(PersistenceMode.Attribute)
		#endif
			]
			public Color BackImageTransparentColor
			{
				get
				{
					return _backImageTransparentColor;
				}
				set
				{
					_backImageTransparentColor = value;
					Invalidate();
				}
			}

			/// <summary>
            /// Gets or sets the alignment of a ChartArea object. 
			/// </summary>
			[
			SRCategory("CategoryAttributeAppearance"),
			Bindable(true),
			DefaultValue(ChartImageAlignmentStyle.TopLeft),
			NotifyParentPropertyAttribute(true),
            SRDescription("DescriptionAttributeBackImageAlign"),
		#if !Microsoft_CONTROL
		PersistenceMode(PersistenceMode.Attribute)
		#endif
			]
			public ChartImageAlignmentStyle BackImageAlignment
			{
				get
				{
					return _backImageAlignment;
				}
				set
				{
					_backImageAlignment = value;
					Invalidate();
				}
			}

			/// <summary>
            /// Gets or sets the orientation of a chart element's gradient, 
            /// and also determines whether or not a gradient is used.  
			/// </summary>
			[

            SRCategory("CategoryAttributeAppearance"),
			Bindable(true),
			DefaultValue(GradientStyle.None),
			NotifyParentPropertyAttribute(true),
            SRDescription("DescriptionAttributeBackGradientStyle"),
		#if !Microsoft_CONTROL
		PersistenceMode(PersistenceMode.Attribute),
		#endif
            Editor(Editors.GradientEditor.Editor, Editors.GradientEditor.Base)
			]		
			public GradientStyle BackGradientStyle
			{
				get
				{
					return _backGradientStyle;
				}
				set
				{
					_backGradientStyle = value;
					Invalidate();
				}
			}

			/// <summary>
            /// Gets or sets the secondary color of a ChartArea object.
			/// </summary>
			[

            SRCategory("CategoryAttributeAppearance"),
			Bindable(true),
			DefaultValue(typeof(Color), ""),
			NotifyParentPropertyAttribute(true),
            SRDescription("DescriptionAttributeBackSecondaryColor"),
            TypeConverter(typeof(ColorConverter)),
            Editor(Editors.ChartColorEditor.Editor, Editors.ChartColorEditor.Base),
		#if !Microsoft_CONTROL
		PersistenceMode(PersistenceMode.Attribute)
		#endif
			] 
			public Color BackSecondaryColor
			{
				get
				{
					return _backSecondaryColor;
				}
				set
				{
					_backSecondaryColor = value;
					Invalidate();
				}
			}

			/// <summary>
            /// Gets or sets the shadow color of a ChartArea object.  
			/// </summary>
			[
			SRCategory("CategoryAttributeAppearance"),
			Bindable(true),
			DefaultValue(typeof(Color), "128,0,0,0"),
            SRDescription("DescriptionAttributeShadowColor"),
			NotifyParentPropertyAttribute(true),
            TypeConverter(typeof(ColorConverter)),
            Editor(Editors.ChartColorEditor.Editor, Editors.ChartColorEditor.Base),
		#if !Microsoft_CONTROL
		PersistenceMode(PersistenceMode.Attribute)
		#endif
			]
			public Color ShadowColor
			{
				get
				{
					return _shadowColor;
				}
				set
				{
					_shadowColor = value;
					Invalidate();
				}
			}

			/// <summary>
            /// Gets or sets the shadow offset (in pixels) of a ChartArea object.
			/// </summary>
			[
			SRCategory("CategoryAttributeAppearance"),
			Bindable(true),
			DefaultValue(0),
            SRDescription("DescriptionAttributeShadowOffset"),
			NotifyParentPropertyAttribute(true),
		#if !Microsoft_CONTROL
		PersistenceMode(PersistenceMode.Attribute)
		#endif
			]
			public int ShadowOffset
			{
				get
				{
					return _shadowOffset;
				}
				set
				{
					_shadowOffset = value;
					Invalidate();
				}
			}

			/// <summary>
            /// Gets or sets the border color of a ChartArea object.
			/// </summary>
			[

            SRCategory("CategoryAttributeAppearance"),
			Bindable(true),
			DefaultValue(typeof(Color), "Black"),
            SRDescription("DescriptionAttributeBorderColor"),
			NotifyParentPropertyAttribute(true),
            TypeConverter(typeof(ColorConverter)),
            Editor(Editors.ChartColorEditor.Editor, Editors.ChartColorEditor.Base),
		#if !Microsoft_CONTROL
		PersistenceMode(PersistenceMode.Attribute)
		#endif
			]
			public Color BorderColor
			{
				get
				{
					return _borderColor;
				}
				set
				{
					_borderColor = value;
					Invalidate();
				}
			}

			/// <summary>
            /// Gets or sets the border width of a ChartArea object.
			/// </summary>
			[

			SRCategory("CategoryAttributeAppearance"),
			Bindable(true),
			DefaultValue(1),
            SRDescription("DescriptionAttributeBorderWidth"),
			NotifyParentPropertyAttribute(true),
		#if !Microsoft_CONTROL
		PersistenceMode(PersistenceMode.Attribute)
		#endif
			]
			public int BorderWidth
			{
				get
				{
					return _borderWidth;
				}
				set
				{
					if(value < 0)
					{
                        throw (new ArgumentOutOfRangeException("value", SR.ExceptionBorderWidthIsNegative));
					}
					_borderWidth = value;
					Invalidate();
				}
			}

			/// <summary>
            /// Gets or sets the style of the border line of a ChartArea object.
			/// </summary>
			[

            SRCategory("CategoryAttributeAppearance"),
			Bindable(true),
			DefaultValue(ChartDashStyle.NotSet),
            SRDescription("DescriptionAttributeBorderDashStyle"),
			NotifyParentPropertyAttribute(true),
		#if !Microsoft_CONTROL
		PersistenceMode(PersistenceMode.Attribute)
		#endif
			]
			public ChartDashStyle BorderDashStyle
			{
				get
				{
					return _borderDashStyle;
				}
				set
				{
					_borderDashStyle = value;
					Invalidate();
				}
			}

			/// <summary>
            /// Gets or sets the unique name of a ChartArea object.
			/// </summary>
			[

			SRCategory("CategoryAttributeMisc"),
			Bindable(true),
			SRDescription("DescriptionAttributeChartArea_Name"),
			NotifyParentPropertyAttribute(true),
		#if !Microsoft_CONTROL
		PersistenceMode(PersistenceMode.Attribute)
		#endif
			]
			public override string Name
			{
				get
				{
					return base.Name;
				}
				set
				{
                    base.Name = value;
				}
			}

            /// <summary>
            /// Gets or sets a Boolean that determines if the labels of the axes for all chart area
            /// , which have LabelsAutoFit property set to true, are of equal size.  
            /// </summary>
			[
			SRCategory("CategoryAttributeAppearance"),
			Bindable(true),
			DefaultValue(false),
			SRDescription("DescriptionAttributeChartArea_EquallySizedAxesFont"),
			NotifyParentPropertyAttribute(true),
		#if !Microsoft_CONTROL
		PersistenceMode(PersistenceMode.Attribute)
		#endif
			]
			public bool IsSameFontSizeForAllAxes
			{
				get
				{
					re
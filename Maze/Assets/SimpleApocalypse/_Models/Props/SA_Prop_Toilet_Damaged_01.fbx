lSetTypeConverterEventArgs : System.Windows.Markup.XamlSetValueEventArgs
    {
        public XamlSetTypeConverterEventArgs(System.Xaml.XamlMember member, System.ComponentModel.TypeConverter typeConverter, object value, System.ComponentModel.ITypeDescriptorContext serviceProvider, System.Globalization.CultureInfo cultureInfo) : base (default(System.Xaml.XamlMember), default(object)) { }
        public System.Globalization.CultureInfo CultureInfo { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        public System.ComponentModel.ITypeDescriptorContext ServiceProvider { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        public System.ComponentModel.TypeConverter TypeConverter { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        public override void CallBase() { }
    }
    public partial class XamlSetValueEventArgs : System.EventArgs
    {
        public XamlSetValueEventArgs(System.Xaml.XamlMember member, object value) { }
        public bool Handled { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public System.Xaml.XamlMember Member { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        public object Value { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        public virtual void CallBase() { }
    }
    [System.Windows.Markup.ContentPropertyAttribute("Text")]
    public sealed partial class XData
    {
        public XData() { }
        public string Text { get { throw null; } set { } }
        public object XmlReader { get { throw null; } set { } }
    }
    [System.AttributeUsageAttribute(System.AttributeTargets.Class, AllowMultiple=false)]
    [System.Runtime.CompilerServices.TypeForwardedFromAttribute("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
    public sealed partial class XmlLangPropertyAttribute : System.Attribute
    {
        public XmlLangPropertyAttribute(string name) { }
        public string Name { get { throw null; } }
    }
    [System.AttributeUsageAttribute(System.AttributeTargets.Assembly, AllowMultiple=true)]
    [System.Runtime.CompilerServices.TypeForwardedFromAttribute("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
    public sealed partial class XmlnsCompatibleWithAttribute : System.Attribute
    {
        public XmlnsCompatibleWithAttribute(string oldNamespace, string newNamespace) { }
        public string NewNamespace { get { throw null; } }
        public string OldNamespace { get { throw null; } }
    }
    [System.AttributeUsageAttribute(System.AttributeTargets.Assembly, AllowMultiple=true)]
    [System.Runtime.CompilerServices.TypeForwardedFromAttribute("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
    public sealed partial class XmlnsDefinitionAttribute : System.Attribute
    {
        public XmlnsDefinitionAttribute(string xmlNamespace, string clrNamespace) { }
        public string AssemblyName { get { throw null; } set { } }
        public string ClrNamespace { get { throw null; } }
        public string XmlNamespace { get { throw null; } }
    }
    [System.AttributeUsageAttribute(System.AttributeTargets.Assembly, AllowMultiple=true)]
    [System.Runtime.CompilerServices.TypeForwardedFromAttribute("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
    public sealed partial class XmlnsPrefixAttribute : System.Attribute
    {
        public XmlnsPrefixAttribute(string xmlNamespace, string prefix) { }
        public string Prefix { get { throw null; } }
        public string XmlNamespace { get { throw null; } }
    }
}
namespace System.Xaml
{
    public partial class AmbientPropertyValue
    {
        public AmbientPropertyValue(System.Xaml.XamlMember property, object value) { }
        public System.Xaml.XamlMember RetrievedProperty { get { throw null; } }
        public object Value { get { throw null; } }
    }
    public partial class AttachableMemberIdentifier : System.IEquatable<System.Xaml.AttachableMemberIdentifier>
    {
        public AttachableMemberIdentifier(System.Type declaringType, string memberName) { }
        public System.Type DeclaringType { get { throw null; } }
        public string MemberName { get { throw null; } }
        public override bool Equals(object obj) { throw null; }
        public bool Equals(System.Xaml.AttachableMemberIdentifier other) { throw null; }
        public override int GetHashCode() { throw null; }
        public static bool operator ==(System.Xaml.AttachableMemberIdentifier left, System.Xaml.AttachableMemberIdentifier right) { throw null; }
        public static bool operator !=(System.Xaml.AttachableMemberIdentifier left, System.Xaml.AttachableMemberIdentifier right) { throw null; }
        public override string ToString() { throw null; }
    }
    public static partial class AttachablePropertyServices
    {
        public static void CopyPropertiesTo(object instance, System.Collections.Generic.KeyValuePair<System.Xaml.AttachableMemberIdentifier, object>[] array, int index) { }
        public static int GetAttachedPropertyCount(object instance) { throw null; }
        public static bool RemoveProperty(object instance, System.Xaml.AttachableMemberIdentifier name) { throw null; }
        public static void SetProperty(object instance, System.Xaml.AttachableMemberIdentifier name, object value) { }
        public static bool TryGetProperty(object instance, System.Xaml.AttachableMemberIdentifier name, out object value) { throw null; }
        public static bool TryGetProperty<T>(object instance, System.Xaml.AttachableMemberIdentifier name, out T value) { throw null; }
    }
    public partial interface IAmbientProvider
    {
        System.Collections.Generic.IEnumerable<System.Xaml.AmbientPropertyValue> GetAllAmbientValues(System.Collections.Generic.IEnumerable<System.Xaml.XamlType> ceilingTypes, bool searchLiveStackOnly, System.Collections.Generic.IEnumerable<System.Xaml.XamlType> types, params System.Xaml.XamlMember[] properties);
        System.Collections.Generic.IEnumerable<System.Xaml.AmbientPropertyValue> GetAllAmbientValues(System.Collections.Generic.IEnumerable<System.Xaml.XamlType> ceilingTypes, params System.Xaml.XamlMember[] properties);
        System.Collections.Generic.IEnumerable<object> GetAllAmbientValues(params System.Xaml.XamlType[] types);
        System.Xaml.AmbientPropertyValue GetFirstAmbientValue(System.Collections.Generic.IEnumerable<System.Xaml.XamlType> ceilingTypes, params System.Xaml.XamlMember[] properties);
        object GetFirstAmbientValue(params System.Xaml.XamlType[] types);
    }
    public partial interface IAttachedPropertyStore
    {
        int PropertyCount { get; }
        void CopyPropertiesTo(System.Collections.Generic.KeyValuePair<System.Xaml.AttachableMemberIdentifier, object>[] array, int index);
        bool RemoveProperty(System.Xaml.AttachableMemberIdentifier attachableMemberIdentifier);
        void SetProperty(System.Xaml.AttachableMemberIdentifier attachableMemberIdentifier, object value);
        bool TryGetProperty(System.Xaml.AttachableMemberIdentifier attachableMemberIdentifier, out object value);
    }
    public partial interface IDestinationTypeProvider
    {
        System.Type GetDestinationType();
    }
    public partial interface INamespacePrefixLookup
    {
        string LookupPrefix(string ns);
    }
    public partial interface IRootObjectProvider
    {
        object RootObject { get; }
    }
    public partial interface IXamlIndexingReader
    {
        int Count { get; }
        int CurrentIndex { get; set; }
    }
    public partial interface IXamlLineInfo
    {
        bool HasLineInfo { get; }
        int LineNumber { get; }
        int LinePosition { get; }
    }
    public partial interface IXamlLineInfoConsumer
    {
        bool ShouldProvideLineInfo { get; }
        void SetLineInfo(int lineNumber, int linePosition);
    }
    public partial interface IXamlNameProvider
    {
        string GetName(object value);
    }
    public partial interface IXamlNameResolver
    {
        bool IsFixupTokenAvailable { get; }
        event System.EventHandler OnNameScopeInitializationComplete;
        System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, object>> GetAllNamesAndValuesInScope();
        object GetFixupToken(System.Collections.Generic.IEnumerable<string> names);
        object GetFixupToken(System.Collections.Generic.IEnumerable<string> names, bool canAssignDirectly);
        object Resolve(string name);
        object Resolve(string name, out bool isFullyInitialized);
    }
    public partial interface IXamlNamespaceResolver
    {
        string GetNamespace(string prefix);
        System.Collections.Generic.IEnumerable<System.Xaml.NamespaceDeclaration> GetNamespacePrefixes();
    }
    public partial interface IXamlObjectWriterFactory
    {
        System.Xaml.XamlObjectWriterSettings GetParentSettings();
        System.Xaml.XamlObjectWriter GetXamlObjectWriter(System.Xaml.XamlObjectWriterSettings settings);
    }
    public partial interface IXamlSchemaContextProvider
    {
        System.Xaml.XamlSchemaContext SchemaContext { get; }
    }
    [System.Diagnostics.DebuggerDisplayAttribute("Prefix={Prefix} Namespace={Namespace}")]
    public partial class NamespaceDeclaration
    {
        public NamespaceDeclaration(string ns, string prefix) { }
        public string Namespace { get { throw null; } }
        public string Prefix { get { throw null; } }
    }
    public partial class XamlBackgroundReader : System.Xaml.XamlReader, System.Xaml.IXamlLineInfo
    {
        public XamlBackgroundReader(System.Xaml.XamlReader wrappedReader) { }
        public bool HasLineInfo { get { throw null; } }
        public override bool IsEof { get { throw null; } }
        public int LineNumber { get { throw null; } }
        public int LinePosition { get { throw null; } }
        public override System.Xaml.XamlMember Member { get { throw null; } }
        public override System.Xaml.NamespaceDeclaration Namespace { get { throw null; } }
        public override System.Xaml.XamlNodeType NodeType { get { throw null; } }
        public override System.Xaml.XamlSchemaContext SchemaContext { get { throw null; } }
        public override System.Xaml.XamlType Type { get { throw null; } }
        public override object Value { get { throw null; } }
        protected override void Dispose(bool disposing) { }
        public override bool Read() { throw null; }
        public void StartThread() { }
        public void StartThread(string threadName) { }
    }
    public abstract partial class XamlDeferringLoader
    {
        protected XamlDeferringLoader() { }
        public abstract object Load(System.Xaml.XamlReader xamlReader, System.IServiceProvider serviceProvider);
        public abstract System.Xaml.XamlReader Save(object value, System.IServiceProvider serviceProvider);
    }
    public partial class XamlDirective : System.Xaml.XamlMember
    {
        public XamlDirective(System.Collections.Generic.IEnumerable<string> xamlNamespaces, string name, System.Xaml.XamlType xamlType, System.Xaml.Schema.XamlValueConverter<System.ComponentModel.TypeConverter> typeConverter, System.Xaml.Schema.AllowedMemberLocations allowedLocation) : base (default(string), default(System.Xaml.XamlType), default(bool)) { }
        public XamlDirective(string xamlNamespace, string name) : base (default(string), default(System.Xaml.XamlType), default(bool)) { }
        public System.Xaml.Schema.AllowedMemberLocations AllowedLocation { get { throw null; } }
        public override int GetHashCode() { throw null; }
        public override System.Collections.Generic.IList<string> GetXamlNamespaces() { throw null; }
        protected sealed override System.Reflection.ICustomAttributeProvider LookupCustomAttributeProvider() { throw null; }
        protected sealed override System.Xaml.Schema.XamlValueConverter<System.Xaml.XamlDeferringLoader> LookupDeferringLoader() { throw null; }
        protected sealed override System.Collections.Generic.IList<System.Xaml.XamlMember> LookupDependsOn() { throw null; }
        protected sealed override System.Xaml.Schema.XamlMemberInvoker LookupInvoker() { throw null; }
        protected sealed override bool LookupIsAmbient() { throw null; }
        protected sealed override bool LookupIsEvent() { throw null; }
        protected sealed override bool LookupIsReadOnly() { throw null; }
        protected sealed override bool LookupIsReadPublic() { throw null; }
        protected sealed override bool LookupIsUnknown() { throw null; }
        protected sealed override bool LookupIsWriteOnly() { throw null; }
        protected sealed override bool LookupIsWritePublic() { throw null; }
        protected sealed override System.Xaml.XamlType LookupTargetType() { throw null; }
        protected sealed override System.Xaml.XamlType LookupType() { throw null; }
        protected sealed override System.Xaml.Schema.XamlValueConverter<System.ComponentModel.TypeConverter> LookupTypeConverter() { throw null; }
        protected sealed override System.Reflection.MethodInfo LookupUnderlyingGetter() { throw null; }
        protected sealed override System.Reflection.MemberInfo LookupUnderlyingMember() { throw null; }
        protected sealed override System.Reflection.MethodInfo LookupUnderlyingSetter() { throw null; }
        public override string ToString() { throw null; }
    }
    [System.SerializableAttribute]
    public partial class XamlDuplicateMemberException : System.Xaml.XamlException
    {
        public XamlDuplicateMemberException() { }
        protected XamlDuplicateMemberException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
        public XamlDuplicateMemberException(string message) { }
        public XamlDuplicateMemberException(string message, System.Exception innerException) { }
        public XamlDuplicateMemberException(System.Xaml.XamlMember member, System.Xaml.XamlType type) { }
        public System.Xaml.XamlMember DuplicateMember { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public System.Xaml.XamlType ParentType { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        [System.Security.SecurityCriticalAttribute]
        public override void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
    }
    [System.SerializableAttribute]
    public partial class XamlException : System.Exception
    {
        public XamlException() { }
        protected XamlException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
        public XamlException(string message) { }
        public XamlException(string message, System.Exception innerException) { }
        public XamlException(string message, System.Exception innerException, int lineNumber, int linePosition) { }
        public int LineNumber { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]protected set { } }
        public int LinePosition { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]protected set { } }
        public override string Message { get { throw null; } }
        [System.Security.SecurityCriticalAttribute]
        public override void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
    }
    [System.SerializableAttribute]
    public partial class XamlInternalException : System.Xaml.XamlException
    {
        public XamlInternalException() { }
        protected XamlInternalException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
        public XamlInternalException(string message) { }
        public XamlInternalException(string message, System.Exception innerException) { }
    }
    public static partial class XamlLanguage
    {
        public const string Xaml2006Namespace = "http://schemas.microsoft.com/winfx/2006/xaml";
        public const string Xml1998Namespace = "http://www.w3.org/XML/1998/namespace";
        public static System.Collections.ObjectModel.ReadOnlyCollection<System.Xaml.XamlDirective> AllDirectives { get { throw null; } }
        public static System.Collections.ObjectModel.ReadOnlyCollection<System.Xaml.XamlType> AllTypes { get { throw null; } }
        public static System.Xaml.XamlDirective Arguments { get { throw null; } }
        public static System.Xaml.XamlType Array { get { throw null; } }
        public static System.Xaml.XamlDirective AsyncRecords { get { throw null; } }
        public static System.Xaml.XamlDirective Base { get { throw null; } }
        public static System.Xaml.XamlType Boolean { get { throw null; } }
        public static System.Xaml.XamlType Byte { get { throw null; } }
        public static System.Xaml.XamlType Char { get { throw null; } }
        public static System.Xaml.XamlDirective Class { get { throw null; } }
        public static System.Xaml.XamlDirective ClassAttributes { get { throw null; } }
        public static System.Xaml.XamlDirective ClassModifier { get { throw null; } }
        public static System.Xaml.XamlDirective Code { get { throw null; } }
        public static System.Xaml.XamlDirective ConnectionId { get { throw null; } }
        public static System.Xaml.XamlType Decimal { get { throw null; } }
        public static System.Xaml.XamlType Double { get { throw null; } }
        public static System.Xaml.XamlDirective FactoryMethod { get { throw null; } }
        public static System.Xaml.XamlDirective FieldModifier { get { throw null; } }
        public static System.Xaml.XamlDirective Initialization { get { throw null; } }
        public static System.Xaml.XamlType Int16 { get { throw null; } }
        public static System.Xaml.XamlType Int32 { get { throw null; } }
        public static System.Xaml.XamlType Int64 { get { throw null; } }
        public static System.Xaml.XamlDirective Items { get { throw null; } }
        public static System.Xaml.XamlDirective Key { get { throw null; } }
        public static System.Xaml.XamlDirective Lang { get { throw null; } }
        public static System.Xaml.XamlType Member { get { throw null; } }
        public static System.Xaml.XamlDirective Members { get { throw null; } }
        public static System.Xaml.XamlDirective Name { get { throw null; } }
        public static System.Xaml.XamlType Null { get { throw null; } }
        public static System.Xaml.XamlType Object { get { throw null; } }
        public static System.Xaml.XamlDirective PositionalParameters { get { throw null; } }
        public static System.Xaml.XamlType Property { get { throw null; } }
        public static System.Xaml.XamlType Reference { get { throw null; } }
        public static System.Xaml.XamlDirective Shared { get { throw null; } }
        public static System.Xaml.XamlType Single { get { throw null; } }
        public static System.Xaml.XamlDirective Space { get { throw null; } }
        public static System.Xaml.XamlType Static { get { throw null; } }
        public static System.Xaml.XamlType String { get { throw null; } }
        public static System.Xaml.XamlDirective Subclass { get { throw null; } }
        public static System.Xaml.XamlDirective SynchronousMode { get { throw null; } }
        public static System.Xaml.XamlType TimeSpan { get { throw null; } }
        public static System.Xaml.XamlType Type { get { throw null; } }
        public static System.Xaml.XamlDirective TypeArguments { get { throw null; } }
        public static System.Xaml.XamlDirective Uid { get { throw null; } }
        public static System.Xaml.XamlDirective UnknownContent { get { throw null; } }
        public static System.Xaml.XamlType Uri { get { throw null; } }
        public static System.Collections.Generic.IList<string> XamlNamespaces { get { throw null; } }
        public static System.Xaml.XamlType XData { get { throw null; } }
        public static System.Collections.Generic.IList<string> XmlNamespaces { get { throw null; } }
    }
    public partial class XamlMember : System.IEquatable<System.Xaml.XamlMember>
    {
        public XamlMember(System.Reflection.EventInfo eventInfo, System.Xaml.XamlSchemaContext schemaContext) { }
        public XamlMember(System.Reflection.EventInfo eventInfo, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.Schema.XamlMemberInvoker invoker) { }
        public XamlMember(System.Reflection.PropertyInfo propertyInfo, System.Xaml.XamlSchemaContext schemaContext) { }
        public XamlMember(System.Reflection.PropertyInfo propertyInfo, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.Schema.XamlMemberInvoker invoker) { }
        public XamlMember(string attachablePropertyName, System.Reflection.MethodInfo getter, System.Reflection.MethodInfo setter, System.Xaml.XamlSchemaContext schemaContext) { }
        public XamlMember(string attachablePropertyName, System.Reflection.MethodInfo getter, System.Reflection.MethodInfo setter, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.Schema.XamlMemberInvoker invoker) { }
        public XamlMember(string attachableEventName, System.Reflection.MethodInfo adder, System.Xaml.XamlSchemaContext schemaContext) { }
        public XamlMember(string attachableEventName, System.Reflection.MethodInfo adder, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.Schema.XamlMemberInvoker invoker) { }
        public XamlMember(string name, System.Xaml.XamlType declaringType, bool isAttachable) { }
        public System.Xaml.XamlType DeclaringType { get { throw null; } }
        public System.Xaml.Schema.XamlValueConverter<System.Xaml.XamlDeferringLoa
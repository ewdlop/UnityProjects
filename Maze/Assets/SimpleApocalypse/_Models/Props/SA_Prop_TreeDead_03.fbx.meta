InstanceManagement channel, bool isTransacted, 
                Guid instanceId, string reason, AsyncCallback callback, object state)
                : base(callback, state)
            {
                this.isTransacted = isTransacted;
                this.channel = channel;

                if (Terminate(instanceId, reason))
                {
                    this.Complete(true);
                }
            }

            public static void End(IAsyncResult result)
            {
                AsyncResult.End<TerminateAsyncResult>(result);
            }

            bool Terminate(Guid instanceId, string reason)
            {
                IAsyncResult result;
                AsyncCallback callback = this.PrepareAsyncCompletion(handleEndTerminate);

                if (this.isTransacted)
                {
                    result = this.channel.BeginTransactedTerminate(instanceId, reason, callback, this);
                }
                else
                {
                    result = this.channel.BeginTerminate(instanceId, reason, callback, this);
                }

                if (result.CompletedSynchronously)
                {
                    return HandleEndTerminate(result);
                }
                return false;
            }

            static bool HandleEndTerminate(IAsyncResult result)
            {
                TerminateAsyncResult thisPtr = (TerminateAsyncResult)result.AsyncState;

                if (thisPtr.isTransacted)
                {
                    thisPtr.channel.EndTransactedTerminate(result);
                }
                else
                {
                    thisPtr.chann
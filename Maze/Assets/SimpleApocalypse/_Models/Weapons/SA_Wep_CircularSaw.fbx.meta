   && !StringUtil.EqualsIgnoreCase(wfd.cFileName, wfd.cAlternateFileName)) {
            _fileNameShort = wfd.cAlternateFileName;
        }
    }
    
    private void PrependRelativePath(string relativePathLong, string relativePathShort) {
        _fileNameLong = relativePathLong + _fileNameLong;

        // if the short form is null or empty, prepend the short relative path to the long form
        string fileName = String.IsNullOrEmpty(_fileNameShort) ? _fileNameLong : _fileNameShort;
        _fileNameShort = relativePathShort + fileName;

        // if the short form is the same as the long form, set the short form to null
        if (StringUtil.EqualsIgnoreCase(_fileNameShort, _fileNameLong)) {
            _fileNameShort = null;
        }
    }
}

//
// Wraps the Win32 API GetFileAttributesEx
// We use this api in addition to FindFirstFile because FindFirstFile
// does not work for volumes (e.g. "c:\")
//
sealed class FileAttributesData {
    internal readonly FileAttributes    FileAttributes;
    internal readonly DateTime          UtcCreationTime;
    internal readonly DateTime          UtcLastAccessTime;
    internal readonly DateTime          UtcLastWriteTime;
    internal readonly long              FileSize;

    static internal FileAttributesData NonExistantAttributesData {
        get {
            return new FileAttributesData();
        }
    }

    static internal int GetFileAttributes(string path, out FileAttributesData fad) {
        fad = null;

        UnsafeNativeMethods.WIN32_FILE_ATTRIBUTE_DATA  data;
        if (!UnsafeNativeMethods.GetFileAttributesEx(path, UnsafeNativeMethods.GetFileExInfoStandard, out data)) {
         
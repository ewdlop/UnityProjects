nection);
                command.ExecuteNonQuery();
                command = new SqlCommand("sp_detach_db", connection);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@dbname", databaseName);
                command.Parameters.AddWithValue("@skipchecks", "true");
                command.ExecuteNonQuery();
            }
            catch {
            }
            finally {
                connection.Close();
            }
        }
    }

    internal sealed class SqlConnectionHolder {
        internal SqlConnection _Connection;
        private bool _Opened;

        internal SqlConnection Connection {
            get { return _Connection; }
        }

        internal SqlConnectionHolder(string connectionString) {
            try {
                _Connection = new SqlConnection(connectionString);
                System.Web.Util.Debug.Assert(_Connection != null);
            }
            catch (ArgumentException e) {
                throw new ArgumentException(SR.GetString(SR.SqlError_Connection_String), "connectionString", e);
            }
        }

        internal void Open(HttpContext context, bool revertImpersonate) {
            if (_Opened)
                return; // Already opened

            if (revertImpersonate) {
                using (new ApplicationImpersonationContext()) {
                    Connection.Open();
                }
            }
            else {
                Connection.Open();
            }

            _Opened = true; // Open worked!
        }

        internal void Close() {
            if (!_Opened) // Not open!
              
(velocityFormat);
	bufferDesc->semanticOffsets[RenderInstanceLayoutElement::POSITION_FLOAT3]			= 0;
	bufferDesc->semanticOffsets[RenderInstanceLayoutElement::ROTATION_SCALE_FLOAT3x3] = positionElementSize;
	bufferDesc->semanticOffsets[RenderInstanceLayoutElement::VELOCITY_LIFE_FLOAT4] = positionElementSize + rotationElementSize;
	uint32_t strideInBytes = positionElementSize + rotationElementSize + velocityElementSize;
	bufferDesc->stride = strideInBytes;
	bufferDesc->maxInstances = particleCount;
	return true;
}

bool SampleApexRenderResourceManager::getSpriteLayoutData(uint32_t spriteCount, 
																	uint32_t spriteSemanticsBitmap, 
																	nvidia::apex::UserRenderSpriteBufferDesc* bufferDesc)
{
	using namespace nvidia::apex;
	if(m_particleRenderingMechanism == VERTEX_TEXTURE_FETCH)
	{
		const uint32_t TextureCount = 3;

		uint32_t width = (uint32_t)physx::PxCeil(physx::PxSqrt((float)spriteCount));
		//make sizeX >= 32 [32 is WARP_SIZE in CUDA]
		width = physx::PxMax(width, 32U);
		//compute the next highest power of 2
		width--;
		width |= width >> 1;
		width |= width >> 2;
		width |= width >> 4;
		width |= width >> 8;
		width |= width >> 16;
		width++;

		uint32_t height = (spriteCount + width - 1) / width;
		bufferDesc->textureCount = TextureCount;
		bufferDesc->textureDescs[0].layout = RenderSpriteTextureLayout::POSITION_FLOAT4;
		bufferDesc->textureDescs[1].layout = RenderSpriteTextureLayout::SCALE_ORIENT_SUBTEX_FLOAT4;
		bufferDesc->textureDescs[2].layout = RenderSpriteTextureLayout::COLOR_FLOAT4;

		for (uint32_t i = 0; i < TextureCount; ++i)
		{
			bufferDesc->textureDescs[i].width = w
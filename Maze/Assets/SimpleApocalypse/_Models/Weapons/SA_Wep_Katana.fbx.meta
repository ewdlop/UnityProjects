ppDomainAppPath, HttpRuntime.DataDirectoryName);

            string dataDir = AppDomain.CurrentDomain.GetData(s_strDataDir) as string;
            if (string.IsNullOrEmpty(dataDir)) {
                string appPath = null;

#if !FEATURE_PAL // FEATURE_PAL does not support ProcessModule
                Process p = Process.GetCurrentProcess();
                ProcessModule pm = (p != null ? p.MainModule : null);
                string exeName = (pm != null ? pm.FileName : null);

                if (!string.IsNullOrEmpty(exeName))
                    appPath = Path.GetDirectoryName(exeName);
#endif // !FEATURE_PAL

                if (string.IsNullOrEmpty(appPath))
                    appPath = Environment.CurrentDirectory;

                dataDir = Path.Combine(appPath, HttpRuntime.DataDirectoryName);
                AppDomain.CurrentDomain.SetData(s_strDataDir, dataDir, new FileIOPermission(FileIOPermissionAccess.PathDiscovery, dataDir));
            }

            return dataDir;
        }

        private static void EnsureDBFile(string connectionString) {
            string partialFileName = null;
            string fullFileName = null;
            string dataDir = GetDataDirectory();
            bool lookingForDataDir = true;
            bool lookingForDB = true;
            string[] splitedConnStr = connectionString.Split(new char[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
            bool lookingForUserInstance = !connectionString.ToUpperInvariant().Contains(s_localDbName); // We don't require UserInstance=True for LocalDb
            bool lookingForTimeout = true;

            foreach (string str in splitedConnStr) {
      
turn 64-bit output
    //
    static uint64_t Hash64(
        const void *message,  // message to hash
        size_t length,        // length of message in bytes
        uint64_t seed)        // seed
    {
        uint64_t hash1 = seed;
        Hash128(message, length, &hash1, &seed);
        return hash1;
    }

    //
    // Hash32: hash a single message in one call, produce 32-bit output
    //
    static uint32_t Hash32(
        const void *message,  // message to hash
        size_t length,        // length of message in bytes
        uint32_t seed)        // seed
    {
        uint64_t hash1 = seed, hash2 = seed;
        Hash128(message, length, &hash1, &hash2);
        return (uint32_t)hash1;
    }

    //
    // Init: initialize the context of a SpookyHash
    //
    void Init(
        uint64_t seed1,       // any 64-bit value will do, including 0
        uint64_t seed2);      // different seeds produce independent hashes

    //
    // Update: add a piece of a message to a SpookyHash state
    //
    void Update(
        const void *message,  // message fragment
        size_t length);       // length of message fragment in bytes


    //
    // Final: compute the hash for the current SpookyHash state
    //
    // This does not modify the state; you can keep updating it afterward
    //
    // The result is the same as if SpookyHash() had been called with
    // all the pieces concatenated into one message.
    //
    void Final(
        uint64_t *hash1,    // out only: first 64 bits of hash value.
        uint64_t *hash2);   // out only: second 64 bits of hash value.

    //
    // left rotate a 64-bit value by k bytes
    //
    static inline uint64_t Rot64(uint64_t x, int k)
    {
        return (x << k) | (x >> (64 - k));
    }

    //
    // This is used if the input is 96 bytes long or longer.
    //
    // The internal state is fully overwritten every 96 bytes.
    // Every input bit appears to cause at least 128 bits of entropy
    // before 96 other bytes are combined, when run forward or ba
rning() const { return severity == E_WARN; }
	int		IsError() const { return severity >= E_FAILED; }
	int		IsFatal() const { return severity == E_FATAL; }

	int		GetSeverity() const { return severity; }
	const char *	FmtSeverity() const { return severityText[severity]; }
	int		GetGeneric() const { return genericCode; }

	// Set errors, the new way

	Error &		Set( const ErrorId &id );

	Error &		Set( ErrorSeverity s, const char *fmt )
			{
			    ErrorId eid;
			    eid.code = ErrorOf( 0, 0, s, 0, 0 );
			    eid.fmt = fmt;
			    return Set( eid );
			}

	Error &		operator <<( const StrPtr &arg );
	Error &		operator <<( const StrPtr *arg );
	Error &		operator <<( const char *arg );
	Error &		operator <<( int arg );

	// Save system errors

	void		Sys( const char *op, const char *arg );
	void		Net( const char *op, const char *arg );
	void		Net2( const char *op, const char *arg );
	static bool	IsSysError(); // is there a global system error?
	static bool	IsNetError(); // is there a global network error?
	static bool	IsSysNetError(); // is there a global (system or network) error?
	static int	GetNetError(); // return the last network error code
	static void	SetNetError(int err); // set the "last" network error code
	static StrPtr &	StrNetError(StrBuf &buf); // get text of last network error
	static StrPtr &	StrError(StrBuf &buf); // get text of last system (or network) error
	static StrPtr &	StrError(StrBuf &buf, int errnum); // get text of specified error

	// Output

	int		GetErrorCount() const;
	void		LimitErrorCount();

	ErrorId *	GetId( int i ) const;

	int		CheckId( const ErrorId &id ) const
			{ return severity &&
				GetId(0)->Subsystem() == id.Subsystem() &&
				GetId(0)->SubCode()   == id.SubCode(); }

	StrDict *	GetDict();

	void		Fmt( StrBuf &buf, int opts ) const;
	void		Fmt( StrBuf *buf, int opts = EF_NEWLINE ) const 
			{ Fmt( *buf, opts ); }
	void		Fmt( int i, StrBuf &buf, int opts ) const;

	// Moving across client/server boundary
	// 0 is pre-2002.1
	// 1 is 2002.1
	// 2 is 2002.1 loopback (not used by client)

	void		Marshall0( StrBuf &out ) const;
	void		Marshall1( StrDict &out, int uniquote = 0 ) const;
	void		Marshall2( StrBuf &out ) const;

	void		UnMarshall0( const StrPtr &in );
	void		UnMarshall1( StrDict &in );
	void		UnMarshall2( const StrPtr &in );

	void		Snap();

	// Debugging

	void		Dump( const char *trace );

    private:

	// Remainder is the actual error
ame] as Assembly;
                string key = null;
                if (oldAssembly == null) {
                    key = a.FullName;
                }
                else if(oldAssembly != a) {
                    //more than one assembly with same name
                    key = a.FullName+", "+nameToAssemblyMap.Count;
                }
                if (key != null) {
                    nameToAssemblyMap.Add(key, a);
                    assemblyToNameMap.Add(a, key);
                }
            }
        }
        internal static Assembly Get(string fullName){
            return nameToAssemblyMap!=null?(Assembly)nameToAssemblyMap[fullName]:null;
        }
        internal static string GetName(Assembly a){
            return assemblyToNameMap!=null?(string)assemblyToNameMap[a]:null;
        }
    }
    internal class ReflectionAwareCodeGen {
        private const string hexDigits = "0123456789ABCDEF";
        const string arrayMemberKey = "0";
        // reflectionVariables holds mapping between a reflection entity
        // referenced in the generated code (such as TypeInfo,
        // FieldInfo) and the variable which represent the entity (and
        // initialized before).
        // The types of reflection entity and corresponding key is
        // given below.
        // ----------------------------------------------------------------------------------
        // Entity           Key
        // ----------------------------------------------------------------------------------
        // Assembly         assembly.FullName
        // Type             CodeIdentifier.EscapedKeywords(type.FullName)
        // Field            fieldName+":"+CodeIdentifier.EscapedKeywords(containingType.FullName>)
        // Property         propertyName+":"+CodeIdentifier.EscapedKeywords(containingType.FullName)
        // ArrayAccessor    "0:"+CodeIdentifier.EscapedKeywords(typeof(Array).FullName)
        // MyCollectionAccessor     "0:"+CodeIdentifier.EscapedKeywords(typeof(MyCollection).FullName)
        // ----------------------------------------------------------------------------------
        Hashtable reflectionVariables = null;
        int nextReflectionVariableNumber = 0;
        IndentedWriter writer;
        internal ReflectionAwareCodeGen(IndentedWriter writer){
            this.writer = writer;
        }
        
        internal void WriteReflectionInit(TypeScope scope){
            foreach (Type type in scope.Types) {
                TypeDesc typeDesc = scope.GetTypeDesc(type);
                if (typeDesc.UseReflection)
                    WriteTypeInfo(scope, typeDesc, type);
            }
        }
        
        string WriteTypeInfo(TypeScope scope, TypeDesc typeDesc, Type type){
            InitTheFirstTime();
            string typeFullName = typeDesc.CSharpName;
            string typeVariable = (string)reflectionVariables[typeFullName];
            if (typeVariable != null)
                return typeVariable;

            if (type.IsArray)
            {
                typeVariable = GenerateVariableName("array", typeDesc.CSharpName);
                TypeDesc elementTypeDesc = typeDesc.ArrayElementTypeDesc;
                if (elementTypeDesc.UseReflection)
                {
                    string elementTypeVariable = WriteTypeInfo(scope, elementTypeDesc, scope.GetTypeFromTypeDesc(elementTypeDesc));
                    writer.WriteLine("static "+typeof(Type).FullName+" "+typeVariable +" = " + elementTypeVariable + ".MakeArrayType();");
                }
                else
                {
                    string assemblyVariable = WriteAssemblyInfo(type);
                    writer.Write("static "+typeof(Type).FullName+" "+typeVariable +" = "+assemblyVariable+".GetType(");
                    WriteQuotedCSharpString(type.FullName);
                    writer.WriteLine(");");
                }
            }
            else
            {
                typeVariable = GenerateVariableName("type", typeDesc.CSharpName);

                Type parameterType = Nullable.GetUnderlyingType(type);
                if (parameterType != null)
                {
                    string parameterTypeVariable = WriteTypeInfo(scope, scope.GetTypeDesc(parameterType), parameterType);
                    writer.WriteLine("static "+typeof(Type).FullName+" "+typeVariable +" = typeof(System.Nullable<>).MakeGenericType(new " + typeof(Type).FullName + "[] {"+parameterTypeVariable+"});");
                }
                else
                {
                    string assemblyVariable = WriteAssemblyInfo(type);
                    writer.Write("static "+typeof(Type).FullName+" "+typeVariable +" = "+assemblyVariable+".GetType(");
                    WriteQuotedCSharpString(type.FullName);
                    writer.WriteLine(");");
                }
            }
            
            reflectionVariables.Add(typeFullName, typeVariable);

            TypeMapping mapping = scope.GetTypeMappingFromTypeDesc(typeDesc);
            if (mapping != null)
                WriteMappingInfo(mapping, typeVariable, type);
            if (typeDesc.IsCollection || typeDesc.IsEnumerable){// Arrays use the generic item_Array
                TypeDesc elementTypeDesc = typeDesc.ArrayElementTypeDesc;
                if (elementTypeDesc.UseReflection)
                    WriteTypeInfo(scope, elementTypeDesc, scope.GetTypeFromTypeDesc(elementTypeDesc));
                WriteCollectionInfo(typeVariable, typeDesc, type);
            }
            return typeVariable;
        }

        void InitTheFirstTime(){
            if (reflectionVariables == null){
                reflectionVariables = new Hashtable();
                writer.Write(String.Format(CultureInfo.InvariantCulture, helperClassesForUseReflection,
                    "object", "string", typeof(Type).FullName,
                    typeof(FieldInfo).FullName, typeof(PropertyInfo).FullName,
                    typeof(MemberInfo).FullName, typeof(MemberTypes).FullName));

                WriteDefaultIndexerInit(typeof(IList), typeof(Array).FullName, false, false);
            }
        }
        
        void WriteMappingInfo(TypeMapping mapping, string typeVariable, Type type){
            string typeFullName = mapping.TypeDesc.CSharpName;
            if(mapping is StructMapping){
                StructMapping structMapping = mapping as StructMapping;
                for (int i = 0; i < structMapping.Members.Length; i++) {
                    MemberMapping member = structMapping.Members[i]; 
                    string memberVariable = WriteMemberInfo(type, typeFullName, typeVariable, member.Name);
                    if (member.CheckShouldPersist){
                        string memberName = "ShouldSerialize"+member.Name;
                        memberVariable = WriteMethodInfo(typeFullName, typeVariable, memberName, false);
                    }
                    if (member.CheckSpecified != SpecifiedAccessor.None) {
                        string memberName = member.Name+"Specified";
                        memberVariable = WriteMemberInfo(type, typeFullName, typeVariable, memberName);
                    }
                    if (member.ChoiceIdentifier != null){
                        string memberName = member.ChoiceIdentifier.MemberName;
                        memberVariable = WriteMemberInfo(type, typeFullName, typeVariable, memberName);
                    }
                }
            }
            else if (mapping is EnumMapping){
                FieldInfo[] enumFields = type.GetFields();
                for (int i = 0; i < enumFields.Length; i++) {
                    WriteMemberInfo(type, typeFullName, typeVariable, enumFields[i].Name);
                }
            }
        }
        void WriteCollectionInfo(string typeVariable, TypeDesc typeDesc, Type type){
            string typeFullName = CodeIdentifier.GetCSharpName(type);
            string elementTypeFullName = typeDesc.ArrayElementTypeDesc.CSharpName;
            bool elementUseReflection = typeDesc.ArrayElementTypeDesc.UseReflection;
            if (typeDesc.IsCollection) {
                WriteDefaultIndexerInit(type, typeFullName, typeDesc.UseReflection, elementUseReflection);
            }
            else if (typeDesc.IsEnumerable) {
                if (typeDesc.IsGenericInterface) {
                    WriteMethodInfo(typeFullName, typeVariable, "System.Collections.Generic.IEnumerable*", true);
                }
                else if (!typeDesc.IsPrivateImplementation) {
                    WriteMethodInfo(typeFullName, typeVariable, "GetEnumerator", true);
                }
            }
            WriteMethodInfo(typeFullName, typeVariable, "Add", false, GetStringForTypeof(elementTypeFullName, elementUseReflection));
        }

        string WriteAssemblyInfo(Type type){
            string assemblyFullName = type.Assembly.FullName;
            string assemblyVariable = (string)reflectionVariables[assemblyFullName];
            if ( assemblyVariable == null){
                int iComma = assemblyFullName.IndexOf(',');
                string assemblyName = (iComma>-1)?assemblyFullName.Substring(0, iComma):assemblyFullName;
                assemblyVariable = GenerateVariableName("assembly", assemblyName);
                //writer.WriteLine("static "+ typeof(Assembly).FullName+" "+assemblyVariable+" = "+typeof(Assembly).FullName+".Load(");
                writer.Write("static "+ typeof(Assembly).FullName+" "+assemblyVariable+" = "+"ResolveDynamicAssembly(");
                WriteQuotedCSharpString(DynamicAssemblies.GetName(type.Assembly)/*assemblyFullName*/);
                writer.WriteLine(");");
                reflectionVariables.Add(assemblyFullName, assemblyVariable);
            }
            return assemblyVariable;
        }

        string WriteMemberInfo(Type type, string escapedName, string typeVariable, string memberName){
            MemberInfo[] memberInfos = type.GetMember(memberName);
            for (int i = 0; i < memberInfos.Length; i++) {
                MemberTypes memberType = memberInfos[i].MemberType;
                if (memberType == MemberTypes.Property){
                    string propVariable = GenerateVariableName("prop", memberName);
                    writer.Write("static XSPropInfo "+propVariable+" = new XSPropInfo("+typeVariable+", ");
                    WriteQuotedCSharpString(memberName);
                    writer.WriteLine(");");
                    reflectionVariables.Add(memberName+":"+escapedName, propVariable);
                    return propVariable;
                }
                else if (memberType == MemberTypes.Field){
                    string fieldVariable = GenerateVariableName("field", memberName);
                    writer.Write("static XSFieldInfo "+fieldVariable+" = new XSFieldInfo("+typeVariable+", ");
                    WriteQuotedCSharpString(memberName);
                    writer.WriteLine(");");
                    reflectionVariables.Add(memberName+":"+escapedName, fieldVariable);
                    return fieldVariable;
                }
            }
            throw new InvalidOperationException(Res.GetString(Res.XmlSerializerUnsupportedType, memberInfos[0].ToString()));
        }

        string WriteMethodInfo(string escapedName, string typeVariable, string memberName, bool isNonPublic, params string[] paramTypes){
            string methodVariable = GenerateVariableName("method", memberName);
            writer.Write("static "+typeof(MethodInfo).FullName+" "+methodVariable+" = "+typeVariable+".GetMethod(");
            WriteQuotedCSharpString(memberName);
            writer.Write(", ");

            string bindingFlags = typeof(BindingFlags).FullName;
            writer.Write(bindingFlags); 
            writer.Write(".Public | "); 
            writer.Write(bindingFlags); 
            writer.Write(".Instance | "); 
            writer.Write(bindingFlags); 
            writer.Write(".Static"); 

            if (isNonPublic) {
                writer.Write(" | "); 
                writer.Write(bindingFlags); 
                writer.Write(".NonPublic"); 
            }
            writer.Write(", null, "); 
            writer.Write("new "+typeof(Type).FullName+"[] { ");
            for(int i=0;i<paramTypes.Length;i++){
                writer.Write(paramTypes[i]);
                if(i < (paramTypes.Length-1))
                    writer.Write(", ");
            }
            writer.WriteLine("}, null);");
            reflectionVariables.Add(memberName+":"+escapedName, methodVariable);
            return methodVariable;
        }

        string WriteDefaultIndexerInit(Type type, string escapedName, bool collectionUseReflection, bool elementUseReflection){
            string itemVariable = GenerateVariableName("item", escapedName);
            PropertyInfo defaultIndexer = TypeScope.GetDefaultIndexer(type, null);
            writer.Write("static XSArrayInfo ");
            writer.Write(itemVariable);
            writer.Write("= new XSArrayInfo(");
            writer.Write(GetStringForTypeof(CodeIdentifier.GetCSharpName(type), collectionUseReflection));
            writer.Write(".GetProperty(");
            WriteQuotedCSharpString(defaultIndexer.Name);
            writer.Write(",");
            //defaultIndexer.PropertyType is same as TypeDesc.ElementTypeDesc
            writer.Write(GetStringForTypeof(CodeIdentifier.GetCSharpName(defaultIndexer.PropertyType), elementUseReflection));
            writer.Write(",new ");
            writer.Write(typeof(Type[]).FullName);
            writer.WriteLine("{typeof(int)}));");
            reflectionVariables.Add(arrayMemberKey+":" + escapedName, itemVariable);
            return itemVariable;
        }
        
        private string GenerateVariableName(string prefix, string fullName){
            ++nextReflectionVariableNumber;
            return prefix+nextReflectionVariableNumber+"_"+
                CodeIdentifier.MakeValidInternal(fullName.Replace('.','_'));
        }
        internal string GetReflectionVariable(string typeFullName, string memberName){
            string key;
            if(memberName == null)
                key = typeFullName;
            else
                key = memberName+":"+typeFullName;
            return (string)reflectionVariables[key];
        }
        

        internal string GetStringForMethodInvoke(string obj, string escapedTypeName, string methodName, bool useReflection, params string[] args){
            StringBuilder sb = new StringBuilder();
            if (useReflection){
                sb.Append(GetReflectionVariable(escapedTypeName, methodName));
                sb.Append(".Invoke(");
                sb.Append(obj);
                sb.Append(", new object[] {");
            }
            else{
                sb.Append(obj);
                sb.Append(".@");
                sb.Append(methodName);
                sb.Append("(");
            }
            for(int i=0;i<args.Length;i++){
                if(i != 0)
                    sb.Append(", ");
                sb.Append(args[i]);
            }
            if (useReflection)
                sb.Append( "})");
            else
                sb.Append( ")");
            return sb.ToString();
        }

        internal string GetStringForEnumCompare(EnumMapping mapping, string memberName, bool useReflection){
            if(!useReflection){
                CodeIdentifier.CheckValidIdentifier(memberName);
                return mapping.TypeDesc.CSharpName+".@"+memberName;
            }
            string memberAccess = GetStringForEnumMember(mapping.TypeDesc.CSharpName, memberName, useReflection);
            return GetStringForEnumLongValue(memberAccess, useReflection);
        }
        internal string GetStringForEnumLongValue(string variable, bool useReflection){
            if (useReflection)
                return typeof(Convert).FullName+".ToInt64("+variable+")";
            return "(("+typeof(long).FullName+")"+variable+")";
        }
        
        internal string GetStringForTypeof(string typeFullName, bool useReflection){
            if (useReflection){
                return GetReflectionVariable(typeFullName, null);
            }
            else{
                return "typeof("+typeFullName+")";
            }
        }
        internal string GetStringForMember(string obj, string memberName, TypeDesc typeDesc){
            if (!typeDesc.UseReflection)
                return obj+".@"+memberName;

            TypeDesc saveTypeDesc = typeDesc;
            while(typeDesc!=null){
                string typeFullName = typeDesc.CSharpName;
                string memberInfoName = GetReflectionVariable(typeFullName, memberName);
                if(memberInfoName != null)
                    return memberInfoName+"["+obj+"]";
                // member may be part of the basetype 
                typeDesc = typeDesc.BaseTypeDesc;
                if (typeDesc != null && !typeDesc.UseReflection)
                    return "(("+typeDesc.CSharpName+")"+obj+").@"+memberName;
            }
            //throw GetReflectionVariableException(saveTypeDesc.CSharpName,memberName); 
            // NOTE, Microsoft:Must never happen. If it does let the code
            // gen continue to help debugging what's gone wrong.
            // Eventually the compilation will fail.
            return "["+obj+"]";
        }
        /*
        Exception GetReflectionVariableException(string typeFullName, string memberName){
            string key;
            if(memberName == null)
                key = typeFullName;
            else
                key = memberName+":"+typeFullName;
            System.Text.StringBuilder sb = new System.Text.StringBuilder();
            foreach(object varAvail in reflectionVariables.Keys){
                sb.Append(varAvail.ToString());
                sb.Append("\n");
            }
            return new Exception("No reflection variable for " + key + "\nAvailable keys\n"+sb.ToString());
        }*/
        
        internal string GetStringForEnumMember(string typeFullName, string memberName, bool useReflection){
            if(!useReflection)
                return typeFullName+".@"+memberName;
            
            string memberInfoName = GetReflectionVariable(typeFullName, memberName);
            return memberInfoName+"[null]";
        }
        internal string GetStringForArrayMember(string arrayName, string subscript, TypeDesc arrayTypeDesc){
            if (!arrayTypeDesc.UseReflection){
                return arrayName+"["+subscript+"]";
            }
            string typeFullName = arrayTypeDesc.IsCollection ? arrayTypeDesc.CSharpName : typeof(Array).FullName;
            string arrayInfo = GetReflectionVariable(typeFullName, arrayMemberKey);
            return arrayInfo + "["+arrayName + ", "
s IInspectable, and we have a nested IPropertyValue, then we need
            // to pass along the request to coerce the value.
            IPropertyValue ipv = value as IPropertyValue;
            if (type == PropertyType.Inspectable && ipv != null) {
                if (typeof(T) == typeof(Byte)) {
                    return (T)(object)ipv.GetUInt8();
                }
                else if (typeof(T) == typeof(Int16)) {
                    return (T)(object)ipv.GetInt16();
                }
                else if (typeof(T) == typeof(UInt16)) {
                    return (T)(object)ipv.GetUInt16();
                }
                else if (typeof(T) == typeof(Int32)) {
                    return (T)(object)ipv.GetUInt32();
                }
                else if (typeof(T) == typeof(UInt32)) {
                    return (T)(object)ipv.GetUInt32();
                }
                else if (typeof(T) == typeof(Int64)) {
                    return (T)(object)ipv.GetInt64();
                }
                else if (typeof(T) == typeof(UInt64)) {
                    return (T)(object)ipv.GetUInt64();
                }
                else if (typeof(T) == typeof(Single)) {
                    return (T)(object)ipv.GetSingle();
                }
                else if (typeof(T) == typeof(Double)) {
                    return (T)(object)ipv.GetDouble();
                }
                else {
                    BCLDebug.Assert(false, "T in coersion function wasn't understood as a type that can be coerced - make sur
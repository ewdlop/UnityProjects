ase::cef_internal::UnwrapTraits<A>::Unwrap(arg.a),
              base::cef_internal::UnwrapTraits<B>::Unwrap(arg.b),
              base::cef_internal::UnwrapTraits<C>::Unwrap(arg.c),
              base::cef_internal::UnwrapTraits<D>::Unwrap(arg.d));
}

template<class Function, class A, class B, class C, class D, class E>
inline void DispatchToFunction(Function function,
                               const Tuple5<A, B, C, D, E>& arg) {
  (*function)(base::cef_internal::UnwrapTraits<A>::Unwrap(arg.a),
              base::cef_internal::UnwrapTraits<B>::Unwrap(arg.b),
              base::cef_internal::UnwrapTraits<C>::Unwrap(arg.c),
              base::cef_internal::UnwrapTraits<D>::Unwrap(arg.d),
              base::cef_internal::UnwrapTraits<E>::Unwrap(arg.e));
}

template<class Function, class A, class B, class C, class D, class E, class F>
inline void DispatchToFunction(Function function,
                               const Tuple6<A, B, C, D, E, F>& arg) {
  (*function)(base::cef_internal::UnwrapTraits<A>::Unwrap(arg.a),
              base::cef_internal::UnwrapTraits<B>::Unwrap(arg.b),
              base::cef_internal::UnwrapTraits<C>::Unwrap(arg.c),
              base::cef_internal::UnwrapTraits<D>::Unwrap(arg.d),
              base::cef_internal::UnwrapTraits<E>::Unwrap(arg.e),
              base::cef_internal::UnwrapTraits<F>::Unwrap(arg.f));
}

template<class Function, class A, class B, class C, class D, class E, class F,
         class G>
inline void DispatchToFunction(Function function,
                               const Tuple7<A, B, C, D, E, F, G>& arg) {
  (*function)(base::cef_internal::UnwrapTraits<A>::Unwrap(arg.a),
              base::cef_internal::UnwrapTraits<B>::Unwrap(arg.b),
              base::cef_internal::UnwrapTraits<C>::Unwrap(arg.c),
              base::cef_internal::UnwrapTraits<D>::Unwrap(arg.d),
              base::cef_internal::UnwrapTraits<E>::Unwrap(arg.e),
              base::cef_internal::UnwrapTraits<F>::Unwrap(arg.f),
              base::cef_internal::UnwrapTraits<G>::Unwrap(arg.g));
}

template<class Function, class A, class B, class C, class D, class E, class F,
         class G, class H>
inline void DispatchToFunction(Function function,
                               const Tuple8<A, B, C, D, E, F, G, H>& arg) {
  (*function)(base::cef_internal::UnwrapTraits<A>::Unwrap(arg.a),
              base::cef_internal::UnwrapTraits<B>::Unwrap(arg.b),
              base::cef_internal::UnwrapTraits<C>::Unwrap(arg.c),
              base::cef_internal::UnwrapTraits<D>::Unwrap(arg.d),
              base::cef_internal::UnwrapTraits<E>::Unwrap(arg.e),
              base::cef_internal::UnwrapTraits<F>::Unwrap(arg.f),
              base::cef_internal::UnwrapTraits<G>::Unwrap(arg.g),
              base::cef_internal::UnwrapTraits<H>::Unwrap(arg.h));
}

// Dispatchers with 0 out param (as a Tuple0).

template <class ObjT, class Method>
inline void DispatchToMethod(ObjT* obj,
                             Method method,
                             const Tuple0& arg, Tuple0*) {
  (obj->*method)();
}

template <class ObjT, class Method, class A>
inline void DispatchToMethod(ObjT* obj, Method method, const A& arg, Tuple0*) {
  (obj->*method)(base::cef_internal::UnwrapTraits<A>::Unwrap(arg));
}

template <class ObjT, class Method, class A>
inline void DispatchToMethod(ObjT* obj,
                             Method method,
                             const Tuple1<A>& arg, Tuple0*) {
  (obj->*method)(base::cef_internal::UnwrapTraits<A>::Unwrap(arg.a));
}

template<class ObjT, class Method, class A, class B>
inline void DispatchToMethod(ObjT* obj,
                             Method method,
                             const Tuple2<A, B>& arg, Tuple0*) {
  (obj->*method)(base::cef_internal::UnwrapTraits<A>::Unwrap(arg.a),
                 base::cef_internal::UnwrapTraits<B>::Unwrap(arg.b));
}

template<class ObjT, class Method, class A, class B, class C>
inline void DispatchToMethod(ObjT* obj, Method method,
                             const Tuple3<A, B, C>& arg, Tuple0*) {
  (obj->*method)(base::cef_internal::UnwrapTraits<A>::Unwrap(arg.a),
                 base::cef_internal::UnwrapTraits<B>::Unwrap(arg.b),
                 base::cef_internal::UnwrapTraits<C>::Unwrap(arg.c));
}

template<class ObjT, class Method, class A, class B, class C, class D>
inline void DispatchToMethod(ObjT* obj, Method method,
                             const Tuple4<A, B, C, D>& arg, Tuple0*) {
  (obj->*method)(base::cef_internal::UnwrapTraits<A>::Unwrap(arg.a),
                 base::cef_internal::UnwrapTraits<B>::Unwrap(arg.b),
                 base::cef_internal::UnwrapTraits<C>::Unwrap(arg.c),
                 base::cef_internal::UnwrapTraits<D>::Unwrap(arg.d));
}

template<class ObjT, class Method, class A, class B, class C, class D, class E>
inline void DispatchToMethod(ObjT* obj, Method method,
                             const Tuple5<A, B, C, D, E>& arg, Tuple0*) {
  (obj->*method)(base::cef_internal::UnwrapTraits<A>::Unwrap(arg.a),
                 base::cef_internal::UnwrapTraits<B>::Unwrap(arg.b),
                 base::cef_internal::UnwrapTraits<C>::Unwrap(arg.c),
                 base::cef_internal::UnwrapTraits<D>::Unwrap(arg.d),
                 base::cef_internal::UnwrapTraits<E>::Unwrap(arg.e));
}

template<class ObjT, class Method, class A, class B, class C, class D, class E,
         class F>
inline void DispatchToMethod(ObjT* obj, Method method,
                             const Tuple6<A, B, C, D, E, F>& arg, Tuple0*) {
  (obj->*method)(base::cef_internal::UnwrapTraits<A>::Unwrap(arg.a),
                 base::cef_internal::UnwrapTraits<B>::Unwrap(arg.b),
                 base::cef_internal::UnwrapTraits<C>::Unwrap(arg.c),
                 base::cef_internal::UnwrapTraits<D>::Unwrap(arg.d),
                 base::cef_internal::UnwrapTraits<E>::Unwrap(arg.e),
                 base::cef_internal::UnwrapTraits<F>::Unwrap(arg.f));
}

// Dispatchers with 1 out param.

template<class ObjT, class Method,
         class OutA>
inline void DispatchToMethod(ObjT* obj, Method method,
                             const Tuple0& in,
                             Tuple1<OutA>* out) {
  (obj->*method)(&out->a);
}

template<class ObjT, class Method, class InA,
         class OutA>
inline void DispatchToMethod(ObjT* obj, Method method,
                             const InA& in,
                             Tuple1<OutA>* out) {
  (obj->*method)(in, &out->a);
}

template<class ObjT, class Method, class InA,
         class OutA>
inline void DispatchToMethod(ObjT* obj, Method method,
                             const Tuple1<InA>& in,
                             Tuple1<OutA>* out) {
  (obj->*method)(base::cef_internal::UnwrapTraits<InA>::Unwrap(in.a), &out->a);
}

template<class ObjT, class Method, class InA, class InB,
         class OutA>
inline void DispatchToMethod(ObjT* obj, Method method,
                             const Tuple2<InA, InB>& in,
                             Tuple1<OutA>* out) {
  (obj->*method)(base::cef_internal::UnwrapTraits<InA>::Unwrap(in.a),
                 base::cef_internal::UnwrapTraits<InB>::Unwrap(in.b),
                 &out->a);
}

template<class ObjT, class Method, class InA, class InB, class InC,
         class OutA>
inline void DispatchToMethod(ObjT* obj, Method method,
                             const Tuple3<InA, InB, InC>& in,
                             Tuple1<OutA>* out) {
  (obj->*method)(base::cef_internal::UnwrapTraits<InA>::Unwrap(in.a),
                 base::cef_internal::UnwrapTraits<InB>::Unwrap(in.b),
                 base::cef_internal::UnwrapTraits<InC>::Unwrap(in.c),
                 &out->a);
}

template<class ObjT, class Method, class InA, class InB, class InC, class InD,
         class OutA>
inline void DispatchToMethod(ObjT* obj, Method method,
                             const Tuple4<InA, InB, InC, InD>& in,
                             Tuple1<OutA>* out) {
  (obj->*method)(base::cef_internal::UnwrapTraits<InA>::Unwrap(in.a),
                 base::cef_internal::UnwrapTraits<InB>::Unwrap(in.b),
                 base::cef_internal::UnwrapTraits<InC>::Unwrap(in.c),
                 base::cef_internal::UnwrapTraits<InD>::Unwrap(in.d),
                 &out->a);
}

template<class ObjT, class Method, class InA, class InB, class InC, class InD,
         class InE, class OutA>
inline void DispatchToMethod(ObjT* obj, Method method,
                             const Tuple5<InA, InB, InC, InD, InE>& in,
                             Tuple1<OutA>* out) {
  (obj->*method)(base::cef_internal::UnwrapTraits<InA>::Unwrap(in.a),
                 base::cef_internal::UnwrapTraits<InB>::Unwrap(in.b),
                 base::cef_internal::UnwrapTraits<InC>::Unwrap(in.c),
                 base::cef_internal::UnwrapTraits<InD>::Unwrap(in.d),
                 base::cef_internal::UnwrapTraits<InE>::Unwrap(in.e),
                 &out->a);
}

template<class ObjT, class Method,
         class InA, class InB, class InC, class InD, class InE, class InF,
         class OutA>
inline void DispatchToMethod(ObjT* obj, Method method,
                             const Tuple6<InA, InB, InC, InD, InE, InF>& in,
                             Tuple1<OutA>* out) {
  (obj->*method)(base::cef_internal::UnwrapTraits<InA>::Unwrap(in.a),
                 base::cef_internal::UnwrapTraits<InB>::Unwrap(in.b),
                 base::cef_internal::UnwrapTraits<InC>::Unwrap(in.c),
                 base::cef_internal::UnwrapTraits<InD>::Unwrap(in.d),
                 base::cef_internal::UnwrapTraits<InE>::Unwrap(in.e),
                 base::cef_internal::UnwrapTraits<InF>::Unwrap(in.f),
                 &out->a);
}

// Dispatchers with 2 out params.

template<class ObjT, class Method,
         class OutA, class OutB>
inline void DispatchToMethod(ObjT* obj, Method method,
                             const Tuple0& in,
                             Tuple2<OutA, OutB>* out) {
  (obj->*method)(&out->a, &out->b);
}

template<class ObjT, class Method, class InA,
         class OutA, class OutB>
inline void DispatchToMethod(ObjT* obj, Method method,
                             const InA& in,
                             Tuple2<OutA, OutB>* out) {
  (obj->*method)(in, &out->a, &out->b);
}

template<class ObjT, class Method, class InA,
         class OutA, class OutB>
inline void DispatchToMethod(ObjT* obj, Method method,
                             const Tuple1<InA>& in,
                             Tuple2<OutA, OutB>* out) {
  (obj->*method)(
      base::cef_internal::UnwrapTraits<InA>::Unwrap(in.a), &out->a, &out->b);
}

template<class ObjT, class Method, class InA, class InB,
         class OutA, class OutB>
inline void DispatchToMethod(ObjT* obj, Method method,
                             const Tuple2<InA, InB>& in,
                             Tuple2<OutA, OutB>* out) {
  (obj->*method)(base::cef_internal::UnwrapTraits<InA>::Unwrap(in.a),
                 base::cef_internal::UnwrapTraits<InB>::Unwrap(in.b),
                 &out->a,
                 &out->b);
}

template<class ObjT, class Method, class InA, class InB, class InC,
         class OutA, class OutB>
inline void DispatchToMethod(ObjT* obj, Method method,
                             const Tuple3<InA, InB, InC>& in,
                             Tuple2<OutA, OutB>* out) {
  (obj->*method)(base::cef_internal::UnwrapTraits<InA>::Unwrap(in.a),
                 base::cef_internal::UnwrapTraits<InB>::Unwrap(in.b),
                 base::cef_internal::UnwrapTraits<InC>::Unwrap(in.c),
                 &out->a,
                 &out->b);
}

template<class ObjT, class Method, class InA, class InB, class InC, class InD,
         class OutA, class OutB>
inline void DispatchToMethod(ObjT* obj, Method method,
                             const Tuple4<InA, InB, InC, InD>& in,
                             Tuple2<OutA, OutB>* out) {
  (obj->*method)(base::cef_internal::UnwrapTraits<InA>::Unwrap(in.a),
                 base::cef_internal::UnwrapTraits<InB>::Unwrap(in.b),
                 base::cef_internal::UnwrapTraits<InC>::Unwrap(in.c),
                 base::cef_internal::UnwrapTraits<InD>::Unwrap(in.d),
                 &out->a,
                 &out->b);
}

template<class ObjT, class Method,
         class InA, class InB, class InC, class InD, class InE,
         class OutA, class OutB>
inline void DispatchToMethod(ObjT* obj, Method method,
                             const Tuple5<InA, InB, InC, InD, InE>& in,
                             Tuple2<OutA, OutB>* out) {
  (obj->*method)(base::cef_internal::UnwrapTraits<InA>::Unwrap(in.a),
                 base::cef_internal::UnwrapTraits<InB>::Unwrap(in.b),
                 base::cef_internal::UnwrapTraits<InC>::Unwrap(in.c),
                 base::cef_internal::UnwrapTraits<InD>::Unwrap(in.d),
                 base::cef_internal::UnwrapTraits<InE>::Unwrap(in.e),
                 &out->a,
                 &out->b);
}

template<class ObjT, class Method,
         class InA, class InB, class InC, class InD, class InE, class InF,
         class OutA, class OutB>
inline void DispatchToMethod(ObjT* obj, Method method,
                             const Tuple6<InA, InB, InC, InD, InE, InF>& in,
                             Tuple2<OutA, OutB>* out) {
  (obj->*method)(base::cef_internal::UnwrapTraits<InA>::Unwrap(in.a),
                 base::cef_internal::UnwrapTraits<InB>::Unwrap(in.b),
                 base::cef_internal::UnwrapTraits<InC>::Unwrap(in.c),
                 base::cef_internal::UnwrapTraits<InD>::Unwrap(in.d),
                 base::cef_internal::UnwrapTraits<InE>::Unwrap(in.e),
                 base::cef_internal::UnwrapTraits<InF>::Unwrap(in.f),
                 &out->a,
                 &out->b);
}

// Dispatchers with 3 out params.

template<class ObjT, class Method,
         class OutA, class OutB, class OutC>
inline void DispatchToMethod(ObjT* obj, Method method,
                             const Tuple0& in,
                             Tuple3<OutA, OutB, OutC>* out) {
  (obj->*method)(&out->a, &out->b, &out->c);
}

template<class ObjT, class Method, class InA,
         class OutA, class OutB, class OutC>
inline void DispatchToMethod(ObjT* obj, Method method,
                             const InA& in,
                             Tuple3<OutA, OutB, OutC>* out) {
  (obj->*method)(in, &out->a, &out->b, &out->c);
}

template<class ObjT, class Method, class InA,
         class OutA, class OutB, class OutC>
inline void DispatchToMethod(ObjT* obj, Method method,
                             const Tuple1<InA>& in,
                             Tuple3<OutA, OutB, OutC>* out) {
  (obj->*method)(base::cef_internal::UnwrapTraits<InA>::Unwrap(in.a),
                 &out->a,
                 &out->b,
                 &out->c);
}

template<class ObjT, class Method, class InA, class InB,
         class OutA, class OutB, class OutC>
inline void DispatchToMethod(ObjT* obj, Method method,
                             const Tuple2<InA, InB>& in,
                             Tuple3<OutA, OutB, OutC>* out) {
  (obj->*method)(base::cef_internal::UnwrapTraits<InA>::Unwrap(in.a),
                 base::cef_internal::UnwrapTraits<InB>::Unwrap(in.b),
                 &out->a,
                 &out->b,
                 &out->c);
}

template<class ObjT, class Method, class InA, class InB, class InC,
         class OutA, class OutB, class OutC>
inline void DispatchToMethod(ObjT* obj, Method method,
                             const Tuple3<InA, InB, InC>& in,
                             Tuple3<OutA, OutB, OutC>* out) {
  (obj->*method)(base::cef_internal::UnwrapTraits<InA>::Unwrap(in.a),
                 base::cef_internal::UnwrapTraits<InB>::Unwrap(in.b),
                 base::cef_internal::UnwrapTraits<InC>::Unwrap(in.c),
                 &out->a,
                 &out->b,
                 &out->c);
}

template<class ObjT, class Method, class InA, class InB, class InC, class InD,
         class OutA, class OutB, class OutC>
inline void DispatchToMethod(ObjT* obj, Method method,
                             const Tuple4<InA, InB, InC, InD>& in,
                             Tuple3<OutA, OutB, OutC>* out) {
  (obj->*method)(base::cef_internal::UnwrapTraits<InA>::Unwrap(in.a),
                 base::cef_internal::UnwrapTraits<InB>::Unwrap(in.b),
                 base::cef_internal::UnwrapTraits<InC>::Unwrap(in.c),
                 base::cef_internal::UnwrapTraits<InD>::Unwrap(in.d),
                 &out->a,
                 &out->b,
                 &out->c);
}

template<class ObjT, class Method,
         class InA, class InB, class InC, class InD, class InE,
         class OutA, class OutB, class OutC>
inline void DispatchToMethod(ObjT* obj, Method method,
                             const Tuple5<InA, InB, InC, InD, InE>& in,
                             Tuple3<OutA, OutB, OutC>* out) {
  (obj->*method)(base::cef_internal::UnwrapTraits<InA>::Unwrap(in.a),
                 base::cef_internal::UnwrapTraits<InB>::Unwrap(in.b),
                 base::cef_internal::UnwrapTraits<InC>::Unwrap(in.c),
                 base::cef_internal::UnwrapTraits<InD>::Unwrap(in.d),
                 base::cef_internal::UnwrapTraits<InE>::Unwrap(in.e),
                 &out->a,
                 &out->b,
                 &out->c);
}

template<class ObjT, class Method,
         class InA, class InB, class InC, class InD, class InE, class InF,
         class OutA, class OutB, class OutC>
inline void DispatchToMethod(ObjT* obj, Method method,
                             const Tuple6<InA, InB, InC, InD, InE, InF>& in,
                             Tuple3<OutA, OutB, OutC>* out) {
  (obj->*method)(base::cef_internal::UnwrapTraits<InA>::Unwrap(in.a),
                 base::cef_internal::UnwrapTraits<InB>::Unwrap(in.b),
                 base::cef_internal::UnwrapTraits<InC>::Unwrap(in.c),
                 base::cef_internal::UnwrapTraits<InD>::Unwrap(in.d),
                 base::cef_internal::UnwrapTraits<InE>::Unwrap(in.e),
                 base::cef_internal::UnwrapTraits<InF>::Unwrap(in.f),
                 &out->a,
                 &out->b,
                 &out->c);
}

// Dispatchers with 4 out params.

template<class ObjT, class Method,
         class OutA, class OutB, class OutC, class OutD>
inline void DispatchToMethod(ObjT* obj, Method method,
                             const Tuple0& in,
                             Tuple4<OutA, OutB, OutC, OutD>* out) {
  (obj->*method)(&out->a, &out->b, &out->c, &out->d);
}

template<class ObjT, class Method, class InA,
         class OutA, class OutB, class OutC, class OutD>
inline void DispatchToMethod(ObjT* obj, Method method,
                             const InA& in,
                             Tuple4<OutA, OutB, OutC, OutD>* out) {
  (obj->*method)(base::cef_internal::UnwrapTraits<InA>::Unwrap(in),
                 &out->a,
                 &out->b,
                 &out->c,
                 &out->d);
}

template<class ObjT, class Method, class InA,
         class OutA, class OutB, class OutC, class OutD>
inline void DispatchToMethod(ObjT* obj, Method method,
                             const Tuple1<InA>& in,
                             Tuple4<OutA, OutB, OutC, OutD>* out) {
  (obj->*method)(base::cef_internal::UnwrapTraits<InA>::Unwrap(in.a),
                 &out->a,
                 &out->b,
                 &out->c,
                 &out->d);
}

template<class ObjT, class Method, class InA, class InB,
         class OutA, class OutB, class OutC, class OutD>
inline void DispatchToMethod(ObjT* obj, Method method,
                             const Tuple2<InA, InB>& in,
                             Tuple4<OutA, OutB, OutC, OutD>* out) {
  (obj->*method)(base::cef_internal::UnwrapTraits<InA>::Unwrap(in.a),
                 base::cef_internal::UnwrapTraits<InB>::Unwrap(in.b),
                 &out->a,
                 &out->b,
                 &out->c,
                 &out->d);
}

template<class ObjT, class Method, class InA, class InB, class InC,
         class OutA, class OutB, class OutC, class OutD>
inline void DispatchToMethod(ObjT* obj, Method method,
                             const Tuple3<InA, InB, InC>& in,
                             Tuple4<OutA, OutB, OutC, OutD>* out) {
  (obj->*method)(base::cef_internal::UnwrapTraits<InA>::Unwrap(in.a),
                 base::cef_internal::UnwrapTraits<InB>::Unwrap(in.b),
                 base::cef_internal::UnwrapTraits<InC>::Unwrap(in.c),
                 &out->a,
                 &out->b,
                 &out->c,
                 &out->d);
}

template<class ObjT, class Method, class InA, class InB, class InC, class InD,
         class OutA, class OutB, class OutC, class OutD>
inline void DispatchToMethod(ObjT* obj, Method method,
                             const Tuple4<InA, InB, InC, InD>& in,
                             Tuple4<OutA, OutB, OutC, OutD>* out) {
  (obj->*method)(base::cef_internal::UnwrapTraits<InA>::Unwrap(in.a),
                 base::cef_internal::UnwrapTraits<InB>::Unwrap(in.b),
                 base::cef_internal::UnwrapTraits<InC>::Unwrap(in.c),
                 base::cef_internal::UnwrapTraits<InD>::Unwrap(in.d),
                 &out->a,
                 &out->b,
                 &out->c,
                 &out->d);
}

template<class ObjT, class Method,
         class InA, class InB, class InC, class InD, class InE,
         class OutA, class OutB, class OutC, class OutD>
inline void DispatchToMethod(ObjT* obj, Method method,
                             const Tuple5<InA, InB, InC, InD, InE>& in,
                             Tuple4<OutA, OutB, OutC, OutD>* out) {
  (obj->*method)(base::cef_internal::UnwrapTraits<InA>::Unwrap(in.a),
                 base::cef_internal::UnwrapTraits<InB>::Unwrap(in.b),
                 base::cef_internal::UnwrapTraits<InC>::Unwrap(in.c),
                 base::cef_internal::UnwrapTraits<InD>::Unwrap(in.d),
                 base::cef_internal::UnwrapTraits<InE>::Unwrap(in.e),
                 &out->a,
                 &out->b,
                 &out->c,
                 &out->d);
}

template<class ObjT, class Method,
         class InA, class InB, class InC, class InD, class InE, class InF,
         class OutA, class OutB, class OutC, class OutD>
inline void DispatchToMethod(ObjT* obj, Method meth
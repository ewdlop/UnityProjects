using System;
using System.IO;
using System.Text;
using System.Collections;
using System.Globalization;
using System.Net.Mail;

namespace System.Net.Mime
{
    /// <summary>
    /// Summary description for MimePart.
    /// </summary>
    internal class MimePart: MimeBasePart,IDisposable
    {
        Stream stream = null;
        bool streamSet = false;
        bool streamUsedOnce = false;
        AsyncCallback readCallback;
        AsyncCallback writeCallback;
        const int maxBufferSize = 0x4400;  //seems optimal for send based on perf analysis
        
        internal MimePart()
        {
        }

        public void Dispose(){
            if (stream != null) {
                stream.Close();
            }
        }

        internal Stream Stream {
            get {
                return stream;
            }
        }


        internal ContentDisposition ContentDisposition{
            get{
                return contentDisposition;
            }
            set{
                contentDisposition = value;
                if(value == null){
                    ((HeaderCollection)Headers).InternalRemove(MailHeaderInfo.GetString(MailHeaderID.ContentDisposition));
                }
                else{
                    contentDisposition.PersistIfNeeded((HeaderCollection)Headers,true);
                }
            }
        }

        internal TransferEncoding TransferEncoding {
            get {
                string value = Headers[MailHeaderInfo.GetString(MailHeaderID.ContentTransferEncoding)];
                if (value.Equals("base64", StringComparison.OrdinalIgnoreCase))
                    return TransferEncoding.Base64;
                else if (value.Equals("quoted-printable", StringComparison.OrdinalIgnoreCase))
                    return TransferEncoding.QuotedPrintable;
                else if (value.Equals("7bit", StringComparison.OrdinalIgnoreCase))
                    return TransferEncoding.SevenBit;
                else if (value.Equals("8bit", StringComparison.OrdinalIgnoreCase))
                    return TransferEncoding.EightBit;
                else
                    return TransferEncoding.Unknown;
     
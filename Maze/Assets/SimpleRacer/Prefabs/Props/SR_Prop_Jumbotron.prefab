<?xml version="1.0"?>
<clause number="14.2.2" title="Operator overloading">
  <paragraph>All unary and binary operators have predefined implementations that are automatically available in any expression. In addition to the predefined implementations, user-defined implementations can be introduced by including operator declarations in classes and structs (<hyperlink>17.9</hyperlink>). User-defined operator implementations always take precedence over predefined operator implementations: Only when no applicable user-defined operator implementations exist will the predefined operator implementations be considered. </paragraph>
  <paragraph>The overloadable unary operators are: <code_example><![CDATA[
+   -   !   ~   ++   --   true   false  
]]></code_example></paragraph>
  <paragraph>
    <note>[Note: Although true and false are not used explicitly in expressions, they are considered operators because they are invoked in several expression contexts: boolean expressions (<hyperlink>14.16</hyperlink>) and expressions involving the conditional (<hyperlink>14.12</hyperlink>), and conditional logical operators (<hyperlink>14.11</hyperlink>). end note]</note>
  </paragraph>
  <paragraph>The overloadable binary operators are: <code_example><![CDATA[
+   -   *   /   %   &   |   ^   <<   >>   ==   !=   >   <   >=   <=  
]]></code_example></paragraph>
  <paragraph>Only the operators listed above can be overloaded. In particular, it is not possible to overload member access, method invocation, or the =, &amp;&amp;, ||, ?:, checked, unchecked, new, typeof, as, and is operators. </paragraph>
  <paragraph>When a binary operator is overloaded, the corresponding assignment operator, if any, is also implicitly overloaded. For example, an overload of operator * is also an overload of operator *=. This is described further in <hyperlink>14.13</hyperlink>. Note that the assignment operator itself (=) cannot be overloaded. An assignment always performs a simple bit-wise copy of a value into a variable. </paragraph>
  <paragraph>Cast operations, such as (T)x, are overloaded by providing user-defined conversions (<hyperlink>13.4</hyperlink>). </paragraph>
  <pa
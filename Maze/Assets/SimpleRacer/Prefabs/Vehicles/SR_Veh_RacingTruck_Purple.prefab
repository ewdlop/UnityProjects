// Copyright Epic Games, Inc. All Rights Reserved.

#include "ViewModels/NiagaraParameterPanelViewModel.h"
#include "NiagaraScriptVariable.h"
#include "NiagaraGraph.h"
#include "NiagaraActions.h"
#include "SGraphActionMenu.h"
#include "SNiagaraParameterNameView.h"
#include "NiagaraParameterNameViewModel.h"
#include "NiagaraStandaloneScriptViewModel.h"
#include "ViewModels/NiagaraSystemViewModel.h"
#include "NiagaraConstants.h"
#include "EdGraphSchema_Niagara.h"
#include "ViewModels/Stack/NiagaraStackGraphUtilities.h"
#include "ViewModels/NiagaraEmitterHandleViewModel.h"
#include "NiagaraScriptGraphViewModel.h"
#include "NiagaraNodeParameterMapGet.h"
#include "NiagaraNodeParameterMapSet.h"
#include "NiagaraSystemScriptViewModel.h"
#include "ViewModels/NiagaraSystemSelectionViewModel.h"
#include "NiagaraEmitterHandle.h"
#include "NiagaraEmitter.h"
#include "NiagaraSystem.h"
#include "NiagaraObjectSelection.h"
#include "EdGraph/EdGraphSchema.h"
#include "Editor.h"
#include "ScopedTransaction.h"
#include "NiagaraSystemEditorData.h"
#include "Widgets/Text/SInlineEditableTextBlock.h"
#include "NiagaraEditorModule.h"
#include "NiagaraTypes.h"

#define LOCTEXT_NAMESPACE "NiagaraParameterPanelViewModel"

const TArray<TArray<ENiagaraParameterPanelCategory>> FNiagaraScriptToolkitParameterPanelViewModel::DefaultCategoryPaths = {
	{ENiagaraParameterPanelCategory::Input}
	, {ENiagaraParameterPanelCategory::Attributes, ENiagaraParameterPanelCategory::User}
	, {ENiagaraParameterPanelCategory::Attributes, ENiagaraParameterPanelCategory::Engine}
	, {ENiagaraParameterPanelCategory::Attributes, ENiagaraParameterPanelCategory::Owner}
	, {ENiagaraParameterPanelCategory::Attributes, ENiagaraParameterPanelCategory::System}
	, {ENiagaraParameterPanelCategory::Attributes, ENiagaraParameterPanelCategory::Emitter}
	, {ENiagaraParameterPanelCategory::Attributes, ENiagaraParameterPanelCategory::Particles}
	, {ENiagaraParameterPanelCategory::Output, ENiagaraParameterPanelCategory::System}
	, {ENiagaraParameterPanelCategory::Output, ENiagaraParameterPanelCategory::Emitter}
	, {ENiagaraParameterPanelCategory::Output, ENiagaraParameterPanelCategory::Particles}
	, {ENiagaraParameterPanelCategory::Output, ENiagaraParameterPanelCategory::ScriptTransient}
	, {ENiagaraParameterPanelCategory::Local}
};

const TArray<TArray<ENiagaraParameterPanelCategory>> FNiagaraSystemToolkitParameterPanelViewModel::DefaultCategoryPaths = {
	{ENiagaraParameterPanelCategory::User}
	, {ENiagaraParameterPanelCategory::Engine}
	, {ENiagaraParameterPanelCategory::Owner}
	, {ENiagaraParameterPanelCategory::System}
	, {ENiagaraParameterPanelCategory::Emitter}
	, {ENiagaraParameterPanelCategory::Particles}
};

TSharedRef<class SWidget> INiagaraParameterPanelViewModel::GetScriptParameterVisualWidget(const FNiagaraScriptVariableAndViewInfo& ScriptVarAndViewInfo) const
{
	TSharedPtr<FNiagaraParameterPanelEntryParameterNameViewModel> ParameterNameViewModel = MakeShared<FNiagaraParameterPanelEntryParameterNameViewModel>(ScriptVarAndViewInfo);
	ParameterNameViewModel->GetOnParameterRenamedDelegate().BindSP(this, &INiagaraParameterPanelViewModel::RenameParameter);
	ParameterNameViewModel->GetOnScopeSelectionChangedDelegate().BindSP(this, &INiagaraParameterPanelViewModel::ChangeParameterScope);
	ParameterNameViewModel->GetOnVerifyParameterRenamedDelegate().BindSP(this, &INiagaraParameterPanelViewModel::GetCanRenameParameterAndToolTip);

	TSharedPtr<SWidget> ScriptParameterVisualWidget = SNew(SNiagaraParameterNameView, ParameterNameViewModel);
	return ScriptParameterVisualWidget->AsShared();
}

TArray<TWeakObjectPtr<UNiagaraGraph>> FNiagaraScriptToolkitParameterPanelViewModel::GetEditableGraphs() const
{
	TArray<TWeakObjectPtr<UNiagaraGraph>> EditableGraphs;
	EditableGraphs.Add(TWeakObjectPtr<UNiagaraGraph>(ScriptViewModel->GetGraphViewModel()->GetGraph()));
	return EditableGraphs;
}

///////////////////////////////////////////////////////////////////////////////
/// System Toolkit Parameter Panel View Model								///
///////////////////////////////////////////////////////////////////////////////

FNiagaraSystemToolkitParameterPanelViewModel::FNiagaraSystemToolkitParameterPanelViewModel(TSharedPtr<FNiagaraSystemViewModel> InSystemViewModel)
{
	SystemViewModel = InSystemViewModel;
	OverviewSelectionViewModel = SystemViewModel->GetSelectionViewModel();
	SystemScriptGraph = SystemViewModel->GetSystemScriptViewModel()->GetGraphViewModel()->GetGraph();
	GEditor->RegisterForUndo(this);
}

FNiagaraSystemToolkitParameterPanelViewModel::~FNiagaraSystemToolkitParameterPanelViewModel()
{
	GEditor->UnregisterForUndo(this);
}

void FNiagaraSystemToolkitParameterPanelViewModel::InitBindings()
{
	if (SystemViewModel->GetEditMode() == ENiagaraSystemViewModelEditMode::SystemAsset)
	{
		SystemViewModel->GetSelectionViewModel()->OnEmitterHandleIdSelectionChanged().AddSP(this, &FNiagaraSystemToolkitParameterPanelViewModel::RefreshSelectedEmitterScriptGraphs);
		SystemViewModel->OnEmitterHandleViewModelsChanged().AddSP(this, &FNiagaraSystemToolkitParameterPanelViewModel::RefreshSelectedEmitterScriptGraphs);
	}
	SystemViewModel->OnSystemCompiled().AddSP(this, &FNiagaraSystemToolkitParameterPanelViewModel::Refresh);
	SystemViewModel->OnParameterRemovedExternally().AddSP(this, &FNiagaraSystemToolkitParameterPanelViewModel::OnParameterRemovedExternally);
	SystemViewModel->OnParameterRenamedExternally().AddSP(this, &FNiagaraSystemToolkitParameterPanelViewModel::OnParameterRenamedExternally);
}


void FNiagaraSystemToolkitParameterPanelViewModel::OnParameterRenamedExternally(const FNiagaraVariableBase& InOldVar, const FNiagaraVariableBase& InNewVar, UNiagaraEmitter* InOptionalEmitter)
{
	// See if this was the last reference to that parameter being renamed, if so, we need to update to a full rename and rename all locations where it was used that are downstream, like renderer bindings.

	// Emitter & Particle namespaces are just for the ones actively being worked on.
	if (InOldVar.IsInNameSpace(FNiagaraConstants::EmitterNamespace) ||
		InOldVar.IsInNameSpace(FNiagaraConstants::ParticleAttributeNamespace))
	{
		const TArray<FGuid>& SelectedEmitterHandleIds = OverviewSelectionViewModel->GetSelectedEmitterHandleIds();

		// Note that we might have multiple selections and don't know explicitly which one changed, so we have to go through all independently and examine them.
		if (SelectedEmitterHandleIds.Num() > 0)
		{
			const TArray<TSharedRef<FNiagaraEmitterHandleViewModel>>& EmitterHandleViewModels = SystemViewModel->GetEmitterHandleViewModels();
			for (const TSharedRef<FNiagaraEmitterHandleViewModel>& EmitterHandleViewModel : EmitterHandleViewModels)
			{
				if (SelectedEmitterHandleIds.Contains(EmitterHandleViewModel->GetId()))
				{
					bool bFound = false;
					UNiagaraGraph* Graph = static_cast<UNiagaraScriptSource*>(EmitterHandleViewModel->GetEmitterHandle()->GetInstance()->GraphSource)->NodeGraph;
					if (Graph)
					{
						const TMap<FNiagaraVariable, FNiagaraGraphParameterReferenceCollection>& RefMap = Graph->GetParameterReferenceMap();
						const FNiagaraGraphParameterReferenceCollection* Coll = RefMap.Find(InOldVar);
						if (Coll)
						{
							bFound = true;
							break;
						}
					}

					if (!bFound)
					{
						EmitterHandleViewModel->GetEmitterHandle()->GetInstance()->HandleVariableRenamed(InOldVar, InNewVar, true);
					}
				}
			}
		}		
	}
	// User and System need to be checked for all graphs as they could be used anywhere.
	else if (InOldVar.IsInNameSpace(FNiagaraConstants::UserNamespace) ||
			 InOldVar.IsInNameSpace(FNiagaraConstants::SystemNamespace))
	{
		TArray<UNiagaraGraph*> Graphs;
		Graphs.Add(SystemScriptGraph.Get());

		const TArray<TSharedRef<FNiagaraEmitterHandleViewModel>>& EmitterHandleViewModels = SystemViewModel->GetEmitterHandleViewModels();
		for (const TSharedRef<FNiagaraEmitterHandleViewModel>& EmitterHandleViewModel : EmitterHandleViewModels)
		{
			UNiagaraGraph* Graph = static_cast<UNiagaraScriptSource*>(EmitterHandleViewModel->GetEmitterHandle()->GetInstance()->GraphSource)->NodeGraph;
			if (Graph)
				Graphs.Add(Graph);
			
		}

		bool bFound = false;
		for (UNiagaraGraph* Graph : Graphs)
		{
			const TMap<FNiagaraVariable, FNiagaraGraphParameterReferenceCollection>& RefMap = Graph->GetParameterReferenceMap();
			const FNiagaraGraphParameterReferenceCollection* Coll = RefMap.Find(InOldVar);
			if (Coll)
			{
				bFound = true;
				break;
			}
		}

		if (!bFound)
		{
			SystemViewModel->GetSystem().HandleVariableRenamed(InOldVar, InNewVar, true);
		}
	}

	Refresh();
}
void FNiagaraSystemToolkitParameterPanelViewModel::OnParameterRemovedExternally(const FNiagaraVariableBase& InOldVar,  UNiagaraEmitter* InOptionalEmitter)
{

	// See if this was the last reference to that parameter being renamed, if so, we need to update to a full rename and rename all locations where it was used that are downstream, like renderer bindings.

	// Emitter & Particle namespaces are just for the ones actively being worked on.
	if (InOldVar.IsInNameSpace(FNiagaraConstants::EmitterNamespace) ||
		InOldVar.IsInNameSpace(FNiagaraConstants::ParticleAttributeNamespace))
	{
		const TArray<FGuid>& SelectedEmitterHandleIds = OverviewSelectionViewModel->GetSelectedEmitterHandleIds();

		// Note that we might have multiple selections and don't know explicitly which one changed, so we have to go through all independently and examine them.
		if (SelectedEmitterHandleIds.Num() > 0)
		{
			const TArray<TSharedRef<FNiagaraEmitterHandleViewModel>>& EmitterHandleViewModels = SystemViewModel->GetEmitterHandleViewModels();
			for (const TSharedRef<FNiagaraEmitterHandleViewModel>& EmitterHandleViewModel : EmitterHandleViewModels)
			{
				if (SelectedEmitterHandleIds.Contains(EmitterHandleViewModel->GetId()))
				{
					bool bFound = false;
					UNiagaraGraph* Graph = static_cast<UNiagaraScriptSource*>(EmitterHandleViewModel->GetEmitterHandle()->GetInstance()->GraphSource)->NodeGraph;
					if (Graph)
					{
						const TMap<FNiagaraVariable, FNiagaraGraphParameterReferenceCollection>& RefMap = Graph->GetParameterReferenceMap();
						const FNiagaraGraphParameterReferenceCollection* Coll = RefMap.Find(InOldVar);
						if (Coll)
						{
							bFound = true;
							break;
						}
					}

					if (!bFound)
					{
						EmitterHandleViewModel->GetEmitterHandle()->GetInstance()->HandleVariableRemoved(InOldVar, true);
					}
				}
			}
		}
	}
	// User and System need to be checked for all graphs as they could be used anywhere.
	else if (InOldVar.IsInNameSpace(FNiagaraConstants::UserNamespace) ||
		InOldVar.IsInNameSpace(FNiagaraConstants::SystemNamespace))
	{
		TArray<UNiagaraGraph*> Graphs;
		Graphs.Add(Sys
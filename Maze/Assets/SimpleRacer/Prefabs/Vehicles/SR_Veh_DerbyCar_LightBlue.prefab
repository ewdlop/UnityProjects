opeName);
				AliasScopeNames.Add(FNiagaraConstants::UniqueOutputScopeName);
				const FNiagaraScriptVariableAndViewInfo* NameAliasedVariableInfo = FindParameterNameAlias(AliasScopeNames, NewName);
				if (NameAliasedVariableInfo != nullptr)
				{
					ENiagaraScriptParameterUsage TargetVarUsage = TargetVariableMetaData.GetUsage();
					ENiagaraScriptParameterUsage AliasVarUsage = NameAliasedVariableInfo->MetaData.GetUsage();
					if (TargetVarUsage == AliasVarUsage)
					{
						OutCanRenameParameterToolTip = FText::Format(GenericNameAliasToolTip, NewVariableNameText.GetValue());
					}
					else if (TargetVarUsage == ENiagaraScriptParameterUsage::Input && AliasVarUsage == ENiagaraScriptParameterUsage::Output)
					{
						OutCanRenameParameterToolTip = FText::Format(LOCTEXT("ScriptToolkitParameterPanelViewModel_RenameParameter_InOutAlias", "Cannot rename Input Parameter: An Output Parameter already exists with name {0}."), NewVariableNameText.GetValue());
					}
					else if (TargetVarUsage == ENiagaraScriptParameterUsage::Output && AliasVarUsage == ENiagaraScriptParameterUsage::Input)
					{
						OutCanRenameParameterToolTip = FText::Format(LOCTEXT("ScriptToolkitParameterPanelViewModel_RenameParameter_OutInAlias", "Cannot rename Output Parameter: An Input Parameter already exists with name {0}."), NewVariableNameText.GetValue());
					}
					else
					{
						ensureMsgf(false, TEXT("Unexpected usages encountered when checking name aliases for input/output rename!"));
						OutCanRenameParameterToolTip = FText::Format(GenericNameAliasToolTip, NewVariableNameText.GetValue());
					}
					return false;
				}
			}
			else
			{
				AliasScopeNames.Add(TargetVariableMetaData.GetScopeName());
				const FNiagaraScriptVariableAndViewInfo* NameAliasedVariableInfo = FindParameterNameAlias(AliasScopeNames, NewName);
				if (NameAliasedVariableInfo != nullptr)
				{
					if (TargetVariableToRename.GetType() != NameAliasedVariableInfo->ScriptVariable.GetType())
					{ 
						OutCanRenameParameterToolTip = FText::Format(GenericNameAliasToolTip, NewVariableNameText.GetValue());
						return false;
					}
					return true;
				}
			}
		}
	}

	OutCanRenameParameterToolTip = LOCTEXT("ScriptToolkitParameterPanelViewModel_RenameParameter", "Rename this Parameter and all usages in the graph.");
	return true;
}

void FNiagaraScriptToolkitParameterPanelViewModel::HandleActionSelected(const TSharedPtr<FEdGraphSchemaAction>& InAction, ESelectInfo::Type InSelectionType)
{
	const FNiagaraScriptVarAndViewInfoAction* Action = static_cast<FNiagaraScriptVarAndViewInfoAction*>(InAction.Get());
	UNiagaraScriptVariable** ScriptVarPtr = ScriptViewModel->GetGraphViewModel()->GetGraph()->GetAllMetaData().Find(Action->ScriptVariableAndViewInfo.ScriptVariable);
	if (ensureMsgf(ScriptVarPtr != nullptr, TEXT("Failed to get UNiagaraScriptVariable from selected action!")))
	{
		VariableObjectSelection->SetSelectedObject(*ScriptVarPtr);
	}
}

FReply FNiagaraScriptToolkitParameterPanelViewModel::HandleActionDragged(const TSharedPtr<FEdGraphSchemaAction>& InAction, const FPointerEvent& MouseEvent) const
{
	TSharedRef<FNiagaraParameterGraphDragOperation> DragOperation = FNiagaraParameterGraphDragOperation::New(InAction); //@todo(ng) do not drag drop static switches
	DragOperation->SetAltDrag(MouseEvent.IsAltDown());
	DragOperation->SetCtrlDrag(MouseEvent.IsLeftControlDown() || MouseEvent.IsRightControlDown());
	return FReply::Handled().BeginDragDrop(DragOperation);
}

const TArray<TArray<ENiagaraParameterPanelCategory>>& FNiagaraScriptToolkitParameterPanelViewModel::GetDefaultCategoryPaths() const
{
	return FNiagaraScriptToolkitParameterPanelViewModel::DefaultCategoryPaths;
}

TArray<ENiagaraParameterPanelCategory> FNiagaraScriptToolkitParameterPanelViewModel::GetCategoriesForParameter(const FNiagaraScriptVariableAndViewInfo& ScriptVar) const
{
	TArray<ENiagaraParameterPanelCategory> Categories;

	if (ScriptVar.MetaData.GetIsStaticSwitch())
	{
		Categories.Add(ENiagaraParameterPanelCategory::Input);
		Categories.Add(ENiagaraParameterPanelCategory::StaticSwitch);
		return Categories;
	}

	const ENiagaraScriptParameterUsage& Usage = ScriptVar.MetaData.GetUsage();
	if (Usage == ENiagaraScriptParameterUsage::Input || Usage == ENiagaraScriptParameterUsage::Output)
	{
		const FNiagaraParameterScopeInfo* ScopeInfo = FNiagaraEditorModule::FindParameterScopeInfo(ScriptVar.MetaData.GetScopeName());
		if (ScopeInfo != nullptr)
		{
			if (Usage == ENiagaraScriptParameterUsage::Input)
			{
				if (ScopeInfo->GetNamespaceString() == PARAM_MAP_MODULE_STR)
				{
					Categories.Add(ENiagaraParameterPanelCategory::Input);
					return Categories;
				}
				Categories.Add(ENiagaraParameterPanelCategory::Attributes);
			}
			else
			{
				Categories.Add(ENiagaraParameterPanelCategory::Output);
			}
			
			const ENiagaraParameterScope& ParameterScope = ScopeInfo->GetScope();
			switch (ParameterScope) {
			case ENiagaraParameterScope::User:
				Categories.Add(ENiagaraParameterPanelCategory::User);
				return Categories;
			case ENiagaraParameterScope::Engine:
				Categories.Add(ENiagaraParameterPanelCategory::Engine);
				return Categories;
			case ENiagaraParameterScope::Owner:
				Categories.Add(ENiagaraParameterPanelCategory::Owner);
				return Categories;
			case ENiagaraParameterScope::System:
				Categories.Add(ENiagaraParameterPanelCategory::System);
				return Categories;
			case ENiagaraParameterScope::Emitter:
				Categories.Add(ENiagaraParameterPanelCategory::Emitter);
				return Categories;
			case ENiagaraParameterScope::Particles:
				Categories.Add(ENiagaraParameterPanelCategory::Particles);
				return Categories;
			case ENiagaraParameterScope::ScriptTransient:
				Categories.Add(ENiagaraParameterPanelCategory::ScriptTransient);
				return Categories;
			case ENiagaraParameterScope::Output:
				Categories.Add(ENiagaraParameterPanelCategory::Output);
				return Categories;
			default:
				ensureMsgf(false, TEXT("Unexpected ENiagaraParameterScope encountered when getting categories for parameter panel entry!"));
				return Categories;
			}
		}
		else
		{
			ensureMsgf(false, TEXT("Unregistered ScopeName encountered when getting categories for parameter panel entry! Name: %s"), *ScriptVar.MetaData.GetScopeName().ToString());
			return Categories;
		}
	}
	else if (Usage == ENiagaraScriptParameterUsage::Local)
	{
		Categories.Add(ENiagaraParameterPanelCategory::Local);
		return Categories;
	}
	else if (Usage == ENiagaraScriptParameterUsage::InputOutput)
	{
		ensureMsgf(false, TEXT("Encountered InputOutput usage entry when getting categories for parameter panel entry! InputOuput usage should be split to separate Input and Output usage entries!"));
		return Categories;
	}
	else
	{
		ensureMsgf(false, TEXT("Illegal ENiagaraScriptParameterUsage encountered when getting categories for parameter panel entry!"));
		return Categories;
	}

	return Categories;
}

TSharedRef<SWidget> FNiagaraScriptToolkitParameterPanelViewModel::GetScriptParameterVisualWidget(const UEdGraphPin* Pin) const
{
	const UEdGraphSchema_Niagara* Schema = GetDefault<UEdGraphSchema_Niagara>();
	const FNiagaraVariable PinVar = Schema->PinToNiagaraVariable(Pin);

	bool bRenameImmediate = false;
	UNiagaraNode* OwnerNode = Cast<UNiagaraNode>(Pin->GetOwningNode());
	if (OwnerNode && OwnerNode->IsPinNameEditableUponCreation(Pin))
	{
		bRenameImmediate = true;
	}
	else if (FNiagaraConstants::IsNiagaraConstant(PinVar))
	{
		bRenameImmediate = false;
	}

	const FNiagaraScriptVariableAndViewInfo* ScriptVarAndViewInfo = CachedViewedParameters.FindByPredicate([PinVar](const FNiagaraScriptVariableAndViewInfo& Entry) {return Entry.ScriptVariable == PinVar; });
	if (ScriptVarAndViewInfo != nullptr)
	{
		TSharedPtr<FNiagaraGraphPinParameterNameViewModel> ParameterNameViewModel = MakeShared<FNiagaraGraphPinParameterNameViewModel>(const_cast<UEdGraphPin*>(Pin), *ScriptVarAndViewInfo, this);
		TSharedPtr<SNiagaraParameterNameView> ScriptParameterVisualWidget = SNew(SNiagaraParameterNameView, ParameterNameViewModel);
		ScriptParameterVisualWidget->SetPendingRename(bRenameImmediate);
		return ScriptParameterVisualWidget->AsShared();
	}
	else
	{
		// Failed to find the parameter name in the cache, try to find the variable in the graph script variables and generate view info.
		const UNiagaraScriptVariable* const* ScriptVarPtr = ScriptViewModel->GetGraphViewModel()->GetGraph()->GetAllMetaData().Find(PinVar);
		if (ScriptVarPtr != nullptr)
		{
			const UNiagaraScriptVariable* ScriptVar = *ScriptVarPtr;
			const TStaticArray<FScopeIsEnabledAndTooltip, (int32)ENiagaraParameterScope::Num> PerScopeInfo = GetParameterScopesEnabledAndTooltips(ScriptVar->Variable, ScriptVar->Metadata);
			FNiagaraScriptVariableAndViewInfo NewScriptVarAndViewInfo = FNiagaraScriptVariableAndViewInfo(ScriptVar->Variable, ScriptVar->Metadata, PerScopeInfo);

			TSharedPtr<FNiagaraGraphPinParameterNameViewModel> ParameterNameViewModel = MakeShared<FNiagaraGraphPinParameterNameViewModel>(const_cast<UEdGraphPin*>(Pin), NewScriptVarAndViewInfo, this);
			TSharedPtr<SNiagaraParameterNameView> ScriptParameterVisualWidget = SNew(SNiagaraParameterNameView, ParameterNameViewModel);
			ScriptParameterVisualWidget->SetPendingRename(bRenameImmediate);
			return ScriptParameterVisualWidget->AsShared();
		}
	}

	// Cannot resolve the parameter from the pin, put an error widget in.
	FNiagaraVariable StandInParameter = Schema->PinToNiagaraVariable(Pin, false);
	FNiagaraVariableMetaData StandInMetaData;
	FNiagaraEditorUtilities::GetParameterMetaDataFromName(StandInParameter.GetName(), StandInMetaData);
	StandInMetaData.SetUsage(ENiagaraScriptParameterUsage::Local);
	
	FNiagaraScriptVariableAndViewInfo StandInScriptVarAndViewInfo = FNiagaraScriptVariableAndViewInfo(StandInParameter, StandInMetaData);
	TSharedPtr<FNiagaraGraphPinParameterNameViewModel> ParameterNameViewModel = MakeShared<FNiagaraGraphPinParameterNameViewModel>(const_cast<UEdGraphPin*>(Pin), StandInScriptVarAndViewInfo, this);
	TSharedPtr<SNiagaraParameterNameView> ScriptParameterVisualWidget = SNew(SNiagaraParameterNameView, ParameterNameViewModel);
	ScriptParameterVisualWidget->SetPendingRename(bRenameImmediate);
	return ScriptParameterVisualWidget->AsShared();
}

TStaticArray<FScopeIsEnabledAndTooltip, (int32)ENiagaraParameterScope::Num> FNiagaraScriptToolkitParameterPanelViewModel::GetParameterScopesEnabledAndTooltips(const FNiagaraVariable& InVar, const FNiagaraVariableMetaData& InVarMetaData) const
{
	TStaticArray<FScopeIsEnabledAndTooltip, (int32)ENiagaraParameterScope::Num> PerScopeInfo;
	UEnum* ParameterScopeEnum = FNiagaraTypeDefinition::GetParameterScopeEnum();

	// Add defaulted entries for every 
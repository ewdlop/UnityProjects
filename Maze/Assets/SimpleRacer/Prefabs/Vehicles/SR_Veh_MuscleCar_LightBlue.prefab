ed = OverviewSelectionViewModel->GetSystemIsSelected();

	UNiagaraGraph::FAddParameterOptions AddParameterOptions = UNiagaraGraph::FAddParameterOptions();
	AddParameterOptions.NewParameterScopeName = InVariableMetaDataToAssign.GetScopeName();
	AddParameterOptions.NewParameterUsage = InVariableMetaDataToAssign.GetUsage();
	AddParameterOptions.bMakeParameterNameUnique = true;
	AddParameterOptions.bAddedFromSystemEditor = true;

	ENiagaraParameterScope NewScope;
	FNiagaraEditorUtilities::GetVariableMetaDataScope(InVariableMetaDataToAssign, NewScope);
	if (NewScope == ENiagaraParameterScope::User)
	{
		UNiagaraSystem& System = SystemViewModel->GetSystem();
		System.Modify();
		UNiagaraSystemEditorData* SystemEditorData = CastChecked<UNiagaraSystemEditorData>(System.GetEditorData(), ECastCheckedType::NullChecked);
		SystemEditorData->Modify();
		bool bSuccess = FNiagaraEditorUtilities::AddParameter(VariableToAdd, System.GetExposedParameters(), System, &SystemEditorData->GetStackEditorData());
		Refresh();
	}
	else if (NewScope == ENiagaraParameterScope::System)
	{
		UNiagaraGraph* Graph = SystemViewModel->GetSystemScriptViewModel()->GetGraphViewModel()->GetGraph();
		Graph->Modify();
		const UNiagaraScriptVariable* NewScriptVar = Graph->AddParameter(VariableToAdd, AddParameterOptions);
		Refresh();
		return NewScriptVar;
	}
	else
	{
		for (TWeakObjectPtr<UNiagaraGraph> Graph : GetEditableEmitterScriptGraphs())
		{
			if (ensureMsgf(Graph.IsValid(), TEXT("Editable Emitter Script Graph was stale when adding parameter!")))
			{
				Graph->Modify();
				const UNiagaraScriptVariable* NewScriptVar = Graph->AddParameter(VariableToAdd, AddParameterOptions);
				Refresh();
				return NewScriptVar;
			}
		}
	}

	if (bSystemIsSelected)
	{
		//SystemViewModel-> //@todo(ng) handle user params
	}
	
	return nullptr;
}

void FNiagaraSystemToolkitParameterPanelViewModel::DeleteParameter(const FNiagaraVariable& TargetVariableToRemove, const FNiagaraVariableMetaData& TargetVariableMetaData)
{
	FScopedTransaction RemoveParameter(LOCTEXT("RemoveParameter", "Remove Parameter"));

	ENiagaraParameterScope TargetVariableScope = ENiagaraParameterScope::None;
	FNiagaraEditorUtilities::GetVariableMetaDataScope(TargetVariableMetaData, TargetVariableScope);

	if (TargetVariableMetaData.IsInputUsage() && TargetVariableScope == ENiagaraParameterScope::User)
	{
		SystemViewModel->GetSystem().Modify();
		SystemViewModel->GetSystem().HandleVariableRemoved(TargetVariableToRemove, true);
	}

	
	for (const TWeakObjectPtr<UNiagaraGraph>& GraphWeakPtr : SelectedEmitterScriptGraphs)
	{
		if (GraphWeakPtr.IsValid())
		{
			UNiagaraGraph* Graph = GraphWeakPtr.Get();
			Graph->Modify();
			Graph->RemoveParameter(TargetVariableToRemove);
		}
	}
	Refresh();
}

bool FNiagaraSystemToolkitParameterPanelViewModel::GetCanDeleteParameterAndToolTip(const FNiagaraVariable& TargetVariableToRemove, const FNiagaraVariableMetaData& TargetVariableMetaData, FText& OutCanDeleteParameterToolTip) const
{
	if (TargetVariableMetaData.GetWasCreatedInSystemEditor())
	{
		OutCanDeleteParameterToolTip = LOCTEXT("SystemToolkitParameterPanelViewModel_DeleteParameter_CreatedInSystem", "Delete this Parameter and remove any usages from the System and Emitters.");
		return true;
	}
	OutCanDeleteParameterToolTip = LOCTEXT("SystemToolkitParameterPanelViewModel_DeleteParameter_NotCreatedInSystem", "Cannot Delete this Parameter: Only Parameters created in the System Editor can be deleted from the System Editor.");
	return false;
}

void FNiagaraSystemToolkitParameterPanelViewModel::RenameParameter(const FNiagaraVariable& TargetVariableToRename, const FNiagaraVariableMetaData& TargetVariableMetaData, const FText& NewVariableNameText) const
{
	FScopedTransaction RenameParameter(LOCTEXT("RenameParameter", "Rename Parameter"));

	FName NewVariableName;
	FString TargetVariableNamespaceString;
	
	if (FNiagaraEditorUtilities::GetVariableMetaDataNamespaceString(TargetVariableMetaData, TargetVariableNamespaceString))
	{
		NewVariableName = FName(*(TargetVariableNamespaceString + NewVariableNameText.ToString()));
	}
	else
	{
		NewVariableName = FName(*NewVariableNameText.ToString());
	}

	ENiagaraParameterScope NewScope;
	FNiagaraEditorUtilities::GetVariableMetaDataScope(TargetVariableMetaData, NewScope);
	if (NewScope == ENiagaraParameterScope::User)
	{
		UNiagaraSystem& System = SystemViewModel->GetSystem();
		System.Modify();
		System.HandleVariableRenamed(TargetVariableToRename, FNiagaraVariable(TargetVariableToRename.GetType(), NewVariableName), true);
	}
	else if (NewScope == ENiagaraParameterScope::System)
	{
		UNiagaraGraph* Graph = SystemViewModel->GetSystemScriptViewModel()->GetGraphViewModel()->GetGraph();
		Graph->Modify();
		Graph->RenameParameter(TargetVariableToRename, NewVariableName);
	}
	else
	{
		for (TWeakObjectPtr<UNiagaraGraph> Graph : GetEditableEmitterScriptGraphs())
		{
			if (ensureMsgf(Graph.IsValid(), TEXT("Editable Emitter Script Graph was stale when adding parameter!")))
			{
				Graph->Modify();
				Graph->RenameParameter(TargetVariableToRename, NewVariableName);
			}
		}
	}

	Refresh();
}

void FNiagaraSystemToolkitParameterPanelViewModel::ChangeParameterScope(const FNiagaraVariable& TargetVariableToModify, const FNiagaraVariableMetaData& TargetVariableMetaData, const ENiagaraParameterScope NewVariableScope) const
{
	// Parameter scope is not editable for System toolkit.
	return;
}

bool FNiagaraSystemToolkitParameterPanelViewModel::CanModifyParameter(const FNiagaraVariable& TargetVariableToModify, const FNiagaraVariableMetaData& TargetVariableMetaData) const
{
	return TargetVariableMetaData.GetWasCreatedInSystemEditor() == true;
}

bool FNiagaraSystemToolkitParameterPanelViewModel::GetCanRenameParameterAndToolTip(const FNiagaraVariable& TargetVariableToRename, const FNiagaraVariableMetaData& TargetVariableMetaData, TOptional<const FText> NewVariableNameText, FText& OutCanRenameParameterToolTip) const
{
	if (TargetVariableMetaData.GetWasCreatedInSystemEditor())
	{
		if(NewVariableNameText.IsSet() && NewVariableNameText->IsEmptyOrWhitespace())
		{
			OutCanRenameParameterToolTip = LOCTEXT("SystemToolkitParameterPanelViewModel_RenameParameter_NameNone", "Parameter must have a name.");
			return false;
		}

		OutCanRenameParameterToolTip = LOCTEXT("SystemToolkitParameterPanelViewModel_RenameParameter_CreatedInSystem", "Rename this Parameter and all usages in the System and Emitters.");
		return true;
	}
	OutCanRenameParameterToolTip = LOCTEXT("SystemToolkitParameterPanelViewModel_RenameParameter_NotCreatedInSystem", "Cannot rename Parameter: Only Parameters created in the System Editor can be renamed from the System Editor.");
	return false;
}

FReply FNiagaraSystemToolkitParameterPanelViewModel::HandleActionDragged(const TSharedPtr<FEdGraphSchemaAction>& InAction, const FPointerEvent& MouseEvent) const
{
	const FText TooltipFormat = LOCTEXT("Parameters", "Name: {0} \nType: {1}\nScope: {2}\nUsage: {3}");
	const FNiagaraScriptVarAndViewInfoAction* ScriptVarAction = static_cast<FNiagaraScriptVarAndViewInfoAction*>(InAction.Get());
	const FNiagaraScriptVariableAndViewInfo& ScriptVarAndViewInfo = ScriptVarAction->ScriptVariableAndViewInfo;
	//NiagaraParameterPanelSectionID::Type Section = NiagaraParameterPanelSectionID::GetSectionForParameterMetaData(ScriptVarAndViewInfo.MetaData);
	const FNiagaraVariable& Var = ScriptVarAndViewInfo.ScriptVariable;
	const FText Name = FText::FromName(Var.GetName());
	const FText ScopeText = FText::FromName(ScriptVarAndViewInfo.MetaData.GetScopeName());
	const FText UsageText = StaticEnum<ENiagaraScriptParameterUsage>()->GetDisplayNameTextByValue((int64)ScriptVarAndViewInfo.MetaData.GetUsage());
	const FText Tooltip = FText::Format(TooltipFormat, FText::FromName(Var.GetName()), Var.GetType().GetNameText(), ScopeText, UsageText);

	TSharedPtr<FNiagaraParameterAction> ParameterAction = MakeShared<FNiagaraParameterAction>(Var, FText::GetEmpty(), Name, Tooltip, 0, FText(), TSharedPtr<TArray<FName>>(), 0);
	TSharedRef<FNiagaraParameterDragOperation> DragOperation = MakeShared<FNiagaraParameterDragOperation>(ParameterAction);
	DragOperation->CurrentHoverText = InAction->GetMenuDescription();
	DragOperation->SetupDefaults();
	DragOperation->Construct();
	return FReply::Handled().BeginDragDrop(DragOperation);
}

const TArray<TArray<ENiagaraParameterPanelCategory>>& FNiagaraSystemToolkitParameterPanelViewModel::GetDefaultCategoryPaths() const
{
	return FNiagaraSystemToolkitParameterPanelViewModel::DefaultCategoryPaths;
}

TArray<ENiagaraParameterPanelCategory> FNiagaraSystemToolkitParameterPanelViewModel::GetCategoriesForParameter(const FNiagaraScriptVariableAndViewInfo& ScriptVar) const
{
	TArray<ENiagaraParameterPanelCategory> Categories;
	
	if (ScriptVar.MetaData.GetIsStaticSwitch())
	{
		Categories.Add(ENiagaraParameterPanelCategory::StaticSwitch);
		return Categories;
	}

	const FNiagaraParameterScopeInfo* ScopeInfo = FNiagaraEditorModule::FindParameterScopeInfo(ScriptVar.MetaData.GetScopeName());
	if (ScopeInfo != nullptr)
	{
		const ENiagaraParameterScope ParameterScope = ScopeInfo->GetScope();
		switch (ParameterScope) {
		case ENiagaraParameterScope::User:
			Categories.Add(ENiagaraParameterPanelCategory::User);
			return Categories;
		case ENiagaraParameterScope::Engine:
			Categories.Add(ENiagaraParameterPanelCategory::Engine);
			return Categories;
		case ENiagaraParameterScope::Owner:
			Categories.Add(ENiagaraParameterPanelCategory::Owner);
			return Categories;
		case ENiagaraParameterScope::System:
			Categories.Add(ENiagaraParameterPanelCategory::System);
			return Categories;
		case ENiagaraParameterScope::Emitter:
			Categories.Add(ENiagaraParameterPanelCategory::Emitter);
			return Categories;
		case ENiagaraParameterScope::Particles:
			Categories.Add(ENiagaraParameterPanelCategory::Particles);
			return Categories;
		case ENiagaraParameterScope::ScriptTransient:
			Categories.Add(ENiagaraParameterPanelCategory::ScriptTransient);
			return Categories;
		case ENiagaraParameterScope::Custom:
			return Categories;
		default:
			ensureMsgf(false, TEXT("Unexpected parameter scope encountered when getting category for parameter panel entry!"));
		}
	}
	return Categories;
}

TArray<TWeakObjectPtr<UNiagaraGraph>> FNiagaraSystemToolkitParameterPanelViewModel::GetEditableGraphs() const
{
	TArray<TWeakObjectPtr<UNiagaraGraph>> EditableGraphs;
	if (SystemViewModel->GetEditMode() == ENiagaraSystemViewModelEditMode::SystemAsset)
	{
		EditableGraphs.Add(SystemScriptGraph);
		EditableGraphs.Append(SelectedEmitterScriptGraphs);
	}
	else
	{
		EditableGraphs.Add(static_cast<UNiagaraScriptSource*>(SystemViewModel->GetEmitterHandleViewModels(
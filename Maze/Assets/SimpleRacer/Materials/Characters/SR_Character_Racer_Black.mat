st<IChangeEntry> changes = null)
        {
            throw new NotImplementedException();
        }

        public void RequestHistoryEntry(string revisionId, Action<IHistoryEntry> callback)
        {
            SafeDelayCall(() =>
            {
                try
                {
                    callback(CloneHistory().FirstOrDefault(e => e.RevisionId == revisionId));
                }
                catch (Exception e)
                {
                    Debug.LogException(e);
                    callback(CloneHistory().FirstOrDefault(i => i.RevisionId == revisionId));
                }
            });
        }

        public void RequestHistoryPage(int offset, int pageSize, Action<IReadOnlyList<IHistoryEntry>> callback)
        {
            var safeSize = Math.Min(m_History.Count - offset, pageSize);
            SafeDelayCall(() =>
            {
                try
                {
                    Assert.Greater(m_History.Count, offset, "The offset should never be greater than the total number of history entries.");
                    callback(CloneHistory().ToList().GetRange(offset, safeSize));
                }
                catch (Exception e)
                {
                    Debug.LogException(e);
                    callback(null);
                }
            });
        }

        public void RequestHistoryCount(Action<int?> callback)
        {
            SafeDelayCall(() => callback(m_History.Count));
        }

        public void RequestDiscard(IChangeEntry entry)
        {
            throw new NotImplementedException();
        }

        public void RequestBulkDiscard(IReadOnlyList<IChangeEntry> entries)
        {
            throw new NotImplementedException();
        }

        public void RequestDiffChanges(string path)
        {
            throw new NotImplementedException();
        }

        public bool SupportsRevert { get; } = false;
        public void RequestRevert(string revisionId, IReadOnlyList<string> files)
        {
            throw new NotImplementedException();
        }

        public void RequestUpdateTo(string revisionId)
        {
            throw new NotImplementedE
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using JetBrains.Annotations;
using NUnit.Framework;
using Unity.Cloud.Collaborate.Models.Api;
using Unity.Cloud.Collaborate.Models.Enums;
using Unity.Cloud.Collaborate.Models.Structures;
using UnityEditor;
using UnityEngine;

namespace Unity.Cloud.Collaborate.Models.Providers
{
    [UsedImplicitly]
    internal class MockSourceControlProvider : ISourceControlProvider
    {
        public event Action UpdatedChangeList = delegate { };
        public event Action<IReadOnlyList<string>> UpdatedSelectedChangeList = delegate { };
        public event Action UpdatedHistoryEntries = delegate { };
        public event Action<bool> UpdatedConflictState = delegate { };
        public event Action<bool> UpdatedRemoteRevisionsAvailability = delegate { };
        public event Action<ProjectStatus> UpdatedProjectStatus = delegate { };

        public event Action<bool> UpdatedOperationStatus = delegate { };
        public event Action<IProgressInfo> UpdatedOperationProgress = delegate { };

        public event Action<IErrorInfo> ErrorOccurred = delegate { };
        public event Action ErrorCleared = delegate { };

        List<IChangeEntry> m_Changes;
        readonly List<IHistoryEntry> m_History;

        public MockSourceControlProvider()
        {
            m_Changes = new List<IChangeEntry>
            {
                new ChangeEntry("SomePath", "SomeOriginalPath", ChangeEntryStatus.Modified),
                new ChangeEntry("SomeConflictedPath2", "SomeOriginalPath", ChangeEntryStatus.Modified, unmerged: true),
                new ChangeEntry("SomePath3", "SomeOriginalPath", ChangeEntryStatus.Modified),
                new ChangeEntry("SomeConflictedPath4", "SomeOriginalPath", ChangeEntryStatus.Modified, unmerged: true),
                new ChangeEntry("SomeConflictedPath5", "SomeOriginalPath", ChangeEntryStatus.Modified, unmerged: true)
            };

            var historyChanges = new List<IChangeEntry>
            {
                new ChangeEntry("HistoryItemPath", "HistoryItemOriginalPath", ChangeEntryStatus.Modified, true)
            };
  
using System;
using System.Reflection;
using System.Threading;

namespace UnhandledExceptionTest
{
	class TestConfiguration {
		private bool useDifferentThread = false;
		public bool DT {
			get {
				return useDifferentThread;
			}
		}
		private bool useDifferentApplicationDomain = false;
		public bool DA {
			get {
				return useDifferentApplicationDomain;
			}
		}
		private bool differentConfigurationIsLegacy;
		public bool DCIL {
			get {
				return differentConfigurationIsLegacy;
			}
		}
		private bool useDifferentThreadInDifferentApplicationDomain = false;
		public bool DTDA {
			get {
				return useDifferentThreadInDifferentApplicationDomain;
			}
		}
		private bool addHandlerToRootApplicationDomain = false;
		public bool HRA {
			get {
				return addHandlerToRootApplicationDomain;
			}
		}
		private bool addHandlerToDifferentApplicationDomain = false;
		public bool HDA {
			get {
				return addHandlerToDifferentApplicationDomain;
			}
		}
		
		private static bool ParseArgumentValue (string value) {
			if ((value.Length == 1)) {
				switch (value [0]) {
				case 'T':
					return true;
				case 'F':
					return false;
				default:
					Console.WriteLine ("Invalid argument value {0}", value);
					throw new ApplicationException ("Invalid argument value " + value);
				}
			} else {
				Console.WriteLine ("Invalid argument value {0}", value);
				throw new ApplicationException ("Invalid argument value " + value);
			}
		}
		
		public TestConfiguration (string configuration) {
			string [] arguments = configuration.Split (',');
			foreach (string argument in arguments) {
				string [] components = argument.Split (':');
				if (components.Leng
         );
                    messageHeight = (textHeight < (errorIcon.Height + 6)) ?
                        (errorIcon.Height + 6) : textHeight + 3;
                }

                int width = 500; // normally only 300px visible.
                int height = barHeight + messageHeight;

                Bitmap bitmap = new Bitmap(width, height);
                using(Graphics g = Graphics.FromImage(bitmap))
                {
                    if (showTitle)
                    {
                        // The rectangle area
                        g.FillRectangle(controlBrush, 0, 0, width, barHeight);
                        // The gray line below the controlID
                        g.DrawLine(controlDarkPen, 0, barHeight - 1, width, barHeight - 1);
                        // Draw the text "controlTypeName - controlID"
                        g.DrawString(controlID, boldFont, controlTextBrush, 2, 2);
                        if(title != null && title.Length > 0)
                        {
                            int strPelLen = (int) g.MeasureString(controlID, boldFont).Width;
                            g.DrawString(" - " + title, normalFont, controlTextBrush, 4 + strPelLen, 2);
                        }
                    }

                    if (showMessage)
                    {
                        // The transparent line between controlID and errormessage.
                        g.DrawLine(windowPen, 0, barHeight, width, barHeight);
                        // The message rectangle area
                        g.FillRectangle(controlDarkBrush, 0, barHeight + 1, width, messageHeight - 1);
                        // Draw the message text
                        g.DrawString(message, normalFont, windowBrush,
                            new RectangleF(20, barHeight + 1, controlWidth - 30, messageHeight - 1));
                        // Draw the icon
                        g.DrawImage(errorIcon, 2, barHeight + 3);
                    }

                    if(bmpFile == null)
                    {
                        bmpFile = new TemporaryBitmapFile(bitmap);
                    }
                    else
                    {
                        bmpFile.UnderlyingBitmap = bitmap;
  
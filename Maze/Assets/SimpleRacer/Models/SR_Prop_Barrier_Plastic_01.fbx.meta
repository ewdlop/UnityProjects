);
			dg.BackColor = Color.Yellow;
			Assert.AreEqual (true, eventhandled, "A2");
		}

		[Test]
		[ExpectedException (typeof (ArgumentException))]
		public void TestBackColorChangedEvent_default ()
		{
			DataGridTableStyle dg = new DataGridTableStyle (true);
			eventhandled = false;
			dg.ForeColorChanged += new EventHandler (OnEventHandler);
			dg.BackColor = Color.Yellow;
			Assert.AreEqual (true, eventhandled, "A3");
		}

		[Test]
		public void TestColumnHeadersVisibleChangedEvent ()
		{
			DataGridTableStyle dg = new DataGridTableStyle ();
			eventhandled = false;
			dg.ColumnHeadersVisibleChanged += new EventHandler (OnEventHandler);
			dg.ColumnHeadersVisible = !dg.ColumnHeadersVisible;
			Assert.AreEqual (true, eventhandled, "A1");
		}

		[Test]
		public void TestColumnHeadersVisibleChangedEvent_default ()
		{
			DataGridTableStyle dg = new DataGridTableStyle (true);
			eventhandled = false;
			dg.ColumnHeadersVisibleChanged += new EventHandler (OnEventHandler);
			dg.ColumnHeadersVisible = !dg.ColumnHeadersVisible;
			Assert.AreEqual (true, eventhandled, "A1");
		}

		// Microsoft lunches BackColor event instead of ForeColor
		[Test]
		public void TestForeColorChangedEvent ()
		{
			DataGridTableStyle dg = new DataGridTableStyle ();
			eventhandled = false;
			dg.ForeColorChanged  += new EventHandler (OnEventHandler);
			dg.ForeColor = Color.Red;
			Assert.AreEqual (false, eventhandled, "A1");

			dg = new DataGridTableStyle ();
			eventhandled = false;
			dg.BackColorChanged  += new EventHandler (OnEventHandler);
			dg.ForeColor = Color.Red;
			Assert.AreEqual (true, eventhandled, "A2");
		}

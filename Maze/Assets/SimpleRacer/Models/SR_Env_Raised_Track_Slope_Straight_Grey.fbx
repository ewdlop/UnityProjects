IB, EntryPoint="Mono_Posix_ToPathconfName")]
		private static extern int ToPathconfName (Int32 value, out PathconfName rval);

		public static bool TryToPathconfName (Int32 value, out PathconfName rval)
		{
			return ToPathconfName (value, out rval) == 0;
		}

		public static PathconfName ToPathconfName (Int32 value)
		{
			PathconfName rval;
			if (ToPathconfName (value, out rval) == -1)
				ThrowArgumentException (value);
			return rval;
		}

		[DllImport (LIB, EntryPoint="Mono_Posix_FromPollEvents")]
		private static extern int FromPollEvents (PollEvents value, out Int16 rval);

		public static bool TryFromPollEvents (PollEvents value, out Int16 rval)
		{
			return FromPollEvents (value, out rval) == 0;
		}

		public static Int16 FromPollEvents (PollEvents value)
		{
			Int16 rval;
			if (FromPollEvents (value, out rval) == -1)
				ThrowArgumentException (value);
			return rval;
		}

		[DllImport (LIB, EntryPoint="Mono_Posix_ToPollEvents")]
		private static extern int ToPollEvents (Int16 value, out PollEvents rval);

		public static bool TryToPollEvents (Int16 value, out PollEvents rval)
		{
			return ToPollEvents (value, out rval) == 0;
		}

		public static PollEvents ToPollEvents (Int16 value)
		{
			PollEvents rval;
			if (ToPollEvents (value, out rval) == -1)
				ThrowArgumentException (value);
			return rval;
		}

		[DllImport (LIB, EntryPoint="Mono_Posix_FromPollfd")]
		private static extern int FromPollfd (ref Pollfd source, IntPtr destination);

		public static bool TryCopy (ref Pollfd source, IntPtr destination)
		{
			return FromPollfd (ref source, destination) == 0;
		}

		[DllImport (LIB, EntryPoint="Mono_Posix_ToPollfd")]
		private static extern int ToPollfd (IntPtr source, out Pollfd destination);

		public static bool TryCopy (IntPtr source, out Pollfd destination)
		{
			return ToPollfd (source, out destination) == 0;
		}

		[DllImport (LIB, EntryPoint="Mono_Posix_FromPosixFadviseAdvice")]
		private static extern int FromPosixFadviseAdvice (PosixFadviseAdvice value, out Int32 rval);

		public static bool TryFromPosixFadviseAdvice (PosixFadviseAdvice value, out Int32 rval)
		{
			return FromPosixFadviseAdvice (value, out rval) == 0;
		}

		public static Int32 FromPosixFadviseAdvice (PosixFadviseAdvice value)
		{
			Int32 rval;
			if (FromPosixFadviseAdvice (value, out rval) == -1)
				ThrowArgumentException (value);
			return rval;
		}

		[DllImport (LIB, EntryPoint="Mono_Posix_ToPosixFadviseAdvice")]
		private static extern int ToPosixFadviseAdvice (Int32 value, out PosixFadviseAdvice rval);

		public static bool TryToPosixFadviseAdvice (Int32 value, out PosixFadviseAdvice rval)
		{
			return ToPosixFadviseAdvice (value, out rval) == 0;
		}

		public static PosixFadviseAdvice ToPosixFadviseAdvice (Int32 value)
		{
			PosixFadviseAdvice rval;
			if (ToPosixFadviseAdvice (value, out rval) == -1)
				ThrowArgumentException (value);
			return rval;
		}

		[DllImport (LIB, EntryPoint="Mono_Posix_FromPosixMadviseAdvice")]
		private static extern int FromPosixMadviseAdvice (PosixMadviseAdvice value, out Int32 rval);

		public static bool TryFromPosixMadviseAdvice (PosixMadviseAdvice value, out Int32 rval)
		{
			return FromPosixMadviseAdvice (value, out rval) == 0;
		}

		public static Int32 FromPosixMadviseAdvice (PosixMadviseAdvice value)
		{
			Int32 rval;
			if (FromPosixMadviseAdvice (value, out rval) == -1)
				ThrowArgumentException (value);
			return rval;
		}

		[DllImport (LIB, EntryPoint="Mono_Posix_ToPosixMadviseAdvice")]
		private static extern int ToPosixMadviseAdvice (Int32 value, out PosixMadviseAdvice rval);

		public static bool TryToPosixMadviseAdvice (Int32 value, out PosixMadviseAdvice rval)
		{
			return ToPosixMadviseAdvice (value, out rval) == 0;
		}

		public static PosixMadviseAdvice ToPosixMadviseAdvice (Int32 value)
		{
			PosixMadviseAdvice rval;
			if (ToPosixMadviseAdvice (value, out rval) == -1)
				ThrowArgumentException (value);
			return rval;
		}

		[DllImport (LIB, EntryPoint="Mono_Posix_FromSealType")]
		private static extern int FromSealType (SealType value, out Int32 rval);

		public static bool TryFromSealType (SealType value, out Int32 rval)
		{
			return FromSealType (value, out rval) == 0;
		}

		public static Int32 FromSealType (SealType value)
		{
			Int32 rval;
			if (FromSealType (value, out rval) == -1)
				ThrowArgumentException (value);
			return rval;
		}

		[DllImport (LIB, EntryPoint="Mono_Posix_ToSealType")]
		private static extern int ToSealType (Int32 value, out SealType rval);

		public static bool TryToSealType (Int32 value, out SealType rval)
		{
			return ToSealType (value, out rval) == 0;
		}

		public static SealType ToSealType (Int32 value)
		{
			SealType rval;
			if (ToSealType (value, out rval) == -1)
				ThrowArgumentException (value);
			return rval;
		}

		[DllImport (LIB, EntryPoint="Mono_Posix_FromSeekFlags")]
		private static extern int FromSeekFlags (SeekFlags value, out Int16 rval);

		public static bool TryFromSeekFlags (SeekFlags value, out Int16 rval)
		{
			return FromSeekFlags (value, out rval) == 0;
		}

		public static Int16 FromSeekFlags (SeekFlags value)
		{
			Int16 rval;
			if (FromSeekFlags (value, out rval) == -1)
				ThrowArgumentException (value);
			return rval;
		}

		[DllImport (LIB, EntryPoint="Mono_Posix_ToSeekFlags")]
		private static extern int ToSeekFlags (Int16 value, out SeekFlags rval);

		public static bool TryToSeekFlags (Int16 value, out SeekFlags rval)
		{
			return ToSeekFlags (value, out rval) == 0;
		}

		public static SeekFlags ToSeekFlags (Int16 value)
		{
			SeekFlags rval;
			if (ToSeekFlags (value, out rval) == -1)
				ThrowArgumentException (value);
			return rval;
		}

		[DllImport (LIB, EntryPoint="Mono_Posix_FromShutdownOption")]
		private static extern int FromShutdownOption (ShutdownOption value, out Int32 rval);

		public static bool TryFromShutdownOption (ShutdownOption value, out Int32 rval)
		{
			return FromShutdownOption (value, out rval) == 0;
		}

		public static Int32 FromShutdownOption (ShutdownOption value)
		{
			Int32 rval;
			if (FromShutdownOption (value, out rval) == -1)
				ThrowArgumentException (value);
			return rval;
		}

		[DllImport (LIB, EntryPoint="Mono_Posix_ToShutdownOption")]
		private static extern int ToShutdownOption (Int32 value, out ShutdownOption rval);

		public static bool TryToShutdownOption (Int32 value, out ShutdownOption rval)
		{
			return ToShutdownOption (value, out rval) == 0;
		}

		public static ShutdownOption ToShutdownOption (Int32 value)
		{
			ShutdownOption rval;
			if (ToShutdownOption (value, out rval) == -1)
				ThrowArgumentException (value);
			return rval;
		}

		[DllImport (LIB, EntryPoint="Mono_Posix_FromSignum")]
		private static extern int FromSignum (Signum value, out Int32 rval);

		public static bool TryFromSignum (Signum value, out Int32 rval)
		{
			return FromSignum (value, out rval) == 0;
		}

		public static Int32 FromSignum (Signum value)
		{
			Int32 rval;
			if (FromSignum (value, out rval) == -1)
				ThrowArgumentException (value);
			return rval;
		}

		[DllImport (LIB, EntryPoint="Mono_Posix_ToSignum")]
		private static extern int ToSignum (Int32 value, out Signum rval);

		public static bool TryToSignum (Int32 value, out Signum rval)
		{
			return ToSignum (value, out rval) == 0;
		}

		public static Signum ToSignum (Int32 value)
		{
			Signum rval;
			if (ToSignum (value, out rval) == -1)
				ThrowArgumentException (value);
			return rval;
		}

		[DllImport (LIB, EntryPoint="Mono_Posix_FromSockaddrIn")]
		private static extern int FromSockaddrIn (SockaddrIn source, IntPtr destination);

		public static bool TryCopy (SockaddrIn source, IntPtr destination)
		{
			return FromSockaddrIn (source, destination) == 0;
		}

		[DllImport (LIB, EntryPoint="Mono_Posix_ToSockaddrIn")]
		private static extern int ToSockaddrIn (IntPtr source, SockaddrIn destination);

		public static bool TryCopy (IntPtr source, SockaddrIn destination)
		{
			return ToSockaddrIn (source, destination) == 0;
		}

		[DllImport (LIB, EntryPoint="Mono_Posix_FromSockaddrIn6")]
		private static extern int FromSockaddrIn6 (SockaddrIn6 source, IntPtr destination);

		public static bool TryCopy (SockaddrIn6 source, IntPtr destination)
		{
			return FromSockaddrIn6 (source, destination) == 0;
		}

		[DllImport (LIB, EntryPoint="Mono_Posix_ToSockaddrIn6")]
		private static extern int ToSockaddrIn6 (IntPtr source, SockaddrIn6 destination);

		public static bool TryCopy (IntPtr source, SockaddrIn6 destination)
		{
			return ToSockaddrIn6 (source, destination) == 0;
		}

		[DllImport (LIB, EntryPoint="Mono_Posix_FromSockaddrType")]
		private static extern int FromSockaddrType (SockaddrType value, out Int32 rval);

		internal static bool TryFromSockaddrType (SockaddrType value, out Int32 rval)
		{
			return FromSockaddrType (value, out rval) == 0;
		}

		internal static Int32 FromSockaddrType (SockaddrType value)
		{
			Int32 rval;
			if (FromSockaddrType (value, out rval) == -1)
				ThrowArgumentException (value);
			return rval;
		}

		[DllImport (LIB, EntryPoint="Mono_Posix_ToSockaddrType")]
		private static extern int ToSockaddrType (Int32 value, out SockaddrType rval);

		internal static bool TryToSockaddrType (Int32 value, out SockaddrType rval)
		{
			return ToSockaddrType (value, out rval) == 0;
		}

		internal static SockaddrType ToSockaddrType (Int32 value)
		{
			SockaddrType rval;
			if (ToSockaddrType (value, out rval) == -1)
				ThrowArgumentException (value);
			return rval;
		}

		[DllImport (LIB, EntryPoint="Mono_Posix_FromSysconfName")]
		private static extern int FromSysconfName (SysconfName value, out Int32 rval);

		public static bool TryFromSysconfName (SysconfName value, out Int32 rval)
		{
			return FromSysconfName (value, out rval) == 0;
		}

		public static Int32 FromSysconfName (SysconfName value)
		{
			Int32 rval;
			if (FromSysconfName (value, out rval) == -1)
				ThrowArgumentException (value);
			return rval;
		}

		[DllImport (LIB, EntryPoint="Mono_Posix_ToSysconfName")]
		private static extern int ToSysconfName (Int32 value, out SysconfName rval);

		public static bool TryToSysconfName (Int32 value, out SysconfName rval)
		{
			return ToSysconfName (value, out rval) == 0;
		}

		public static SysconfName ToSysconfName (Int32 value)
		{
			SysconfName rval;
			if (ToSysconfName (value, out rval) == -1)
				ThrowArgumentException (value);
			return rval;
		}

		[DllImport (LIB, EntryPoint="Mono_Posix_FromSyslogFacility")]
		private static extern int FromSyslogFacility (SyslogFacility value, out Int32 rval);

		public static bool TryFromSyslogFacility (SyslogFacility value, out Int32 rval)
		{
			return FromSyslogFacility (value, out rval) == 0;
		}

		public static Int32 FromSyslogFacility (SyslogFacility value)
		{
			Int32 rval;
			if (FromSyslogFacility (value, out rval) == -1)
				ThrowArgumentException (value);
			return rval;
		}

		[DllImport (LIB, EntryPoint="Mono_Posix_ToSyslogFacility")]
		private static extern int ToSyslogFacility (Int32 value, out SyslogFacility rval);

		public static bool TryToSyslogFacility (Int32 value, out SyslogFacility rval)
		{
			return ToSyslogFacility (value, out rval) == 0;
		}

		public static SyslogFacility ToSyslogFacility (Int32 value)
		{
			SyslogFacility rval;
			if (ToSyslogFacility (value, out rval) == -1)
				ThrowArgumentException (value);
			return rval;
		}

		[DllImport (LIB, EntryPoint="Mono_Posix_FromSyslogLevel")]
		private static extern int FromSyslogLevel (SyslogLevel value, out Int32 rval);

		public static bool TryFromSyslogLevel (SyslogLevel value, out Int32 rval)
		{
			return FromSyslogLevel (value, out rval) == 0;
		}

		public static Int32 FromSyslogLevel (SyslogLevel value)
		{
			Int32 rval;
			if (FromSyslogLevel (value, out rval) == -1)
				ThrowArgumentException (value);
			return rval;
		}

		[DllImport (LIB, EntryPoint="Mono_Posix_ToSyslogLevel")]
		private static extern int ToSyslogLevel (Int32 value, out SyslogLevel rval);

		public static bool TryToSyslogLevel (Int32 value, out SyslogLevel rval)
		{
			return ToSyslogLevel (value, out rval) == 0;
		}

		public static SyslogLevel ToSyslogLevel (Int32 value)
		{
			SyslogLevel rval;
			if (ToSyslogLevel (value, out rval) == -1)
				ThrowArgumentException (value);
			return rval;
		}

		[DllImport (LIB, EntryPoint="Mono_Posix_FromSyslogOptions")]
		private static extern int FromSyslogOptions (SyslogOptions value, out Int32 rval);

		public static bool TryFromSyslogOptions (SyslogOptions value, out Int32 rval)
		{
			return FromSyslogOptions (value, out rval) == 0;
		}

		public static Int32 FromSyslogOptions (SyslogOptions value)
		{
			Int32 rval;
			if (FromSyslogOptions (value, out rval) == -1)
				ThrowArgumentException (value);
			return rval;
		}

		[DllImport (LIB, EntryPoint="Mono_Posix_ToSyslogOptions")]
		private static extern int ToSyslogOptions (Int32 value, out SyslogOptions rval);

		public static bool TryToSyslogOptions (Int32 value, out SyslogOptions rval)
		{
			return ToSyslogOptions (value, out rval) == 0;
		}

		public static SyslogOptions ToSyslogOptions (Int32 value)
		{
			SyslogOptions rval;
			if (ToSyslogOptions (value, out rval) == -1)
				ThrowArgumentException (value);
			return rval;
		}

		[DllImport (LIB, EntryPoint="Mono_Posix_FromTimespec")]
		private static extern int FromTimespec (ref Timespec source, IntPtr destination);

		public static bool TryCopy (ref Timespec source, IntPtr destination)
		{
			return FromTimespec (ref source, destination) == 0;
		}

		[DllImport (LIB, EntryPoint="Mono_Posix_ToTimespec")]
		private static extern int ToTimespec (IntPtr source, out Timespec destination);

		public static bool TryCopy (IntPtr source, out Timespec destination)
		{
			return ToTimespec (source, out destination) == 0;
		}

		[DllImport (LIB, EntryPoint="Mono_Posix_FromTimeval")]
		private static extern int FromTimeval (ref Timeval source, IntPtr destination);

		public static bool TryCopy (ref Timeval source, IntPtr destination)
		{
			return FromTimeval (ref source, destination) == 0;
		}

		[DllImport (LIB, EntryPoint="Mono_Posix_ToTimeval")]
		private static extern int ToTimeval (IntPtr source, out Timeval destination);

		public static bool TryCopy (IntPtr source, out Timeval destination)
		{
			return ToTimeval (source, out destination) == 0;
		}

		[DllImport (LIB, EntryPoint="Mono_Posix_FromTimezone")]
		private static extern int FromTimezone (ref Timezone source, IntPtr destination);

		public static bool TryCopy (ref Timezone source, IntPtr destination)
		{
			return FromTimezone (ref source, destination) == 0;
		}

		[DllImport (LIB, EntryPoint="Mono_Posix_ToTimezone")]
		private static extern int ToTimezone (IntPtr source, out Timezone destination);

		public static bool TryCopy (IntPtr source, out Timezone destination)
		{
			return ToTimezone (source, out destination) == 0;
		}

		[DllImport (LIB, EntryPoint="Mono_Posix_FromUnixAddressFamily")]
		private static extern int FromUnixAddressFamily (UnixAddressFamily value, out Int32 rval);

		public static bool TryFromUnixAddressFamily (UnixAddressFamily value, out Int32 rval)
		{
			return FromUnixAddressFamily (value, out rval) == 0;
		}

		public static Int32 FromUnixAddressFamily (UnixAddressFamily value)
		{
			Int32 rval;
			if (FromUnixAddressFamily (value, out rval) == -1)
				ThrowArgumentException (value);
			return rval;
		}

		[DllImport (LIB, EntryPoint="Mono_Posix_ToUnixAddressFamily")]
		private static extern int ToUnixAddressFamily (Int32 value, out UnixAddressFamily rval);

		public static bool TryToUnixAddressFamily (Int32 value, out UnixAddressFamily rval)
		{
			return ToUnixAddressFamily (value, out rval) == 0;
		}

		public static UnixAddressFamily ToUnixAddressFamily (Int32 value)
		{
			UnixAddressFamily rval;
			if (ToUnixAddressFamily (value, out rval) == -1)
				ThrowArgumentException (value);
			return rval;
		}

		[DllImport (LIB, EntryPoint="Mono_Posix_FromUnixSocketControlMessage")]
		private static extern int FromUnixSocketControlMessage (UnixSocketControlMessage value, out Int32 rval);

		public static bool TryFromUnixSocketControlMessage (UnixSocketControlMessage value, out Int32 rval)
		{
			return FromUnixSocketControlMessage (value, out rval) == 0;
		}

		public static Int32 FromUnixSocketControlMessage (UnixSocketControlMessage value)
		{
			Int32 rval;
			if (FromUnixSocketControlMessage (value, out rval) == -1)
				ThrowArgumentException (value);
			return rval;
		}

		[DllImport (LIB, EntryPoint="Mono_Posix_ToUnixSocketControlMessage")]
		private static extern int ToUnixSocketControlMessage (Int32 value, out UnixSocketControlMessage rval);

		public static bool TryToUnixSocketControlMessage (Int32 value, out UnixSocketControlMessage rval)
		{
			return ToUnixSocketControlMessage (value, out rval) == 0;
		}

		public static UnixSocketControlMessage ToUnixSocketControlMessage (Int32 value)
		{
			UnixSocketControlMessage rval;
			if (ToUnixSocketControlMessage (value, out rval) == -1)
				ThrowArgumentException (value);
			return rval;
		}

		[DllImport (LIB, EntryPoint="Mono_Posix_FromUnixSocketFlags")]
		private static extern int FromUnixSocketFlags (UnixSocketFlags value, out Int32 rval);

		public static bool TryFromUnixSocketFlags (UnixSocketFlags value, out Int32 rval)
		{
			return FromUnixSocketFlags (value, out rval) == 0;
		}

		public static Int32 FromUnixSocketFlags (UnixSocketFlags value)
		{
			Int32 rval;
			if (FromUnixSocketFlags (value, out rval) == -1)
				ThrowArgumentException (value);
			return rval;
		}

		[DllImport (LIB, EntryPoint="Mono_Posix_ToUnixSocketFlags")]
		private static extern int ToUnixSocketFlags (Int32 value, out UnixSocketFlags rval);

		public static bool TryToUnixSocketFlags (Int32 value, out UnixSocketFlags rval)
		{
			return ToUnixSocketFlags (value, out rval) == 0;
		}

		public static UnixSocketFlags ToUnixSocketFlags (Int32 value)
		{
			UnixSocketFlags rval;
			if (ToUnixSocketFlags (value, out rval) == -1)
				ThrowArgumentException (value);
			return rval;
		}

		[DllImport (LIB, EntryPoint="Mono_Posix_FromUnixSocketOptionName")]
		private static extern int FromUnixSocketOptionName (UnixSocketOptionName value, out Int32 rval);

		public static bool TryFromUnixSocketOptionName (UnixSocketOptionName value, out Int32 rval)
		{
			return FromUnixSocketOptionName (value, out rval) == 0;
		}

		public static Int32 FromUnixSocketOptionName (UnixSocketOptionName value)
		{
			Int32 rval;
			if (FromUnixSocketOptionName (value, out rval) == -1)
				ThrowArgumentException (value);
			return rval;
		}

		[DllImport (LIB, EntryPoint="Mono_Posix_ToUnixSocketOptionName")]
		private static extern int ToUnixSocketOptionName (Int32 value, out UnixSocketOptionName rval);

		public static bool TryToUnixSocketOptionName (Int32 value, out UnixSocketOptionName rval)
		{
			return ToUnixSocketOptionName (value, out rval) == 0;
		}

		public static UnixSocketOptionName ToUnixSocketOptionName (Int32 value)
		{
			UnixSocketOptionName rval;
			if (ToUnixSocketOptionName (value, out rval) == -1)
				ThrowArgumentException (value);
			return rval;
		}

		[DllImport (LIB, EntryPoint="Mono_Posix_FromUnixSocketProtocol")]
		private static extern int FromUnixSocketProtocol (UnixSocketProtocol value, out Int32 rval);

		public static bool TryFromUnixSocketProtocol (UnixSocketProtocol value, out Int32 rval)
		{
			return FromUnixSocketProtocol (value, out rval) == 0;
		}

		public static Int32 FromUnixSocketProtocol (UnixSocketProtocol value)
		{
			Int32 rval;
			if (FromUnixSocketProtocol (value, out rval) == -1)
				ThrowArgumentException (value);
			return rval;
		}

		[DllImport (LIB, EntryPoint="Mono_Posix_ToUnixSocketProtocol")]
		private static extern int ToUnixSocketProtocol (Int32 value, out UnixSocketProtocol rval);

		public static bool TryToUnixSocketProtocol (Int32 value, out UnixSocketProtocol rval)
		{
			return ToUnixSocketProtocol (value, out rval) == 0;
		}

		public static UnixSocketProtocol ToUnixSocketProtocol (Int32 value)
		{
			UnixSocketProtocol rval;
			if (ToUnixSocketProtocol (value, out rval) == -1)
				ThrowArgumentException (value);
			return rval;
		}

		[DllImport (LIB, EntryPoint="Mono_Posix_FromUnixSocketType")]
		private static extern int FromUnixSocketType (UnixSocketType value, out Int32 rval);

		public static bool TryFromUnixSocketType (UnixSocketType value, out Int32 rval)
		{
			return FromUnixSocketType (value, out rval) == 0;
		}

		public static Int32 FromUnixSocketType (UnixSocketType value)
		{
			Int32 rval;
			if (FromUnixSocketType (value, out rval) == -1)
				ThrowArgumentException (value);
			return rval;
		}

		[DllImport (LIB, EntryPoint="Mono_Posix_ToUnixSocketType")]
		private static extern int ToUnixSocketType (Int32 value, out UnixSocketType rval);

		public static bool TryToUnixSocketType (Int32 value, out UnixSocketType rval)
		{
			return ToUnixSocketType (value, out rval) == 0;
		}

		public static UnixSocketType ToUnixSocketType (Int32 value)
		{
			UnixSocketType rval;
			if (ToUnixSocketType (value, out rval) == -1)
				ThrowArgumentException (value);
			return rval;
		}

		[DllImport (LIB, EntryPoint="Mono_Posix_FromUtimbuf")]
		private static extern int FromUtimbuf (ref Utimbuf source, IntPtr destination);

		public static bool TryCopy (ref Utimbuf source, IntPtr destination)
		{
			return FromUtimbuf (ref source, destination) == 0;
		}

		[DllImport (LIB, EntryPoint="Mono_Posix_ToUtimbuf")]
		private static extern int ToUtimbuf (IntPtr source, out Utimbuf destination);

		public static bool TryCopy (IntPtr source, out Utimbuf destination)
		{
			return ToUtimbuf (source, out destination) == 0;
		}

		[DllImport (LIB, EntryPoint="Mono_Posix_FromWaitOptions")]
		private static extern int FromWaitOptions (WaitOptions value, out Int32 rval);

		public static bool TryFromWaitOptions (WaitOptions value, out Int32 rval)
		{
			return FromWaitOptions (value, out rval) == 0;
		}

		public static Int32 FromWaitOptions (WaitOptions value)
		{
			Int32 rval;
			if (FromWaitOptions (value, out rval) == -1)
				ThrowArgumentException (value);
			return rval;
		}

		[DllImport (LIB, EntryPoint="Mono_Posix_ToWaitOptions")]
		private static extern int ToWaitOptions (Int32 value, out WaitOptions rval);

		public static bool TryToWaitOptions (Int32 value, out WaitOptions rval)
		{
			return ToWaitOptions (value, out rval) == 0;
		}

		public static WaitOptions ToWaitOptions (Int32 value)
		{
			WaitOptions rval;
			if (ToWaitOptions (value, out rval) == -1)
				ThrowArgumentException (value);
			return rval;
		}

		[DllImport (LIB, EntryPoint="Mono_Posix_FromXattrFlags")]
		private static extern int FromXattrFlags (XattrFlags value, out Int32 rval);

		public static bool TryFromXat
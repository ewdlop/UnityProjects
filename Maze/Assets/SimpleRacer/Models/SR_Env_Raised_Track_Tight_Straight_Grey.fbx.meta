// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

#pragma warning disable IDE0060 // unused parameters
using System.Runtime.CompilerServices;

namespace System.Runtime.Intrinsics.Arm
{
    /// <summary>
    /// This class provides access to the ARM SHA1 hardware instructions via intrinsics
    /// </summary>
    [CLSCompliant(false)]
    public abstract class Sha1 : ArmBase
    {
        internal Sha1() { }

        public static new bool IsSupported { [Intrinsic] get => false; }

        /// <summary>
        /// uint32_t vsha1h_u32 (uint32_t hash_e)
        ///   A32: SHA1H.32 Qd, Qm
        ///   A64: SHA1H Sd, Sn
        /// </summary>
        public static uint FixedRotate(uint hash_e) { throw new PlatformNotSupportedException(); }

        /// <summary>
        /// uint32x4_t vsha1cq_u32 (uint32x4_t hash_abcd, uint32_t hash_e, uint32x4_t wk)
        ///   A32: SHA1C.32 Qd, Qn, Qm
        ///   A64: SHA1C Qd, Sn, Vm.4S
        /// </summary>
        public static Vector128<uint> HashUpdateChoose(Vector128<uint> hash_abcd, uint hash_e, Vector128<uint> wk) { throw new PlatformNotSupportedException(); }

        /// <summary>
        /// uint32x4_t vsha1mq_u32 (uint32x4_t hash_abcd, uint32_t hash_e, uint32x4_t wk)
        ///   A32: SHA1M.32 Qd, Qn, Qm
        ///   A64: SHA1M Qd, Sn, Vm.4S
        /// </summary>
        public static Vector128<uint> HashUpdateMajority(Vector128<uint> hash_abcd, uint hash_e, Vector128<uint> wk) { throw new PlatformNotSupportedException(); }

        /// <summary>
        /// uint
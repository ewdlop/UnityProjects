er.scale == ScaleNAN)
                        {
                            return info.NaNSymbol;
                        }
                        else if (number.scale == ScaleINF)
                        {
                            return number.sign ? info.NegativeInfinitySymbol : info.PositiveInfinitySymbol;
                        }

                        if ((float)NumberToDouble(ref number) == value)
                        {
                            NumberToString(ref sb, ref number, 'G', FloatPrecision, info);
                        }
                        else
                        {
                            DoubleToNumber(value, 9, ref number);
                            NumberToString(ref sb, ref number, 'G', 9, info);
                        }
                        return null;
                    }

                case 'E':
                case 'e':
                    // Round values less than E14 to 15 digits.
                    if (digits > 6)
                    {
                        precision = 9;
                    }
                    break;

                case 'G':
                case 'g':
                    // Round values less than G15 to 15 digits. G16 and G17 will not be touched.
                    if (digits > 7)
                    {
                        precision = 9;
                    }
                    break;
            }

            DoubleToNumber(value, precision, ref number);
            if (number.scale == ScaleNAN)
            {
                return info.NaNSymbol;
            }
            else if (number.scale == ScaleINF)
            {
                return number.sign ? info.NegativeInfinitySymbol : info.PositiveInfinitySymbol;
            }

            if (fmt != 0)
            {
                NumberToString(ref sb, ref number, fmt, digits, info);
            }
            else
            {
                NumberToStringFormat(ref sb, ref number, format, info);
            }
            return null;
        }

        private static bool TryCopyTo(string source, Span<char> destination, out int charsWritten)
        {
            Debug.Assert(source != null);

            if (source.AsSpan().TryCopyTo(destination))
            {
                charsWritten = source.Length;
                return true;
            }

            charsWritten = 0;
            return false;
        }

        public static string FormatInt32(int value, ReadOnlySpan<char> format, IFormatProvider provider)
        {
            // Fast path for default format with a non-negative value
            if (value >= 0 && format.Length == 0)
            {
                return UInt32ToDecStr((uint)value, digits: -1);
            }

            char fmt = ParseFormatSpecifier(format, out int digits);
            char fmtUpper = (char)(fmt & 0xFFDF); // ensure fmt is upper-cased for purposes of comparison
            if ((fmtUpper == 'G' && digits < 1) || fmtUpper == 'D')
            {
                return value >= 0 ?
                    UInt32ToDecStr((uint)value, digits) :
                    NegativeInt32ToDecStr(value, digits, NumberFormatInfo.GetInstance(provider).NegativeSign);
            }
            else if (fmtUpper == 'X')
            {
                // The fmt-(X-A+10) hack has the effect of dictating whether we produce uppercase or lowercase
                // hex numbers for a-f. 'X' as the fmt code produces uppercase. 'x' as the format code produces lowercase.
                return Int32ToHexStr(value, (char)(fmt - ('X' - 'A' + 10)), digits);
            }
            else
            {
                NumberFormatInfo info = NumberFormatInfo.GetInstance(provider);
                NumberBuffer number = default;
                Int32ToNumber(value, ref number);
                ValueStringBuilder sb;
                unsafe
                {
                    char* stackPtr = stackalloc char[CharStackBufferSize];
                    sb = new ValueStringBuilder(new Span<char>(stackPtr, CharStackBufferSize));
                }
                if (fmt != 0)
                {
                    NumberToString(ref sb, ref number, fmt, digits, info);
                }
                else
                {
                    NumberToStringFormat(ref sb, ref number, format, info);
                }
                return sb.ToString();
            }
        }

        public static bool TryFormatInt32(int value, ReadOnlySpan<char> format, IFormatProvider provider, Span<char> destination, out int charsWritten)
        {
            // Fast path for default format with a non-negative value
            if (value >= 0 && format.Length == 0)
            {
                return TryUInt32ToDecStr((uint)value, digits: -1, destination, out charsWritten);
            }

            char fmt = ParseFormatSpecifier(format, out int digits);
            char fmtUpper = (char)(fmt & 0xFFDF); // ensure fmt is upper-cased for purposes of comparison
            if ((fmtUpper == 'G' && digits < 1) || fmtUpper == 'D')
            {
                return value >= 0 ?
                    TryUInt32ToDecStr((uint)value, digits, destination, out charsWritten) :
                    TryNegativeInt32ToDecStr(value, digits, NumberFormatInfo.GetInstance(provider).NegativeSign, destination, out charsWritten);
            }
            else if (fmtUpper == 'X')
            {
                // The fmt-(X-A+10) hack has the effect of dictating whether we produce uppercase or lowercase
                // hex numbers for a-f. 'X' as the fmt code produces uppercase. 'x' as the format code produces lowercase.
                return TryInt32ToHexStr(value, (char)(fmt - ('X' - 'A' + 10)), digits, destination, out charsWritten);
            }
            else
            {
                NumberFormatInfo info = NumberFormatInfo.GetInstance(provider);
                NumberBuffer number = default;
                Int32ToNumber(value, ref number);
                ValueStringBuilder sb;
                unsafe
                {
                    char* stackPtr = stackalloc char[CharStackBufferSize];
                    sb = new ValueStringBuilder(new Span<char>(stackPtr, CharStackBufferSize));
                }
                if (fmt != 0)
                {
                    NumberToString(ref sb, ref number, fmt, digits, info);
                }
                else
                {
                    NumberToStringFormat(ref sb, ref number, format, info);
                }
                return sb.TryCopyTo(destination, out charsWritten);
            }
        }

        public static string FormatUInt32(uint value, ReadOnlySpan<char> format, IFormatProvider provider)
        {
            // Fast path for default format
            if (format.Length == 0)
            {
                return UInt32ToDecStr(value, digits: -1);
            }

            char fmt = ParseFormatSpecifier(format, out int digits);
            char fmtUpper = (char)(fmt & 0xFFDF); // ensure fmt is upper-cased for purposes of comparison
            if ((fmtUpper == 'G' && digits < 1) || fmtUpper == 'D')
            {
                return UInt32ToDecStr(value, digits);
            }
            else if (fmtUpper == 'X')
            {
                // The fmt-(X-A+10) hack has the effect of dictating whether we produce uppercase or lowercase
                // hex numbers for a-f. 'X' as the fmt code produces uppercase. 'x' as the format code produces lowercase.
                return Int32ToHexStr((int)value, (char)(fmt - ('X' - 'A' + 10)), digits);
            }
            else
            {
                NumberFormatInfo info = NumberFormatInfo.GetInstance(provider);
                NumberBuffer number = default;
                UInt32ToNumber(value, ref number);
                ValueStringBuilder sb;
                unsafe
                {
                    char* stackPtr = stackalloc char[CharStackBufferSize];
                    sb = new ValueStringBuilder(new Span<char>(stackPtr, CharStackBufferSize));
                }
                if (fmt != 0)
                {
                    NumberToString(ref sb, ref number, fmt, digits, info);
                }
                else
                {
                    NumberToStringFormat(ref sb, ref number, format, info);
                }
                return sb.ToString();
            }
        }

        public static bool TryFormatUInt32(uint value, ReadOnlySpan<char> format, IFormatProvider provider, Span<char> destination, out int charsWritten)
        {
            // Fast path for default format
            if (format.Length == 0)
            {
                return TryUInt32ToDecStr(value, digits: -1, destination, out charsWritten);
            }

            char fmt = ParseFormatSpecifier(format, out int digits);
            char fmtUpper = (char)(fmt & 0xFFDF); // ensure fmt is upper-cased for purposes of comparison
            if ((fmtUpper == 'G' && digits < 1) || fmtUpper == 'D')
            {
                return TryUInt32ToDecStr(value, digits, destination, out charsWritten);
            }
            else if (fmtUpper == 'X')
            {
                // The fmt-(X-A+10) hack has the effect of dictating whether we produce uppercase or lowercase
                // hex numbers for a-f. 'X' as the fmt code produces uppercase. 'x' as the format code produces lowercase.
                return TryInt32ToHexStr((int)value, (char)(fmt - ('X' - 'A' + 10)), digits, destination, out charsWritten);
            }
            else
            {
                NumberFormatInfo info = NumberFormatInfo.GetInstance(provider);
                NumberBuffer number = default;
                UInt32ToNumber(value, ref number);
                ValueStringBuilder sb;
                unsafe
                {
                    char* stackPtr = stackalloc char[CharStackBufferSize];
                    sb = new ValueStringBuilder(new Span<char>(stackPtr, CharStackBufferSize));
                }
                if (fmt != 0)
                {
                    NumberToString(ref sb, ref number, fmt, digits, info);
                }
                else
                {
                    NumberToStringFormat(ref sb, ref number, format, info);
                }
                return sb.TryCopyTo(destination, out charsWritten);
            }
        }

        public static string FormatInt64(long value, ReadOnlySpan<char> format, IFormatProvider provider)
        {
            // Fast path for default format with a non-negative value
            if (value >= 0 && format.Length == 0)
            {
                return UInt64ToDecStr((ulong)value, digits: -1);
            }

            char fmt = ParseFormatSpecifier(format, out int digits);
            char fmtUpper = (char)(fmt & 0xFFDF); // ensure fmt is upper-cased for purposes of comparison
            if ((fmtUpper == 'G' && digits < 1) || fmtUpper == 'D')
            {
                return value >= 0 ?
                    UInt64ToDecStr((ulong)value, digits) :
                    NegativeInt64ToDecStr(value, digits, NumberFormatInfo.GetInstance(provider).NegativeSign);
            }
            else if (fmtUpper == 'X')
            {
                // The fmt-(X-A+10) hack has the effect of dictating whether we produce uppercase or lowercase
                // hex numbers for a-f. 'X' as the fmt code produces uppercase. 'x' as the format code
                // produces lowercase.
                return Int64ToHexStr(value, (char)(fmt - ('X' - 'A' + 10)), digits);
            }
            else
            {
                NumberFormatInfo info = NumberFormatInfo.GetInstance(provider);
                NumberBuffer number = default;
                Int64ToNumber(value, ref number);
                ValueStringBuilder sb;
                unsafe
                {
                    char* stackPtr = stackalloc char[CharStackBufferSize];
                    sb = new ValueStringBuilder(new Span<char>(stackPtr, CharStackBufferSize));
                }
                if (fmt != 0)
                {
                    NumberToString(ref sb, ref number, fmt, digits, info);
                }
                else
                {
                    NumberToStringFormat(ref sb, ref number, format, info);
                }
                return sb.ToString();
            }
        }

        public static bool TryFormatInt64(long value, ReadOnlySpan<char> format, IFormatProvider provider, Span<char> destination, out int charsWritten)
        {
            // Fast path for default format with a non-negative value
            if (value >= 0 && format.Length == 0)
            {
                return TryUInt64ToDecStr((ulong)value, digits: -1, destination, out charsWritten);
            }

            char fmt = ParseFormatSpecifier(format, out int digits);
            char fmtUpper = (char)(fmt & 0xFFDF); // ensure fmt is upper-cased for purposes of comparison
            if ((fmtUpper == 'G' && digits < 1) || fmtUpper == 'D')
            {
                return value >= 0 ?
                    TryUInt64ToDecStr((ulong)value, digits, destination, out charsWritten) :
                    TryNegativeInt64ToDecStr(value, digits, NumberFormatInfo.GetInstance(provider).NegativeSign, destination, out charsWritten);
            }
            else if (fmtUpper == 'X')
            {
                // The fmt-(X-A+10) hack has the effect of dictating whether we produce uppercase or lowercase
                // hex numbers for a-f. 'X' as the fmt code produces uppercase. 'x' as the format code
                // produces lowercase.
                return TryInt64ToHexStr(value, (char)(fmt - ('X' - 'A' + 10)), digits, destination, out charsWritten);
            }
            else
            {
                NumberFormatInfo info = NumberFormatInfo.GetInstance(provider);
                NumberBuffer number = default;
                Int64ToNumber(value, ref number);
                ValueStringBuilder sb;
                unsafe
                {
                    char* stackPtr = stackalloc char[CharStackBufferSize];
                    sb = new ValueStringBuilder(new Span<char>(stackPtr, CharStackBufferSize));
                }
                if (fmt != 0)
                {
                    NumberToString(ref sb, ref number, fmt, digits, info);
                }
                else
                {
                    NumberToStringFormat(ref sb, ref number, format, info);
                }
                return sb.TryCopyTo(destination, out charsWritten);
            }
        }

        public static string FormatUInt64(ulong value, ReadOnlySpan<char> format, IFormatProvider provider)
        {
            // Fast path for default format
            if (format.Length == 0)
            {
                return UInt64ToDecStr(value, digits: -1);
            }

            char fmt = ParseFormatSpecifier(format, out int digits);
            char fmtUpper = (char)(fmt & 0xFFDF); // ensure fmt is upper-cased for purposes of comparison
            if ((fmtUpper == 'G' && digits < 1) || fmtUpper == 'D')
            {
                return UInt64ToDecStr(value, digits);
            }
            else if (fmtUpper == 'X')
            {
                // The fmt-(X-A+10) hack has the effect of dictating whether we produce uppercase or lowercase
                // hex numbers for a-f. 'X' as the fmt code produces uppercase. 'x' as the format code
                // produces lowercase.
                return Int64ToHexStr((long)value, (char)(fmt - ('X' - 'A' + 10)), digits);
            }
            else
            {
                NumberFormatInfo info = NumberFormatInfo.GetInstance(provider);
                NumberBuffer number = default;
                UInt64ToNumber(value, ref number);
                ValueStringBuilder sb;
                unsafe
                {
                    char* stackPtr = stackalloc char[CharStackBufferSize];
                    sb = new ValueStringBuilder(new Span<char>(stackPtr, CharStackBufferSize));
                }
                if (fmt != 0)
                {
                    NumberToString(ref sb, ref number, fmt, digits, info);
                }
                else
                {
                    NumberToStringFormat(ref sb, ref number, format, info);
                }
                return sb.ToString();
            }
        }

        public static bool TryFormatUInt64(ulong value, ReadOnlySpan<char> format, IFormatProvider provider, Span<char> destination, out int charsWritten)
        {
            // Fast path for default format
            if (format.Length == 0)
            {
                return TryUInt64ToDecStr(value, digits: -1, destination, out charsWritten);
            }

            char fmt = ParseFormatSpecifier(format, out int digits);
            char fmtUpper = (char)(fmt & 0xFFDF); // ensure fmt is upper-cased for purposes of comparison
            if ((fmtUpper == 'G' && digits < 1) || fmtUpper == 'D')
            {
                return TryUInt64ToDecStr(value, digits, destination, out charsWritten);
            }
            else if (fmtUpper == 'X')
            {
                // The fmt-(X-A+10) hack has the effect of dictating whether we produce uppercase or lowercase
                // hex numbers for a-f. 'X' as the fmt code produces uppercase. 'x' as the format code
                // produces lowercase.
                return TryInt64ToHexStr((long)value, (char)(fmt - ('X' - 'A' + 10)), digits, destination, out charsWritten);
            }
            else
            {
                NumberFormatInfo info = NumberFormatInfo.GetInstance(provider);
                NumberBuffer number = default;
                UInt64ToNumber(value, ref number);
                ValueStringBuilder sb;
                unsafe
                {
                    char* stackPtr = stackalloc char[CharStackBufferSize];
                    sb = new ValueStringBuilder(new Span<char>(stackPtr, CharStackBufferSize));
                }
                if (fmt != 0)
                {
                    NumberToString(ref sb, ref number, fmt, digits, info);
                }
                else
                {
                    NumberToStringFormat(ref sb, ref number, format, info);
                }
                return sb.TryCopyTo(destination, out charsWritten);
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)] // called from only one location
        private static unsafe void Int32ToNumber(int value, ref NumberBuffer number)
        {
            number.precision = Int32Precision;

            if (value >= 0)
            {
                number.sign = false;
            }
            else
            {
                number.sign = true;
                value = -value;
            }

            char* buffer = number.digits;
            char* p = UInt32ToDecChars(buffer + Int32Precision, (uint)value, 0);
            int i = (int)(buffer + Int32Precision - p);

            number.scale = i;
            number.kind = NumberBufferKind.Integer;

            char* dst = number.digits;
            while (--i >= 0)
                *dst++ = *p++;
            *dst = '\0';
        }

        private static unsafe string NegativeInt32ToDecStr(int value, int digits, string sNegative)
        {
            Debug.Assert(value < 0);

            if (digits < 1)
                digits = 1;

            int bufferLength = Math.Max(digits, FormattingHelpers.CountDigits((uint)(-value))) + sNegative.Length;
            string result = string.FastAllocateString(bufferLength);
            fixed (char* buffer = result)
            {
                char* p = UInt32ToDecChars(buffer + bufferLength, (uint)(-value), digits);
                Debug.Assert(p == buffer + sNegative.Length);

                for (int i = sNegative.Length - 1; i >= 0; i--)
                {
                    *(--p) = sNegative[i];
                }
                Debug.Assert(p == buffer);
            }
            return result;
        }

        private static unsafe bool TryNegativeInt32ToDecStr(int value, int digits, string sNegative, Span<char> destination, out int charsWritten)
        {
            Debug.Assert(value < 0);

            if (digits < 1)
                digits = 1;

            int bufferLength = Math.Max(digits, FormattingHelpers.CountDigits((uint)(-value))) + sNegative.Length;
            if (bufferLength > destination.Length)
            {
                charsWritten = 0;
                return false;
            }

            charsWritten = bufferLength;
            fixed (char* buffer = &MemoryMarshal.GetReference(destination))
            {
                char* p = UInt32ToDecChars(buffer + bufferLength, (uint)(-value), digits);
                Debug.Assert(p == buffer + sNegative.Length);

                for (int i = sNegative.Length - 1; i >= 0; i--)
                {
                    *(--p) = sNegative[i];
                }
                Debug.Assert(p == buffer);
            }
            return true;
        }

        private static unsafe string Int32ToHexStr(int value, char hexBase, int digits)
        {
            if (digits < 1)
                digits = 1;

            int bufferLength = Math.Max(digits, FormattingHelpers.CountHexDigits((uint)value));
            string result = string.FastAllocateString(bufferLength);
            fixed (char* buffer = result)
            {
                char* p = Int32ToHexChars(buffer + bufferLength, (uint)value, hexBase, digits);
                Debug.Assert(p == buffer);
            }
            return result;
        }

        private static unsafe bool TryInt32ToHexStr(int value, char hexBase, int digits, Span<char> destination, out int charsWritten)
        {
            if (digits < 1)
                digits = 1;

            int bufferLength = Math.Max(digits, FormattingHelpers.CountHexDigits((uint)value));
            if (bufferLength > destination.Length)
            {
                charsWritten = 0;
                return false;
            }

            charsWritten = bufferLength;
            fixed (char* buffer = &MemoryMarshal.GetReference(
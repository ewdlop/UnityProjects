/*
Author:
    Jay Krell (jaykrell@microsoft.com)

Copyright 2018 Microsoft
Licensed under the MIT license. See LICENSE file in the project root for full license information.

http://www.mono-project.com/docs/advanced/runtime/docs/generic-sharing/
1. Non-generic non-static methods of reference types have access to the
   RGCTX via the “this” argument (this->vtable->rgctx).
2. a. Non-generic static methods of reference types and b. non-generic methods
   of value types need to be passed a pointer to the caller’s class’s VTable in the MONO_ARCH_RGCTX_REG register.
3. Generic methods need to be passed a pointer to the MRGCTX in the MONO_ARCH_RGCTX_REG register

Test case 3.

using System;
using System.Runtime.CompilerServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

unsafe class A
{
    [MethodImpl (NoInlining)]
    static int check (long stack1, long stack2)
    {
	return (stack1 == stack2) ? 0 : 1;
    }

    [MethodImpl (NoInlining)]
    public int f1<T> (int counter, long initial_stack, long current_stack)
    {
	int local;
	if (counter > 0)
	    return f2<T> (counter - 1, initial_stack, (long)&local);
	return check ((long)&local, current_stack);
    }

    [MethodImpl (NoInlining)]
    public int f2<T> (int counter, long initial_stack, long current_stack)
    {
	int local;
	if (counter > 0)
	    return f1<T> (counter - 1, initial_stack, (long)&local);
	return check ((long)&local, current_stack);
    }
}

unsafe class B
{
    [MethodImpl (NoInlining)]
    public static void Main()
    {
	int stack;
	Environment.Exit(new A().f1<object> (100, (long)&stack, 0));
    }
}
*/

.assembly extern mscorlib { }

.assembly 'tai
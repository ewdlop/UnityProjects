nnelWithOnBehalfOfToken(SecurityToken onBehalfOf)
        {
            TChannel channel = this.CreateChannel();
            FederatedClientCredentialsParameters parameters = new FederatedClientCredentialsParameters();
            parameters.OnBehalfOf = onBehalfOf;
            ((IChannel)channel).GetProperty<ChannelParameterCollection>().Add(parameters);
            return channel;
        }

        public TChannel CreateChannelWithOnBehalfOfToken(SecurityToken onBehalfOf, EndpointAddress address)
        {
            TChannel channel = this.CreateChannel(address);
            FederatedClientCredentialsParameters parameters = new FederatedClientCredentialsParameters();
            parameters.OnBehalfOf = onBehalfOf;
            ((IChannel)channel).GetProperty<ChannelParameterCollection>().Add(parameters);
            return channel;
        }

        public TChannel CreateChannelWithOnBehalfOfToken(SecurityToken onBehalfOf, EndpointAddress address, Uri via)
        {
            TChannel channel = this.CreateChannel(address, via);
            FederatedClientCredentialsParameters parameters = new FederatedClientCredentialsParameters();
            parameters.OnBehalfOf = onBehalfOf;
            ((IChannel)channel).GetProperty<ChannelParameterCollection>().Add(parameters);
            return channel;
        }

        internal UChannel CreateChannel<UChannel>(EndpointAddress address)
        {
            EnsureOpened();
            return this.ServiceChannelFactory.CreateChannel<UChannel>(address);
        }

        internal UChannel CreateChannel<UChannel>(EndpointAddress address, U
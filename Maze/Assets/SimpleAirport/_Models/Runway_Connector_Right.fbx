{
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

  // Execute
  CefRefPtr<CefImage> _retval = CefWindowCppToC::Get(self)->GetWindowIcon();

  // Return type: refptr_same
  return CefImageCppToC::Wrap(_retval);
}

void CEF_CALLBACK window_set_window_app_icon(struct _cef_window_t* self,
    cef_image_t* image) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;
  // Verify param: image; type: refptr_same
  DCHECK(image);
  if (!image)
    return;

  // Execute
  CefWindowCppToC::Get(self)->SetWindowAppIcon(
      CefImageCppToC::Unwrap(image));
}

cef_image_t* CEF_CALLBACK window_get_window_app_icon(
    struct _cef_window_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

  // Execute
  CefRefPtr<CefImage> _retval = CefWindowCppToC::Get(self)->GetWindowAppIcon();

  // Return type: refptr_same
  return CefImageCppToC::Wrap(_retval);
}

void CEF_CALLBACK window_show_menu(struct _cef_window_t* self,
    cef_menu_model_t* menu_model, const cef_point_t* screen_point,
    cef_menu_anchor_position_t anchor_position) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;
  // Verify param: menu_model; type: refptr_same
  DCHECK(menu_model);
  if (!menu_model)
    return;
  // Verify param: screen_point; type: simple_byref_const
  DCHECK(screen_point);
  if (!screen_point)
    return;

  // Translate param: screen_point; type: simple_byref_const
  CefPoint screen_pointVal = screen_point?*screen_point:CefPoint();

  // Execute
  CefWindowCppToC::Get(self)->ShowMenu(
      CefMenuModelCppToC::Unwrap(menu_model),
      screen_pointVal,
      anchor_position);
}

void CEF_CALLBACK window_cancel_menu(struct _cef_window_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;

  // Execute
  CefWindowCppToC::Get(self)->CancelMenu();
}

cef_display_t* CEF_CALLBACK window_get_display(struct _cef_window_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

  // Execute
  CefRefPtr<CefDisplay> _retval = CefWindowCppToC::Get(self)->GetDisplay();

  // Return type: refptr_same
  return CefDisplayCppToC::Wrap(_retval);
}

cef_rect_t CEF_CALLBACK window_get_client_area_bounds_in_screen(
    struct _cef_window_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return CefRect();

  // Execute
  cef_rect_t _retval = CefWindowCppToC::Get(self)->GetClientAreaBoundsInScreen(
      );

  // Return type: simple
  return _retval;
}

void CEF_CALLBACK window_set_draggable_regions(struct _cef_window_t* self,
    size_t regionsCount, cef_draggable_region_t const* regions) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;
  // Unverified params: regions

  // Translate param: regions; type: simple_vec_byref_const
  std::vector<CefDraggableRegion > regionsList;
  if (regionsCount > 0) {
    for (size_t i = 0; i < regionsCount; ++i) {
      CefDraggableRegion regionsVal = regions[i];
      regionsList.push_back(regionsVal);
    }
  }

  // Execute
  CefWindowCppToC::Get(self)->SetDraggableRegions(
      regionsList);
}

cef_window_handle_t CEF_CALLBACK window_get_window_handle(
    struct _cef_window_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return kNullWindowHandle;

  // Execute
  cef_window_handle_t _retval = CefWindowCppToC::Get(self)->GetWindowHandle();

  // Return type: simple
  return _retval;
}

void CEF_CALLBACK window_send_key_press(struct _cef_window_t* self,
    int key_code, uint32 event_flags) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;

  // Execute
  CefWindowCppToC::Get(self)->SendKeyPress(
      key_code,
      event_flags);
}

void CEF_CALLBACK window_send_mouse_move(struct _cef_window_t* self,
    int screen_x, int screen_y) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;

  // Execute
  CefWindowCppToC::Get(self)->SendMouseMove(
      screen_x,
      screen_y);
}

void CEF_CALLBACK window_send_mouse_events(struct _cef_window_t* self,
    cef_mouse_button_type_t button, int mouse_down, int mouse_up) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;

  // Execute
  CefWindowCppToC::Get(self)->SendMouseEvents(
      button,
      mouse_down?true:false,
      mouse_up?true:false);
}

void CEF_CALLBACK window_set_accelerator(struct _cef_window_t* self,
    int command_id, int key_code, int shift_pressed, int ctrl_pressed,
    int alt_pressed) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;

  // Execute
  CefWindowCppToC::Get(self)->SetAccelerator(
      command_id,
      key_code,
      shift_pressed?true:false,
      ctrl_pressed?true:false,
      alt_pressed?true:false);
}

void CEF_CALLBACK window_remove_accelerator(struct _cef_window_t* self,
    int command_id) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;

  // Execute
  CefWindowCppToC::Get(self)->RemoveAccelerator(
      command_id);
}

void CEF_CALLBACK window_remove_all_accelerators(struct _cef_window_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;

  // Execute
  CefWindowCppToC::Get(self)->RemoveAllAccelerators();
}

struct _cef_window_t* CEF_CALLBACK window_as_window(struct _cef_panel_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

  // Execute
  CefRefPtr<CefWindow> _retval = CefWindowCppToC::Get(
      reinterpret_cast<cef_window_t*>(self))->AsWindow();

  // Return type: refptr_same
  return CefWindowCppToC::Wrap(_retval);
}

cef_fill_layout_t* CEF_CALLBACK window_set_to_fill_layout(
    struct _cef_panel_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

  // Execute
  CefRefPtr<CefFillLayout> _retval = CefWindowCppToC::Get(
      reinterpret_cast<cef_window_t*>(self))->SetToFillLayout();

  // Return type: refptr_same
  return CefFillLayoutCppToC::Wrap(_retval);
}

cef_box_layout_t* CEF_CALLBACK window_set_to_box_layout(
    struct _cef_panel_t* self,
    const struct _cef_box_layout_settings_t* settings) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;
  // Verify param: settings; type: struct_byref_const
  DCHECK(settings);
  if (!settings)
    return NULL;

  // Translate param: settings; type: struct_byref_const
  CefBoxLayoutSettings settingsObj;
  if (settings)
    settingsObj.Set(*settings, false);

  // Execute
  CefRefPtr<CefBoxLayout> _retval = CefWindowCppToC::Get(
      reinterpret_cast<cef_window_t*>(self))->SetToBoxLayout(
      settingsObj);

  // Return type: refptr_same
  return CefBoxLayoutCppToC::Wrap(_retval);
}

cef_layout_t* CEF_CALLBACK window_get_layout(struct _cef_panel_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

  // Execute
  CefRefPtr<CefLayout> _retval = CefWindowCppToC::Get(
      reinterpret_cast<cef_window_t*>(self))->GetLayout();

  // Return type: refptr_same
  return CefLayoutCppToC::Wrap(_retval);
}

void CEF_CALLBACK window_layout(struct _cef_panel_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;

  // Execute
  CefWindowCppToC::Get(reinterpret_cast<cef_window_t*>(self))->Layout();
}

void CEF_CALLBACK window_add_child_view(struct _cef_panel_t* self,
    cef_view_t* view) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;
  // Verify param: view; type: refptr_same
  DCHECK(view);
  if (!view)
    return;

  // Execute
  CefWindowCppToC::Get(reinterpret_cast<cef_window_t*>(self))->AddChildView(
      CefViewCppToC::Unwrap(view));
}

void CEF_CALLBACK window_add_child_view_at(struct _cef_panel_t* self,
    cef_view_t* view, int index) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;
  // Verify param: view; type: refptr_same
  DCHECK(view);
  if (!view)
    return;
  // Verify param: index; type: simple_byval
  DCHECK_GE(index, 0);
  if (index < 0)
    return;

  // Execute
  CefWindowCppToC::Get(reinterpret_cast<cef_window_t*>(self))->AddChildViewAt(
      CefViewCppToC::Unwrap(view),
      index);
}

void CEF_CALLBACK window_reorder_child_view(struct _cef_panel_t* self,
    cef_view_t* view, int index) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;
  // Verify param: view; type: refptr_same
  DCHECK(view);
  if (!view)
    return;

  // Execute
  CefWindowCppToC::Get(reinterpret_cast<cef_window_t*>(self))->ReorderChildView(
      CefViewCppToC::Unwrap(view),
      index);
}

void CEF_CALLBACK window_remove_child_view(struct _cef_panel_t* self,
    cef_view_t* view) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;
  // Verify param: view; type: refptr_same
  DCHECK(view);
  if (!view)
    return;

  // Execute
  CefWindowCppToC::Get(reinterpret_cast<cef_window_t*>(self))->RemoveChildView(
      CefViewCppToC::Unwrap(view));
}

void CEF_CALLBACK window_remove_all_child_views(struct _cef_panel_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;

  // Execute
  CefWindowCppToC::Get(reinterpret_cast<cef_window_t*>(
      self))->RemoveAllChildViews();
}

size_t CEF_CALLBACK window_get_child_view_count(struct _cef_panel_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return 0;

  // Execute
  size_t _retval = CefWindowCppToC::Get(reinterpret_cast<cef_window_t*>(
      self))->GetChildViewCount();

  // Return type: simple
  return _retval;
}

cef_view_t* CEF_CALLBACK window_get_child_view_at(struct _cef_panel_t* self,
    int index) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;
  // Verify param: index; type: simple_byval
  DCHECK_GE(index, 0);
  if (index < 0)
    return NULL;

  // Execute
  CefRefPtr<CefView> _retval = CefWindowCppToC::Get(
      reinterpret_cast<cef_window_t*>(self))->GetChildViewAt(
      index);

  // Return type: refptr_same
  return CefViewCppToC::Wrap(_retval);
}

cef_browser_view_t* CEF_CALLBACK window_as_browser_view(
    struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

  // Execute
  CefRefPtr<CefBrowserView> _retval = CefWindowCppToC::Get(
      reinterpret_cast<cef_window_t*>(self))->AsBrowserView();

  // Return type: refptr_same
  return CefBrowserViewCppToC::Wrap(_retval);
}

cef_button_t* CEF_CALLBACK window_as_button(struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

  // Execute
  CefRefPtr<CefButton> _retval = CefWindowCppToC::Get(
      reinterpret_cast<cef_window_t*>(self))->AsButton();

  // Return type: refptr_same
  return CefButtonCppToC::Wrap(_retval);
}

cef_panel_t* CEF_CALLBACK window_as_panel(struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

  // Execute
  CefRefPtr<CefPanel> _retval = CefWindowCppToC::Get(
      reinterpret_cast<cef_window_t*>(self))->AsPanel();

  // Return type: refptr_same
  return CefPanelCppToC::Wrap(_retval);
}

cef_scroll_view_t* CEF_CALLBACK window_as_scroll_view(
    struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

  // Execute
  CefRefPtr<CefScrollView> _retval = CefWindowCppToC::Get(
      reinterpret_cast<cef_window_t*>(self))->AsScrollView();

  // Return type: refptr_same
  return CefScrollViewCppToC::Wrap(_retval);
}

cef_textfield_t* CEF_CALLBACK window_as_textfield(struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

  // Execute
  CefRefPtr<CefTextfield> _retval = CefWindowCppToC::Get(
      reinterpret_cast<cef_window_t*>(self))->AsTextfield();

  // Return type: refptr_same
  return CefTextfieldCppToC::Wrap(_retval);
}

cef_string_userfree_t CEF_CALLBACK window_get_type_string(
    struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

  // Execute
  CefString _retval = CefWindowCppToC::Get(reinterpret_cast<cef_window_t*>(
      self))->GetTypeString();

  // Return type: string
  return _retval.DetachToUserFree();
}

cef_string_userfree_t CEF_CALLBACK window_to_string(struct _cef_view_t* self,
    int include_children) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

  // Execute
  CefString _retval = CefWindowCppToC::Get(reinterpret_cast<cef_window_t*>(
      self))->ToString(
      include_children?true:false);

  // Return type: string
  return _retval.DetachToUserFree();
}

int CEF_CALLBACK window_is_valid(struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return 0;

  // Execute
  bool _retval = CefWindowCppToC::Get(reinterpret_cast<cef_window_t*>(
      self))->IsValid();

  // Return type: bool
  return _retval;
}

int CEF_CALLBACK window_is_attached(struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return 0;

  // Execute
  bool _retval = CefWindowCppToC::Get(reinterpret_cast<cef_window_t*>(
      self))->IsAttached();

  // Return type: bool
  return _retval;
}

int CEF_CALLBACK window_is_same(struct _cef_view_t* self, cef_view_t* that) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return 0;
  // Verify param: that; type: refptr_same
  DCHECK(that);
  if (!that)
    return 0;

  // Execute
  bool _retval = CefWindowCppToC::Get(reinterpret_cast<cef_window_t*>(
      self))->IsSame(
      CefViewCppToC::Unwrap(that));

  // Return type: bool
  return _retval;
}

cef_view_delegate_t* CEF_CALLBACK window_get_delegate(
    struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

  // Execute
  CefRefPtr<CefViewDelegate> _retval = CefWindowCppToC::Get(
      reinterpret_cast<cef_window_t*>(self))->GetDelegate();

  // Return type: refptr_diff
  return CefViewDelegateCToCpp::Unwrap(_retval);
}

struct _cef_window_t* CEF_CALLBACK window_get_window(struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

  // Execute
  CefRefPtr<CefWindow> _retval = CefWindowCppToC::Get(
      reinterpret_cast<cef_window_t*>(self))->GetWindow();

  // Return type: refptr_same
  return CefWindowCppToC::Wrap(_retval);
}

int CEF_CALLBACK window_get_id(struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return 0;

  // Execute
  int _retval = CefWindowCppToC::Get(reinterpret_cast<cef_window_t*>(
      self))->GetID();

  // Return type: simple
  return _retval;
}

void CEF_CALLBACK window_set_id(struct _cef_view_t* self, int id) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;

  // Execute
  CefWindowCppToC::Get(reinterpret_cast<cef_window_t*>(self))->SetID(
      id);
}

int CEF_CALLBACK window_get_group_id(struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return 0;

  // Execute
  int _retval = CefWindowCppToC::Get(reinterpret_cast<cef_window_t*>(
      self))->GetGroupID();

  // Return type: simple
  return _retval;
}

void CEF_CALLBACK window_set_group_id(struct _cef_view_t* self, int group_id) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;

  // Execute
  CefWindowCppToC::Get(reinterpret_cast<cef_window_t*>(self))->SetGroupID(
      group_id);
}

cef_view_t* CEF_CALLBACK window_get_parent_view(struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

  // Execute
  CefRefPtr<CefView> _retval = CefWindowCppToC::Get(
      reinterpret_cast<cef_window_t*>(self))->GetParentView();

  // Return type: refptr_same
  return CefViewCppToC::Wrap(_retval);
}

cef_view_t* CEF_CALLBACK window_get_view_for_id(struct _cef_view_t* self,
    int id) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

  // Execute
  CefRefPtr<CefView> _retval = CefWindowCppToC::Get(
      reinterpret_cast<cef_window_t*>(self))->GetViewForID(
      id);

  // Return type: refptr_same
  return CefViewCppToC::Wrap(_retval);
}

void CEF_CALLBACK window_set_bounds(struct _cef_view_t* self,
    const cef_rect_t* bounds) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;
  // Verify param: bounds; type: simple_byref_const
  DCHECK(bounds);
  if (!bounds)
    return;

  // Translate param: bounds; type: simple_byref_const
  CefRect boundsVal = bounds?*bounds:CefRect();

  // Execute
  CefWindowCppToC::Get(reinterpret_cast<cef_window_t*>(self))->SetBounds(
      boundsVal);
}

cef_rect_t CEF_CALLBACK window_get_bounds(struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return CefRect();

  // Execute
  cef_rect_t _retval = CefWindowCppToC::Get(reinterpret_cast<cef_window_t*>(
      self))->GetBounds();

  // Return type: simple
  return _retval;
}

cef_rect_t CEF_CALLBACK window_get_bounds_in_screen(struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return CefRect();

  // Execute
  cef_rect_t _retval = CefWindowCppToC::Get(reinterpret_cast<cef_window_t*>(
      self))->GetBoundsInScreen();

  // Return type: simple
  return _retval;
}

void CEF_CALLBACK window_set_size(struct _cef_view_t* self,
    const cef_size_t* size) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;
  // Verify param: size; type: simple_byref_const
  DCHECK(size);
  if (!size)
    return;

  // Translate param: size; type: simple_byref_const
  CefSize sizeVal = size?*size:CefSize();

  // Execute
  CefWindowCppToC::Get(reinterpret_cast<cef_window_t*>(self))->SetSize(
      sizeVal);
}

cef_size_t CEF_CALLBACK window_get_size(struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return CefSize();

  // Execute
  cef_size_t _retval = CefWindowCppToC::Get(reinterpret_cast<cef_window_t*>(
      self))->GetSize();

  // Return type: simple
  return _retval;
}

void CEF_CALLBACK window_set_position(struct _cef_view_t* self,
    const cef_point_t* position) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;
  // Verify param: position; type: simple_byref_const
  DCHECK(position);
  if (!position)
    return;

  // Translate param: position; type: simple_byref_const
  CefPoint positionVal = position?*position:CefPoint();

  // Execute
  CefWindowCppToC::Get(reinterpret_cast<cef_window_t*>(self))->SetPosition(
      positionVal);
}

cef_point_t CEF_CALLBACK window_get_position(struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return CefPoint();

  // Execute
  cef_point_t _retval = CefWindowCppToC::Get(reinterpret_cast<cef_window_t*>(
      self))->GetPosition();

  // Return type: simple
  return _retval;
}

cef_size_t CEF_CALLBACK window_get_preferred_size(struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return CefSize();

  // Execute
  cef_size_t _retval = CefWindowCppToC::Get(reinterpret_cast<cef_window_t*>(
      self))->GetPreferredSize();

  // Return type: simple
  return _retval;
}

void CEF_CALLBACK window_size_to_preferred_size(struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;

  // Execute
  CefWindowCppToC::Get(reinterpret_cast<cef_window_t*>(
      self))->SizeToPreferredSize();
}

cef_size_t CEF_CALLBACK window_get_minimum_size(struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return CefSize();

  // Execute
  cef_size_t _retval = CefWindowCppToC::Get(reinterpret_cast<cef_window_t*>(
      self))->GetMinimumSize();

  // Return type: simple
  return _retval;
}

cef_size_t CEF_CALLBACK window_get_maximum_size(struct _cef_view_t* self) {
  // AUTO-GENERATED C
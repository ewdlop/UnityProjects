            string objectPath,
            Int32 flags,
            WbemNative.IWbemContext wbemContext,
            IntPtr wbemCallResult)
        {
            return (int)WbemNative.WbemStatus.WBEM_E_NOT_SUPPORTED;
        }

        int WbemNative.IWbemServices.DeleteInstanceAsync(
            string objectPath,
            Int32 lFlags,
            WbemNative.IWbemContext wbemContext,
            WbemNative.IWbemObjectSink wbemSink)
        {
            if (wbemContext == null || wbemSink == null || this.wbemServices == null)
                return (int)WbemNative.WbemStatus.WBEM_E_INVALID_PARAMETER;

            try
            {
                ObjectPathRegex objPathRegex = new ObjectPathRegex(objectPath);
                ParameterContext parms = new ParameterContext(objPathRegex.ClassName, this.wbemServices, wbemContext, wbemSink);
                WbemInstance wbemInstance = new WbemInstance(parms, objPathRegex);
                IWmiProvider wmiProvider = this.GetProvider(parms.ClassName);
                if (wmiProvider.DeleteInstance(new InstanceContext(wbemInstance)))
                {
                    wbemInstance.Indicate();
                }

                WbemException.ThrowIfFail(wbemSink.SetStatus(
                    (int)WbemNative.tag_WBEM_STATUS_TYPE.WBEM_STATUS_COMPLETE,
                    (int)WbemNative.WbemStatus.WBEM_S_NO_ERROR, null, null));
            }
            catch (WbemException e)
            {
                DiagnosticUtility.EventLog.LogEvent(TraceEventType.Error,
                    (ushort)System.Runtime.Diagnostics.Eve
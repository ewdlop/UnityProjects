::ImportNodesFromTex could be replaced
	TSet<UEdGraphNode*> PastedNodes;
	FEdGraphUtilities::ImportNodesFromText(DataprepGraph.Get(), TextToImport, /*out*/ PastedNodes);

	TArray<const UDataprepActionAsset*> Actions;
	for(UEdGraphNode* Node : PastedNodes)
	{
		UDataprepGraphActionNode* ActionNode = Cast<UDataprepGraphActionNode>(Node);
		if (ActionNode && ActionNode->CanDuplicateNode() && ActionNode->GetDataprepActionAsset())
		{
			Actions.Add(ActionNode->GetDataprepActionAsset());
		}
	}

	if(Actions.Num() > 0)
	{
		FScopedTransaction Transaction(FGenericCommands::Get().Paste->GetDescription());

		if(DataprepAssetPtr->AddActions(Actions) == INDEX_NONE)
		{
			Transaction.Cancel();
		}
	}
}

bool SDataprepGraphEditor::CanPasteNodes() const
{
	FString ClipboardContent;
	FPlatformApplicationMisc::ClipboardPaste(ClipboardContent);

	return FEdGraphUtilities::CanImportNodesFromText(GetCurrentGraph(), ClipboardContent);
}

void SDataprepGraphEditor::DuplicateNodes()
{
	// Copy and paste current selection
	CopySelectedNodes();
	PasteNodes();
}

bool SDataprepGraphEditor::CanDuplicateNodes() const
{
	return CanCopyNodes();
}

void SDataprepGraphEditor::DeleteSelectedDuplicatableNodes()
{
	// Cache off the old selection
	const FGraphPanelSelectionSet OldSelectedNodes = GetSelectedNodes();

	// Clear the selection and only select the nodes that can be duplicated
	FGraphPanelSelectionSet CurrentSelection;
	ClearSelectionSet();

	FGraphPanelSelectionSet RemainingNodes;
	for (FG
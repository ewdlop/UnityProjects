ata.isValid(), "PxParticleCreationData submitted with PxParticleBase::createParticles() invalid.");
	if (creationData.numParticles == 0)
		return true;
	
	bool supportsPerParticleRestOffset = getScbParticleSystem().getFlags() & PxParticleBaseFlag::ePER_PARTICLE_REST_OFFSET;
	bool perParticleRestOffset = creationData.restOffsetBuffer.ptr() != NULL;

	PX_UNUSED(supportsPerParticleRestOffset);
	PX_UNUSED(perParticleRestOffset);

	PX_CHECK_AND_RETURN_NULL(!perParticleRestOffset || supportsPerParticleRestOffset, "PxParticleCreationData.restOffsetBuffer set but PxParticleBaseFlag::ePER_PARTICLE_REST_OFFSET not set.")
	PX_CHECK_AND_RETURN_NULL(!supportsPerParticleRestOffset || perParticleRestOffset, "PxParticleBaseFlag::ePER_PARTICLE_REST_OFFSET set, but PxParticleCreationData.restOffsetBuffer not set.")

#if PX_CHECKED
	PX_CHECK_AND_RETURN_NULL(checkFreeIndices(creationData.numParticles, creationData.indexBuffer), "PxParticleBase::createParticles: failed");
	PX_CHECK_AND_RETURN_NULL(checkUniqueIndices(creationData.numParticles, creationData.indexBuffer), "PxParticleBase::createParticles: failed");

	if (perParticleRestOffset)
		PX_CHECK_AND_RETURN_NULL(checkRestOffsets(creationData.numParticles, creationData.restOffsetBuffer, getScbParticleSystem().getRestOffset()), 
			"PxParticleCreationData.restOffsetBuffer: offsets must be in range [0.0f, restOffset].");

	PX_CHECK_AND_RETURN_NULL(checkVectors(creationData.numParticles, creationData.positionBuffer), "PxParticleBase::createParticles: position vectors shoule be finite");
	
	bool perParticleVelocity = creationData.velocityBuffer.ptr() != NULL;
	if(perParticleVelocity)
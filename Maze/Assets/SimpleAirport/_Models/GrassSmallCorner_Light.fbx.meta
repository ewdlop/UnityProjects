edentials = credentialsCopy;
                }
            }
            base.OnOpened();
        }

        protected override void OnAbort()
        {
            if (this.innerFactory != null)
            {
                this.innerFactory.Abort();
            }
        }

        protected override IAsyncResult OnBeginClose(TimeSpan timeout, AsyncCallback callback, object state)
        {
            return new CloseAsyncResult(this.innerFactory, timeout, callback, state);
        }

        protected override IAsyncResult OnBeginOpen(TimeSpan timeout, AsyncCallback callback, object state)
        {
            return new OpenAsyncResult(this.innerFactory, timeout, callback, state);
        }

        protected override void OnClose(TimeSpan timeout)
        {
            if (this.innerFactory != null)
                this.innerFactory.Close(timeout);
        }

        protected override void OnEndClose(IAsyncResult result)
        {
            CloseAsyncResult.End(result);
        }

        protected override void OnEndOpen(IAsyncResult result)
        {
            OpenAsyncResult.End(result);
        }

        protected override void OnOpen(TimeSpan timeout)
        {
            this.innerFactory.Open(timeout);
        }

        protected override void OnOpening()
        {
            base.OnOpening();

            this.innerFactory = CreateFactory();


            if (TD.ChannelFactoryCreatedIsEnabled())
            {
                TD.ChannelFactoryCreated(this);
            }


            if (this.innerFactory == null)
                throw DiagnosticUtility.ExceptionUtility.ThrowHelperError(new I
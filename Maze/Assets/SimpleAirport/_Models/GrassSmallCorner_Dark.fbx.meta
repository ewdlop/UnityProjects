

                if (this.communicationObject == null)
                {
                    this.Complete(true);
                    return;
                }

                IAsyncResult result = this.communicationObject.BeginClose(timeout, onCloseComplete, this);

                if (result.CompletedSynchronously)
                {
                    this.communicationObject.EndClose(result);
                    this.Complete(true);
                }
            }

            static void OnCloseComplete(IAsyncResult result)
            {
                if (result.CompletedSynchronously)
                    return;

                CloseAsyncResult thisPtr = (CloseAsyncResult)result.AsyncState;
                Exception exception = null;

                try
                {
                    thisPtr.communicationObject.EndClose(result);
                }
                catch (Exception e)
                {
                    if (Fx.IsFatal(e))
                    {
                        throw;
                    }

                    exception = e;
                }

                thisPtr.Complete(false, exception);
            }

            public static void End(IAsyncResult result)
            {
                AsyncResult.End<CloseAsyncResult>(result);
            }
        }
    }

    public class ChannelFactory<TChannel> : ChannelFactory, IChannelFactory<TChannel>
    {
        InstanceContext callbackInstance;
        Type channelType;
        TypeLoader typeLoader;
        Type callbackType;

        //Overload for activation DuplexChannelFactory
        protected ChannelFactory(Type ch
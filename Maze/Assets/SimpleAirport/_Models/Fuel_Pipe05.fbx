           get
            {
                if (this.keyedByNameOperationInfo == null)
                {
                    GetContractDescriptions();
                }
                return this.keyedByNameOperationInfo;
            }
        }

        internal XName InternalName
        {
            get
            {
                if (this.Name != null)
                {
                    return this.Name;
                }
                else
                {
                    if (this.inferedServiceName == null)
                    {
                        Fx.Assert(this.Body != null, "Body cannot be null!");

                        if (this.Body.DisplayName.Length == 0)
                        {
                            throw FxTrace.Exception.AsError(new InvalidOperationException(SR.MissingDisplayNameInRootActivity));
                        }

                        this.inferedServiceName = XName.Get(XmlConvert.EncodeLocalName(this.Body.DisplayName));
                    }
                    return this.inferedServiceName;
                }
            }
        }

        internal IDictionary<XName, Collection<CorrelationQuery>> CorrelationQueries
        {
            get
            {
                Fx.Assert(this.cachedInferredContracts != null, "Must infer contract first!");
                return this.correlationQueryByContract;
            }
        }

        public Activity GetWorkflowRoot()
        {
            return this.Body;
        }

        internal ServiceDescription GetEmptyServiceDescription()
        {
            if (this.serviceDescription == null)
            {
                WalkActivityTree();

                ServiceDescription result = new ServiceDescription
                {
                    Name = this.InternalName.LocalName,
                    Namespace = string.IsNullOrEmpty(this.InternalName.NamespaceName) ? NamingHelper.DefaultNamespace : this.InternalName.NamespaceName,
                    ConfigurationName = this.ConfigurationName ?? this.InternalName.LocalName
                };                
                this.serviceDescription = result;
            }
            return this.serviceDescription;
        }

        static void AddAdditionalConstraint(ValidationSettings workflowServiceSettings, Type constraintType, Constraint constraint)
        {
            IList<Constraint> constraintList;
            if (workflowServiceSettings.AdditionalConstraints.TryGetValue(constraintType, out constraintList))
            {
                constraintList.Add(constraint);
            }
            else
            {
                constraintList = new List<Constraint>(1)
                    {
                        constraint,
                    };
                workflowServiceSettings.AdditionalConstraints.Add(constraintType, constraintList);
            }
        }

        public ValidationResults Validate(ValidationSettings settings)
        {
            Collection<ValidationError> errors = new Collection<ValidationError>();
            ValidationSettings workflowServiceSettings = this.CopyValidationSettions(settings);

            if (this.HasImplementedContracts)
            {
                this.OperationProperties = CreateOperationProperties(errors);

                // Add additional constraints
                AddAdditionalConstraint(workflowServiceSettings, typeof(Receive), GetContractFirstValidationReceiveConstraints());
                AddAdditionalConstraint(workflowServiceSettings, typeof(SendReply), GetContractFirstValidationSendReplyConstraints());
            }

            ValidationResults results = null;
            if (this.Body != null)
            {
                results = ActivityValidationServices.Validate(this.Body, workflowServiceSettings);

                if (!this.HasImplementedContracts)
                {
                    return results;
                }
                else
                {
                    // If the user specified implemented contract, then we need to add the errors into the error collection
                    foreach (ValidationError validationError in results.Errors)
                    {
                        errors.Add(validationError);
                    }

                    foreach (ValidationError validationWarning in results.Warnings)
                    {
                        errors.Add(validationWarning);
                    }
                }
            }

            if (this.HasImplementedContracts)
            {
                this.AfterValidation(errors);
            }

            return new ValidationResults(errors);
        }

        bool IsContractValid(ContractDescription contractDescription, Collection<ValidationError> validationError)
        {
            bool isValid = true; 
            if (contractDescription.IsDuplex())
            {
                validationError.Add(new ValidationError(SR.DuplexContractsNotSupported));
                isValid = false;
            }
            
            return isValid; 
        }

        ValidationSettings CopyValidationSettions(ValidationSettings source)
        {
            if ( source == null )
            {
                return new ValidationSettings();
            }

            ValidationSettings clonedSettings = new ValidationSettings
            {
                OnlyUseAdditionalConstraints = source.OnlyUseAdditionalConstraints,
                SingleLevel = source.SingleLevel,
                SkipValidatingRootConfiguration = source.SkipValidatingRootConfiguration,
                PrepareForRuntime = source.PrepareForRuntime,
                Environment = source.Environment,
                // Retain the same cancellation token. Otherwise we can't cancel the validation of WorkflowService objects
                // which can make the designer unreponsive if the validation takes a long time.
                CancellationToken = source.CancellationToken

            };

            foreach (KeyValuePair<Type, IList<Constraint>> constrants in source.AdditionalConstraints)
            {
                if (constrants.Key != null && constrants.Value != null)
                {
                    clonedSettings.AdditionalConstraints.Add(constrants.Key, new List<Constraint>(constrants.Value));
                }
            }

            return clonedSettings;
        }

        void AfterValidation(Collection<ValidationError> errors)
        {
            if (this.HasImplementedContracts)
            {
                Dictionary<OperationIdentifier, OperationProperty> operationProperties = this.OperationProperties;
                if (operationProperties != null)
                {
                    foreach (OperationProperty property in operationProperties.Values)
                    {
                        Fx.Assert(property.Operation != null, "OperationProperty.Operation should not be null!");

                        if (property.ImplementingReceives.Count < 1)
                        {
                            errors.Add(new ValidationError(SR.OperationIsNotImplemented(property.Operation.Name, property.Operation.DeclaringContract.Name), true));
                        }
                        else if (!property.Operation.IsOneWay)
                        {
                            foreach (Receive recv in property.ImplementingReceives)
                            {
                                if (!property.ImplementingSendRepliesRequests.Contains(recv))
                                {
                                    // passing the receive activity without a matching SendReply as the SourceDetail
                                    errors.Add(new ValidationError(SR.TwoWayIsImplementedAsOneWay(property.Operation.Name, property.Operation.DeclaringContract.Name), true, string.Empty, recv));
                                }
                            }                            
                        }                        
                    }
                }
            }
        }

        Dictionary<OperationIdentifier, OperationProperty> CreateOperationProperties(Collection<ValidationError> validationErrors)
        {
            Dictionary<OperationIdentifier, OperationProperty> operationProperties = null;

            if (this.HasImplementedContracts)
            {
                operationProperties = new Dictionary<OperationIdentifier, OperationProperty>();
                foreach (Type contractType in this.ImplementedContracts)
                {
                    ContractDescription contract = null;
                    try
                    {
                        contract = ContractDescription.GetContract(contractType);
                                                
                        if (contract != null)
                        {
                            if (this.IsContractValid(contract, validationErrors))
                            {
                                foreach (OperationDescription operation in contract.Operations)
                                {
                                    OperationIdentifier id = new OperationIdentifier(operation.DeclaringContract.Name, operation.DeclaringContract.Namespace, operation.Name);
                                    if (operationProperties.ContainsKey(id))
                                    {
                                        validationErrors.Add(new ValidationError(SR.DuplicatedContract(operation.DeclaringContract.Name, operation.Name), true));
                                    }
                                    else
                                    {
                                        operationProperties.Add(id, new OperationProperty(operation));
                                    }
                                }
                            }
                        }
                    }
                    catch (Exception exception)
                    {
                        if (Fx.IsFatal(exception))
                        {
                            throw;
                        }

                        validationErrors.Add(new ValidationError(exception.Message));
                    }
                }
            }

            return operationProperties;
        }
        
        public virtual IDictionary<XName, ContractDescription> GetContractDescriptions()
        {
            if (this.cachedInferredContracts == null)
            {
                WalkActivityTree();

                Fx.Assert(this.knownServiceActivities != null && this.receiveAndReplyPairs != null, "Failed to walk the activity tree!");
                this.correlationQueryByContract = new Dictionary<XName, Collection<CorrelationQuery>>();

                // Contract inference
                IDictionary<XName, ContractDescription> inferredContracts = new Dictionary<XName, ContractDescription>();
                this.keyedByNameOperationInfo = new Dictionary<ContractAndOperationNameTuple, OperationInfo>();

                foreach (Receive receive in this.knownServiceActivities)
                {
                    XName contractXName = FixServiceContractName(receive.ServiceContractName);
                    ContractAndOperationNameTuple tuple = new ContractAndOperationNameTuple(contractXName, receive.OperationName);

                    OperationInfo operationInfo;
                    if (this.keyedByNameOperationInfo.TryGetValue(tuple, out operationInfo))
                    {
                        // All Receives with same ServiceContractName and OperationName need to be validated
                        ContractValidationHelper.ValidateReceiveWithReceive(receive, operationInfo.Receive);
                    }
                    else
                    {
                        // Note that activities in keyedByNameOperationInfo are keyed by
                        // ServiceContractName and OperationName tuple. So we won't run into the case where
                        // two opertions have the same OperationName.

                        ContractDescription contract;
                        if (!inferredContracts.TryGetValue(contractXName, out contract))
                        {
                            // Infer Name, Namespace
                            contract = new ContractDescription(contractXName.LocalName, contractXName.NamespaceName);

                            // We use ServiceContractName.LocalName to bind contract with config
                            contract.ConfigurationName = contractXName.LocalName;

                            // We do NOT infer ContractDescription.ProtectionLevel

                            inferredContracts.Add(contractXName, contract);
                        }

                        OperationDescription operation = ContractInferenceHelper.CreateOperationDescription(receive, contract);
                        contract.Operations.Add(operation);

                        operationInfo = new OperationInfo(receive, operation);
                        this.keyedByNameOperationInfo.Add(tuple, operationInfo);
                    }

                    CorrectOutMessageForOperationWithFault(receive, operationInfo);

                    ContractInferenceHelper.UpdateIsOneWayFlag(receive, operationInfo.OperationDescription);

                    // FaultTypes and KnownTypes need to be collected from all Receive activities
                    ContractInferenceHelper.AddFaultDescription(receive, operationInfo.OperationDescription);
                    ContractInferenceHelper.AddKnownTypesToOperation(receive, operationInfo.OperationDescription);

                    // WorkflowFormatterBehavior should have reference to all the Receive activities
                    ContractInferenceHelper.AddReceiveToFormatterBehavior(receive, operationInfo.OperationDescription);

                    Collection<CorrelationQuery> correlationQueries = null;

                    // Collect CorrelationQuery from Receive
                    if (receive.HasCorrelatesOn || receive.HasCorrelationInitializers)
                    {
                        MessageQuerySet select = receive.HasCorrelatesOn ? receive.CorrelatesOn : null;
                        CorrelationQuery correlationQuery = ContractInferenceHelper.CreateServerCorrelationQuery(select,
                            receive.CorrelationInitializers, operationInfo.OperationDescription, false);
                        CollectCorrelationQuery(ref correlationQueries, contractXName, correlationQuery);
                    }

                    // Find all known Receive-Reply pair in the activity tree. Remove them from this.receiveAndReplyPairs
                    // Also collect CorrelationQuery from following replies
                    if (receive.HasReply)
                    {
                        foreach (SendReply reply in receive.FollowingReplies)
                        {
                            ReceiveAndReplyTuple pair = new ReceiveAndReplyTuple(receive, reply);
                            this.receiveAndReplyPairs.Remove(pair);

                            CollectCorrelationQueryFromReply(ref correlationQueries, contractXName,
                                reply, operationInfo.OperationDescription);

                            reply.SetContractName(contractXName);
                        }
                    }
                    if (receive.HasFault)
                    {
                        foreach (SendReply fault in receive.FollowingFaults)
                        {
                            ReceiveAndReplyTuple pair = new ReceiveAndReplyTuple(receive, fault);
                            this.receiveAndReplyPairs.Remove(pair);

                            CollectCorrelationQueryFromReply(ref correlationQueries, contractXName,
                                fault, operationInfo.OperationDescription);
                        }
                    }

                    // Have to do this here otherwise message/fault formatters 
                    // non-WorkflowServiceHost case won't be set. Cannot do this
                    // during CacheMetadata time because activity order in which 
                    // CacheMetadata calls are made doesn't yield the correct result.
                    // Not possible to do it at runtime either because the ToReply and
                    // ToRequest activities that use the formatters do not have access
                    // to related OperationDescription. Note: non-WorkflowServiceHosts will
                    // need to call GetContractDescriptions() to get these default formatters
                    // wired up.
                    receive.SetDefaultFormatters(operationInfo.OperationDescription);

                }

                // Check for Receive referenced by SendReply but no longer in the activity tree
                if (this.receiveAndReplyPairs.Count != 0)
                {
                    throw FxTrace.Exception.AsError(new ValidationException(SR.DanglingReceive));
                }

                // Print out tracing information
                if (TD.InferredContractDescriptionIsEnabled())
                {
                    foreach (ContractDescription contract in inferredContracts.Values)
                    {
                        TD.InferredContractDescription(contract.Name, contract.Namespace);

                        if (TD.InferredOperationDescriptionIsEnabled())
                        {
                            foreach (OperationDescription operation in contract.Operations)
                            {
                                TD.InferredOperationDescription(operation.Name, contract.Name, operation.IsOneWay.ToString());
                            }
                        }
                    }
                }

                this.cachedInferredContracts = inferredContracts;
            }

            return this.cachedInferredContracts;
        }

        internal void ValidateForVersioning(WorkflowService baseWorkflowService)
        {
            if (this.knownServiceActivities == null)
            {
                WalkActivityTree();
            }
            
            foreach (Receive receive in this.knownServiceActivities)
            {
                XName contractXName = FixServiceContractName(receive.ServiceContractName);
                ContractAndOperationNameTuple tuple = new ContractAndOperationNameTuple(contractXName, receive.OperationName);

                OperationInfo operationInfo;
                if (baseWorkflowService.OperationsInfo.TryGetValue(tuple, out operationInfo))
                {
                    // All Receives with same ServiceContractName and OperationName need to be validated
                    ContractValidationHelper.ValidateReceiveWithReceive(receive, operationInfo.Receive);
                    ContractInferenceHelper.AddReceiveToFormatterBehavior(receive, operationInfo.OperationDescription);
                    ContractInferenceHelper.UpdateIsOneWayFlag(receive, operationInfo.OperationDescription);
                }
                else
                {
                    throw FxTrace.Exception.AsError(new ValidationException(SR.OperationNotFound(contractXName, receive.OperationName)));
                }
            }
        }

        internal void DetachFromVersioning(WorkflowService baseWorkflowService)
        {
            if (this.knownServiceActivities == null)
            {
                return;
            }

            foreach (Receive receive in this.knownServiceActivities)
            {
                XName contractXName = FixServiceContractName(receive.ServiceContractName);
                ContractAndOperationNameTuple tuple = new ContractAndOperationNameTuple(contractXName, receive.OperationName);

                OperationInfo operationInfo;
                if (baseWorkflowService.OperationsInfo.TryGetValue(tuple, out operationInfo))
                {   
                    ContractInferenceHelper.RemoveReceiveFromFormatterBehavior(receive, operationInfo.OperationDescription);
                }
            }
        }

        void WalkActivityTree()
        {
            if (this.knownServiceActivities != null)
            {
                // We return if we have already walked the activity tree
                return;
            }

            if (this.Body == null)
            {
                throw FxTrace.Exception.AsError(new ValidationException(SR.MissingBodyInWorkflowService));
            }

            // Validate the activity tree
            ValidationResults validationResults = null;
            StringBuilder exceptionMessage = new StringBuilder();
            bool doesErrorExist = false; 
            try
            {
                if (this.HasImplementedContracts)
                {
                    validationResults = this.Validate(new ValidationSettings() { PrepareForRuntime = true, });
                }
                else
                {
                    WorkflowInspectionServices.CacheMetadata(this.Body);
                }                
            }
            catch (InvalidWorkflowException e)
            {
                doesErrorExist = true; 
                exceptionMessage.AppendLine(e.Message);
            }

            if (validationResults != null)
            {
                if (validationResults.Errors != null && validationResults.Errors.Count > 0)
                {
                    doesErrorExist = true; 
                    foreach (ValidationError error in validationResults.Errors)
                    {
                        exceptionMessage.AppendLine(error.Message);
                    }
                }
            }

            if (doesErrorExist)
            {
                throw FxTrace.Exception.AsError(new InvalidWorkflowException(exceptionMessage.ToString()));
            }

            this.knownServiceActivities = new List<Receive>();
            this.receiveAndReplyPairs = new HashSet<ReceiveAndReplyTuple>();

            // Now let us walk the tree here
            Queue<QueueItem> activities = new Queue<QueueItem>();
            // The root activity is never "in" a TransactedReceiveScope
            activities.Enqueue(new QueueItem(this.Body, null, null));
            while (activities.Count > 0)
            {
                QueueItem queueItem = activities.Dequeue();
                Fx.Assert(queueItem != null, "Queue item cannot be null");

                Activity activity = queueItem.Activity;
                Fx.Assert(queueItem.Activity != null, "Queue item's Activity cannot be null");

                Activity parentReceiveScope = queueItem.ParentReceiveScope;
                Activity rootTransactedReceiveScope = queueItem.RootTransactedReceiveScope;

                if (activity is Receive)  // First, let's see if this is a Receive activity
                {
                    Receive receive = (Receive)activity;

                    if (rootTransactedReceiveScope != null)
                    {
                        receive.InternalReceive.AdditionalData.IsInsideTransactedReceiveScope = true;
                        Fx.Assert(parentReceiveScope != null, "Internal error.. TransactedReceiveScope should be valid here");
                        if (IsFirstTransactedReceive(receive, parentReceiveScope, rootTransactedReceiveScope))
                        {
                            receive.InternalReceive.AdditionalData.IsFirstReceiveOfTransactedReceiveScopeTree = true;
                        }
                    }

                    this.knownServiceActivities.Add(receive);
                }
                else if (activity is SendReply)  // Let's see if this is a SendReply
                {
                    SendReply sendReply = (SendReply)activity;

                    Receive pairedReceive = sendReply.Request;
                    Fx.Assert(pairedReceive != null, "SendReply must point to a Receive!");

                    if (sendReply.InternalContent.IsFault)
                    {
                        pairedReceive.FollowingFaults.Add(sendReply);
                    }
                    else
                    {
                        if (pairedReceive.HasReply)
                        {
                            SendReply followingReply = pairedReceive.FollowingReplies[0];
                            ContractValidationHelper.ValidateSendReplyWithSendReply(followingReply, sendReply);
                        }

                        pairedReceive.FollowingReplies.Add(sendReply);
                    }

                    ReceiveAndReplyTuple tuple = new ReceiveAndReplyTuple(pairedReceive, sendReply);
                    this.receiveAndReplyPairs.Add(tuple);
                }

                // Enqueue child activities and delegates
                if (activity is TransactedReceiveScope)
                {
                    parentReceiveScope = activity;
                    if (rootTransactedReceiveScope == null)
                    {
                        rootTransactedReceiveScope = parentReceiveScope;
                    }
                }

                foreach (Activity childActivity in WorkflowInspectionServices.GetActivities(activity))
                {
                    QueueItem queueData = new QueueItem(childActivity, parentReceiveScope, rootTransacted
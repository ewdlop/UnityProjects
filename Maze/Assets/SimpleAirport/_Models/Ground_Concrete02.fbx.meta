scene.");
#if PX_CHECKED
	if(getParticleBaseFlags() & PxParticleBaseFlag::ePER_PARTICLE_REST_OFFSET)
	{	
		Pt::ParticleData* standaloneData = getScbParticleSystem().getScParticleSystem().obtainStandaloneData();
		PX_ASSERT(standaloneData);
		bool pass = checkRestOffset(*standaloneData, r);
		getScbParticleSystem().getScParticleSystem().returnStandaloneData(standaloneData);
		PX_CHECK_AND_RETURN(pass, "PxParticleBase::restOffset: offset must be larger than each perParticle restOffset.");
	}
#endif
	getScbParticleSystem().setRestOffset(r);
}

template<class APIClass, class LeafClass>
PxReal NpParticleBaseTemplate<APIClass, LeafClass>::getContactOffset() const
{
	NP_READ_CHECK(NpActor::getOwnerScene(*this));
	return getScbParticleSystem().getContactOffset();
}

template<class APIClass, class LeafClass>
void NpParticleBaseTemplate<APIClass, LeafClass>::setContactOffset(PxReal c)
{
	NP_WRITE_CHECK(NpActor::getOwnerScene(*this));
	PX_CHECK_AND_RETURN(c >= 0.0f,"ContactOffset needs to be positive, PxParticleBase::setContactOffset() ignored.");
	PX_CHECK_AND_RETURN(!getScbParticleSystem().getScParticleSystem().getSim(),"ContactOffset immutable when the particle system is part of a scene.");	
	getScbParticleSystem().setContactOffset(c);
}

template<class APIClass, class LeafClass>
PxReal NpParticleBaseTemplate<APIClass, LeafClass>::getGridSize() const
{
	NP_READ_CHECK(NpActor::getOwnerScene(*this));
	return getScbParticleSystem().getGridSize();
}

template<class APIClass, class LeafClass>
void
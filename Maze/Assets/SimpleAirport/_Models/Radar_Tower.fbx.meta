) == ActionAsset)
							{
								SelectedNodes.Add(Nodes[Index]);
								break;
							}
						}
					}
				}
			}
		}
	}

	FScopedTransaction Transaction(FGenericCommands::Get().Delete->GetDescription());
	bool bTransactionSuccessful = true;

	if(ActionsToDelete.Num() > 0)
	{
		bTransactionSuccessful &= DataprepAssetPtr->RemoveActions(ActionsToDelete);
	}

	if(StepsToDelete.Num() > 0)
	{
		for(TPair<UDataprepActionAsset*, TArray<int32>>& Entry : StepsToDelete)
		{
			if(UDataprepActionAsset* ActionAsset = Entry.Key)
			{
				bTransactionSuccessful &= ActionAsset->RemoveSteps(Entry.Value);
			}
		}
	}

	TArray<UEdGraphNode*>& Nodes = EdGraph->Nodes;
	for(UObject* NodeObject : SelectedNodes)
	{
		if (UDataprepGraphActionNode* ActionNode = Cast<UDataprepGraphActionNode>(NodeObject))
		{
			Nodes.Remove(ActionNode);
		}
	}

	if (!bTransactionSuccessful)
	{
		Transaction.Cancel();
	}
}

bool SDataprepGraphEditor::CanDeleteNodes() const
{
	const FGraphPanelSelectionSet SelectedNodes = GetSelectedNodes();

	for (UObject* NodeObject : SelectedNodes)
	{
		// If any nodes allow deleting, then do not disable the delete option
		UEdGraphNode* Node = Cast<UEdGraphNode>(NodeObject);
		if (Node && Node->CanUserDeleteNode())
		{
			return true;
			break;
		}
	}

	return false;
}

void SDataprepGraphEditor::CopySelectedNodes()
{
	// Export the selected nodes and place the text on the clipboard
	const FGraphPanelSelectionSet SelectedNodes = GetSelectedNodes();
	TSet<UObject*> ActionsToCopy;

	for (UObject* NodeObject : SelectedNodes)
	{
		if (UDatapr
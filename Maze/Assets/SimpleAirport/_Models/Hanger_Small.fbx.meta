se()
{
	NP_WRITE_CHECK(NpActor::getOwnerScene(*this));

	NpPhysics::getInstance().notifyDeletionListenersUserRelease(this, this->userData);

// PX_AGGREGATE
	ActorTemplateClass::release();	// PT: added for PxAggregate
//~PX_AGGREGATE

	NpScene* npScene = NpActor::getAPIScene(*this);
	if (npScene)
	{
		npScene->removeFromParticleBaseList(*this);
		npScene->getScene().removeParticleSystem(static_cast<LeafClass&>(*this).getScbParticleSystem(), true);
	}
	mParticleSystem.destroy();
}

#if PX_CHECKED
namespace
{
	bool checkUniqueIndices(PxU32 numIndices, const PxStrideIterator<const PxU32>& indices)
	{
		Cm::BitMap bitmap;
		PxU32 i = 0;
		for (; i != numIndices; ++i)
		{
			PxU32 index = indices[i];
			if (bitmap.boundedTest(index))
				break;
			bitmap.growAndSet(index);
		}

		if (i != numIndices)
		{
			Ps::getFoundation().error(PxErrorCode::eDEBUG_WARNING, __FILE__, __LINE__, 
				"PxParticleBase::releaseParticles(): indexBuffer contains duplicate particle index %d.", indices[i]);
			return false;
		}
		return true;
	}
	
	bool checkVectors(PxU32 numVectors, const PxStrideIterator<const PxVec3>& vectors)
	{
		for (PxU32 i = 0; i < numVectors; ++i)
		{
			if(!vectors[i].isFinite())
				return false;
		}
		return true;
	}

	bool checkRestOffsets(PxU32 numParticles, const PxStrideIterator<const PxF32>& restOffsetBuffer, PxF32 restOffset)
	{
		for (PxU32 i = 0; i < numParticles; ++i)
		{
			if (restOffsetBuffer[i] < 0.0f || restOffsetBuffer[i] > restOffset)
				ret
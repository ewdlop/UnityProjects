// Copyright (c) 2017 The Chromium Embedded Framework Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the CEF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//

#include "libcef_dll/cpptoc/views/browser_view_cpptoc.h"
#include "libcef_dll/cpptoc/views/button_cpptoc.h"
#include "libcef_dll/cpptoc/views/panel_cpptoc.h"
#include "libcef_dll/cpptoc/views/scroll_view_cpptoc.h"
#include "libcef_dll/cpptoc/views/textfield_cpptoc.h"
#include "libcef_dll/cpptoc/views/view_cpptoc.h"
#include "libcef_dll/cpptoc/views/window_cpptoc.h"
#include "libcef_dll/ctocpp/views/textfield_delegate_ctocpp.h"
#include "libcef_dll/ctocpp/views/view_delegate_ctocpp.h"


// GLOBAL FUNCTIONS - Body may be edited by hand.

CEF_EXPORT cef_textfield_t* cef_textfield_create(
    cef_textfield_delegate_t* delegate) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: delegate

  // Execute
  CefRefPtr<CefTextfield> _retval = CefTextfield::CreateTextfield(
      CefTextfieldDelegateCToCpp::Wrap(delegate));

  // Return type: refptr_same
  return CefTextfieldCppToC::Wrap(_retval);
}


namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

void CEF_CALLBACK textfield_set_password_input(struct _cef_textfield_t* self,
    int password_input) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;

  // Execute
  CefTextfieldCppToC::Get(self)->SetPasswordInput(
      password_input?true:false);
}

int CEF_CALLBACK textfield_is_password_input(struct _cef_textfield_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return 0;

  // Execute
  bool _retval = CefTextfieldCppToC::Get(self)->IsPasswordInput();

  // Return type: bool
  return _retval;
}

void CEF_CALLBACK textfield_set_read_only(struct _cef_textfield_t* self,
    int read_only) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;

  // Execute
  CefTextfieldCppToC::Get(self)->SetReadOnly(
      read_only?true:false);
}

int CEF_CALLBACK textfield_is_read_only(struct _cef_textfield_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return 0;

  // Execute
  bool _retval = CefTextfieldCppToC::Get(self)->IsReadOnly();

  // Return type: bool
  return _retval;
}

cef_string_userfree_t CEF_CALLBACK textfield_get_text(
    struct _cef_textfield_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

  // Execute
  CefString _retval = CefTextfieldCppToC::Get(self)->GetText();

  // Return type: string
  return _retval.DetachToUserFree();
}

void CEF_CALLBACK textfield_set_text(struct _cef_textfield_t* self,
    const cef_string_t* text) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;
  // Verify param: text; type: string_byref_const
  DCHECK(text);
  if (!text)
    return;

  // Execute
  CefTextfieldCppToC::Get(self)->SetText(
      CefString(text));
}

void CEF_CALLBACK textfield_append_text(struct _cef_textfield_t* self,
    const cef_string_t* text) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;
  // Verify param: text; type: string_byref_const
  DCHECK(text);
  if (!text)
    return;

  // Execute
  CefTextfieldCppToC::Get(self)->AppendText(
      CefString(text));
}

void CEF_CALLBACK textfield_insert_or_replace_text(
    struct _cef_textfield_t* self, const cef_string_t* text) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;
  // Verify param: text; type: string_byref_const
  DCHECK(text);
  if (!text)
    return;

  // Execute
  CefTextfieldCppToC::Get(self)->InsertOrReplaceText(
      CefString(text));
}

int CEF_CALLBACK textfield_has_selection(struct _cef_textfield_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return 0;

  // Execute
  bool _retval = CefTextfieldCppToC::Get(self)->HasSelection();

  // Return type: bool
  return _retval;
}

cef_string_userfree_t CEF_CALLBACK textfield_get_selected_text(
    struct _cef_textfield_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

  // Execute
  CefString _retval = CefTextfieldCppToC::Get(self)->GetSelectedText();

  // Return type: string
  return _retval.DetachToUserFree();
}

void CEF_CALLBACK textfield_select_all(struct _cef_textfield_t* self,
    int reversed) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;

  // Execute
  CefTextfieldCppToC::Get(self)->SelectAll(
      reversed?true:false);
}

void CEF_CALLBACK textfield_clear_selection(struct _cef_textfield_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;

  // Execute
  CefTextfieldCppToC::Get(self)->ClearSelection();
}

cef_range_t CEF_CALLBACK textfield_get_selected_range(
    struct _cef_textfield_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return CefRange();

  // Execute
  cef_range_t _retval = CefTextfieldCppToC::Get(self)->GetSelectedRange();

  // Return type: simple
  return _retval;
}

void CEF_CALLBACK textfield_select_range(struct _cef_textfield_t* self,
    const cef_range_t* range) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;
  // Verify param: range; type: simple_byref_const
  DCHECK(range);
  if (!range)
    return;

  // Translate param: range; type: simple_byref_const
  CefRange rangeVal = range?*range:CefRange();

  // Execute
  CefTextfieldCppToC::Get(self)->SelectRange(
      rangeVal);
}

size_t CEF_CALLBACK textfield_get_cursor_position(
    struct _cef_textfield_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return 0;

  // Execute
  size_t _retval = CefTextfieldCppToC::Get(self)->GetCursorPosition();

  // Return type: simple
  return _retval;
}

void CEF_CALLBACK textfield_set_text_color(struct _cef_textfield_t* self,
    cef_color_t color) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;

  // Execute
  CefTextfieldCppToC::Get(self)->SetTextColor(
      color);
}

cef_color_t CEF_CALLBACK textfield_get_text_color(
    struct _cef_textfield_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return 0;

  // Execute
  cef_color_t _retval = CefTextfieldCppToC::Get(self)->GetTextColor();

  // Return type: simple
  return _retval;
}

void CEF_CALLBACK textfield_set_selection_text_color(
    struct _cef_textfield_t* self, cef_color_t color) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;

  // Execute
  CefTextfieldCppToC::Get(self)->SetSelectionTextColor(
      color);
}

cef_color_t CEF_CALLBACK textfield_get_selection_text_color(
    struct _cef_textfield_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return 0;

  // Execute
  cef_color_t _retval = CefTextfieldCppToC::Get(self)->GetSelectionTextColor();

  // Return type: simple
  return _retval;
}

void CEF_CALLBACK textfield_set_selection_background_color(
    struct _cef_textfield_t* self, cef_color_t color) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;

  // Execute
  CefTextfieldCppToC::Get(self)->SetSelectionBackgroundColor(
      color);
}

cef_color_t CEF_CALLBACK textfield_get_selection_background_color(
    struct _cef_textfield_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return 0;

  // Execute
  cef_color_t _retval = CefTextfieldCppToC::Get(
      self)->GetSelectionBackgroundColor();

  // Return type: simple
  return _retval;
}

void CEF_CALLBACK textfield_set_font_list(struct _cef_textfield_t* self,
    const cef_string_t* font_list) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;
  // Verify param: font_list; type: string_byref_const
  DCHECK(font_list);
  if (!font_list)
    return;

  // Execute
  CefTextfieldCppToC::Get(self)->SetFontList(
      CefString(font_list));
}

void CEF_CALLBACK textfield_apply_text_color(struct _cef_textfield_t* self,
    cef_color_t color, const cef_range_t* range) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;
  // Verify param: range; type: simple_byref_const
  DCHECK(range);
  if (!range)
    return;

  // Translate param: range; type: simple_byref_const
  CefRange rangeVal = range?*range:CefRange();

  // Execute
  CefTextfieldCppToC::Get(self)->ApplyTextColor(
      color,
      rangeVal);
}

void CEF_CALLBACK textfield_apply_text_style(struct _cef_textfield_t* self,
    cef_text_style_t style, int add, const cef_range_t* range) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;
  // Verify param: range; type: simple_byref_const
  DCHECK(range);
  if (!range)
    return;

  // Translate param: range; type: simple_byref_const
  CefRange rangeVal = range?*range:CefRange();

  // Execute
  CefTextfieldCppToC::Get(self)->ApplyTextStyle(
      style,
      add?true:false,
      rangeVal);
}

int CEF_CALLBACK textfield_is_command_enabled(struct _cef_textfield_t* self,
    int command_id) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return 0;

  // Execute
  bool _retval = CefTextfieldCppToC::Get(self)->IsCommandEnabled(
      command_id);

  // Return type: bool
  return _retval;
}

void CEF_CALLBACK textfield_execute_command(struct _cef_textfield_t* self,
    int command_id) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;

  // Execute
  CefTextfieldCppToC::Get(self)->ExecuteCommand(
      command_id);
}

void CEF_CALLBACK textfield_clear_edit_history(struct _cef_textfield_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;

  // Execute
  CefTextfieldCppToC::Get(self)->ClearEditHistory();
}

void CEF_CALLBACK textfield_set_placeholder_text(struct _cef_textfield_t* self,
    const cef_string_t* text) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;
  // Verify param: text; type: string_byref_const
  DCHECK(text);
  if (!text)
    return;

  // Execute
  CefTextfieldCppToC::Get(self)->SetPlaceholderText(
      CefString(text));
}

cef_string_userfree_t CEF_CALLBACK textfield_get_placeholder_text(
    struct _cef_textfield_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

  // Execute
  CefString _retval = CefTextfieldCppToC::Get(self)->GetPlaceholderText();

  // Return type: string
  return _retval.DetachToUserFree();
}

void CEF_CALLBACK textfield_set_placeholder_text_color(
    struct _cef_textfield_t* self, cef_color_t color) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;

  // Execute
  CefTextfieldCppToC::Get(self)->SetPlaceholderTextColor(
      color);
}

void CEF_CALLBACK textfield_set_accessible_name(struct _cef_textfield_t* self,
    const cef_string_t* name) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;
  // Verify param: name; type: string_byref_const
  DCHECK(name);
  if (!name)
    return;

  // Execute
  CefTextfieldCppToC::Get(self)->SetAccessibleName(
      CefString(name));
}

cef_browser_view_t* CEF_CALLBACK textfield_as_browser_view(
    struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

  // Execute
  CefRefPtr<CefBrowserView> _retval = CefTextfieldCppToC::Get(
      reinterpret_cast<cef_textfield_t*>(self))->AsBrowserView();

  // Return type: refptr_same
  return CefBrowserViewCppToC::Wrap(_retval);
}

cef_button_t* CEF_CALLBACK textfield_as_button(struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

  // Execute
  CefRefPtr<CefButton> _retval = CefTextfieldCppToC::Get(
      reinterpret_cast<cef_textfield_t*>(self))->AsButton();

  // Return type: refptr_same
  return CefButtonCppToC::Wrap(_retval);
}

cef_panel_t* CEF_CALLBACK textfield_as_panel(struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

  // Execute
  CefRefPtr<CefPanel> _retval = CefTextfieldCppToC::Get(
      reinterpret_cast<cef_textfield_t*>(self))->AsPanel();

  // Return type: refptr_same
  return CefPanelCppToC::Wrap(_retval);
}

cef_scroll_view_t* CEF_CALLBACK textfield_as_scroll_view(
    struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

  // Execute
  CefRefPtr<CefScrollView> _retval = CefTextfieldCppToC::Get(
      reinterpret_cast<cef_textfield_t*>(self))->AsScrollView();

  // Return type: refptr_same
  return CefScrollViewCppToC::Wrap(_retval);
}

cef_textfield_t* CEF_CALLBACK textfield_as_textfield(struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

  // Execute
  CefRefPtr<CefTextfield> _retval = CefTextfieldCppToC::Get(
      reinterpret_cast<cef_textfield_t*>(self))->AsTextfield();

  // Return type: refptr_same
  return CefTextfieldCppToC::Wrap(_retval);
}

cef_string_userfree_t CEF_CALLBACK textfield_get_type_string(
    struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

  // Execute
  CefString _retval = CefTextfieldCppToC::Get(
      reinterpret_cast<cef_textfield_t*>(self))->GetTypeString();

  // Return type: string
  return _retval.DetachToUserFree();
}

cef_string_userfree_t CEF_CALLBACK textfield_to_string(struct _cef_view_t* self,
    int include_children) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

  // Execute
  CefString _retval = CefTextfieldCppToC::Get(
      reinterpret_cast<cef_textfield_t*>(self))->ToString(
      include_children?true:false);

  // Return type: string
  return _retval.DetachToUserFree();
}

int CEF_CALLBACK textfield_is_valid(struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return 0;

  // Execute
  bool _retval = CefTextfieldCppToC::Get(reinterpret_cast<cef_textfield_t*>(
      self))->IsValid();

  // Return type: bool
  return _retval;
}

int CEF_CALLBACK textfield_is_attached(struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return 0;

  // Execute
  bool _retval = CefTextfieldCppToC::Get(reinterpret_cast<cef_textfield_t*>(
      self))->IsAttached();

  // Return type: bool
  return _retval;
}

int CEF_CALLBACK textfield_is_same(struct _cef_view_t* self,
    struct _cef_view_t* that) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return 0;
  // Verify param: that; type: refptr_same
  DCHECK(that);
  if (!that)
    return 0;

  // Execute
  bool _retval = CefTextfieldCppToC::Get(reinterpret_cast<cef_textfield_t*>(
      self))->IsSame(
      CefViewCppToC::Unwrap(that));

  // Return type: bool
  return _retval;
}

struct _cef_view_delegate_t* CEF_CALLBACK textfield_get_delegate(
    struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

  // Execute
  CefRefPtr<CefViewDelegate> _retval = CefTextfieldCppToC::Get(
      reinterpret_cast<cef_textfield_t*>(self))->GetDelegate();

  // Return type: refptr_diff
  return CefViewDelegateCToCpp::Unwrap(_retval);
}

struct _cef_window_t* CEF_CALLBACK textfield_get_window(
    struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

  // Execute
  CefRefPtr<CefWindow> _retval = CefTextfieldCppToC::Get(
      reinterpret_cast<cef_textfield_t*>(self))->GetWindow();

  // Return type: refptr_same
  return CefWindowCppToC::Wrap(_retval);
}

int CEF_CALLBACK textfield_get_id(struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return 0;

  // Execute
  int _retval = CefTextfieldCppToC::Get(reinterpret_cast<cef_textfield_t*>(
      self))->GetID();

  // Return type: simple
  return _retval;
}

void CEF_CALLBACK textfield_set_id(struct _cef_view_t* self, int id) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;

  // Execute
  CefTextfieldCppToC::Get(reinterpret_cast<cef_textfield_t*>(self))->SetID(
      id);
}

int CEF_CALLBACK textfield_get_group_id(struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return 0;

  // Execute
  int _retval = CefTextfieldCppToC::Get(reinterpret_cast<cef_textfield_t*>(
      self))->GetGroupID();

  // Return type: simple
  return _retval;
}

void CEF_CALLBACK textfield_set_group_id(struct _cef_view_t* self,
    int group_id) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;

  // Execute
  CefTextfieldCppToC::Get(reinterpret_cast<cef_textfield_t*>(self))->SetGroupID(
      group_id);
}

struct _cef_view_t* CEF_CALLBACK textfield_get_parent_view(
    struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

  // Execute
  CefRefPtr<CefView> _retval = CefTextfieldCppToC::Get(
      reinterpret_cast<cef_textfield_t*>(self))->GetParentView();

  // Return type: refptr_same
  return CefViewCppToC::Wrap(_retval);
}

struct _cef_view_t* CEF_CALLBACK textfield_get_view_for_id(
    struct _cef_view_t* self, int id) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

  // Execute
  CefRefPtr<CefView> _retval = CefTextfieldCppToC::Get(
      reinterpret_cast<cef_textfield_t*>(self))->GetViewForID(
      id);

  // Return type: refptr_same
  return CefViewCppToC::Wrap(_retval);
}

void CEF_CALLBACK textfield_set_bounds(struct _cef_view_t* self,
    const cef_rect_t* bounds) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;
  // Verify param: bounds; type: simple_byref_const
  DCHECK(bounds);
  if (!bounds)
    return;

  // Translate param: bounds; type: simple_byref_const
  CefRect boundsVal = bounds?*bounds:CefRect();

  // Execute
  CefTextfieldCppToC::Get(reinterpret_cast<cef_textfield_t*>(self))->SetBounds(
      boundsVal);
}

cef_rect_t CEF_CALLBACK textfield_get_bounds(struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return CefRect();

  // Execute
  cef_rect_t _retval = CefTextfieldCppToC::Get(
      reinterpret_cast<cef_textfield_t*>(self))->GetBounds();

  // Return type: simple
  return _retval;
}

cef_rect_t CEF_CALLBACK textfield_get_bounds_in_screen(
    struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return CefRect();

  // Execute
  cef_rect_t _retval = CefTextfieldCppToC::Get(
      reinterpret_cast<cef_textfield_t*>(self))->GetBoundsInScreen();

  // Return type: simple
  return _retval;
}

void CEF_CALLBACK textfield_set_size(struct _cef_view_t* self,
    const cef_size_t* size) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;
  // Verify param: size; type: simple_byref_const
  DCHECK(size);
  if (!size)
    return;

  // Translate param: size; type: simple_byref_const
  CefSize sizeVal = size?*size:CefSize();

  // Execute
  CefTextfieldCppToC::Get(reinterpret_cast<cef_textfield_t*>(self))->SetSize(
      sizeVal);
}

cef_size_t CEF_CALLBACK textfield_get_size(struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return CefSize();

  // Execute
  cef_size_t _retval = CefTextfieldCppToC::Get(
      reinterpret_cast<
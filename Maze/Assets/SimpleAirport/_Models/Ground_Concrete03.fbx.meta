{
	physx::shdfnd::getFoundation().error(physx::PxErrorCode::eDEBUG_INFO, __FILE__, __LINE__, "PxParticleBase::resetFiltering: This method has been deprecated!");

	NpScene* scene = NpActor::getOwnerScene(*this);
	if (scene)
		scene->resetFiltering(*this);
}


template<class APIClass, class LeafClass>
void NpParticleBaseTemplate<APIClass, LeafClass>::setParticleBaseFlag(PxParticleBaseFlag::Enum flag, bool value)
{
	NP_WRITE_CHECK(NpActor::getOwnerScene(*this));
	
	// flags that are generally immutable
	if (flag == PxParticleBaseFlag::ePER_PARTICLE_REST_OFFSET)
	{
		Ps::getFoundation().error(PxErrorCode::eDEBUG_WARNING, __FILE__, __LINE__, "PxParticleBaseFlag::ePER_PARTICLE_REST_OFFSET flag is not modifiable. Operation ignored.");
		return;
	}
	
	PxParticleBaseFlags flags = getScbParticleSystem().getFlags();
	if(value)
		flags |= flag;
	else
		flags &= ~flag;

	getScbParticleSystem().setFlags(flags);

	if (getNpScene())
		getNpScene()->updatePhysXIndicator();
}


template<class APIClass, class LeafClass>
PxParticleBaseFlags NpParticleBaseTemplate<APIClass, LeafClass>::getParticleBaseFlags() const
{
	NP_READ_CHECK(NpActor::getOwnerScene(*this));
	return getScbParticleSystem().getFlags();
}

template<class APIClass, class LeafClass>
PxParticleReadDataFlags NpParticleBaseTemplate<APIClass, LeafClass>::getParticleReadDataFlags() const
{
	NP_READ_CHECK(NpActor::getOwnerScene(*this));
	return getScbParticleSystem().getParticleReadDataFlags();
}

template<class APIClass, class LeafCl
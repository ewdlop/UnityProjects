s>
PxVec3 NpParticleBaseTemplate<APIClass, LeafClass>::getExternalAcceleration() const
{
	NP_READ_CHECK(NpActor::getOwnerScene(*this));
	return getScbParticleSystem().getExternalAcceleration();
}


template<class APIClass, class LeafClass>
void NpParticleBaseTemplate<APIClass, LeafClass>::setExternalAcceleration(const PxVec3& a)
{
	NP_WRITE_CHECK(NpActor::getOwnerScene(*this));		
	getScbParticleSystem().setExternalAcceleration(a);
}


template<class APIClass, class LeafClass>
void NpParticleBaseTemplate<APIClass, LeafClass>::getProjectionPlane(PxVec3& normal, PxReal& d) const
{
	NP_READ_CHECK(NpActor::getOwnerScene(*this));
	PxPlane p = getScbParticleSystem().getProjectionPlane();
	normal = p.n;
	d = p.d;
}


template<class APIClass, class LeafClass>
void NpParticleBaseTemplate<APIClass, LeafClass>::setProjectionPlane(const PxVec3& normal, PxReal d)
{
	NP_WRITE_CHECK(NpActor::getOwnerScene(*this));		
	PX_CHECK_AND_RETURN(!normal.isZero(),"Plane normal needs to be non zero, PxParticleBase::setProjectionPlane() ignored.");

	PxPlane p(normal, d);
	getScbParticleSystem().setProjectionPlane(p);
}


template<class APIClass, class LeafClass>
PxReal NpParticleBaseTemplate<APIClass, LeafClass>::getParticleMass() const
{
	NP_READ_CHECK(NpActor::getOwnerScene(*this));
	return getScbParticleSystem().getParticleMass();
}


template<class APIClass, class LeafClass>
void NpParticleBaseTemplate<APIClass, LeafClass>::setParticleMass(PxReal m)
{
	NP_WRITE_CHECK(NpActor::getOwnerScene(*this))
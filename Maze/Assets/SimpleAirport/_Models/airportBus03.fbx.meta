  internal WbemInstance(ParameterContext parms, ObjectPathRegex objPathRegex)
                : this(parms, objPathRegex.ClassName)
            {
                foreach (KeyValuePair<string, object> kv in objPathRegex.Keys)
                {
                    this.SetProperty(kv.Key, kv.Value);
                }
            }

            internal WbemInstance(WbemInstance wbemInstance, string className)
                : this(wbemInstance.parms, className)
            {
            }

            internal WbemInstance(ParameterContext parms, string className)
            {
                this.parms = parms;
                if (String.IsNullOrEmpty(className))
                {
                    className = parms.ClassName;
                }
                this.className = className;
                WbemNative.IWbemClassObject tempObj = null;
                WbemException.ThrowIfFail(
                    parms.WbemServices.GetObject(className, 0, parms.WbemContext, ref tempObj, IntPtr.Zero)
                );


                if (null != tempObj)
                {
                    WbemException.ThrowIfFail(tempObj.SpawnInstance(0, out this.wbemObject));
                }
            }

            internal WbemInstance(ParameterContext parms, WbemNative.IWbemClassObject wbemObject)
            {
                this.parms = parms;
                this.wbemObject = wbemObject;
            }

            internal WbemNative.IWbemClassObject WbemObject
            {
                get
                {
                    Fx.Assert(null != this.wbemObject, "");
                    return this.wbemObject;
                }
            }

            internal void SetProperty(string name, object val)
            {
                Fx.Assert(null != this.wbemObject, name + " may not be available to WMI");
                if (null != val)
                {
                    WbemNative.CIMTYPE type = 0;
                    if (val is DateTime)
                    {
                        val = ((DateTime)val).ToString("yyyyMMddhhmmss.ffffff", CultureInfo.InvariantCulture) + "+000";
                    }
                    else if 
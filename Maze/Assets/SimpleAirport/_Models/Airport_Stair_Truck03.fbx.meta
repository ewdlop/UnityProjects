terType
        {
            get
            {
                return this._type;
            }
        }

        /// <summary>
        ///   The parameter value, which can be set at any time (and subsequently 
        ///   changed) before query execution. Note that type-checking is not 
        ///   enforced between the declared parameter type and the type of the 
        ///   specified value; such validation is left up to the underlying 
        ///   provider(s) at execution time.
        /// </summary>
        public object Value
        {
            get
            {
                return this._value;
            }

            set
            {
                this._value = value;
            }
        }

        #endregion

        #region Internal Properties

        // -------------------
        // Internal Properties
        // -------------------

        /// <summary>
        ///     Gets or sets a <see cref="TypeUsage"/> that specifies the exact
        ///     type of which the parameter value is considered an instance.
        /// </summary>
        internal TypeUsage TypeUsage
        {
            get
            {
                return _effectiveType;
            }

            set
            {
                Debug.Assert(null == _effectiveType, "Effective type should only be set once");
                _effectiveType = value;
            }
        }

        /// <summary>
        ///   The mappable parameter type; this is primarily used to handle the case of 
        ///   Nullable parameter types. For example, metadata knows nothing about 'int?', 
        ///   only 'Int32'. For internal use only.
        /// </summary>
        internal Type MappableType
        {
            get
            {
                return this._mappableType;
            }
        }
        
        #endregion

        #region Internal Methods

        // ----------------
        // Internal Methods
        // ----------------

        /// <summary>
        /// Creates a new ObjectParameter instance with identical field values to this instance.
        /// </summary>
        /// <returns>The new ObjectParameter instance</returns>
        internal ObjectParameter ShallowCopy()
        {
            return new ObjectPa
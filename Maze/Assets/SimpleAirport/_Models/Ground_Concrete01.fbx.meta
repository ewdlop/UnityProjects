IClass, LeafClass>::isDeviceExclusiveModeEnabledGpu() const
{
	NP_READ_CHECK(NpActor::getOwnerScene(*this));

	if (!getNpScene() || !(getParticleBaseFlags() & PxParticleBaseFlag::eGPU))
	{
		return false;
	}

	return getScbParticleSystem().getDeviceExclusiveAccessGpu() != NULL;
}


template<class APIClass, class LeafClass>
void NpParticleBaseTemplate<APIClass, LeafClass>::getReadWriteCudaBuffersGpu(PxCudaReadWriteParticleBuffers& buffers) const
{
	NP_READ_CHECK(NpActor::getOwnerScene(*this));

	PxParticleDeviceExclusiveAccess* access = getDeviceExclusiveAccessGpu("PxParticleDeviceExclusive::getReadWriteCudaBuffers");
	if (access)
	{
		access->getReadWriteCudaBuffers(buffers);
	}
}


template<class APIClass, class LeafClass>
void NpParticleBaseTemplate<APIClass, LeafClass>::setValidParticleRangeGpu(PxU32 validParticleRange)
{
	NP_WRITE_CHECK(NpActor::getOwnerScene(*this));

	PxParticleDeviceExclusiveAccess* access = getDeviceExclusiveAccessGpu("PxParticleDeviceExclusive::setValidParticleRange");
	if (access)
	{
		access->setValidParticleRange(validParticleRange);
	}
}


template<class APIClass, class LeafClass>
void NpParticleBaseTemplate<APIClass, LeafClass>::setDeviceExclusiveModeFlagsGpu(PxU32 flags)
{
	NP_WRITE_CHECK(NpActor::getOwnerScene(*this));

	PxParticleDeviceExclusiveAccess* access = getDeviceExclusiveAccessGpu("PxParticleDeviceExclusive::setFlags");
	if (access)
	{
		access->setFlags(flags);
	}
}


template<class APIClass, class LeafClass>
physx::PxBaseTask*
Exception">
        ///   If the value of either argument is null.
        /// </exception>
        /// <exception cref="ArgumentOutOfRangeException">
        ///   If the value of the name argument is invalid. Parameter names must start
        ///   with a letter and may only contain letters (A-Z, a-z), numbers (0-9) and 
        ///   underscores (_).
        /// </exception>
        public ObjectParameter (string name, object value)
        {
            EntityUtil.CheckArgumentNull(name, "name");
            EntityUtil.CheckArgumentNull(value, "value");

            if (!ObjectParameter.ValidateParameterName(name))
            {
                throw EntityUtil.Argument(System.Data.Entity.Strings.ObjectParameter_InvalidParameterName(name), "name");
            }

            this._name  = name;
            this._type  = value.GetType();
            this._value = value;

            // If the parameter type is Nullable<>, we need to extract out the underlying
            // Nullable<> type argument.
            this._mappableType = System.Data.Objects.ELinq.TypeSystem.GetNonNullableType(this._type);
        }

        #endregion

        #endregion

        #region Private Constructors

        // -------------------
        // Copy Constructor
        // -------------------

        /// <summary>
        ///   This constructor is used by <see cref="ShallowCopy"/> to create a new ObjectParameter
        ///   with field values taken from the field values of an existing ObjectParameter.
        /// </summary>
        /// <param name="template">
        ///   The existing ObjectParameter instance from which field values should be taken.
        /// </param>
        /// <returns>
        ///   A new ObjectParameter instance with the same field values as the specified ObjectParameter
        /// </returns>
        private ObjectParameter(ObjectParameter template)
        {
            Debug.Assert(template != null, "Template ObjectParameter cannot be null");

            this._name = template._name;
            this._type = template._type;
            this._mappableType = template._mappableType;
            this._effectiveType = template._effectiveType;
            this._value = template._value;
        }
                
     
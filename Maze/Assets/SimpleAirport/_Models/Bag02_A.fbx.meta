ntext,
            out WbemNative.IEnumWbemClassObject wbemEnum)
        {
            wbemEnum = null;
            return (int)WbemNative.WbemStatus.WBEM_E_NOT_SUPPORTED;
        }

        int WbemNative.IWbemServices.CreateClassEnumAsync(
            string superClassName,
            Int32 flags,
            WbemNative.IWbemContext wbemContext,
            WbemNative.IWbemObjectSink wbemSink)
        {
            return (int)WbemNative.WbemStatus.WBEM_E_NOT_SUPPORTED;
        }

        int WbemNative.IWbemServices.PutInstance(
            WbemNative.IWbemClassObject pInst,
            Int32 lFlags,
            WbemNative.IWbemContext wbemContext,
            IntPtr wbemCallResult)
        {
            return (int)WbemNative.WbemStatus.WBEM_E_NOT_SUPPORTED;
        }

        int WbemNative.IWbemServices.PutInstanceAsync(
            WbemNative.IWbemClassObject wbemObject,
            Int32 lFlags,
            WbemNative.IWbemContext wbemContext,
            WbemNative.IWbemObjectSink wbemSink
            )
        {
            if (wbemObject == null || wbemContext == null || wbemSink == null || this.wbemServices == null)
                return (int)WbemNative.WbemStatus.WBEM_E_INVALID_PARAMETER;

            using (ServiceModelActivity activity = DiagnosticUtility.ShouldUseActivity ? ServiceModelActivity.CreateBoundedActivity() : null)
            {
                try
                {
                    object val = null;
                    int type = 0;
                    int favor = 0;
                    WbemException.ThrowIfFail(wbemObject.Get("
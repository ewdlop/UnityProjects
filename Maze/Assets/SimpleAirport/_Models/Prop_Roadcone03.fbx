   }
            year{
                one{"{0}р░╕р░В"}
                other{"{0}р░╕р░В"}
            }
        }
        length{
            centimeter{
                one{"{0} р░╕р▒Жр░В.р░ор▒А"}
                other{"{0} р░╕р▒Жр░В.р░ор▒А"}
            }
            foot{
                one{"{0}тА▓"}
                other{"{0}тА▓"}
            }
            inch{
                one{"{0}тА│"}
                other{"{0}тА│"}
            }
            kilometer{
                one{"{0} р░Хр░┐.р░ор▒А"}
                other{"{0} р░Хр░┐.р░ор▒А"}
            }
            light-year{
                one{"{0} р░Хр░╛р░В. р░╕р░В"}
                other{"{0} р░Хр░╛р░В. р░╕р░В"}
            }
            meter{
                one{"{0} р░ор▒А"}
                other{"{0} р░ор▒А"}
            }
            mile{
                one{"{0} р░ор▒И"}
                other{"{0} р░ор▒И"}
            }
            millimeter{
                one{"{0} р░ор░┐.р░ор▒А"}
                other{"{0} р░ор░┐.р░ор▒А"}
            }
            picometer{
                one{"{0} р░кр░┐.р░ор▒А"}
                other{"{0} р░кр░┐.р░ор▒А"}
            }
            yard{
                one{"{0} р░Ч."}
                other{"{0} р░Ч."}
            }
        }
        mass{
            gram{
                one{"{0} р░Чр▒Нр░░р░╛."}
                other{"{0} р░Чр▒Нр░░р░╛."}
            }
            kilogram{
                one{"{0} р░Хр░┐.р░Чр▒Нр░░р░╛"}
                other{"{0} р░Хр░┐.р░Чр▒Нр░░р░╛"}
            }
            ounce{
                one{"{0} р░Ф."}
                other{"{0} р░Ф."}
            }
            pound{
                one{"{0} р░кр▒М."}
                other{"{0} р░кр▒М."}
            }
        }
        power{
            horsepower{
                one{"{0} р░╣р░╛.р░к"}
                other{"{0} р░╣р░╛.р░к"}
            }
            kilowatt{
                one{"{0} р░Хр░┐.р░╡р░╛"}
                other{"{0} р░Хр░┐.р░╡р░╛"}
            }
            watt{
                one{"{0} р░╡р░╛."}
                other{"{0} р░╡р░╛."}
            }
        }
        pressure{
            hectopascal{
                one{"{0} р░╣р▒Ж.р░кр░╛"}
                other{"{0} р░╣р▒Ж.р░кр░╛"}
            }
            inch-hg{
                one{"{0} р░Ер░В.р░кр░╛р░ж"}
                other{"{0} р░Ер░В.р░кр░╛р░ж"}
            }
            millibar{
                one{"{0} р░ор░┐.р░мр░╛р░░р▒Н"}
                other{"{0} р░ор░┐.р░мр░╛р░░р▒Н"}
            }
        }
        speed{
            kilometer-per-hour{
                one{"{0} р░Хр░┐р░ор▒А/р░Чр░В."}
                other{"{0} р░Хр░┐р░ор▒А/р░Чр░В."}
            }
            meter-per-second{
                one{"{0} р░ор▒А/р░╕р▒Ж"}
                other{"{0} р░ор▒А/р░╕р▒Ж"}
            }
            mile-per-hour{
                one{"{0} р░ор▒И/р░Чр░В."}
                other{"{0} р░ор▒И/р░Чр░В."}
            }
        }
        temperature{
            celsius{
                one{"{0}┬░"}
                other{"{0}┬░"}
            }
            fahrenheit{
                one{"{0}┬░F"}
                other{"{0}┬░F"}
            }
        }
        volume{
            cubic-kilometer{
                one{"{0} р░Хр░┐р░ор▒А┬│"}
                other{"{0} р░Хр░┐р░ор▒А┬│"}
            }
            cubic-mile{
                one{"{0} р░ор▒И┬│"}
                other{"{0} р░ор▒И┬│"}
            }
            liter{
                one{"{0} р░▓р▒А."}
                other{"{0} р░▓р▒А."}
            }
        }
    }
    unitsShort{
        acceleration{
            g-force{
                one{"{0} р░Чр▒Б"}
                other{"{0} р░Чр▒Б"}
            }
        }
        angle{
            arc-minute{
                one{"{0} р░ир░┐р░ор░┐."}
                other{"{0} р░ир░┐р░ор░┐."}
            }
            arc-second{
                one{"{0} р░╕р▒Жр░Х."}
                other{"{0} р░╕р▒Жр░Х."}
            }
            degree{
                one{"{0} р░бр░┐."}
                other{"{0} р░бр░┐."}
            }
        }
        area{
            acre{
                one{"{0} р░Ор░Х."}
                other{"{0} р░Ор░Х."}
            }
            hectare{
                one{"{0} р░╣р▒Ж."}
                other{"{0} р░╣р▒Ж."}
            }
            square-foot{
                one{"{0} р░Ър░ж. р░Е."}
                other{"{0} р░Ър░ж. р░Е."}
            }
            square-kilometer{
                one{"{0} р░Хр░┐.р░ор▒А┬▓"}
                other{"{0} р░Хр░┐.р░ор▒А┬▓"}
            }
            square-meter{
                one{"{0} р░ор▒А┬▓"}
                other{"{0} р░ор▒А┬▓"}
            }
            square-mile{
                one{"{0} р░Ър░ж. р░ор▒И."}
                other{"{0} р░Ър░ж. р░ор▒И."}
            }
        }
        compound{
            per{"{0}/{1}"}
        }
        duration{
            day{
                one{"{0} р░░р▒Лр░Ьр▒Б"}
                other{"{0} р░░р▒Лр░Ьр▒Бр░▓р▒Б"}
            }
            hour{
                one{"{0} р░Чр░Вр░Я"}
                other{"{0} р░Чр░Вр░Яр░▓р▒Б"}
            }
            millisecond{
                one{"{0} р░ор░┐.р░╕р▒Ж"}
                other{"{0} р░ор░┐.р░╕р▒Ж"}
            }
            minute{
                one{"{0} р░ир░┐р░ор░┐."}
                other{"{0} р░ир░┐р░ор░┐."}
            }
            month{
                one{"{0} р░ир▒Жр░▓"}
                other{"{0} р░ир▒Жр░▓р░▓р▒Б"}
            }
            second{
                one{"{0} р░╕р▒Жр░Хр░ир▒Б"}
                other{"{0} р░╕р▒Жр░Хр░ир▒Нр░▓р▒Б"}
            }
            week{
                one{"{0} р░╡р░╛."}
                other{"{0} р░╡р░╛."}
            }
            year{
                one{"{0} р░╕р░Вр░╡р░др▒Нр░╕р░░р░В"}
                other{"{0} р░╕р░Вр░╡р░др▒Нр░╕р░░р░╛р░▓р▒Б"}
            }
        }
        length{
            centimeter{
                one{"{0} р░╕р▒Жр░В.р░ор▒А"}
                other{"{0} р░╕р▒Жр░В.р░ор▒А"}
            }
            foot{
                one{"{0} р░Е."}
                other{"{0} р░Е."}
            }
            inch{
                one{"{0} р░Ер░В."}
                other{"{0} р░Ер░В."}
            }
            kilometer{
                one{"{0} р░Хр░┐.р░ор▒А"}
                other{"{0} р░Хр░┐.р░ор▒А"}
            }
            light-year{
                one{"{0} р░Хр░╛р░В. р░╕р░В"}
                other{"{0} р░Хр░╛р░В. р░╕р░В"}
            }
            meter{
                one{"{0} р░ор▒А"}
                other{"{0} р░ор▒А"}
            }
            mile{
                one{"{0} р░ор▒И"}
                other{"{0} р░ор▒И"}
            }
            millimeter{
                one{"{0} р░ор░┐.р░ор▒А"}
                other{"{0} р░ор░┐.р░ор▒А"}
            }
            picometer{
                one{"{0} р░кр░┐.р░ор▒А"}
                other{"{0} р░кр░┐.р░ор▒А"}
            }
            yard{
                one{"{0} р░Ч."}
                other{"{0} р░Ч."}
            }
        }
        mass{
            gram{
                one{"{0} р░Чр▒Нр░░р░╛."}
                other{"{0} р░Чр▒Нр░░р░╛."}
            }
            kilogram{
                one{"{0} р░Хр░┐.р░Чр▒Нр░░р░╛"}
                other{"{0} р░Хр░┐.р░Чр▒Нр░░р░╛"}
            }
            ounce{
                one{"{0} р░Ф."}
                other{"{0} р░Ф."}
            }
            pound{
                one{"{0} р░кр▒М."}
                other{"{0} р░кр▒М."}
            }
        }
        power{
            horsepower{
                one{"{0} р░╣р░╛.р░к"}
                other{"{0} р░╣р░╛.р░к"}
            }
            kilowatt{
                one{"{0} р░Хр░┐.р░╡р░╛"}
                other{"{0} р░Хр░┐.р░╡р░╛"}
            }
            watt{
                one{"{0} р░╡р░╛."}
                other{"{0} р░╡р░╛."}
            }
        }
        pressure{
            hectopascal{
                one{"{0} р░╣р▒Ж.р░кр░╛"}
                other{"{0} р░╣р▒Ж.р░кр░╛"}
            }
            inch-hg{
                one{"{0} р░Ер░В.р░кр░╛р░ж"}
                other{"{0} р░Ер░В.р░кр░╛р░ж"}
            }
            millibar{
                one{"{0} р░ор░┐.р░мр░╛р░░р▒Н"}
                other{"{0} р░ор░┐.р░мр░╛р░░р▒Н"}
            }
        }
        speed{
            kilometer-per-hour{
                one{"{0} р░Хр░┐/р░Чр░В."}
                other{"{0} р░Хр░┐р░ор▒А/р░Чр░В."}
            }
            meter-per-second{
                one{"{0} р░ор▒А/р░╕р▒Ж"}
                other{"{0} р░ор▒А/р░╕р▒Ж"}
            }
            mile-per-hour{
                one{"{0} р░ор▒И/р░Чр░В."}
                other{"{0} р░ор▒И/р░Чр░В."}
            }
        }
        temperature{
            celsius{
                one{"{0}┬░C"}
                other{"{0}┬░C"}
            }
            fahrenheit{
                one{"{0}┬░F"}
                other{"{0}┬░F"}
            }
        }
        volume{
            cubic-kilometer{
                one{"{0} р░Хр░┐р░ор▒А┬│"}
                other{"{0} р░Хр░┐р░ор▒А┬│"}
            }
            cubic-mile{
                one{"{0} р░ор▒И┬│"}
                other{"{0} р░ор▒И┬│"}
            }
            liter{
                one{"{0} р░▓р▒А."}
                other{"{0} р░▓р▒А."}
            }
        }
    }
}
                                                                                                                             (ug└┤└%Дмд.(┌u╢А╦БїФЄoPoє[ц╤╜└▌ддd╬WB>_+Еk1Мо╣ZЛЛЁБt{n4ю╨EП@Т■(jг^5иКДJ╖├╜y aaпU─╔о	─т cлЬrK/roеlHр°~_KГK
└ut_czхMс╪эФxДйr╣Э[йNYс╣v╗╦╫ХмрЗIhбbрЩ"Щ▀т&·YФd:ЗЛI■Alц
&═√м▒pь+Э>г37)BM╗рї▓xЯXъЗэ~GУ╠ ЩД▓1йКс{#КЄ█┘фoUHЧ$XP=Q"Ю▐╠врЬРў╗▄/└г9cgi▌[п;╧ХCў─ЧNX┘  Eжм┘tпї,{ЗH╞║D^╝ао~щ▓*ПvvпяbНЦ╒ё╙╢mР█ОбИ┌И∙╙╡щ~█zCС═░Р<ц[Wуh┌jwE(ъ▌И}╛OБ▐СA╫i┐0ku+M╨╤р!Х4╒_ъ╧&h╜ajЫтя═Ке]|Б┤х\С╥т_qсўО4┴V,H%═╙п#>)■8Л7N▌Ъ╟^┼l│щР}▒^?ШaA7╝KЪЕїтзХ=К	дT┬J2▒╡MЯеm╦Юц%S╖ioь└█"4Л─╠po▄7Б`'ыЧУYE[waШ@:и╘ш░P6GЧc*}▒$VЦ>AХо│mN▐ї▌ ф)|I"єyте)Y╛7ОлV{╜skЧА╧фИъ╨И5¤mЩУ$`╓:О~:=Q└╚┴
¤▀И9p\▓е6Dхtрp│b╢тЎЎБ\Жщ┼╒▐hQЭdу(ХШ#√╛╛╕№▐Ъ┬8═;╣═N9vG9"6]шE╬G╟AвZ╡1╦mЭё?█ФяNЧ╓fE┼dца█Ш╖┬дС& ╜sдHї┤И╦ї╔wї<B╕e('ЎВы╕Изф уАcКzд╚н\$╬яM:╤|N╞a╘¤щМЇgоЁg·w╘OсВ	∙}ГPы╟Ю4∙юБg@▓ьtН3KI▀■Cn?l╢FЇJЗ╟YЕGз
 Юъ!qH■-Т7W║╘╔,/┘ГwЕВ╣о┤о┤ДЧуtWw┐оM7ЖwBg╨╝ГнIB╣sГРpЫ╫╝╙7еПбГ╪7▒█╡&зэu╧АЫБп.}?ьєLbМ[sЬo<Y;╧бц╠f.▒cрКb├╠· j│Єх~Sdд2K╣pнШWёю&ї╨ии6└▓]┼SжрСёмР5дfЄ░щЗQ╓мAЦaвеК╟щN─+┐█fлЧ%g!кЎ"аС▓ С∙#оцбX╢╫D@(aъЧ╤EY(┴jГ№╔┌│y╬д\|V%bоНr!№√╔▐i╪ш├м└J(Ь	мЪxУ]▒[╦√СxХ╚g╘юм%У.GШ3цP╤я╒`5╥a	├F[Ъ╕%%XыГ╛рTГы
*Т╦QPьз╕HАЛD0gЩ╟rў▌фn│КоЯE9ЛSEF√╩Pн╕фco╫АлS░R\нЗ╙Ў█∙Гз█ЪТ.▀ьФA=9zп┐Бїд2-ёP▓H█┴╒п_Дї│ПЁZхч¤оГяp\╕&║д═░y┬J3╤▀+[ЭHщєТЇ╕Я╩З`i√юD(g╘эЎВs!;О▐┌(aЪ╕WLш┌Gс▒8┘\!ЖАЄтЙ={%C─мК─zrCї╫╘E╤╒с·c ╨│-gГ^▀f"▐5Qиg№SWпГ6О|щЫmMо╨уЯ(─ьЎ4■@▌7┘бW└Ь╖gь1ЇЩlJjАы┘╠╨╫АDA■BA╢_мК╪┘├╥]╨╓╚Г·╝м\цВk[¤g·zc╠лП╓╖ўК^8RщыrЙп^орь╢╬!tб№╕Їd╩R;н ?ъ╜r╒╕з╜╚=$║(G√-┼$jv8B}тPё█0вVo┌ЕЛўTb№Fr#н*░█▒╧Їuж▌g▐
фt64гHcc_ГЖ
ФэD┼!lх█/!!>╪у(∙╫ВУs"╡9╓р]Ь╚╬x¤├эм?Oи?[-ф╨cXр■YЁ╣d╟┬┴wзГЧюc
g]ЁК6Чх╩йХ]Ч╗Є]Эh┘пWЩи░┌JyЕ!Ч╫Щ╡oa9}▌└*┤╛az)лA╩jгП^В?▄═▀Dxкс	┌─^Ф ╦ЗДЇ╒мШы+ўщwб▓фa╟п"}2БїЛнPP╦╚Аx{╕ЧЛQ,щДМДЧ]╞INця╞V}Ю+▓нЇМ╙█?╞<_┐Я
xЭbэё┼Ч▓ЪАJk╢oм3З█╦╘tа!80"∙М?Н┐Ю{╣и╩3ЮЕсї╜ьсЄ]╟5(+НbhdЪВLZА╥tc	%.е╫ЬMвэxЪlшOy<"┴6щСЪ─[rЭьС∙fX!Щ,JА;·N8─╚e*lтI¤б·8[▒┘╫╬+¤T╒│ZФ┴x▄╦╦лIzЛЁ4О$з╢Ў&a■ю│c╙\u/Nэ[ЁиPt█Y-~єв-┼TА№ш'VdД╢P(
N1l~]Я5DзлGев│|■Ї┐¤:tSх╓Д ╡ВФёш▄Q╜Ызш╔╬З¤Зч╒л?ЮdЬp╟Ъ╞шЕшaб┤	X╓╛yьЎўЎТ┐█Чe║Н╨ч~C╕x5T┐yь(ЛОнїпц╬О╓n╡([M%ktнj░Швн╞Оqр┐мхЗT!цX█OXe"aЎIГ-}f ЪфС	t¤фf*гВаXп╪Ў╡9Д═с╧AДФc-KT╨╙{5eоЕwЩqК╞Х ДМЮi-Я
xw6f;:т└┴сы°М├Я ё	_АKьqНQ═6-┌с?чbД{ўмф╩tЮ`Xк╕V▐зuTёо═\EЇwЙg)%Л~Й`Е!
ДИWЎcЫ/е╘qа.pхE=╡~п╕е%═Hлf╞ё│▓╠d╘@@Q9ЦёрG█^Х╗─6Э┤:f╕:D╨Л°єгFn█┬╣─чХИLA▒ьыPb\░MQcщЯў`╔]Э3H ▓хRxЯ╘╞ √-,Є!gЦ@│QПл:ОЙ╗╞ПH╚цЄ╚┌┐J4Q╪fyй╩╞┘LЁ2п+ЮIAН╒ив▄|q2·╙пў╛└╣ЁCT&о[JCW№╣СДю~Гtз╘Y+╥GЮeС?░└ЗS┌4├YС7╪ч╢К ╚ц*2є#fИej■уi{▒S├J!gмLФ√a{ifОyжdВ{ї╙DўЬ▓"╢#0Yс}Ч╚r81▄ўЭ╓@(єRD╟ч/Z(їF▄Я╨щs aи;/*
*******************************************************************************
* Copyright (C) 1997-2014, International Business Machines Corporation and
* others. All Rights Reserved.
*******************************************************************************
*
* File TIMEZONE.CPP
*
* Modification History:
*
*   Date        Name        Description
*   12/05/96    clhuang     Creation.
*   04/21/97    aliu        General clean-up and bug fixing.
*   05/08/97    aliu        Fixed Hashtable code per code review.
*   07/09/97    helena      Changed createInstance to createDefault.
*   07/29/97    aliu        Updated with all-new list of 96 UNIX-derived
*                           TimeZones.  Changed mechanism to load from static
*                           array rather than resource bundle.
*   07/07/1998  srl         Bugfixes from the Java side: UTC GMT CAT NST
*                           Added getDisplayName API
*                           going to add custom parsing.
*
*                           ISSUES:
*                               - should getDisplayName cache something?
*                               - should custom time zones be cached? [probably]
*  08/10/98     stephen     Brought getDisplayName() API in-line w/ conventions
*  08/19/98     stephen     Changed createTimeZone() to never return 0
*  09/02/98     stephen     Added getOffset(monthLen) and hasSameRules()
*  09/15/98     stephen     Added getStaticClassID()
*  02/22/99     stephen     Removed character literals for EBCDIC safety
*  05/04/99     stephen     Changed initDefault() for Mutex issues
*  07/12/99     helena      HPUX 11 CC Port.
*  12/03/99     aliu        Moved data out of static table into icudata.dll.
*                           Substantial rewrite of zone lookup, default zone, and
*                           available IDs code.  Misc. cleanup.
*********************************************************************************/

#include "utypeinfo.h"  // for 'typeid' to work

#include "unicode/utypes.h"
#include "unicode/ustring.h"
#include "uassert.h"
#include "ustr_imp.h"

#ifdef U_DEBUG_TZ
# include <stdio.h>
# include "uresimp.h" // for debugging

static void debug_tz_loc(const char *f, int32_t l)
{
  fprintf(stderr, "%s:%d: ", f, l);
}

static void debug_tz_msg(const char *pat, ...)
{
  va_list ap;
  va_start(ap, pat);
  vfprintf(stderr, pat, ap);
  fflush(stderr);
}
static char gStrBuf[256];
#define U_DEBUG_TZ_STR(x) u_austrncpy(gStrBuf,x,sizeof(gStrBuf)-1)
// must use double parens, i.e.:  U_DEBUG_TZ_MSG(("four is: %d",4));
#define U_DEBUG_TZ_MSG(x) {debug_tz_loc(__FILE__,__LINE__);debug_tz_msg x;}
#else
#define U_DEBUG_TZ_MSG(x)
#endif

#if !UCONFIG_NO_FORMATTING

#include "unicode/simpletz.h"
#include "unicode/calendar.h"
#include "unicode/gregocal.h"
#include "unicode/ures.h"
#include "unicode/tzfmt.h"
#include "unicode/numfmt.h"
#include "gregoimp.h"
#include "uresimp.h" // struct UResourceBundle
#include "olsontz.h"
#include "mutex.h"
#include "unicode/udata.h"
#include "ucln_in.h"
#include "cstring.h"
#include "cmemory.h"
#include "unicode/strenum.h"
#include "uassert.h"
#include "zonemeta.h"

#define kZONEINFO "zoneinfo64"
#define kREGIONS  "Regions"
#define kZONES    "Zones"
#define kRULES    "Rules"
#define kNAMES    "Names"
#define kTZVERSION  "TZVersion"
#define kLINKS    "links"
#define kMAX_CUSTOM_HOUR    23
#define kMAX_CUSTOM_MIN     59
#define kMAX_CUSTOM_SEC     59
#define MINUS 0x002D
#define PLUS 0x002B
#define ZERO_DIGIT 0x0030
#define COLON 0x003A

// Static data and constants

static const UChar         WORLD[] = {0x30, 0x30, 0x31, 0x00}; /* "001" */

static const UChar         GMT_ID[] = {0x47, 0x4D, 0x54, 0x00}; /* "GMT" */
static const UChar         UNKNOWN_ZONE_ID[] = {0x45, 0x74, 0x63, 0x2F, 0x55, 0x6E, 0x6B, 0x6E, 0x6F, 0x77, 0x6E, 0x00}; /* "Etc/Unknown" */
static const int32_t       GMT_ID_LENGTH = 3;
static const int32_t       UNKNOWN_ZONE_ID_LENGTH = 11;

static icu::TimeZone* DEFAULT_ZONE = NULL;
static icu::UInitOnce gDefaultZoneInitOnce = U_INITONCE_INITIALIZER;

static icu::TimeZone* _GMT = NULL;
static icu::TimeZone* _UNKNOWN_ZONE = NULL;
static icu::UInitOnce gStaticZonesInitOnce = U_INITONCE_INITIALIZER;

static char TZDATA_VERSION[16];
static icu::UInitOnce gTZDataVersionInitOnce = U_INITONCE_INITIALIZER;

static int32_t* MAP_SYSTEM_ZONES = NULL;
static int32_t* MAP_CANONICAL_SYSTEM_ZONES = NULL;
static int32_t* MAP_CANONICAL_SYSTEM_LOCATION_ZONES = NULL;

static int32_t LEN_SYSTEM_ZONES = 0;
static int32_t LEN_CANONICAL_SYSTEM_ZONES = 0;
static int32_t LEN_CANONICAL_SYSTEM_LOCATION_ZONES = 0;

static icu::UInitOnce gSystemZonesInitOnce = U_INITONCE_INITIALIZER;
static icu::UInitOnce gCanonicalZonesInitOnce = U_INITONCE_INITIALIZER;
static icu::UInitOnce gCanonicalLocationZonesInitOnce = U_INITONCE_INITIALIZER;

U_CDECL_BEGIN
static UBool U_CALLCONV timeZone_cleanup(void)
{
    U_NAMESPACE_USE
    delete DEFAULT_ZONE;
    DEFAULT_ZONE = NULL;
    gDefaultZoneInitOnce.reset();

    delete _GMT;
    _GMT = NULL;
    delete _UNKNOWN_ZONE;
    _UNKNOWN_ZONE = NULL;
    gStaticZonesInitOnce.reset();

    uprv_memset(TZDATA_VERSION, 0, sizeof(TZDATA_VERSION));
    gTZDataVersionInitOnce.reset();

    LEN_SYSTEM_ZONES = 0;
    uprv_free(MAP_SYSTEM_ZONES);
    MAP_SYSTEM_ZONES = 0;
    gSystemZonesInitOnce.reset();

    LEN_CANONICAL_SYSTEM_ZONES = 0;
    uprv_free(MAP_CANONICAL_SYSTEM_ZONES);
    MAP_CANONICAL_SYSTEM_ZONES = 0;
    gCanonicalZonesInitOnce.reset();

    LEN_CANONICAL_SYSTEM_LOCATION_ZONES = 0;
    uprv_free(MAP_CANONICAL_SYSTEM_LOCATION_ZONES);
    MAP_CANONICAL_SYSTEM_LOCATION_ZONES = 0;
    gCanonicalLocationZonesInitOnce.reset();

    return TRUE;
}
U_CDECL_END

U_NAMESPACE_BEGIN

static int32_t findInStringArray(UResourceBundle* array, const UnicodeString& id, UErrorCode &status)
{
    UnicodeString copy;
    const UChar *u;
    int32_t len;

    int32_t start = 0;
    int32_t limit = ures_getSize(array);
    int32_t mid;
    int32_t lastMid = INT32_MAX;
    if(U_FAILURE(status) || (limit < 1)) {
        return -1;
    }
    U_DEBUG_TZ_MSG(("fisa: Looking for %s, between %d and %d\n", U_DEBUG_TZ_STR(UnicodeString(id).getTerminatedBuffer()), start, limit));

    for (;;) {
        mid = (int32_t)((start + limit) / 2);
        if (lastMid == mid) {   /* Have we moved? */
            break;  /* We haven't moved, and it wasn't found. */
        }
        lastMid = mid;
        u = ures_getStringByIndex(array, mid, &len, &status);
        if (U_FAILURE(status)) {
            break;
        }
        U_DEBUG_TZ_MSG(("tz: compare to %s, %d .. [%d] .. %d\n", U_DEBUG_TZ_STR(u), start, mid, limit));
        copy.setTo(TRUE, u, len);
        int r = id.compare(copy);
        if(r==0) {
            U_DEBUG_TZ_MSG(("fisa: found at %d\n", mid));
            return mid;
        } else if(r<0) {
            limit = mid;
        } else {
            start = mid;
        }
    }
    U_DEBUG_TZ_MSG(("fisa: not found\n"));
    return -1;
}

/**
 * Fetch a specific zone by name.  Replaces the getByKey call.
 * @param top Top timezone resource
 * @param id Time zone ID
 * @param oldbundle Bundle for reuse (or NULL).   see 'ures_open()'
 * @return the zone's bundle if found, or undefined if error.  Reuses oldbundle.
 */
static UResourceBundle* getZoneByName(const UResourceBundle* top, const UnicodeString& id, UResourceBundle *oldbundle, UErrorCode& status) {
    // load the Rules object
    UResourceBundle *tmp = ures_getByKey(top, kNAMES, NULL, &status);

    // search for the string
    int32_t idx = findInStringArray(tmp, id, status);

    if((idx == -1) && U_SUCCESS(status)) {
        // not found
        status = U_MISSING_RESOURCE_ERROR;
        //ures_close(oldbundle);
        //oldbundle = NULL;
    } else {
        U_DEBUG_TZ_MSG(("gzbn: oldbundle= size %d, type %d, %s\n", ures_getSize(tmp), ures_getType(tmp), u_errorName(status)));
        tmp = ures_getByKey(top, kZONES, tmp, &status); // get Zones object from top
        U_DEBUG_TZ_MSG(("gzbn: loaded ZONES, size %d, type %d, path %s %s\n", ures_getSize(tmp), ures_getType(tmp), ures_getPath(tmp), u_errorName(status)));
        oldbundle = ures_getByIndex(tmp, idx, oldbundle, &status); // get nth Zone object
        U_DEBUG_TZ_MSG(("gzbn: loaded z#%d, size %d, type %d, path %s, %s\n", idx, ures_getSize(oldbundle), ures_getType(oldbundle), ures_getPath(oldbundle),  u_errorName(status)));
    }
    ures_close(tmp);
    if(U_FAILURE(status)) {
        //ures_close(oldbundle);
        return NULL;
    } else {
        return oldbundle;
    }
}


UResourceBundle* TimeZone::loadRule(const UResourceBundle* top, const UnicodeString& ruleid, UResourceBundle* oldbundle, UErrorCode& status) {
    char key[64];
    ruleid.extract(0, sizeof(key)-1, key, (int32_t)sizeof(key)-1, US_INV);
    U_DEBUG_TZ_MSG(("loadRule(%s)\n", key));
    UResourceBundle *r = ures_getByKey(top, kRULES, oldbundle, &status);
    U_DEBUG_TZ_MSG(("loadRule(%s) -> kRULES [%s]\n", key, u_errorName(status)));
    r = ures_getByKey(r, key, r, &status);
    U_DEBUG_TZ_MSG(("loadRule(%s) -> item [%s]\n", key, u_errorName(status)));
    return r;
}

/**
 * Given an ID, open the appropriate resource for the given time zone.
 * Dereference aliases if necessary.
 * @param id zone id
 * @param res resource, which must be ready for use (initialized but not open)
 * @param ec input-output error code
 * @return top-level resource bundle
 */
static UResourceBundle* openOlsonResource(const UnicodeString& id,
                                          UResourceBundle& res,
                                          UErrorCode& ec)
{
#if U_DEBUG_TZ
    char buf[128];
    id.extract(0, sizeof(buf)-1, buf, sizeof(buf), "");
#endif
    UResourceBundle *top = ures_openDirect(0, kZONEINFO, &ec);
    U_DEBUG_TZ_MSG(("pre: res sz=%d\n", ures_getSize(&res)));
    /* &res = */ getZoneByName(top, id, &res, ec);
    // Dereference if this is an alias.  Docs say result should be 1
    // but it is 0 in 2.8 (?).
    U_DEBUG_TZ_MSG(("Loading zone '%s' (%s, size %d) - %s\n", buf, ures_getKey((UResourceBundle*)&res), ures_getSize(&res), u_errorN
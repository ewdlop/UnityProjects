 if (DiagnosticUtility.ShouldUseActivity)
                    {
                        ServiceModelActivity.Start(activity, this.OpenActivityName, this.OpenActivityType);
                        // Turn open and close off for this open on contained objects.
                        this.TraceOpenAndClose = false;
                    }
                    if (address == null)
                    {
                        throw DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull("address");
                    }

                    if (this.HasDuplexOperations())
                    {
                        throw DiagnosticUtility.ExceptionUtility.ThrowHelperError(new InvalidOperationException(SR.GetString(SR.SFxCreateNonDuplexChannel1, this.Endpoint.Contract.Name)));
                    }

                    EnsureOpened();
                    return (TChannel)this.ServiceChannelFactory.CreateChannel(typeof(TChannel), address, via);
                }
            }
            finally
            {
                this.TraceOpenAndClose = traceOpenAndClose;
            }
        }

        public TChannel CreateChannel()
        {
            return CreateChannel(this.CreateEndpointAddress(this.Endpoint), null);
        }

        public TChannel CreateChannelWithIssuedToken(SecurityToken issuedToken)
        {
            TChannel channel = this.CreateChannel();
            FederatedClientCredentialsParameters parameters = new FederatedClientCredentialsParameters();
            parameters.IssuedSecurityToken = issuedToken;
            ((IChannel)channel).GetProperty<ChannelParameterCollection>().Add(p
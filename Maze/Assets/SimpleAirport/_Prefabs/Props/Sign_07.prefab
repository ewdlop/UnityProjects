ar = c;
            }

            if (foundReturn > 0)
            {
                return foundReturn;
            }
            else if (foundSpace > 0)
            {
                return foundSpace;
            }

            return baseOffset;
        }

        /// <include file='doc\LiteralText.uex' path='docs/doc[@for="LiteralText.PagedText"]/*' />
        public String PagedText
        {
            get
            {
                int index = FirstVisibleItemIndex;
                int count = VisibleItemCount;
                String text = Text;

                if (count > text.Length)
                {
                    return text;
                }

                int start = CalculateOffset(index);
                int stop = CalculateOffset(index + count);

                // If not at the beginning or end, skip spaces.

                if (start > 0)
                {
                    while (start < stop && Char.IsWhiteSpace(text[start]) )
                    {
                        start++;
                    }
                }

                if (stop < text.Length)
                {
                    while (Char.IsWhiteSpace(text[stop - 1]) && stop > start)
                    {
                        stop--;
                    }
                }

                return (stop > start) ? text.Substring(start, stop - start) : String.Empty;
            }
        }
        

        /// <include file='doc\LiteralText.uex' path='docs/doc[@for="LiteralText.InternalItemCount"]/*' />
        protected override int InternalItemCount
        {
            get
            {
                return ((Text.Length / PagingUnitSize) + (((Text.Length % PagingUnitSize) > 0) ? 1 : 0));
            }
        }

        /// <include file='doc\LiteralText.uex' path='docs/doc[@for="LiteralText.ItemWeight"]/*' />
        protected override int ItemWeight
        {
            get
            {
                return PagingUnitSize;
            }
        }

        internal override bool TrimInnerText
        {
            get
            {
                return false;
            }
        }
    }

    /*
  
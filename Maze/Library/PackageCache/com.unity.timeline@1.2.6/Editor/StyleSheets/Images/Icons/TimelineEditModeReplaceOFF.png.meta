shCode = 0;
            if (name != null) {
                for (int i = name.Length - 1; i >= 0; i--) {
                    char ch = name[i];
                    if (ch == ':') break;
                    hashCode += (hashCode << 7) ^ ch;
                }
                hashCode -= hashCode >> 17;
                hashCode -= hashCode >> 11;
                hashCode -= hashCode >> 5;
            }
            return hashCode;
        }
    }

    internal sealed class XmlNameEx : XmlName {
        byte flags;
        XmlSchemaSimpleType memberType;
        XmlSchemaType schemaType;
        object decl;

        // flags
        // 0,1  : Validity
        // 2    : IsDefault
        // 3    : IsNil
        const byte ValidityMask = 0x03;
        const byte IsDefaultBit = 0x04;
        const byte IsNilBit     = 0x08;

        internal XmlNameEx(string prefix, string localName, string ns, int hashCode, XmlDocument ownerDoc, XmlName next, IXmlSchemaInfo schemaInfo) : base(prefix, localName, ns, hashCode, ownerDoc, next) {
            SetValidity(schemaInfo.Validity);
            SetIsDefault(schemaInfo.IsDefault);
            SetIsNil(schemaInfo.IsNil);
            memberType = schemaInfo.MemberType;
            schemaType = schemaInfo.SchemaType;
            decl = schemaInfo.SchemaElement != null 
                   ? (object)schemaInfo.SchemaElement 
                   : (object)schemaInfo.SchemaAttribute; 
        }

        public override XmlSchemaValidity Validity { 
            get { 
                return ownerDoc.CanReportValidity ? (XmlSchemaValidity)(flags & ValidityMask) : XmlSchemaValidity.NotKnown;
            } 
        }

        public override bool IsDefault { 
            get { 
                return (flags & IsDefaultBit) != 0;
            } 
        }

        public override bool IsNil { 
            get { 
                return (flags & IsNilBit) != 0;
            } 
        }

        public override XmlSchemaSimpleType MemberType {
            get { 
                return memberType; 
            }
        }

        public override XmlSchemaType SchemaType {
            get { 
                return schemaType; 
            }
        }

        public override XmlSchemaElement SchemaElement {
            get { 
                return decl as XmlSchemaElement; 
            }
        }

        public override XmlSchemaAttribute SchemaAttribute {
            get { 
                return decl as XmlSchemaAttribute; 
            }
        }

        public void SetValidity(XmlSchemaValidity value) {
            flags = (byte)((flags & ~ValidityMask) | (byte)(value));
        }

        public void SetIsDefault(bool va
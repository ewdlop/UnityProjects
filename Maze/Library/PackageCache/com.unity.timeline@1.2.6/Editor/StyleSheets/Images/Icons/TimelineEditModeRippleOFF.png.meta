// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

//
// =+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
//
// This file contains functional tests for ParallelLoopState
//
// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=-=-

using System.Collections.Generic;
using System.Diagnostics;
using System.Reflection;

using Xunit;

namespace System.Threading.Tasks.Test
{
    public sealed class ParallelStateTest
    {
        #region Private Fields

        private readonly object _lock = new object();

        private readonly IEnumerable<int> _collection = null;  // the collection used in Foreach
        private readonly Barrier _barrier;

        // Holds list of available actions 
        private readonly Dictionary<string, Action<long, ParallelLoopState>> _availableActions = new Dictionary<string, Action<long, ParallelLoopState>>();
        private readonly Dictionary<string, Action<ParallelLoopResult?>> _availableVerifications = new Dictionary<string, Action<ParallelLoopResult?>>();

        private readonly TestParameters _parameters;
        private readonly ManualResetEventSlim _mreSlim;

        private readonly double[] _results;  // global place to store the workload result for verification

        // data structure used with ParallelLoopState<TLocal>
        // each row is the sequence of loop "index" finished in the same thread
        // private Dictionary<int, List<int>> sequences; 
        private long _threadCount;
        private readonly List<int>[] _sequences;
        private readonly List<long>[] _sequences64;

        private long _startIndex = 0;  // start index for the loop

        // Hold list of actions to be performed
        private List<Action<long, ParallelLoopState>> _actions = new List<Action<long, ParallelLoopState>>();

        // Hold list of verification
        private Queue<Action<ParallelLoopResult?>> _verifications = new Queue<Action<ParallelLoopResult?>>();

        private volatile bool _isStopped = false;   			// Flag to indicate that we called Stop() on the Parallel state
        private long? _lowestBreakIter = null;				    // LowestBreakIteration value holder, null indicates that Break hasn't been called
        private volatile bool _isExceptional = false;       	// Flag to indicate exception thrown in the test

        private int _iterCount = 0;  // test own counter for certai
using System;
using System.Collections.Generic;
using System.Data.Linq;

namespace System.Data.Linq.SqlClient {

    // Resolves references to columns/expressions defined in other scopes
    internal class SqlResolver {
        Visitor visitor;

        internal SqlResolver() {
            this.visitor = new Visitor();
        }

        internal SqlNode Resolve(SqlNode node) {
            return this.visitor.Visit(node);
        }

        private static string GetColumnName(SqlColumn c) {
#if DEBUG
            return c.Text;
#else
            return c.Name;
#endif
        }

        class Visitor : SqlScopedVisitor {
            SqlBubbler bubbler;

            internal Visitor() {
                this.bubbler = new SqlBubbler();
            }

            internal override SqlExpression VisitColumnRef(SqlColumnRef cref) {
                SqlColumnRef result = this.BubbleUp(cref);
                if (result == null) {
                    throw Error.ColumnReferencedIsNotInScope(GetColumnName(cref.Column));
                }
                return result;
            }

            private SqlColumnRef BubbleUp(SqlColumnRef cref) {
                for (Scope s = this.CurrentScope; s != null; s = s.ContainingScope) {
                    if (s.Source != null) {
                        SqlColumn found = this.bubbler.BubbleUp(cref.Column, s.Source);
                        if (found != null) {
                            if (found != cref.Column)
                                return new SqlColumnRef(found);
                            return cref;
                        }
                    }
                }
                return null;
            }
        }

        internal class SqlScopedVisitor : SqlVisitor {
            internal Scope CurrentScope;

            internal class Scope {
                SqlNode source;
                Scope containing;
                internal Scope(SqlNode source, Scope containing) {
                    this.source = source;
                    this.containing = containing;
                }
                internal SqlNode Source {
                    get { return this.source; }
                }
                internal Scope ContainingScope {
                    
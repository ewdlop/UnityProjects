// ***********************************************************************
// Copyright (c) 2008 Charlie Poole
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
// 
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
// ***********************************************************************

using System;
using System.Collections;
#if CLR_2_0 || CLR_4_0
using System.Collections.Generic;
#endif
using System.Reflection;
using System.Text;
using NUnit.Framework.Api;
using NUnit.Framework.Extensibility;
using NUnit.Framework.Internal;

namespace NUnit.Framework.Builders
{
    /// <summary>
    /// PairwiseStrategy creates test cases by combining the parameter
    /// data so that all possible pairs of data items are used.
    /// </summary>
	public class PairwiseStrategy : CombiningStrategy
	{
		internal class FleaRand
		{
			private const int FleaRandSize = 256;

			private uint b;
			private uint c;
			private uint d;
			private uint z;

			private uint[] m = new uint[FleaRandSize];
			private uint[] r = new uint[FleaRandSize];

			private uint q;

            /// <summary>
            /// Initializes a new instance of the <see cref="FleaRand"/> class.
            /// </summary>
            /// <param name="seed">The seed.</param>
			public FleaRand(uint seed)
			{
				this.b = seed;
				this.c = seed;
				this.d = seed;
				this.z = seed;

				for (int i = 0; i < this.m.Length; i++)
				{
					this.m[i] = seed;
				}

				for (int i = 0; i < 10; i++)
				{
					this.Batch();
				}

				this.q = 0;
			}

			public uint Next()
			{
				if (this.q == 0)
				{
					this.Batch();
					this.q = (uint)this.r.Length - 1;
				}
				else
				{
					this.q--;
				}

				return this.r[this.q];
			}

			private void Batch()
			{
				uint a;
				uint b = this.b;
				uint c = this.c + (++this.z);
				uint d = this.d;

				for (int i = 0; i < this.r.Length; i++)
				{
					a = this.m[b % this.m.Length];
					this.m[b % this.m.Length] = d;
					d = (c << 19) + (c >> 13) + b;
					c = b ^ this.m[i];
					b = a + d;
					this.r[i] = c;
				}

				this.b = b;
				this.c = c;
				this.d = d;
			}
		}

		internal class FeatureInfo
		{
			public const string Names = "abcdefghijklmnopqrstuvwxyz";

			public readonly int Dimension;
			public readonly int Feature;

			public FeatureInfo(int dimension, int feature)
			{
				this.Dimension = dimension;
				this.Feature = feature;
			}

#if DEBUG
			public override string ToString()
			{
				return (this.Dimension + 1).ToString() + FeatureInfo.Names[this.Feature];
			}
#endif
		}

		internal class Tuple
		{
#if CLR_2_0 || CLR_4_0
			private readonly List<FeatureInfo> features = new List<FeatureInfo>();
#else
            private readonly ArrayList features = new ArrayList();
#endif

			public int Count
			{
				get
				{
					return this.features.Count;
				}
			}

			public FeatureInfo this[int index]
			{
				get
				{
					return (FeatureInfo)this.features[index];
				}
			}

			public void Add(FeatureInfo feature)
			{
				this.features
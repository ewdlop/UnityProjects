 // bug #80301
		[Ignore ("Depends on specific DPI")]
		public void PreferredHeight ()
		{
			RichTextBox rtb = new RichTextBox ();
			rtb.Font = new Font ("Arial", 14);
			Assert.AreEqual (29, rtb.PreferredHeight, "#A1");
			rtb.Font = new Font ("Arial", 16);
			Assert.AreEqual (32, rtb.PreferredHeight, "#A2");
			rtb.Font = new Font ("Arial", 17);
			Assert.AreEqual (34, rtb.PreferredHeight, "#A3");

			rtb.BorderStyle = BorderStyle.None;

			Assert.AreEqual (27, rtb.PreferredHeight, "#B1");
			rtb.Font = new Font ("Arial", 14);
			Assert.AreEqual (22, rtb.PreferredHeight, "#B2");
			rtb.Font = new Font ("Arial", 16);
			Assert.AreEqual (25, rtb.PreferredHeight, "#B3");
		}

		[Test]
		public void ReadOnly_BackColor_NotSet ()
		{
			RichTextBox rtb = new RichTextBox ();
			rtb.ReadOnly = true;
			Assert.IsTrue (rtb.ReadOnly, "#A1");
			Assert.AreEqual (SystemColors.Control, rtb.BackColor, "#A2");

			Form form = new Form ();
			form.ShowInTaskbar = false;
			form.Controls.Add (rtb);
			form.Show ();

			Assert.IsTrue (rtb.ReadOnly, "#B1");
			Assert.AreEqual (SystemColors.Control, rtb.BackColor, "#B2");

			rtb.ResetBackColor ();
			Assert.IsTrue (rtb.ReadOnly, "#C1");
			Assert.AreEqual (SystemColors.Control, rtb.BackColor, "#C2");

			rtb.ReadOnly = false;
			Assert.IsFalse (rtb.ReadOnly, "#D1");
			Assert.AreEqual (SystemColors.Window, rtb.BackColor, "#D2");

			rtb.ReadOnly = true;
			Assert.IsTrue (rtb.ReadOnly, "#E1");
			Assert.AreEqual (SystemColors.Control, rtb.BackColor, "#E2");

			rtb.BackColor = Color.Red;
			Assert.IsTrue (rtb.ReadOnly, "#F1");
			Assert.AreEqual (Color.Red, rtb.BackColor, "#F2");

			rtb.ReadOnly = false;
			Assert.IsFalse (rtb.ReadOnly, "#G1");
			Assert.AreEqual (Color.Red, rtb.BackColor, "#G2");

			rtb.ReadOnly = true;
			Assert.IsTrue (rtb.ReadOnly, "#H1");
			Assert.AreEqual (Color.Red, rtb.BackColor, "#H2");

			rtb.ResetBackColor ();
			Assert.IsTrue (rtb.ReadOnly, "#I1");
			Assert.AreEqual (SystemColors.Control, rtb.BackColor, "#I2");
			form.Close ();
		}

		[Test]
		public void Modified ()
		{
			RichTextBox rtb = new RichTextBox ();
			Assert.AreEqual (false, rtb.Modified, "#A1");

			rtb.SelectedText = "mono";
			Assert.AreEqual (true, rtb.Modified, "#B1");

			rtb.Modified = false;
			Assert.AreEqual (false, rtb.Modified, "#C1");

			// Only SelectedText seems to cause a change in Modified, as opposed to Text
			rtb.Text = "moon";
			Assert.AreEqual (false, rtb.Modified, "#D1");
		}

		[Test]
		public void ReadOnly_BackColor_Set ()
		{
			RichTextBox rtb = new RichTextBox ();
			rtb.BackColor = Color.Blue;
			rtb.ReadOnly = true;
			Assert.IsTrue (rtb.ReadOnly, "#A1");
			Assert.AreEqual (Color.Blue, rtb.BackColor, "#A2");

			Form form = new Form ();
			form.ShowInTaskbar = false;
			form.Controls.Add (rtb);
			form.Show ();

			Assert.IsTrue (rtb.ReadOnly, "#B1");
			Assert.AreEqual (Color.Blue, rtb.BackColor, "#B2");

			rtb.ReadOnly = false;
			Assert.IsFalse (rtb.ReadOnly, "#C1");
			Assert.AreEqual (Color.Blue, rtb.BackColor, "#C2");

			rtb.ReadOnly = true;
			Assert.IsTrue (rtb.ReadOnly, "#D1");
			Assert.AreEqual (Color.Blue, rtb.BackColor, "#D2");

			rtb.BackColor = Color.Red;
			Assert.IsTrue (rtb.ReadOnly, "#E1");
			Assert.AreEqual (Color.Red, rtb.BackColor, "#E2");

			rtb.ReadOnly = false;
			Assert.IsFalse (rtb.ReadOnly, "#F1");
			Assert.AreEqual (Color.Red, rtb.BackColor, "#F2");

			rtb.ReadOnly = true;
			rtb.ResetBackColor ();
			Assert.IsTrue (rtb.ReadOnly, "#G1");
			Assert.AreEqual (SystemColors.Control, rtb.BackColor, "#G2");

			form.Dispose ();

			rtb = new RichTextBox ();
			rtb.ReadOnly = true;
			rtb.BackColor = Color.Blue;
			Assert.IsTrue (rtb.ReadOnly, "#H1");
			Assert.AreEqual (Color.Blue, rtb.BackColor, "#H2");

			form = new Form ();
			form.ShowInTaskbar = false;
			form.Controls.Add (rtb);
			form.Show ();

			Assert.IsTrue (rtb.ReadOnly, "#I1");
			Assert.AreEqual (Color.Blue, rtb.BackColor, "#I2");

			rtb.ReadOnly = false;
			Assert.IsFalse (rtb.ReadOnly, "#J1");
			Assert.AreEqual (Color.Blue, rtb.BackColor, "#J2");

			rtb.ResetBackColor ();
			Assert.IsFalse (rtb.ReadOnly, "#K1");
			Assert.AreEqual (SystemColors.Window, rtb.BackColor, "#K2");
			
			form.Close ();
		}

		[Test]
		public void ScrollBarsTest ()
		{
			RichTextBox rtb = new RichTextBox ();
			Assert.AreEqual (RichTextBoxScrollBars.Both, rtb.ScrollBars, "#1");
			rtb.ScrollBars = RichTextBoxScrollBars.Vertical;
			Assert.AreEqual (RichTextBoxScrollBars.Vertical, rtb.ScrollBars, "#2");
		}

		[Test]
		[ExpectedException (typeof (InvalidEnumArgumentException))]
		public void ScrollBars_Invalid ()
		{
			RichTextBox rtb = new RichTextBox ();
			rtb.ScrollBars = (RichTextBoxScrollBars) 666;
		}

		[Test]
		public void SelectionFontTest ()
		{
			RichTextBox t = new RichTextBox();
			t.Text = "123";
			t.SelectionStart = 1;
			t.SelectionLength = 1;
			Font f = new Font(FontFamily.GenericMonospace, 120);
			t.SelectionFont = f;

			Assert.AreEqual (t.SelectionFont.Size, f.Size, "A1");
		}

		[Test]
		public void SelectionLength_Negative ()
		{
			RichTextBox rtb = new RichTextBox ();
			try {
				rtb.SelectionLength = -1;
				Assert.Fail ("#1");
			} catch (ArgumentOutOfRangeException ex) {
				Assert.AreEqual (typeof (ArgumentOutOfRangeException), ex.GetType (), "#2");
				Assert.IsNull (ex.InnerException, "#3");
				Assert.IsNotNull (ex.Message, "#4");
				Assert.IsNotNull (ex.ParamName, "#5");
				Assert.AreEqual ("SelectionLength", ex.ParamName, "#6");
			}
		}

		[Test]
		public void SelectionStart_Negative ()
		{
			RichTextBox rtb = new RichTextBox ();
			try {
				rtb.SelectionStart = -1;
				Assert.Fail ("#1");
			} catch (ArgumentOutOfRangeException ex) {
				Assert.AreEqual (typeof (ArgumentOutOfRangeException), ex.GetType (), "#2");
				Assert.IsNull (ex.InnerException, "#3");
				Assert.IsNotNull (ex.Message, "#4");
				Assert.IsNotNull (ex.ParamName, "#5");
				Assert.AreEqual ("SelectionStart", ex.ParamName, "#6");
			}
		}
		
		RichTextBox rtb;
		
		[Test]	// This test passes if it doesn't throw an NRE.
		public void Bug351886 ()
		{
			Form form = new Form ();
			rtb = new Rich
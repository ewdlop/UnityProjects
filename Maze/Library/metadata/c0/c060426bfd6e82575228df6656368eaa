 out over the world.</para>
        /// <para>To connect to a specific data center use one of the following addresses:</para>
        /// <para>United States: us1-mm.unet.unity3d.com Europe: eu1-mm.unet.unity3d.com Singapore: ap1-mm.unet.unity3d.com.</para>
        /// </summary>
        /// <param name="newHost">Hostname of MatchMaker service.</param>
        /// <param name="port">Port of MatchMaker service.</param>
        /// <param name="https">Protocol used by MatchMaker service.</param>
        public void SetMatchHost(string newHost, int port, bool https)
        {
            if (matchMaker == null)
            {
                matchMaker = gameObject.AddComponent<NetworkMatch>();
            }
            if (newHost == "127.0.0.1")
            {
                newHost = "localhost";
            }
            string prefix = "http://";
            if (https)
            {
                prefix = "https://";
            }

            if (newHost.StartsWith("http://"))
            {
                newHost = newHost.Replace("http://", "");
            }
            if (newHost.StartsWith("https://"))
            {
                newHost = newHost.Replace("https://", "");
            }

            m_MatchHost = newHost;
            m_MatchPort = port;

            string fullURI = prefix + m_MatchHost + ":" + m_MatchPort;
            if (LogFilter.logDebug) { Debug.Log("SetMatchHost:" + fullURI); }
            matchMaker.baseUri = new Uri(fullURI);
        }

        //------------------------------ Start & Stop callbacks -----------------------------------

        // Since there are multiple versions of StartServer, StartClient and StartHost, to reliably customize
        // their functionality, users would need override all the versions. Instead these callbacks are invoked
        // from all versions, so users only need to implement this one case.

        /// <summary>
        /// This hook is invoked when a host is started.
        /// <para>StartHost has multiple signatures, but they all cause this hook to be called.</para>
        /// </summary>
        public virtual void OnStartHost()
        {
        }

        /// <summary>
        /// This hook is invoked when a server is started - including when a host is started.
        /// StartServer has multiple signatures, but they all cause this hook to be called.
        /// </summary>
        public virtual void OnStartServer()
        {
        }

        /// <summary>
        /// This is a hook that is invoked when the client is started.
        /// <para>StartClient has multiple signatures, but they all cause this hook to be called.</para>
        /// </summary>
        /// <param name="client">The NetworkClient object that was started.</param>
        public virtual void OnStartClient(NetworkClient client)
        {
        }

        /// <summary>
        /// This hook is called when a server is stopped - including when a host is stopped.
        /// </summary>
        public virtual void OnStopServer()
        {
        }

        /// <summary>
        /// This hook is called when a client is stopped.
        /// </summary>
        public virtual void OnStopClient()
        {
        }

        /// <summary>
        /// This hook is called when a host is stopped.
        /// </summary>
        public virtual void OnStopHost()
        {
        }

        //------------------------------ Matchmaker callbacks -----------------------------------

        /// <summary>
        /// Callback that happens when a NetworkMatch.CreateMatch request has been processed on the server.
        /// </summary>
        /// <param name="success">Indicates if the request succeeded.</param>
        /// <param name="extendedInfo">A text description for the error if success is false.</param>
        /// <param name="matchInfo">The information about the newly created match.</param>
        public virtual void OnMatchCreate(bool success, string extendedInfo, MatchInfo matchInfo)
        {
            if (LogFilter.logDebug) { Debug.LogFormat("NetworkManager OnMatchCreate Success:{0}, ExtendedInfo:{1}, matchInfo:{2}", success, extendedInfo, matchInfo); }

            if (success)
                StartHost(matchInfo);
        }

        /// <summary
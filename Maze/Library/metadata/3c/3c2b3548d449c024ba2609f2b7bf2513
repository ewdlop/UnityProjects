Connection ();
			SqlCommand cmd = cn.CreateCommand ();
			Assert.IsNotNull (cmd, "#1");
			Assert.AreEqual (string.Empty, cmd.CommandText, "#2");
			Assert.AreEqual (30, cmd.CommandTimeout, "#3");
			Assert.AreEqual (CommandType.Text, cmd.CommandType, "#4");
			Assert.AreSame (cn, cmd.Connection, "#5");
			Assert.IsNull (cmd.Container, "#6");
			Assert.IsTrue (cmd.DesignTimeVisible, "#7");
			Assert.IsNull (cmd.Notification, "#8");
			// not implemented in corefx yet
			// Assert.IsTrue (cmd.NotificationAutoEnlist, "#9");
			Assert.IsNotNull (cmd.Parameters, "#10");
			Assert.AreEqual (0, cmd.Parameters.Count, "#11");
			Assert.IsNull (cmd.Site, "#12");
			Assert.IsNull (cmd.Transaction, "#13");
			Assert.AreEqual (UpdateRowSource.Both, cmd.UpdatedRowSource, "#14");
		}

		[Test]
#if FEATURE_NO_BSD_SOCKETS
		[ExpectedException (typeof (PlatformNotSupportedException))]
#endif
		public void Dispose ()
		{
			SqlConnection cn = new SqlConnection ("Server=SQLSRV;Database=master;Timeout=25;Packet Size=512;Workstation ID=DUMMY");
			cn.Dispose ();

			Assert.AreEqual (string.Empty, cn.ConnectionString, "#1");
			Assert.AreEqual (15, cn.ConnectionTimeout, "#2");
			Assert.AreEqual (string.Empty, cn.Database, "#3");
			Assert.AreEqual (string.Empty, cn.DataSource, "#4");
			Assert.AreEqual (8000, cn.PacketSize, "#5");
			// https://github.com/dotnet/corefx/issues/22871
			// Assert.IsTrue (string.Compare (Environment.MachineName, cn.WorkstationId, true) == 0, "#6");
			Assert.AreEqual (ConnectionState.Closed, cn.State, "#7");
			cn.Dispose ();

			cn = new SqlConnection ();
			cn.Dispose ();
		}

		[Test]
		[Category("NotWorking")] //https://github.com/dotnet/corefx/issues/22882
#if FEATURE_NO_BSD_SOCKETS
		[ExpectedException (typeof (PlatformNotSupportedException))]
#endif
		public void GetSchema_Connection_Closed ()
		{
			SqlConnection cn = new SqlConnection ();

			try {
				cn.GetSchema ();
				Assert.Fail ("#A1");
			} catch (InvalidOperationException ex) {
				// Invalid operation. The connection is closed
				Assert.AreEqual (typeof (InvalidOperationException), ex.GetType (), "#A2");
				Assert.IsNull (ex.InnerException, "#B3");
				Assert.IsNotNull (ex.Message, "#B4");
			}

			try {
				cn.GetSchema ("Tables");
				Assert.Fail ("#B1");
			} catch (InvalidOperationException ex) {
				// Invalid operation. The connection is closed
				Assert.AreEqual (typeof (InvalidOperationException), ex.GetType (), "#B2");
				Assert.IsNull (ex.InnerException, "#B3");
				Assert.IsNotNull (ex.Message, "#B4");
			}

			try {
				cn.GetSchema ((string) null);
				Assert.Fail ("#C1");
			} catch (InvalidOperationException ex) {
				// Invalid operation. The connection is closed
				Assert.AreEqual (typeof (InvalidOperationException), ex.GetType (), "#C2");
				Assert.IsNull (ex.InnerException, "#C3");
				Assert.IsNotNull (ex.Message, "#C4");
			}

			try {
				cn.GetSchema ("Tables", new string [] { "master" });
				Assert.Fail ("#D1");
			} catch (InvalidOperationException ex) {
				// Invalid operation. The connection is closed
				Assert.AreEqual (typeof (InvalidOperationException), ex.GetType (), "#D2");
				Assert.IsNull (ex.InnerException, "#D3");
				Assert.IsNotNull (ex.Message, "#D4");
			}

			try {
				cn.GetSchema ((string) null, new string [] { "master" });
				Assert.Fail ("#E1");
			} catch (InvalidOperationException ex) {
				// Invalid operation. The connection is closed
				Assert.AreEqual (typeof (InvalidOperationException), ex.GetType (), "#E2");
				Assert.IsNull (ex.InnerException, "#E3");
				Assert.IsNotNull (ex.Message, "#E4");
			}

			try {
				cn.GetSchema ("Tables", (string []) null);
				Assert.Fail ("#F1");
			} catch (InvalidOperationException ex) {
				// Invalid operation. The connection is closed
				Assert.AreEqual (typeof (InvalidOperationException), ex.GetType (), "#F2");
				Assert.IsNull (ex.InnerException, "#F3");
				Assert.IsNotNull (ex.Message, "#F4");
			}

			try {
				cn.GetSchema ((string) null, (string []) null);
				Assert.Fail ("#G1");
			} catch (InvalidOperationException ex) {
				// Invalid operation. The connection is closed
				Assert.AreEqual
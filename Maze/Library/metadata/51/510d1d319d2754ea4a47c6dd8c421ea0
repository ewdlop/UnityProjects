rol.");
			}

			if (this is Form) {
				if (IsHandleCreated && value != Visible) {
					Visible = value;
				}
			} else {
				// XXX MS.NET causes handle to be created here
				if (!IsHandleCreated)
					CreateHandle ();
			}
			is_toplevel = value;
		}

		protected virtual void SetVisibleCore(bool value) {
			if (value != is_visible) {
				is_visible = value;
				
				if (is_visible && (GetTopLevel() || (parent != null && parent.Created)) && ((window.Handle == IntPtr.Zero) || !is_created)) {
					CreateControl();
					if (!(this is Form))
						UpdateZOrder ();
				}

				if (IsHandleCreated) {
					XplatUI.SetVisible (Handle, is_visible, true);
					if (!is_visible) {
						if (parent != null && parent.IsHandleCreated) {
							if (InternalContainsFocus)
								parent.SelectNextControl(this, true, true, true, true);
							parent.Invalidate (bounds);
							parent.Update ();
						} else {
							Refresh ();
						}
					} else if (is_visible && this is Form) {
						// If we are Min or Max, we won't get a WM_SHOWWINDOW from SetWindowState,
						// so we need to manually create our children, and set them visible
						// (This normally happens in WmShowWindow.)
						if ((this as Form).WindowState != FormWindowState.Normal)
							OnVisibleChanged (EventArgs.Empty);
						else
							// Explicitly move Toplevel windows to where we want them;
							// apparently moving unmapped toplevel windows doesn't work
							XplatUI.SetWindowPos(window.Handle, bounds.X, bounds.Y, bounds.Width, bounds.Height);	
					} else {
						// If we are becoming visible, z-order may have changed while
						// we were invisible, so update our z-order position
						if (parent != null)
							parent.UpdateZOrderOfChild (this);
					}
				}

				this.cached_preferred_size = Size.Empty;
				if (parent != null) {
					parent.cached_preferred_size = Size.Empty;
				}

				if (!(this is Form))
					OnVisibleChanged (EventArgs.Empty);
			}
		}

		[EditorBrowsable (EditorBrowsableState.Advanced)]
		protected virtual Size SizeFromClientSize (Size clientSize) {
			return InternalSizeFromClientSize (clientSize);
		}

		[EditorBrowsable(EditorBrowsableState.Advanced)]
		protected void UpdateBounds() {
			if (!IsHandleCreated)
				return;

			int	x;
			int	y;
			int	width;
			int	height;
			int	client_width;
			int	client_height;

			XplatUI.GetWindowPos(this.Handle, this is Form, out x, out y, out width, out height, out client_width, out client_height);

			UpdateBounds(x, y, width, height, client_width, client_height);
		}

		[EditorBrowsable(EditorBrowsableState.Advanced)]
		protected void UpdateBounds(int x, int y, int width, int height) {
			CreateParams	cp;
			Rectangle	rect;

			// Calculate client rectangle
			rect = new Rectangle(0, 0, 0, 0);
			cp = CreateParams;

			XplatUI.CalculateWindowRect(ref rect, cp, cp.menu, out rect);
			UpdateBounds(x, y, width, height, width - (rect.Right - rect.Left), height - (rect.Bottom - rect.Top));
		}

		[EditorBrowsable(EditorBrowsableState.Advanced)]
		protected void UpdateBounds(int x, int y, int width, int height, int clientWidth, int clientHeight) {
			// UpdateBounds only seems to set our sizes and fire events but not update the GUI window to match
			bool	moved	= false;
			bool	resized	= false;

			// Needed to generate required notifications
			if ((this.bounds.X!=x) || (this.bounds.Y!=y)) {
				moved=true;
			}

			if ((this.Bounds.Width!=width) || (this.Bounds.Height!=height)) {
				resized=true;
			}

			bounds.X=x;
			bounds.Y=y;
			bounds.Width=width;
			bounds.Height=height;

			// Assume explicit bounds set. SetBoundsCore will restore old bounds
			// if needed.
			//explicit_bounds = bounds;

			client_size.Width=clientWidth;
			client_size.Height=clientHeight;

			if (moved) {
				OnLocationChanged(EventArgs.Empty);

				if (!background_color.IsEmpty && background_color.A < byte.MaxValue)
					Invalidate ();
			}

			if (resized) {
				OnSizeInitializedOrChanged ();
				OnSizeChanged (EventArgs.Empty);
				OnClientSizeChanged (EventArgs.Empty);
				this.cached_preferred_size = Size.Empty;
			}
		}

		[EditorBrowsable(EditorBrowsableState.Advanced)]
		protected void UpdateStyles() {
			if (!IsHandleCreated) {
				return;
			}

			XplatUI.SetWindowStyle(window.Handle, CreateParams);
			OnStyleChanged(EventArgs.Empty);
		}

		private void UpdateZOrderOfChild(Control child) {
			if (IsHandleCreated && child.IsHandleCreated && (child.parent == this)) {
				// Need to take into account all controls
				Control [] all_controls = child_controls.GetAllControls ();

				int index = Array.IndexOf (all_controls, child);
				
				for (; index > 0; index--) {
					if (!all_controls [index - 1].IsHandleCreated || !all_controls [index - 1].VisibleInternal)
						continue;
					break;
				}
				
				if (index > 0)	{
					XplatUI.SetZOrder(child.Handle, all_controls [index - 1].Handle, false, false);
				} else {
					IntPtr after = AfterTopMostControl ();
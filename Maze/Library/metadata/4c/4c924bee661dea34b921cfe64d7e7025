<?xml version="1.0" encoding="utf-8"?>
<Type Name="PageAsyncTask" FullName="System.Web.UI.PageAsyncTask">
  <TypeSignature Language="C#" Value="public sealed class PageAsyncTask" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>ASP.NET version 2.0 allows you to register multiple tasks to a page and run them asynchronously prior to rendering the page. You might specify that a task be run asynchronously if it is a slow process and you do not want other processes to be tied up while it is executing. The asynchronous tasks can be executed in parallel or sequentially. </para>
      <para>A <see cref="T:System.Web.UI.PageAsyncTask" /> object must be registered to the page through the <see cref="M:System.Web.UI.Page.RegisterAsyncTask(System.Web.UI.PageAsyncTask)" /> method. The page itself does not have to be processed asynchronously to execute asynchronous tasks. You can set the Async attribute to either true (as shown in the following code example) or false on the page directive and the asynchronous tasks will still be processed asynchronously:</para>
      <para>&lt;%@ Page Async="true" %&gt;</para>
      <para>When the Async attribute is set to false, the thread that executes the page will be blocked until all asynchronous tasks are complete.</para>
      <para>Any asynchronous tasks registered before the <see cref="E:System.Web.UI.Page.PreRenderComplete" /> event will be executed automatically by the page if they have not already been executed. Those asynchronous tasks registered after the <see cref="E:System.Web.UI.Page.PreRenderComplete" /> event must be executed explicitly through the <see cref="M:System.Web.UI.Page.ExecuteRegisteredAsyncTasks" /> method. The <see cref="M:System.Web.UI.Page.ExecuteRegisteredAsyncTasks" /> method can also be used to start tasks before the <see cref="E:System.Web.UI.Page.PreRenderComplete" /> event. The <see cref="M:System.Web.UI.Page.ExecuteRegisteredAsyncTasks" /> method executes all the registered asynchronous tasks on the page that have not been executed.</para>
      <para>By default, an asynchronous task will time out if it has not completed within 45 seconds. You can specify a different time-out value in either the Web.config file or the page directive. The &lt;pages&gt; section of the Web.config file contains an asyncTimeout attribute, as shown below. </para>
      <para>&lt;system.web&gt;</para>
      <para>    &lt;pages asyncTimeout="30"&gt;</para>
      <para>    &lt;/pages&gt;</para>
      <para>&lt;/system.web&gt; </para>
      <para>The page directive contains an AsyncTimeout attribute.</para>
      <para>&lt;%@ Page AsyncTimeout="30" %&gt;</para>
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Contains information about an asynchronous task registered to a page. This class cannot be inherited.</para>
    </summary>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PageAsyncTask (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, System.Web.EndEventHandler timeoutHandler, object state);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="beginHandler" Type="System.Web.BeginEventHandler" />
        <Parameter Name="endHandler" Type="System.Web.EndEventHandler" />
        <Parameter Name="timeoutHandler" Type="System.Web.EndEventHandler" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This implementation of the constructor sets the <see cref="P:System.Web.UI.PageAsyncTask.ExecuteInParallel" /> property to false so the asynchronous task is not processed in parallel with other tasks on the page.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.Web.UI.PageAsyncTask" /> class using the default value for executing in parallel. </para>
        </summary>
        <param name="beginHandler">
          <attribution license="cc4" from="Microsoft" modified="false" />The handler to call when beginning an asynchronous task.</param>
        <param name="endHandler">
          <attribution license="cc4" from="Microsoft" modified="false" />The handler to call when the task is completed successfully within the time-out period.</param>
        <param name="timeoutHandler">
          <attribution license="cc4" from="Microsoft" modified="false" />The handler to call 
 arg_type == 'refptr_same_byref' or arg_type == 'refptr_diff_byref':
            ptr_class = arg.get_type().get_ptr_type()
            ptr_struct = arg.get_type().get_result_ptr_type_root()
            if arg_type == 'refptr_same_byref':
                assign = ptr_class+'CToCpp::Wrap('+arg_name+'Struct)'
            else:
                assign = ptr_class+'CppToC::Unwrap('+arg_name+'Struct)'
            result += comment+\
                      '\n  if ('+arg_name+'Struct) {'\
                      '\n    if ('+arg_name+'Struct != '+arg_name+'Orig) {'\
                      '\n      '+arg_name+' = '+assign+';'\
                      '\n    }'\
                      '\n  } else {'\
                      '\n    '+arg_name+' = NULL;'\
                      '\n  }'
        elif arg_type == 'string_vec_byref':
            result += comment+\
                      '\n  if ('+arg_name+'List) {'\
                      '\n    '+arg_name+'.clear();'\
                      '\n    transfer_string_list_contents('+arg_name+'List, '+arg_name+');'\
                      '\n    cef_string_list_free('+arg_name+'List);'\
                      '\n  }'
        elif arg_type == 'string_vec_byref_const':
            result += comment+\
                      '\n  if ('+arg_name+'List)'\
                      '\n    cef_string_list_free('+arg_name+'List);'
        elif arg_type == 'string_map_single_byref':
            result += comment+\
                      '\n  if ('+arg_name+'Map) {'\
                      '\n    '+arg_name+'.clear();'\
                      '\n    transfer_string_map_contents('+arg_name+'Map, '+arg_name+');'\
                      '\n    cef_string_map_free('+arg_name+'Map);'\
                      '\n  }'
        elif arg_type == 'string_map_single_byref_const':
            result += comment+\
                      '\n  if ('+arg_name+'Map)'\
                      '\n    cef_string_map_free('+arg_name+'Map);'
        elif arg_type == 'string_map_multi_byref':
            result += comment+\
                      '\n  if ('+arg_name+'Multimap) {'\
                      '\n    '+arg_name+'.clear();'\
                      '\n    transfer_string_multimap_contents('+arg_name+'Multimap, '+arg_name+');'\
                      '\n    cef_string_multimap_free('+arg_name+'Multimap);'\
                      '\n  }'
        elif arg_type == 'string_map_multi_byref_const':
            result += comment+\
                      '\n  if ('+arg_name+'Multimap)'\
                      '\n    cef_string_multimap_free('+arg_name+'Multimap);'
        elif arg_type == 'simple_vec_byref' or arg_type == 'bool_vec_byref' or \
             arg_type == 'refptr_vec_same_byref' or arg_type == 'refptr_vec_diff_byref':
            count_func = arg.get_attrib_count_func()
            vec_type = arg.get_type().get_result_vector_type_root()
            if arg_type == 'refptr_vec_same_byref':
                ptr_class = arg.get_type().get_ptr_type()
                assign = ptr_class+'CToCpp::Wrap('+arg_name+'List[i])'
            elif arg_type == 'refptr_vec_diff_byref':
                ptr_class = arg.get_type().get_ptr_type()
                assign = ptr_class+'CppToC::Unwrap('+arg_name+'List[i])'
            elif arg_type == 'bool_vec_byref':
                assign = arg_name+'List[i]?true:false'
            else:
                assign = arg_name+'List[i]'
            result += comment+\
                      '\n  '+arg_name+'.clear();'\
                      '\n  if ('+arg_name+'Count > 0 && '+arg_name+'List) {'\
                      '\n    for (size_t i = 0; i < '+arg_name+'Count; ++i) {'\
                      '\n      '+arg_name+'.push_back('+assign+');'\
                      '\n    }'\
                      '\n    delete [] '+arg_name+'List;'\
                      '\n  }'
        elif arg_type == 'simple_vec_byref_const' or arg_type == 'bool_vec_byref_const' or \
             arg_type == 'refptr_vec_same_byref_const' or arg_type == 'refptr_vec_diff_byref_const' or \
             arg_type == 'rawptr_vec_same_byref_const' or arg_type == 'rawptr_vec_diff_byref_const':
            result += comment
            if arg_type == 'rawptr_vec_diff_byref_const':
                result += '\n  if ('+arg_name+'Count > 0) {'\
                          '\n    for (size_t i = 0; i < '+arg_name+'Count; ++i) {'\
                          '\n      delete '+ptr_class+'CppToC::GetWrapper('+arg_name+'List[i]);'\
                          '\n    }'\
                          '\n  }'
            result += '\n  if ('+arg_name+'List)'\
                      '\n    delete [] '+arg_name+'List;'

    if len(result) != result_len:
        result += '\n'
    result_len = len(result)

    # special handling for the global CefShutdown function
    if name == 'CefShutdown' and isinstance(func.parent, obj_header):
        classes = func.parent.get_classes()

        names = []
        for cls in classes:
            if cls.has_attrib('no_debugct_check'):
                continue;

            if cls.is_library_side():
                names.append(cls.get_name()+'CToCpp')
            else:
                names.append(cls.get_name()+'CppToC')

        if len(names) > 0:
            names = sorted(names)
            result += '\n#if DCHECK_IS_ON()'\
                      '\n  // Check that all wrapper objects have been destroyed'
            for name in names:
                result += '\n  DCHECK(base::AtomicRefCountIsZero(&'+name+'::DebugObjCt));';
            result += '\n#endif  // DCHECK_IS_ON()'

    if len(result) != result_len:
        result += '\n'
    result_len = len(result)

    # return translation
    if retval_type != 'none':
        # has a return value
        result += '\n  // Return type: '+retval_type
        if retval_type == 'simple':
            result += '\n  return _retval;'
        elif retval_type == 'bool':
            result += '\n  return _retval?true:false;'
        elif retval_type == 'string':
            result += '\n  CefString _retvalStr;'\
                      '\n  _retvalStr.AttachToUserFree(_retval);'\
                      '\n  return _retvalStr;'
        elif retval_type == 'refptr_same' or retval_type == 'ownptr_same':
            ptr_class = retval.get_type().get_ptr_type()
            result += '\n  return '+ptr_class+'CToCpp::Wrap(_retval);'
        elif retval_type == 'refptr_diff':
            ptr_class = retval.get_type().get_ptr_type()
            result += '\n  return '+ptr_class+'CppToC::Unwrap(_retval);'
        elif retval_type == 'ownptr_diff':
            ptr_class = retval.get_type().get_ptr_type()
            result += '\n  return '+ptr_class+'CppToC::UnwrapOwn(_retval);'
        else:
            raise Exception('Unsupported return type %s in %s' % (retval_type, name))

    if len(result) != result_len:
        result += '\n'

    result += '}\n'
    return wrap_code(result)

def make_ctocpp_function_impl(clsname, funcs, existing):
    impl = ''

    for func in funcs:
        name = func.get_name()
        value = get_next_function_impl(existing, name)
        if not value is None \
            and value['body'].find('// AUTO-GENERATED CONTENT') < 0:
            # an implementation exists that was not auto-generated
            impl += make_ctocpp_function_impl_existing(clsname, name, func, value)
        else:
            impl += make_ctocpp_function_impl_new(clsname, name, func)

    return impl

def make_ctocpp_virtual_function_impl(header, cls, existing):
    impl = make_ctocpp_function_impl(cls.get_name(), cls.get_virtual_funcs(), existing)

    cur_cls = cls
    while True:
        parent_name = cur_cls.get_parent_name()
        if is_base_class(parent_name):
            break
        else:
            parent_cls = header.get_class(parent_name)
            if parent_cls is None:
                raise Exception('Class does not exist: '+parent_name)
            impl += make_ctocpp_function_impl(cls.get_name(), parent_cls.get_virtual_funcs(), existing)
        cur_cls = header.get_class(parent_name)
    
    return impl

def make_ctocpp_unwrap_derived(header, cls, base_scoped):
    # identify all classes that derive from cls
    derived_classes = []
    clsname = cls.get_name()
    allclasses = header.get_classes()
    for cur_cls in allclasses:
        if cur_cls.get_name() == clsname:
            continue
        if cur_cls.has_parent(clsname):
            derived_classes.append(cur_cls.get_name())

    derived_classes = sorted(derived_classes)
    
    if base_scoped:
        impl = ['', '']
        for clsname in derived_classes:
            impl[0] += '  if (type == '+get_wrapper_type_enum(clsname)+') {\n'+\
                       '    return reinterpret_cast<'+get_capi_name(cls.get_name(), True)+'*>('+\
                       clsname+'CToCpp::UnwrapOwn(CefOwnPtr<'+clsname+'>(reinterpret_cast<'+clsname+'*>(c.release()))));\n'+\
                       '  }\n'
            impl[1] += '  if (type == '+get_wrapper_type_enum(clsname)+') {\n'+\
                       '    return reinterpret_cast<'+get_capi_name(cls.get_name(), True)+'*>('+\
                       clsname+'CToCpp::UnwrapRaw(CefRawPtr<'+clsname+'>(reinterpret_cast<'+clsname+'*>(CEF_RAW_PTR_GET(c)))));\n'+\
                       '  }\n'
    else:
        impl = ''
        for clsname in derived_classes:
            impl += '  if (type == '+get_wrapper_type_enum(clsname)+') {\n'+\
                    '    return reinterpret_cast<'+get_capi_name(cls.get_name(), True)+'*>('+\
                    clsname+'CToCpp::Unwrap(reinterpret_cast<'+clsname+'*>(c)));\n'+\
                    '  }\n'
    return impl

def make_ctocpp_class_impl(header, clsname, impl):
    cls = header.get_class(clsname)
    if cls is None:
        raise Exception('Class does not exist: '+clsname)

    capiname = cls.get_capi_name()

    # retrieve the existing virtual function implementations
    existing = get_function_impls(impl, clsname+'CToCpp::')

    base_class_name = header.get_base_class_name(clsname)
    base_scoped = True if base_class_name == 'CefBaseScoped' else False
    if base_scoped:
        template_class = 'CefCToCppScoped'
    else:
        template_class = 'CefCToCppRefCounted'

    # generate virtual functions
    virtualimpl = make_ctocpp_virtual_function_impl(header, cls, existing)
    if len(virtualimpl) > 0:
        virtualimpl = '\n// VIRTUAL METHODS - Body may be edited by hand.\n\n'+virtualimpl

    # retrieve the existing static function implementations
    existing = get_function_impls(impl, clsname+'::')

    # generate static functions
    staticimpl = make_ctocpp_function_impl(clsname, cls.get_static_funcs(), existing)
    if len(staticimpl) > 0:
        staticimpl = '\n// STATIC METHODS - Body may be edited by hand.\n\n'+staticimpl

    resultingimpl = staticimpl + virtualimpl
    
    # any derived classes can be unwrapped
    unwrapderived = make_ctocpp_unwrap_derived(header, cls, base_scoped)

    # determine what includes are required by identifying what translation
    # classes are being used
    includes = format_translation_includes(header, resultingimpl + (unwrapderived[0] if base_scoped else unwrapderived))

    # build the final output
    result = get_copyright()

    result += includes+'\n'+resultingimpl+'\n'

    parent_sig = template_class+'<'+clsname+'CToCpp, '+clsname+', '+capiname+'>'

    const =  '// CONSTRUCTOR - Do not edit by hand.\n\n'+ \
             clsname+'CToCpp::'+clsname+'CToCpp() {\n'+ \
             '}\n\n'

    if base_scoped:
        const += 'template<> '+capiname+'* '+parent_sig+'::UnwrapDerivedOwn(CefWrapperType type, CefOwnPtr<'+clsname+'> c) {\n'+ \
                 unwrapderived[0] + \
                 '  NOTREACHED() << "Unexpected class type: " << type;\n'+ \
                 '  return NULL;\n'+ \
                 '}\n\n' + \
                 'template<> '+capiname+'* '+parent_sig+'::UnwrapDerivedRaw(CefWrapperType type, CefRawPtr<'+clsname+'> c) {\n'+ \
                 unwrapderived[1] + \
                 '  NOTREACHED() << "Unexpected class type: " << type;\n'+ \
                 '  return NULL;\n'+ \
                 '}\n\n'
    else:
        const += 'template<> '+capiname+'* '+parent_sig+'::UnwrapDerived(CefWrapperType type, '+clsname+'* c) {\n'+ \
                 unwrapderived + \
                 '  NOTREACHED() << "Unexpected class type: " << type;\n'+ \
                 '  return NULL;\n'+ \
                 '}\n\n'

    const += '#if DCHECK_IS_ON()\n'+ \
             'template<> base::AtomicRefCount '+parent_sig+'::DebugObjCt = 0;\n'+ \
             '#endif\n\n'+ \
             'template<> CefWrapperType '+parent_sig+'::kWrapperType = '+get_wrapper_type_enum(clsname)+';'

    result += wrap_code(const)

    return result

def make_ctocpp_global_impl(header, impl):
    # retrieve the existing global function implementations
    existing = get_function_impls(impl, 'CEF_GLOBAL')

    # generate static functions
    impl = make_ctocpp_function_impl(None, header.get_funcs(), existing)
  
nentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.MonoTODOAttribute]
        public object GetContextInfo() { throw null; }
        [System.MonoTODOAttribute]
        public static System.IntPtr GetHalftonePalette() { throw null; }
        public System.IntPtr GetHdc() { throw null; }
        public System.Drawing.Color GetNearestColor(System.Drawing.Color color) { throw null; }
        public void IntersectClip(System.Drawing.Rectangle rect) { }
        public void IntersectClip(System.Drawing.RectangleF rect) { }
        public void IntersectClip(System.Drawing.Region region) { }
        public bool IsVisible(System.Drawing.Point point) { throw null; }
        public bool IsVisible(System.Drawing.PointF point) { throw null; }
        public bool IsVisible(System.Drawing.Rectangle rect) { throw null; }
        public bool IsVisible(System.Drawing.RectangleF rect) { throw null; }
        public bool IsVisible(int x, int y) { throw null; }
        public bool IsVisible(int x, int y, int width, int height) { throw null; }
        public bool IsVisible(float x, float y) { throw null; }
        public bool IsVisible(float x, float y, float width, float height) { throw null; }
        public System.Drawing.Region[] MeasureCharacterRanges(string text, System.Drawing.Font font, System.Drawing.RectangleF layoutRect, System.Drawing.StringFormat stringFormat) { throw null; }
        public System.Drawing.SizeF MeasureString(string text, System.Drawing.Font font) { throw null; }
        public System.Drawing.SizeF MeasureString(string text, System.Drawing.Font font, System.Drawing.PointF origin, System.Drawing.StringFormat stringFormat) { throw null; }
        public System.Drawing.SizeF MeasureString(string text, System.Drawing.Font font, System.Drawing.SizeF layoutArea) { throw null; }
        public System.Drawing.SizeF MeasureString(string text, System.Drawing.Font font, System.Drawing.SizeF layoutArea, System.Drawing.StringFormat stringFormat) { throw null; }
        public System.Drawing.SizeF MeasureString(string text, System.Drawing.Font font, System.Drawing.SizeF layoutArea, System.Drawing.StringFormat stringFormat, out int charactersFitted, out int linesFilled) { charactersFitted = default(int); linesFilled = default(int); throw null; }
        public System.Drawing.SizeF MeasureString(string text, System.Drawing.Font font, int width) { throw null; }
        public System.Drawing.SizeF MeasureString(string text, System.Drawing.Font font, int width, System.Drawing.StringFormat format) { throw null; }
        public void MultiplyTransform(System.Drawing.Drawing2D.Matrix matrix) { }
        public void MultiplyTransform(System.Drawing.Drawing2D.Matrix matrix, System.Drawing.Drawing2D.MatrixOrder order) { }
        [System.Security.Permissions.SecurityPermissionAttribute(System.Security.Permissions.SecurityAction.LinkDemand, UnmanagedCode=true)]
        public void ReleaseHdc() { }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(2))]
        [System.Security.Permissions.SecurityPermissionAttribute(System.Security.Permissions.SecurityAction.Demand, UnmanagedCode=true)]
        public void ReleaseHdc(System.IntPtr hdc) { }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.MonoLimitationAttribute("Can only be used when hdc was provided by Graphics.GetHdc() method")]
        [System.Security.Permissions.SecurityPermissionAttribute(System.Security.Permissions.SecurityAction.LinkDemand, UnmanagedCode=true)]
        public void ReleaseHdcInternal(System.IntPtr hdc) { }
        public void ResetClip() { }
        public void ResetTransform() { }
        public void Restore(System.Drawing.Drawing2D.GraphicsState gstate) { }
        public void RotateTransform(float angle) { }
        public void RotateTransform(float angle, System.Drawing.Drawing2D.MatrixOrder order) { }
        public System.Drawing.Drawing2D.GraphicsState Save() { throw null; }
        public void ScaleTransform(float sx, float sy) { }
        public void ScaleTransform(float sx, float sy, System.Drawing.Drawing2D.MatrixOrder order) { }
        public void SetClip(System.Drawing.Drawing2D.GraphicsPath path) { }
        public void SetClip(System.Drawing.Drawing2D.GraphicsPath path, System.Drawing.Drawing2D.CombineMode combineMode) { }
        public void SetClip(System.Drawing.Graphics g) { }
        public void SetClip(System.Drawing.Graphics g, System.Drawing.Drawing2D.CombineMode combineMode) { }
        public void SetClip(System.Drawing.Rectangle rect) { }
        public void SetClip(System.Drawing.Rectangle rect, System.Drawing.Drawing2D.CombineMode combineMode) { }
        public void SetClip(System.Drawing.RectangleF rect) { }
        public void SetClip(System.Drawing.RectangleF rect, System.Drawing.Drawing2D.CombineMode combineMode) { }
        public void SetClip(System.Drawing.Region region, System.Drawing.Drawing2D.CombineMode combineMode) { }
        public void TransformPoints(System.Drawing.Drawing2D.CoordinateSpace destSpace, System.Drawing.Drawing2D.CoordinateSpace srcSpace, System.Drawing.PointF[] pts) { }
        public void TransformPoints(System.Drawing.Drawing2D.CoordinateSpace destSpace, System.Drawing.Drawing2D.CoordinateSpace srcSpace, System.Drawing.Point[] pts) { }
        public void TranslateClip(int dx, int dy) { }
        public void TranslateClip(float dx, float dy) { }
        public void TranslateTransform(float dx, float dy) { }
        public void TranslateTransform(float dx, float dy, System.Drawing.Drawing2D.MatrixOrder order) { }
        public delegate bool DrawImageAbort(System.IntPtr callbackData);
        public delegate bool EnumerateMetafileProc(System.Drawing.Imaging.EmfPlusRecordType recordType, int flags, int dataSize, System.IntPtr data, System.Drawing.Imaging.PlayRecordCallback callbackData);
    }
    public enum GraphicsUnit
    {
        Display = 1,
        Document = 5,
        Inch = 4,
        Millimeter = 6,
        Pixel = 2,
        Point = 3,
        World = 0,
    }
    [System.ComponentModel.EditorAttribute("System.Drawing.Design.IconEditor, System.Drawing.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))]
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Drawing.IconConverter))]
    [System.SerializableAttribute]
    public sealed partial class Icon : System.MarshalByRefObject, System.ICloneable, System.IDisposable, System.Runtime.Serialization.ISerializable
    {
        public Icon(System.Drawing.Icon original, System.Drawing.Size size) { }
        public Icon(System.Drawing.Icon original, int width, int height) { }
        public Icon(System.IO.Stream stream) { }
        public Icon(System.IO.Stream stream, System.Drawing.Size size) { }
        public Icon(System.IO.Stream stream, int width, int height) { }
        public Icon(string fileName) { }
        public Icon(string fileName, System.Drawing.Size size) { }
        public Icon(string fileName, int width, int height) { }
        public Icon(System.Type type, string resource) { }
        [System.ComponentModel.BrowsableAttribute(false)]
        public System.IntPtr Handle { get { throw null; } }
        [System.ComponentModel.BrowsableAttribute(false)]
        public int Height { get { throw null; } }
        public System.Drawing.Size Size { get { throw null; } }
        [System.ComponentModel.BrowsableAttribute(false)]
        public int Width { get { throw null; } }
        public object Clone() { throw null; }
        public void Dispose() { }
        [System.MonoLimitationAttribute("The same icon, SystemIcons.WinLogo, is returned for all file types.")]
        public static System.Drawing.Icon ExtractAssociatedIcon(string filePath) { throw null; }
        ~Icon() { }
        [System.Security.Permissions.SecurityPermissionAttribute(System.Security.Permissions.SecurityAction.LinkDemand, UnmanagedCode=true)]
        public static System.Drawing.Icon FromHandle(System.IntPtr handle) { throw null; }
        public void Save(System.IO.Stream outputStream) { }
        void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext context) { }
        public System.Drawing.Bitmap ToBitmap() { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class IconConverter : System.ComponentModel.ExpandableObjectConverter
    {
        public IconConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { throw null; }
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { throw null; }
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { throw null; }
    }
    public partial interface IDeviceContext : System.IDisposable
    {
        System.IntPtr GetHdc();
        void ReleaseHdc();
    }
    [System.ComponentModel.EditorAttribute("System.Drawing.Design.ImageEditor, System.Drawing.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))]
    [System.ComponentModel.ImmutableObjectAttribute(true)]
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Drawing.ImageConverter))]
    [System.Runtime.InteropServices.ComVisibleAttribute(true)]
    [System.SerializableAttribute]
    public abstract partial class Image : System.MarshalByRefObject, System.ICloneable, System.IDisposable, System.Runtime.Serialization.ISerializable
    {
        internal Image() { }
        [System.ComponentModel.BrowsableAttribute(false)]
        public int Flags { get { throw null; } }
        [System.ComponentModel.BrowsableAttribute(false)]
        public System.Guid[] FrameDimensionsList { get { throw null; } }
        [System.ComponentModel.BrowsableAttribute(false)]
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute((System.ComponentModel.DesignerSerializationVisibility)(0))]
        public int Height { get { throw null; } }
        public float HorizontalResolution { get { throw null; } }
        [System.ComponentModel.BrowsableAttribute(false)]
        public System.Drawing.Imaging.ColorPalette Palette { get { throw null; } set { } }
        public System.Drawing.SizeF PhysicalDimension { get { throw null; } }
        public System.Drawing.Imaging.PixelFormat PixelFormat { get { throw null; } }
        [System.ComponentModel.BrowsableAttribute(false)]
        public int[] PropertyIdList { get { throw null; } }
        [System.ComponentModel.BrowsableAttribute(false)]
        public System.Drawing.Imaging.PropertyItem[] PropertyItems { get { throw null; } }
        public System.Drawing.Imaging.ImageFormat RawFormat { get { throw null; } }
        public System.Drawing.Size Size { get { throw null; } }
        [System.ComponentModel.BindableAttribute(true)]
        [System.ComponentModel.DefaultValueAttribute(null)]
        [System.ComponentModel.LocalizableAttribute(false)]
        [System.ComponentModel.TypeConverterAttribute(typeof(System.ComponentModel.StringConverter))]
        public object Tag { get { throw null; } set { } }
        public float VerticalResolution { get { throw null; } }
        [System.ComponentModel.BrowsableAttribute(false)]
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute((System.ComponentModel.DesignerSerializationVisibility)(0))]
        public int Width { get { throw null; } }
        public object Clone() { throw null; }
        public void Dispose() { }
        protected virtual void Dispose(bool disposing) { }
        ~Image() { }
        public static System.Drawing.Image FromFile(string filename) { throw null; }
        public static System.Drawing.Image FromFile(string filename, bool useEmbeddedColorManagement) { throw null; }
        public static System.Drawing.Bitmap FromHbitmap(System.IntPtr hbitmap) { throw null; }
        public static System.Drawing.Bitmap FromHbitmap(System.IntPtr hbitmap, System.IntPtr hpalette) { throw null; }
        public static System.Drawing.Image FromStream(System.IO.Stream stream) { throw null; }
        [System.MonoLimitationAttribute("useEmbeddedColorManagement  isn't supported.")]
        public static System.Drawing.Image FromStream(System.IO.Stream stream, bool useEmbeddedColorManagement) { throw null; }
        [System.MonoLimitationAttribute("useEmbeddedColorManagement  and validateImageData aren't supported.")]
        public static System.Drawing.Image FromStream(System.IO.Stream stream, bool useEmbeddedColorManagement, bool validateImageData) { throw null; }
        public System.Drawing.RectangleF GetBounds(ref System.Drawing.GraphicsUnit pageUnit) { throw null; }
        public System.Drawing.Imaging.EncoderParameters GetEncoderParameterList(System.Guid encoder) { throw null; }
        public int GetFrameCount(System.Drawing.Imaging.FrameDimension dimension) { throw null; }
        public static int GetPixelFormatSize(System.Drawing.Imaging.PixelFormat pixfmt) { throw null; }
        public System.Drawing.Imaging.PropertyItem GetPropertyItem(int propid) { throw null; }
        public System.Drawing.Image GetThumbnailImage(int thumbWidth, int thumbHeight, System.Drawing.Image.GetThumbnailImageAbort callback, System.IntPtr callbackData) { throw null; }
        public static bool IsAlphaPixelFormat(System.Drawing.Imaging.PixelFormat pixfmt) { throw null; }
        public static bool IsCanonicalPixelFormat(System.Drawing.Imaging.PixelFormat pixfmt) { throw null; }
        public static bool IsExtendedPixelFormat(System.Drawing.Imaging.PixelFormat pixfmt) { throw null; }
        public void RemovePropertyItem(int propid) { }
        public void RotateFlip(System.Drawing.RotateFlipType rotateFlipType) { }
        public void Save(System.IO.Stream stream, System.Drawing.Imaging.ImageCodecInfo encoder, System.Drawing.Imaging.EncoderParameters encoderParams) { }
        public void Save(System.IO.Stream stream, System.Drawing.Imaging.ImageFormat format) { }
        public void Save(string filename) { }
        public void Save(string filename, System.Drawing.Imaging.ImageCodecInfo encoder, System.Drawing.Imaging.EncoderParameters encoderParams) { }
        public void Save(string filename, System.Drawing.Imaging.ImageFormat format) { }
        public void SaveAdd(System.Drawing.Image image, System.Drawing.Imaging.EncoderParameters encoderParams) { }
        public void SaveAdd(System.Drawing.Imaging.EncoderParameters encoderParams) { }
        public int SelectActiveFrame(System.Drawing.Imaging.FrameDimension dimension, int frameIndex) { throw null; }
        public void SetPropertyItem(System.Drawing.Imaging.PropertyItem propitem) { }
        void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext context) { }
        public delegate bool GetThumbnailImageAbort();
    }
    public sealed partial class ImageAnimator
    {
        internal ImageAnimator() { }
        public static void Animate(System.Drawing.Image image, System.EventHandler onFrameChangedHandler) { }
        public static bool CanAnimate(System.Drawing.Image image) { throw null; }
        public static void StopAnimate(System.Drawing.Image image, System.EventHandler onFrameChangedHandler) { }
        public static void UpdateFrames() { }
        public static void UpdateFrames(System.Drawing.Image image) { }
    }
    public partial class ImageConverter : System.ComponentModel.TypeConverter
    {
        public ImageConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { throw null; }
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { throw null; }
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { throw null; }
        public override System.ComponentModel.PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributes) { throw null; }
        public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) { throw null; }
    }
    public partial class ImageFormatConverter : System.ComponentModel.TypeConverter
    {
        public ImageFormatConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { throw null; }
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { throw null; }
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { throw null; }
        public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) { throw null; }
        public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) { throw null; }
    }
    public enum KnownColor
    {
        ActiveBorder = 1,
        ActiveCaption = 2,
        ActiveCaptionText = 3,
        AliceBlue = 28,
        AntiqueWhite = 29,
        AppWorkspace = 4,
        Aqua = 30,
        Aquamarine = 31,
        Azure = 32,
        Beige = 33,
        Bisque = 34,
        Black = 35,
        BlanchedAlmond = 36,
        Blue = 37,
        BlueViolet = 38,
        Brown = 39,
        BurlyWood = 40,
        ButtonFace = 168,
        ButtonHighlight = 169,
        ButtonShadow = 170,
        CadetBlue = 41,
        Chartreuse = 42,
        Chocolate = 43,
        Control = 5,
        ControlDark = 6,
        ControlDarkDark = 7,
        ControlLight = 8,
        ControlLightLight = 9,
        ControlText = 10,
        Coral = 44,
        CornflowerBlue = 45,
        Cornsilk = 46,
        Crimson = 47,
        Cyan = 48,
        DarkBlue = 49,
        DarkCyan = 50,
        DarkGoldenrod = 51,
        DarkGray = 52,
        DarkGreen = 53,
        DarkKhaki = 54,
        DarkMagenta = 55,
        DarkOliveGreen = 56,
        DarkOrange = 57,
        DarkOrchid = 58,
        DarkRed = 59,
        DarkSalmon = 60,
        DarkSeaGreen = 61,
        DarkSlateBlue = 62,
        DarkSlateGray = 63,
        DarkTurquoise = 64,
        DarkViolet = 65,
        DeepPink = 66,
        DeepSkyBlue = 67,
        Desktop = 11,
        DimGray = 68,
        DodgerBlue = 69,
        Firebrick = 70,
        FloralWhite = 71,
        ForestGreen = 72,
        Fuchsia = 73,
        Gainsboro = 74,
        GhostWhite = 75,
        Gold = 76,
        Goldenrod = 77,
        GradientActiveCaption = 171,
        GradientInactiveCaption = 172,
        Gray = 78,
        GrayText = 12,
        Green = 79,
        GreenYellow = 80,
        Highlight = 13,
        HighlightText = 14,
        Honeydew = 81,
        HotPink = 82,
        HotTrack = 15,
        InactiveBorder = 16,
        InactiveCaption = 17,
        InactiveCaptionText = 18,
        IndianRed = 83,
        Indigo = 84,
        Info = 19,
        InfoText = 20,
        Ivory = 85,
        Khaki = 86,
        Lavender = 87,
        LavenderBlush = 88,
        LawnGreen = 89,
        LemonChiffon = 90,
        LightBlue = 91,
        LightCoral = 92,
        LightCyan = 93,
        LightGoldenrodYellow = 94,
        LightGray = 95,
        LightGreen = 96,
        LightPink = 97,
        LightSalmon = 98,
        LightSeaGreen = 99,
        LightSkyBlue = 100,
        LightSlateGray = 101,
        LightSteelBlue = 102,
        LightYellow = 103,
        Lime = 104,
        LimeGreen = 105,
        Linen = 106,
        Magenta = 107,
        Maroon = 108,
        MediumAquamarine = 109,
        MediumBlue = 110,
        MediumOrchid = 111,
        MediumPurple = 112,
        MediumSeaGreen = 113,
        MediumSlateBlue = 114,
        MediumSpringGreen = 115,
        MediumTurquoise = 116,
        MediumVioletRed = 117,
        Menu = 21,
        MenuBar = 173,
        MenuHighlight = 174,
        MenuText = 22,
        MidnightBlue = 118,
        MintCream = 119,
        MistyRose = 120,
        Moccasin = 121,
        NavajoWhite = 122,
        Navy = 123,
        OldLace = 124,
        Olive = 125,
        OliveDrab = 126,
        Orange = 127,
        OrangeRed = 128,
        Orchid = 129,
        PaleGoldenrod = 130,
        PaleGreen = 131,
        PaleTurquoise = 132,
        PaleVioletRed = 133,
        PapayaWhip = 134,
        PeachPuff = 135,
        Peru = 136,
        Pink = 137,
        Plum = 138,
        PowderBlue = 139,
        Purple = 140,
        Red = 141,
        RosyBrown = 142,
        RoyalBlue = 143,
        SaddleBrown = 144,
        Salmon = 145,
        SandyBrown = 146,
        ScrollBar = 23,
        SeaGreen = 147,
        SeaShell = 148,
        Sienna = 149,
        Silver = 150,
        SkyBlue = 151,
        SlateBlue = 152,
        SlateGray = 153,
        Snow = 154,
        SpringGreen = 155,
        SteelBlue = 156,
        Tan = 157,
        Teal = 158,
        Thistle = 159,
        Tomato = 160,
        Transparent = 27,
        Turquoise = 161,
        Violet = 162,
        Wheat = 163,
        White = 164,
        WhiteSmoke = 165,
        Window = 24,
        WindowFrame = 25,
        WindowText = 26,
        Yellow = 166,
        YellowGreen = 167,
    }
    public sealed partial class Pen : System.MarshalByRefObject, System.ICloneable, System.IDisposable
    {
        public Pen(System.Drawing.Brush brush) { }
        public Pen(System.Drawing.Brush brush, float width) { }
        public Pen(System.Drawing.Color color) { }
        public Pen(System.Drawing.Color color, float width) { }
        [System.MonoLimitationAttribute("Libgdiplus doesn't use this property for rendering")]
        public System.Drawing.Drawing2D.PenAlignment Alignment { get { throw null; } set { } }
        public System.Drawing.Brush Brush { get { throw null; } set { } }
        public System.Drawing.Color Color { get { throw null; } set { } }
        public float[] CompoundArray { get { throw null; } set { } }
        public System.Drawing.Drawing2D.CustomLineCap CustomEndCap { get { throw null; } set { } }
        public System.Drawing.Drawing2D.CustomLineCap CustomStartCap { get { throw null; } set { } }
        public System.Drawing.Drawing2D.DashCap DashCap { get { throw null; } set { } }
        public float DashOffset { get { throw null; } set { } }
        public float[] DashPattern { get { throw null; } set { } }
        public System.Drawing.Drawing2D.DashStyle DashStyle { get { throw null; } set { } }
        public System.Drawing.Drawing2D.LineCap EndCap { get { throw null; } set { } }
        public System.Drawing.Drawing2D.LineJoin LineJoin { get { throw null; } set { } }
        public float MiterLimit { get { throw null; } set { } }
        public System.Drawing.Drawing2D.PenType PenType { get { throw null; } }
        public System.Drawing.Drawing2D.LineCap StartCap { get { throw null; } set { } }
        public System.Drawing.Drawing2D.Matrix Transform { get { throw null; } set { } }
        public float Width { get { throw null; } set { } }
        public object Clone() { throw null; }
        public void Dispose() { }
        ~Pen() { }
        public void MultiplyTransform(System.Drawing.Drawing2D.Matrix matrix) { }
        public void MultiplyTransform(System.Drawing.Drawing2D.Matrix matrix, System.Drawing.Drawing2D.MatrixOrder order) { }
        public void ResetTransform() { }
        public void RotateTransform(float angle) { }
        public void RotateTransform(float angle, System.Drawing.Drawing2D.MatrixOrder order) { }
        public void ScaleTransform(float sx, float sy) { }
        public void ScaleTransform(float sx, float sy, System.Drawing.Drawing2D.MatrixOrder order) { }
        public void SetLineCap(System.Drawing.Drawing2D.LineCap startCap, System.Drawing.Drawing2D.LineCap endCap, System.Drawing.Drawing2D.DashCap dashCap) { }
        public void TranslateTransform(float dx, float dy) { }
        public void TranslateTransform(float dx, float dy, System.Drawing.Drawing2D.MatrixOrder order) { }
    }
    public sealed partial class Pens
    {
        internal Pens() { }
        public static System.Drawing.Pen AliceBlue { get { throw null; } }
        public static System.Drawing.Pen AntiqueWhite { get { throw null; } }
        public static System.Drawing.Pen Aqua { get { throw null; } }
        public static System.Drawing.Pen Aquamarine { get { throw null; } }
        public static System.Drawing.Pen Azure { get { throw null; } }
        public static System.Drawing.Pen Beige { get { throw null; } }
        public static System.Drawing.Pen Bisque { get { throw null; } }
        public static System.Drawing.Pen Black { get { throw null; } }
        public static System.Drawing.Pen BlanchedAlmond { get { throw null; } }
        public static System.Drawing.Pen Blue { get { throw null; } }
        public static System.Drawing.Pen BlueViolet { get { throw null; } }
        public static System.Drawing.Pen Brown { get { throw null; } }
        public static System.Drawing.Pen BurlyWood { get { throw null; } }
        public static System.Drawing.Pen CadetBlue { get { throw null; } }
        public static System.Drawing.Pen Chartreuse { get { throw null; } }
        public static System.Drawing.Pen Chocolate { get { throw null; } }
        public static System.Drawing.Pen Coral { get { throw null; } }
        public static System.Drawing.Pen CornflowerBlue { get { throw null; } }
        public static System.Drawing.Pen Cornsilk { get { throw null; } }
        public static System.Drawing.Pen Crimson { get { throw null; } }
        public static System.Drawing.Pen Cyan { get { throw null; } }
        public static System.Drawing.Pen DarkBlue { get { throw null; } }
        public static System.Drawing.Pen DarkCyan { get { throw null; } }
        public static System.Drawing.Pen DarkGoldenrod { get { throw null; } }
        public static System.Drawing.Pen DarkGray { get { throw null; } }
        public static System.Drawing.Pen DarkGreen { get { throw null; } }
        public static System.Drawing.Pen DarkKhaki { get { throw null; } }
        public static System.Drawing.Pen DarkMagenta { get { throw null; } }
        public static System.Drawing.Pen DarkOliveGreen { get { throw null; } }
        public static System.Drawing.Pen DarkOrange { get { throw null; } }
        public static System.Drawing.Pen DarkOrchid { get { throw null; } }
        public static System.Drawing.Pen DarkRed { get { throw null; } }
        public static System.Drawing.Pen DarkSalmon { get { throw null; } }
        public static System.Drawing.Pen DarkSeaGreen { get { throw null; } }
        public static System.Drawing.Pen DarkSlateBlue { get { throw null; } }
        public static System.Drawing.Pen DarkSlateGray { get { throw null; } }
        public static System.Drawing.Pen DarkTurquoise { get { throw null; } }
        public static System.Drawing.Pen DarkViolet { get { throw null; } }
        public static System.Drawing.Pen DeepPink { get { throw null; } }
        public static System.Drawing.Pen DeepSkyBlue { get { throw null; } }
        public static System.Drawing.Pen DimGray { get { throw null; } }
        public static System.Drawing.Pen DodgerBlue { get { throw null; } }
        public static System.Drawing.Pen Firebrick { get { throw null; } }
        public static System.Drawing.Pen FloralWhite { get { throw null; } }
        public static System.Drawing.Pen ForestGreen { get { throw null; } }
        public static System.Drawing.Pen Fuchsia { get { throw null; } }
        public static System.Drawing.Pen Gainsboro { get { throw null; } }
        public static System.Drawing.Pen GhostWhite { get { throw null; } }
        public static System.Drawing.Pen Gold { get { throw null; } }
        public static System.Drawing.Pen Goldenrod { get { throw null; } }
        public static System.Drawing.Pen Gray { get { throw null; } }
        public static System.Drawing.Pen Green { get { throw null; } }
        public static System.Drawing.Pen GreenYellow { get { throw null; } }
        public static System.Drawing.Pen Honeydew { get { throw null; } }
        public static System.Drawing.Pen HotPink { get { throw null; } }
        public static System.Drawing.Pen IndianRed { get { throw null; } }
        public static System.Drawing.Pen Indigo { get { throw null; } }
        public static System.Drawing.Pen Ivory { get { throw null; } }
        public static System.Drawing.Pen Khaki { get { throw null; } }
        public static System.Drawing.Pen Lavender { get { throw null; } }
        public static System.Drawing.Pen LavenderBlush { get { throw null; } }
        public static System.Drawing.Pen LawnGreen { get { throw null; } }
        public static System.Drawing.Pen LemonChiffon { get { throw null; } }
        public static System.Drawing.Pen LightBlue { get { throw null; } }
        public static System.Drawing.Pen LightCoral { get { throw null; } }
        public static System.Drawing.Pen LightCyan { get { throw null; } }
        public static System.Drawing.Pen LightGoldenrodYellow { get { throw null; } }
        public static System.Drawing.Pen LightGray { get { throw null; } }
        public static System.Drawing.Pen LightGreen { get { throw null; } }
        public static System.Drawing.Pen LightPink { get { throw null; } }
        public static System.Drawing.Pen LightSalmon { get { throw null; } }
        public static System.Drawing.Pen LightSeaGreen { get { throw null; } }
        public static System.Drawing.Pen LightSkyBlue { get { throw null; } }
        public static System.Drawing.Pen LightSlateGray { get { throw null; } }
        public static System.Drawing.Pen LightSteelBlue { get { throw null; } }
        public static System.Drawing.Pen LightYellow { get { throw null; } }
        public static System.Drawing.Pen Lime { get { throw null; } }
        public static System.Drawing.Pen LimeGreen { get { throw null; } }
        public static System.Drawing.Pen Linen { get { throw null; } }
        public static System.Drawing.Pen Magenta { get { throw null; } }
        public static System.Drawing.Pen Maroon { get { throw null; } }
        public static System.Drawing.Pen MediumAquamarine { get { throw null; } }
        public static System.Drawing.Pen MediumBlue { get { throw null; } }
        public static System.Drawing.Pen MediumOrchid { get { throw null; } }
        public static System.Drawing.Pen MediumPurple { get { throw null; } }
        public static System.Drawing.Pen MediumSeaGreen { get { throw null; } }
        public static System.Drawing.Pen MediumSlateBlue { get { throw null; } }
        public static System.Drawing.Pen MediumSpringGreen { get { throw null; } }
        public static System.Drawing.Pen MediumTurquoise { get { throw null; } }
        public static System.Drawing.Pen MediumVioletRed { get { throw null; } }
        public static System.Drawing.Pen MidnightBlue { get { throw null; } }
        public static System.Drawing.Pen MintCream { get { throw null; } }
        public static System.Drawing.Pen MistyRose { get { throw null; } }
        public static System.Drawing.Pen Moccasin { get { throw null; } }
        public static System.Drawing.Pen NavajoWhite { get { throw null; } }
        public static System.Drawing.Pen Navy { get { throw null; } }
        public static System.Drawing.Pen OldLace { get { throw null; } }
        public static System.Drawing.Pen Olive { get { throw null; } }
        public static System.Drawing.Pen OliveDrab { get { throw null; } }
        public static System.Drawing.Pen Orange { get { throw null; } }
        public static System.Drawing.Pen OrangeRed { get { throw null; } }
        public static System.Drawing.Pen Orchid { get { throw null; } }
        public static System.Drawing.Pen PaleGoldenrod { get { throw null; } }
        public static System.Drawing.Pen PaleGreen { get { throw null; } }
        public static System.Drawing.Pen PaleTurquoise { get { throw null; } }
        public static System.Drawing.Pen PaleVioletRed { get { throw null; } }
        public static System.Drawing.Pen PapayaWhip { get { throw null; } }
        public static System.Drawing.Pen PeachPuff { get { throw null; } }
        public static System.Drawing.Pen Peru { get { throw null; } }
        public static System.Drawing.Pen Pink { get { throw null; } }
        public static System.Drawing.Pen Plum { get { throw null; } }
        public static System.Drawing.Pen PowderBlue { get { throw null; } }
        public static System.Drawing.Pen Purple { get { throw null; } }
        public static System.Drawing.Pen Red { get { throw null; } }
        public static System.Drawing.Pen RosyBrown { get { throw null; } }
        public static System.Drawing.Pen RoyalBlue { get { throw null; } }
        public static System.Drawing.Pen SaddleBrown { get { throw null; } }
        public static System.Drawing.Pen Salmon { get { throw null; } }
        public static System.Drawing.Pen SandyBrown { get { throw null; } }
        public static System.Drawing.Pen SeaGreen { get { throw null; } }
        public static System.Drawing.Pen SeaShell { get { throw null; } }
        public static System.Drawing.Pen Sienna { get { throw null; } }
        public static System.Drawing.Pen Silver { get { throw null; } }
        public static System.Drawing.Pen SkyBlue { get { throw null; } }
        public static System.Drawing.Pen SlateBlue { get { throw null; } }
        public static System.Drawing.Pen SlateGray { get { throw null; } }
        public static System.Drawing.Pen Snow { get { throw null; } }
        public static System.Drawing.Pen SpringGreen { get { throw null; } }
        public static System.Drawing.Pen SteelBlue { get { throw null; } }
        public static System.Drawing.Pen Tan { get { throw null; } }
        public static System.Drawing.Pen Teal { get { throw null; } }
        public static System.Drawing.Pen Thistle { get { throw null; } }
        public static System.Drawing.Pen Tomato { get { throw null; } }
        public static System.Drawing.Pen Transparent { get { throw null; } }
        public static System.Drawing.Pen Turquoise { get { throw null; } }
        public static System.Drawing.Pen Violet { get { throw null; } }
        public static System.Drawing.Pen Wheat { get { throw null; } }
        public static System.Drawing.Pen White { get { throw null; } }
        public static System.Drawing.Pen WhiteSmoke { get { throw null; } }
        public static System.Drawing.Pen Yellow { get { throw null; } }
        public static System.Drawing.Pen YellowGreen { get { throw null; } }
    }
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Drawing.PointConverter))]
    [System.Runtime.InteropServices.ComVisibleAttribute(true)]
    [System.SerializableAttribute]
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct Point
    {
        public static readonly System.Drawing.Point Empty;
        public Point(System.Drawing.Size sz) { throw null;}
        public Point(int dw) { throw null;}
        public Point(int x, int y) { throw null;}
        [System.ComponentModel.BrowsableAttribute(false)]
        public bool IsEmpty { get { throw null; } }
        public int X { get { throw null; } set { } }
        public int Y { get { throw null; } set { } }
        public static System.Drawing.Point Add(System.Drawing.Point pt, System.Drawing.Size sz) { throw null; }
        public static System.Drawing.Point Ceiling(System.Drawing.PointF value) { throw null; }
        public override bool Equals(object obj) { throw null; }
        public override int GetHashCode() { throw null; }
        public void Offset(System.Drawing.Point p) { }
        public void Offset(int dx, int dy) { }
        public static System.Drawing.Point operator +(System.Drawing.Point pt, System.Drawing.Size sz) { throw null; }
        public static bool operator ==(System.Drawing.Point left, System.Drawing.Point right) { throw null; }
        public static explicit operator System.Drawing.Size (System.Drawing.Point p) { throw null; }
        public static implicit operator System.Drawing.PointF (System.Drawing.Point p) { throw null; }
        
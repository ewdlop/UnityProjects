alFontName { get { throw null; } }
        public float Size { get { throw null; } }
        [System.ComponentModel.BrowsableAttribute(false)]
        public float SizeInPoints { get { throw null; } }
        [System.ComponentModel.DesignerSerializationVisibilityAttribute((System.ComponentModel.DesignerSerializationVisibility)(0))]
        public bool Strikeout { get { throw null; } }
        [System.ComponentModel.BrowsableAttribute(false)]
        public System.Drawing.FontStyle Style { get { throw null; } }
        [System.ComponentModel.BrowsableAttribute(false)]
        public string SystemFontName { get { throw null; } }
        [System.ComponentModel.DesignerSerializationVisibilityAttribute((System.ComponentModel.DesignerSerializationVisibility)(0))]
        public bool Underline { get { throw null; } }
        [System.ComponentModel.TypeConverterAttribute(typeof(System.Drawing.FontConverter.FontUnitConverter))]
        public System.Drawing.GraphicsUnit Unit { get { throw null; } }
        public object Clone() { throw null; }
        public void Dispose() { }
        public override bool Equals(object obj) { throw null; }
        ~Font() { }
        [System.MonoTODOAttribute("The hdc parameter has no direct equivalent in libgdiplus.")]
        public static System.Drawing.Font FromHdc(System.IntPtr hdc) { throw null; }
        public static System.Drawing.Font FromHfont(System.IntPtr hfont) { throw null; }
        public static System.Drawing.Font FromLogFont(object lf) { throw null; }
        [System.MonoTODOAttribute("The returned font may not have all it's properties initialized correctly.")]
        public static System.Drawing.Font FromLogFont(object lf, System.IntPtr hdc) { throw null; }
        public override int GetHashCode() { throw null; }
        public float GetHeight() { throw null; }
        public float GetHeight(System.Drawing.Graphics graphics) { throw null; }
        public float GetHeight(float dpi) { throw null; }
        void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext context) { }
        public System.IntPtr ToHfont() { throw null; }
        [System.Security.Permissions.SecurityPermissionAttribute(System.Security.Permissions.SecurityAction.Demand, UnmanagedCode=true)]
        public void ToLogFont(object logFont) { }
        [System.Security.Permissions.SecurityPermissionAttribute(System.Security.Permissions.SecurityAction.Demand, UnmanagedCode=true)]
        public void ToLogFont(object logFont, System.Drawing.Graphics graphics) { }
        public override string ToString() { throw null; }
    }
    public partial class FontConverter : System.ComponentModel.TypeConverter
    {
        public FontConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { throw null; }
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { throw null; }
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { throw null; }
        public override object CreateInstance(System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary propertyValues) { throw null; }
        ~FontConverter() { }
        public override bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext context) { throw null; }
        public override System.ComponentModel.PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributes) { throw null; }
        public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) { throw null; }
        public sealed partial class FontNameConverter : System.ComponentModel.TypeConverter, System.IDisposable
        {
            public FontNameConverter() { }
            public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { throw null; }
            public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { throw null; }
            public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) { throw null; }
            public override bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext context) { throw null; }
            public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) { throw null; }
            void System.IDisposable.Dispose() { }
        }
        public partial class FontUnitConverter : System.ComponentModel.EnumConverter
        {
            public FontUnitConverter() : base (default(System.Type)) { }
            public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) { throw null; }
        }
    }
    public sealed partial class FontFamily : System.MarshalByRefObject, System.IDisposable
    {
        public FontFamily(System.Drawing.Text.GenericFontFamilies genericFamily) { }
        public FontFamily(string name) { }
        public FontFamily(string name, System.Drawing.Text.FontCollection fontCollection) { }
        public static System.Drawing.FontFamily[] Families { get { throw null; } }
        public static System.Drawing.FontFamily GenericMonospace { get { throw null; } }
        public static System.Drawing.FontFamily GenericSansSerif { get { throw null; } }
        public static System.Drawing.FontFamily GenericSerif { get { throw null; } }
        public string Name { get { throw null; } }
        public void Dispose() { }
        public override bool Equals(object obj) { throw null; }
        ~FontFamily() { }
        public int GetCellAscent(System.Drawing.FontStyle style) { throw null; }
        public int GetCellDescent(System.Drawing.FontStyle style) { throw null; }
        public int GetEmHeight(System.Drawing.FontStyle style) { throw null; }
        public static System.Drawing.FontFamily[] GetFamilies(System.Drawing.Graphics graphics) { throw null; }
        public override int GetHashCode() { throw null; }
        public int GetLineSpacing(System.Drawing.FontStyle style) { throw null; }
        [System.MonoLimitationAttribute("The language parameter is ignored. We always return the name using the default system language.")]
        public string GetName(int language) { throw null; }
        [System.MonoDocumentationNoteAttribute("When used with libgdiplus this method always return true (styles are created on demand).")]
        public bool IsStyleAvailable(System.Drawing.FontStyle style) { throw null; }
        public override string ToString() { throw null; }
    }
    [System.FlagsAttribute]
    public enum FontStyle
    {
        Bold = 1,
        Italic = 2,
        Regular = 0,
        Strikeout = 8,
        Underline = 4,
    }
    public sealed partial class Graphics : System.MarshalByRefObject, System.Drawing.IDeviceContext, System.IDisposable
    {
        internal Graphics() { }
        public System.Drawing.Region Clip { get { throw null; } set { } }
        public System.Drawing.RectangleF ClipBounds { get { throw null; } }
        public System.Drawing.Drawing2D.CompositingMode CompositingMode { get { throw null; } set { } }
        public System.Drawing.Drawing2D.CompositingQuality CompositingQuality { get { throw null; } set { } }
        public float DpiX { get { throw null; } }
        public float DpiY { get { throw null; } }
        public System.Drawing.Drawing2D.InterpolationMode InterpolationMode { get { throw null; } set { } }
        public bool IsClipEmpty { get { throw null; } }
        public bool IsVisibleClipEmpty { get { throw null; } }
        public float PageScale { get { throw null; } set { } }
        public System.Drawing.GraphicsUnit PageUnit { get { throw null; } set { } }
        [System.MonoTODOAttribute("This property does not do anything when used with libgdiplus.")]
        public System.Drawing.Drawing2D.PixelOffsetMode PixelOffsetMode { get { throw null; } set { } }
        public System.Drawing.Point RenderingOrigin { get { throw null; } set { } }
        public System.Drawing.Drawing2D.SmoothingMode SmoothingMode { get { throw null; } set { } }
        [System.MonoTODOAttribute("This property does not do anything when used with libgdiplus.")]
        public int TextContrast { get { throw null; } set { } }
        public System.Drawing.Text.TextRenderingHint TextRenderingHint { get { throw null; } set { } }
        public System.Drawing.Drawing2D.Matrix Transform { get { throw null; } set { } }
        public System.Drawing.RectangleF VisibleClipBounds { get { throw null; } }
        [System.MonoTODOAttribute("Metafiles, both WMF and EMF formats, aren't supported.")]
        public void AddMetafileComment(byte[] data) { }
        public System.Drawing.Drawing2D.GraphicsContainer BeginContainer() { throw null; }
        [System.MonoTODOAttribute("The rectangles and unit parameters aren't supported in libgdiplus")]
        public System.Drawing.Drawing2D.GraphicsContainer BeginContainer(System.Drawing.Rectangle dstrect, System.Drawing.Rectangle srcrect, System.Drawing.GraphicsUnit unit) { throw null; }
        [System.MonoTODOAttribute("The rectangles and unit parameters aren't supported in libgdiplus")]
        public System.Drawing.Drawing2D.GraphicsContainer BeginContainer(System.Drawing.RectangleF dstrect, System.Drawing.RectangleF srcrect, System.Drawing.GraphicsUnit unit) { throw null; }
        public void Clear(System.Drawing.Color color) { }
        [System.MonoLimitationAttribute("Works on Win32 and on X11 (but not on Cocoa and Quartz)")]
        public void CopyFromScreen(System.Drawing.Point upperLeftSource, System.Drawing.Point upperLeftDestination, System.Drawing.Size blockRegionSize) { }
        [System.MonoLimitationAttribute("Works on Win32 and (for CopyPixelOperation.SourceCopy only) on X11 but not on Cocoa and Quartz")]
        public void CopyFromScreen(System.Drawing.Point upperLeftSource, System.Drawing.Point upperLeftDestination, System.Drawing.Size blockRegionSize, System.Drawing.CopyPixelOperation copyPixelOperation) { }
        [System.MonoLimitationAttribute("Works on Win32 and on X11 (but not on Cocoa and Quartz)")]
        public void CopyFromScreen(int sourceX, int sourceY, int destinationX, int destinationY, System.Drawing.Size blockRegionSize) { }
        [System.MonoLimitationAttribute("Works on Win32 and (for CopyPixelOperation.SourceCopy only) on X11 but not on Cocoa and Quartz")]
        public void CopyFromScreen(int sourceX, int sourceY, int destinationX, int destinationY, System.Drawing.Size blockRegionSize, System.Drawing.CopyPixelOperation copyPixelOperation) { }
        public void Dispose() { }
        public void DrawArc(System.Drawing.Pen pen, System.Drawing.Rectangle rect, float startAngle, float sweepAngle) { }
        public void DrawArc(System.Drawing.Pen pen, System.Drawing.RectangleF rect, float startAngle, float sweepAngle) { }
        public void DrawArc(System.Drawing.Pen pen, int x, int y, int width, int height, int startAngle, int sweepAngle) { }
        public void DrawArc(System.Drawing.Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle) { }
        public void DrawBezier(System.Drawing.Pen pen, System.Drawing.Point pt1, System.Drawing.Point pt2, System.Drawing.Point pt3, System.Drawing.Point pt4) { }
        public void DrawBezier(System.Drawing.Pen pen, System.Drawing.PointF pt1, System.Drawing.PointF pt2, System.Drawing.PointF pt3, System.Drawing.PointF pt4) { }
        public void DrawBezier(System.Drawing.Pen pen, float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4) { }
        public void DrawBeziers(System.Drawing.Pen pen, System.Drawing.PointF[] points) { }
        public void DrawBeziers(System.Drawing.Pen pen, System.Drawing.Point[] points) { }
        public void DrawClosedCurve(System.Drawing.Pen pen, System.Drawing.PointF[] points) { }
        public void DrawClosedCurve(System.Drawing.Pen pen, System.Drawing.PointF[] points, float tension, System.Drawing.Drawing2D.FillMode fillmode) { }
        public void DrawClosedCurve(System.Drawing.Pen pen, System.Drawing.Point[] points) { }
        public void DrawClosedCurve(System.Drawing.Pen pen, System.Drawing.Point[] points, float tension, System.Drawing.Drawing2D.FillMode fillmode) { }
        public void DrawCurve(System.Drawing.Pen pen, System.Drawing.PointF[] points) { }
        public void DrawCurve(System.Drawing.Pen pen, System.Drawing.PointF[] points, int offset, int numberOfSegments) { }
        public void DrawCurve(System.Drawing.Pen pen, System.Drawing.PointF[] points, int offset, int numberOfSegments, float tension) { }
        public void DrawCurve(System.Drawing.Pen pen, System.Drawing.PointF[] points, float tension) { }
        public void DrawCurve(System.Drawing.Pen pen, System.Drawing.Point[] points) { }
        public void DrawCurve(System.Drawing.Pen pen, System.Drawing.Point[] points, int offset, int numberOfSegments, float tension) { }
        public void DrawCurve(System.Drawing.Pen pen, System.Drawing.Point[] points, float tension) { }
        public void DrawEllipse(System.Drawing.Pen pen, System.Drawing.Rectangle rect) { }
        public void DrawEllipse(System.Drawing.Pen pen, System.Drawing.RectangleF rect) { }
        public void DrawEllipse(System.Drawing.Pen pen, int x, int y, int width, int height) { }
        public void DrawEllipse(System.Drawing.Pen pen, float x, float y, float width, float height) { }
        public void DrawIcon(System.Drawing.Icon icon, System.Drawing.Rectangle targetRect) { }
        public void DrawIcon(System.Drawing.Icon icon, int x, int y) { }
        public void DrawIconUnstretched(System.Drawing.Icon icon, System.Drawing.Rectangle targetRect) { }
        public void DrawImage(System.Drawing.Image image, System.Drawing.Point point) { }
        public void DrawImage(System.Drawing.Image image, System.Drawing.PointF point) { }
        public void DrawImage(System.Drawing.Image image, System.Drawing.PointF[] destPoints) { }
        public void DrawImage(System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit) { }
        public void DrawImage(System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr) { }
        public void DrawImage(System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback) { }
        public void DrawImage(System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback, int callbackData) { }
        public void DrawImage(System.Drawing.Image image, System.Drawing.Point[] destPoints) { }
        public void DrawImage(System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit) { }
        public void DrawImage(System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr) { }
        public void DrawImage(System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback) { }
        public void DrawImage(System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback, int callbackData) { }
        public void DrawImage(System.Drawing.Image image, System.Drawing.Rectangle rect) { }
        public void DrawImage(System.Drawing.Image image, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit) { }
        public void DrawImage(System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit) { }
        public void DrawImage(System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr) { }
        public void DrawImage(System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback) { }
        public void DrawImage(System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs, System.Drawing.Graphics.DrawImageAbort callback, System.IntPtr callbackData) { }
        public void DrawImage(System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit) { }
        public void DrawImage(System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs) { }
        public void DrawImage(System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs, System.Drawing.Graphics.DrawImageAbort callback) { }
        public void DrawImage(System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs, System.Drawing.Graphics.DrawImageAbort callback, System.IntPtr callbackData) { }
        public void DrawImage(System.Drawing.Image image, System.Drawing.RectangleF rect) { }
        public void DrawImage(System.Drawing.Image image, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit) { }
        public void DrawImage(System.Drawing.Image image, int x, int y) { }
        public void DrawImage(System.Drawing.Image image, int x, int y, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit) { }
        public void DrawImage(System.Drawing.Image image, int x, int y, int width, int height) { }
        public void DrawImage(System.Drawing.Image image, float x, float y) { }
        public void DrawImage(System.Drawing.Image image, float x, float y, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit) { }
        public void DrawImage(System.Drawing.Image image, float x, float y, float width, float height) { }
        public void DrawImageUnscaled(System.Drawing.Image image, System.Drawing.Point point) { }
        public void DrawImageUnscaled(System.Drawing.Image image, System.Drawing.Rectangle rect) { }
        public void DrawImageUnscaled(System.Drawing.Image image, int x, int y) { }
        public void DrawImageUnscaled(System.Drawing.Image image, int x, int y, int width, int height) { }
        public void DrawImageUnscaledAndClipped(System.Drawing.Image image, System.Drawing.Rectangle rect) { }
        public void DrawLine(System.Drawing.Pen pen, System.Drawing.Point pt1, System.Drawing.Point pt2) { }
        public void DrawLine(System.Drawing.Pen pen, System.Drawing.PointF pt1, System.Drawing.PointF pt2) { }
        public void DrawLine(System.Drawing.Pen pen, int x1, int y1, int x2, int y2) { }
        public void DrawLine(System.Drawing.Pen pen, float x1, float y1, float x2, float y2) { }
        public void DrawLines(System.Drawing.Pen pen, System.Drawing.PointF[] points) { }
        public void DrawLines(System.Drawing.Pen pen, System.Drawing.Point[] points) { }
        public void DrawPath(System.Drawing.Pen pen, System.Drawing.Drawing2D.GraphicsPath path) { }
        public void DrawPie(System.Drawing.Pen pen, System.Drawing.Rectangle rect, float startAngle, float sweepAngle) { }
        public void DrawPie(System.Drawing.Pen pen, System.Drawing.RectangleF rect, float startAngle, float sweepAngle) { }
        public void DrawPie(System.Drawing.Pen pen, int x, int y, int width, int height, int startAngle, int sweepAngle) { }
        public void DrawPie(System.Drawing.Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle) { }
        public void DrawPolygon(System.Drawing.Pen pen, System.Drawing.PointF[] points) { }
        public void DrawPolygon(System.Drawing.Pen pen, System.Drawing.Point[] points) { }
        public void DrawRectangle(System.Drawing.Pen pen, System.Drawing.Rectangle rect) { }
        public void DrawRectangle(System.Drawing.Pen pen, int x, int y, int width, int height) { }
        public void DrawRectangle(System.Drawing.Pen pen, float x, float y, float width, float height) { }
        public void DrawRectangles(System.Drawing.Pen pen, System.Drawing.RectangleF[] rects) { }
        public void DrawRectangles(System.Drawing.Pen pen, System.Drawing.Rectangle[] rects) { }
        public void DrawString(string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.PointF point) { }
        public void DrawString(string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.PointF point, System.Drawing.StringFormat format) { }
        public void DrawString(string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.RectangleF layoutRectangle) { }
        public void DrawString(string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.RectangleF layoutRectangle, System.Drawing.StringFormat format) { }
        public void DrawString(string s, System.Drawing.Font font, System.Drawing.Brush brush, float x, float y) { }
        public void DrawString(string s, System.Drawing.Font font, System.Drawing.Brush brush, float x, float y, System.Drawing.StringFormat format) { }
        public void EndContainer(System.Drawing.Drawing2D.GraphicsContainer container) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, System.IntPtr callbackData) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, System.IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, System.IntPtr callbackData) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, System.IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, System.IntPtr callbackData) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, System.IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, System.IntPtr callbackData) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, System.IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, System.IntPtr callbackData) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, System.IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, System.IntPtr callbackData) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, System.IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, System.IntPtr callbackData) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, System.IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, System.IntPtr callbackData) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, System.IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Graphics.EnumerateMetafileProc callback) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, System.IntPtr callbackData) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, System.IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, System.IntPtr callbackData) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, System.IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.Graphics.EnumerateMetafileProc callback) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, System.IntPtr callbackData) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, System.IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, System.IntPtr callbackData) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, System.IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr) { }
        public void ExcludeClip(System.Drawing.Rectangle rect) { }
        public void ExcludeClip(System.Drawing.Region region) { }
        public void FillClosedCurve(System.Drawing.Brush brush, System.Drawing.PointF[] points) { }
        public void FillClosedCurve(System.Drawing.Brush brush, System.Drawing.PointF[] points, System.Drawing.Drawing2D.FillMode fillmode) { }
        public void FillClosedCurve(System.Drawing.Brush brush, System.Drawing.PointF[] points, System.Drawing.Drawing2D.FillMode fillmode, float tension) { }
        public void FillClosedCurve(System.Drawing.Brush brush, System.Drawing.Point[] points) { }
        public void FillClosedCurve(System.Drawing.Brush brush, System.Drawing.Point[] points, System.Drawing.Drawing2D.FillMode fillmode) { }
        public void FillClosedCurve(System.Drawing.Brush brush, System.Drawing.Point[] points, System.Drawing.Drawing2D.FillMode fillmode, float tension) { }
        public void FillEllipse(System.Drawing.Brush brush, System.Drawing.Rectangle rect) { }
        public void FillEllipse(System.Drawing.Brush brush, System.Drawing.RectangleF rect) { }
        public void FillEllipse(System.Drawing.Brush brush, int x, int y, int width, int height) { }
        public void FillEllipse(System.Drawing.Brush brush, float x, float y, float width, float height) { }
        public void FillPath(System.Drawing.Brush brush, System.Drawing.Drawing2D.GraphicsPath path) { }
        public void FillPie(System.Drawing.Brush brush, System.Drawing.Rectangle rect, float startAngle, float sweepAngle) { }
        public void FillPie(System.Drawing.Brush brush, int x, int y, int width, int height, int startAngle, int sweepAngle) { }
        public void FillPie(System.Drawing.Brush brush, float x, float y, float width, float height, float startAngle, float sweepAngle) { }
        public void FillPolygon(System.Drawing.Brush brush, System.Drawing.PointF[] points) { }
        public void FillPolygon(System.Drawing.Brush brush, System.Drawing.PointF[] points, System.Drawing.Drawing2
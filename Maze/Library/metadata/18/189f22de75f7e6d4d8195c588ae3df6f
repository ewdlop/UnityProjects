uilder.CreateType ();

			Type enumType = assemblyBuilder.GetType (_enumNamespace + "." + _enumName, true);

			// Tested in above test: Assert (enumType.GUID != Guid.Empty);
			Assert.IsNull (enumType.DeclaringType);
		}

		[Test]
		public void TestFieldProperties ()
		{
			AssemblyBuilder assemblyBuilder = GenerateAssembly ();
			ModuleBuilder modBuilder = GenerateModule (assemblyBuilder);
			EnumBuilder enumBuilder = GenerateEnum (modBuilder);
			FieldBuilder fieldBuilder = GenerateField (enumBuilder);
			enumBuilder.CreateType ();

			Type enumType = assemblyBuilder.GetType (_enumNamespace + "." + _enumName, true);
			FieldInfo fi = enumType.GetField (_fieldName);
			Object o = fi.GetValue (enumType);

			Assert.IsTrue (fi.IsLiteral, "#1");
			Assert.IsTrue (fi.IsPublic, "#2");
			Assert.IsTrue (fi.IsStatic, "#3");
			Assert.AreEqual (enumBuilder, fieldBuilder.FieldType, "#4");
			Assert.IsFalse (enumType == fieldBuilder.FieldType, "#5");
			Assert.AreEqual (enumType.FullName, fieldBuilder.FieldType.FullName, "#6");
			Assert.IsFalse (_enumType == fieldBuilder.FieldType, "#7");

			object fieldValue = fi.GetValue (enumType);
			Assert.IsFalse (_fieldValue == fieldValue, "#8");
			Assert.IsTrue (fieldValue.GetType ().IsEnum, "#9");
			Assert.AreEqual (enumType, fieldValue.GetType (), "#10");
			Assert.AreEqual (_fieldValue, (int) fieldValue, "#11");
		}

		[Test]
		public void TestFindInterfaces ()
		{
			EnumBuilder enumBuilder = GenerateEnum ();

			Type [] interfaces = enumBuilder.FindInterfaces (
				new TypeFilter (MyInterfaceFilter),
				"System.Collections.IEnumerable");
			Assert.AreEqual (0, interfaces.Length);
		}

		[Test]
		[ExpectedException (typeof (NotSupportedException))]
		public void TestFindMembersIncomplete ()
		{
			EnumBuilder enumBuilder = GenerateEnum ();
			GenerateField (enumBuilder);

			MemberInfo [] members = enumBuilder.FindMembers (
				MemberTypes.All, BindingFlags.Static |
				BindingFlags.Public, new MemberFilter (MemberNameFilter),
				_fieldName);
		}

		[Test]
		public void GetEnumUnderlyingType ()
		{
			var @enum = GenerateEnum ();

			Assert.AreEqual (_enumType, @enum.GetEnumUnderlyingType ());
		}

		[Test]
		public void TestFindMembersComplete ()
		{
			EnumBuilder enumBuilder = GenerateEnum ();
			GenerateField (enumBuilder);
			enumBuilder.CreateType ();

			MemberInfo [] members = enumBuilder.FindMembers (
				MemberTypes.Field, BindingFlags.Static |
				BindingFlags.Public, new MemberFilter (MemberNameFilter),
				_fieldName);
			Assert.AreEqual (1, members.Length, "#1");

			members = enumBuilder.FindMembers (
				MemberTypes.Field, BindingFlags.Static |
				BindingFlags.Public, new MemberFilter (MemberNameFilter),
				"doesntmatter");
			Assert.AreEqual (0, members.Length, "#2");
		}

		[Test]
		[ExpectedException (typeof (NotSupportedException))]
		public void TestGetConstructorIncomplete ()
		{
			EnumBuilder enumBuilder = GenerateEnum ();
			enumBuilder.GetConstructor (BindingFlags.Public, null,
				CallingConventions.Any, Type.EmptyTypes, new ParameterModifier [0]);
		}

		[Test]
		public void TestGetConstructorComplete ()
		{
			EnumBuilder enumBuilder = GenerateEnum ();
			enumBuilder.CreateType ();
			ConstructorInfo ctor = enumBuilder.GetConstructor (
				BindingFlags.Public, null, CallingConventions.Any,
				Type.EmptyTypes, new ParameterModifier [0]);
			Assert.IsNull (ctor);
		}

		[Test]
		[ExpectedException (typeof (ArgumentNullException))]
		public void TestGetConstructorNullTypes ()
		{
			EnumBuilder enumBuilder = GenerateEnum ();
			enumBuilder.CreateType ();
			ConstructorInfo ctor = enumBuilder.GetConstructor (
				BindingFlags.Public, null, CallingConventions.Any,
				null, new ParameterModifier [0]);
		}

		[Test]
		[Category ("NotWorking")]
		[ExpectedException (typeof (ArgumentNullException))]
		public void TestGetConstructorNullElementType ()
		{
			EnumBuilder enumBuilder = GenerateEnum ();
			enumBuilder.CreateType ();
			ConstructorInfo ctor = enumBuilder.GetConstructor (
				BindingFlags.Public, null, CallingConventions.Any,
				new Type [] { null }, new ParameterModifier [0]);
		}

		[Test]
		[ExpectedExc
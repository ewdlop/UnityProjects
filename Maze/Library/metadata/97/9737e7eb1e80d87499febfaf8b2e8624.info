 PalEventWrite(RegHandle, Descriptor, 1, EventData);
}

RH_ETW_INLINE UInt32
Template_MICROSOFT_WINDOWS_REDHAWK_GC_PUBLIC_PROVIDER_GCTriggered(REGHANDLE RegHandle, const EVENT_DESCRIPTOR * Descriptor, UInt32 Reason, UInt16 ClrInstanceID)
{
    EVENT_DATA_DESCRIPTOR EventData[2];
    EventDataDescCreate(&EventData[0], &Reason, sizeof(UInt32));
    EventDataDescCreate(&EventData[1], &ClrInstanceID, sizeof(UInt16));
    return PalEventWrite(RegHandle, Descriptor, 2, EventData);
}

RH_ETW_INLINE UInt32
Template_MICROSOFT_WINDOWS_REDHAWK_GC_PUBLIC_PROVIDER_ModuleLoadUnload_V2(REGHANDLE RegHandle, const EVENT_DESCRIPTOR * Descriptor, UInt64 ModuleID, UInt64 AssemblyID, UInt32 ModuleFlags, UInt32 Reserved1, LPCWSTR ModuleILPath, LPCWSTR ModuleNativePath, UInt16 ClrInstanceID, const GUID* ManagedPdbSignature, UInt32 ManagedPdbAge, LPCWSTR ManagedPdbBuildPath, const GUID* NativePdbSignature, UInt32 NativePdbAge, LPCWSTR NativePdbBuildPath)
{
    EVENT_DATA_DESCRIPTOR EventData[13];
    EventDataDescCreate(&EventData[0], &ModuleID, sizeof(UInt64));
    EventDataDescCreate(&EventData[1], &AssemblyID, sizeof(UInt64));
    EventDataDescCreate(&EventData[2], &ModuleFlags, sizeof(UInt32));
    EventDataDescCreate(&EventData[3], &Reserved1, sizeof(UInt32));
    EventDataDescCreate(&EventData[4], (ModuleILPath != NULL) ? ModuleILPath : L"", (ModuleILPath != NULL) ? (ULONG)((wcslen(ModuleILPath) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
    EventDataDescCreate(&EventData[5], (ModuleNativePath != NULL) ? ModuleNativePath : L"", (ModuleNativePath != NULL) ? (ULONG)((wcslen(ModuleNativePath) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
    EventDataDescCreate(&EventData[6], &ClrInstanceID, sizeof(UInt16));
    EventDataDescCreate(&EventData[7], ManagedPdbSignature, sizeof(*(ManagedPdbSignature)));
    EventDataDescCreate(&EventData[8], &ManagedPdbAge, sizeof(UInt32));
    EventDataDescCreate(&EventData[9], (ManagedPdbBuildPath != NULL) ? ManagedPdbBuildPath : L"", (ManagedPdbBuildPath != NULL) ? (ULONG)((wcslen(ManagedPdbBuildPath) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
    EventDataDescCreate(&EventData[10], NativePdbSignature, sizeof(*(NativePdbSignature)));
    EventDataDescCreate(&EventData[11], &NativePdbAge, sizeof(UInt32));
    EventDataDescCreate(&EventData[12], (NativePdbBuildPath != NULL) ? NativePdbBuildPath : L"", (NativePdbBuildPath != NULL) ? (ULONG)((wcslen(NativePdbBuildPath) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L""));
    return PalEventWrite(RegHandle, Descriptor, 13, EventData);
}

RH_ETW_INLINE UInt32
Template_MICROSOFT_WINDOWS_REDHAWK_GC_PUBLIC_PROVIDER_SetGCHandle(REGHANDLE RegHandle, const EVENT_DESCRIPTOR * Descriptor, void* HandleID, void* ObjectID, UInt32 Kind, UInt32 Generation, UInt64 AppDomainID, UInt16 ClrInstanceID)
{
    EVENT_DATA_DESCRIPTOR EventData[6];
    EventDataDescCreate(&EventData[0], &HandleID, sizeof(void*));
    EventDataDescCreate(&EventData[1], &ObjectID, sizeof(void*));
    EventDataDescCreate(&EventData[2], &Kind, sizeof(UInt32));
    EventDataDescCreate(&EventData[3], &Generation, sizeof(UInt32));
    EventDataDescCreate(&EventData[4], &AppDomainID, sizeof(UInt64));
    EventDataDescCreate(&EventData[5], &ClrInstanceID, sizeof(UInt16));
    return PalEventWrite(RegHandle, Descriptor, 6, EventData);
}

RH_ETW_INLINE UInt32
TemplateEventDescriptor(REGHANDLE RegHandle, const EVENT_DESCRIPTOR * Descriptor)
{
    return PalEventWrite(RegHandle, Descriptor, 0, NULL);
}

#else // FEATURE_ETW

#define ETW_EVENT_ENABLED(Context, EventDescriptor) false

#define FireEtwBGC1stConEnd(ClrInstanceID)
#define FireEtwBGC1stNonConEnd(ClrInstanceID)
#define FireEtwBGC2ndConBegin(ClrInstanceID)
#define FireEtwBGC2ndConEnd(ClrInstanceID)
#define FireEtwBGC2ndNonConBegin(ClrInstanceID)
#define FireEtwBGC2ndNonConEnd(ClrInstanceID)
#define FireEtwBGCAllocWaitBegin(Reason, ClrInstanceID)
#define FireEtwBGCAllocWaitEnd(Reason, ClrInstanceID)
#define FireEtwBGCBegin(ClrInstanceID)
#define FireEtwBGCDrainMark(Objects, ClrInstanceID)
#define FireEtwBGCOverflow(Min, Max, Objects, IsLarge, ClrInstanceID)
#define FireEtwBGCPlanEnd(ClrInstanceID)
#define FireEtwBGCRevisit(Pages, Objects, IsLarge, ClrInstanceID)
#define FireEtwBGCSweepEnd(ClrInstanceID)
#define FireEtwGCFullNotify_V1(GenNumber, IsAlloc, ClrInstanceID)
#define FireEtwGCGlobalHeapHistory_V1(FinalYoungestDesired, NumHeaps, CondemnedGeneration, Gen0ReductionCount, Reason, GlobalMechanisms, ClrInstanceID)
#define FireEtwGCJoin_V1(Heap, JoinTime, JoinType, ClrInstanceID)
#define FireEtwGCOptimized_V1(DesiredAllocation, NewAllocation, GenerationNumber, ClrInstanceID)
#define FireEtwGCPerHeapHistory()
#define FireEtwGCSettings(SegmentSize, LargeObjectSegmentSize, ServerGC)
#define FireEtwPinPlugAtGCTime(PlugStart, PlugEnd, GapBeforeSize, ClrInstanceID)
#define FireEtwPrvDestroyGCHandle(HandleID, ClrInstanceID)
#define FireEtwPrvGCMarkCards_V1(HeapNum, ClrInstanceID)
#define FireEtwPrvGCMarkFinalizeQueueRoots_V1(HeapNum, ClrInstanceID)
#define FireEtwPrvGCMarkHandles_V1(HeapNum, ClrInstanceID)
#define FireEtwPrvGCMarkStackRoots_V1(HeapNum, ClrInstanceID)
#define FireEtwPrvSetGCHandle(HandleID, ObjectID, Kind, Generation, AppDomainID, ClrInstanceID)

#define FireEtwBulkType(Count, ClrInstanceID, Values_Len_, Values)
#define FireEtwDestroyGCHandle(HandleID, ClrInstanceID)
#define FireEtwExceptionThrown_V1(ExceptionType, ExceptionMessage, ExceptionEIP, ExceptionHRESULT, ExceptionFlags, ClrInstanceID)
#define FireEtwGCAllocationTick_V1(AllocationAmount, AllocationKind, ClrInstanceID)
#define FireEtwGCAllocationTick_V2(AllocationAmount, AllocationKind, ClrInstanceID, AllocationAmount64, TypeID, TypeName, HeapIndex)
#define FireEtwGCAllocationTick_V3(AllocationAmount, AllocationKind, ClrInstanceID, AllocationAmount64, TypeID, TypeName, HeapIndex, Address)
#define Fir
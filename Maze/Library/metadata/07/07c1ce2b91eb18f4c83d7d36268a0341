ref="M:System.CodeDom.CodeTypeReference.#ctor(System.Type)" /> constructor).</para>
      <para>The following virtual methods (Overridable methods in Visual Basic) of <see cref="T:System.Type" /> are not implemented by <see cref="T:System.Reflection.TypeDelegator" />: <see cref="M:System.Type.MakeGenericType(System.Type[])" />, <see cref="M:System.Type.GetGenericTypeDefinition" />, <see cref="M:System.Type.GetGenericArguments" />, <see cref="M:System.Type.GetGenericParameterConstraints" />, <see cref="M:System.Type.MakeArrayType" />, <see cref="M:System.Type.MakeByRefType" />, <see cref="M:System.Type.MakePointerType" />, <see cref="M:System.Type.GetEnumNames" />, <see cref="M:System.Type.GetEnumValues" />, <see cref="M:System.Type.GetEnumUnderlyingType" />, <see cref="M:System.Type.GetTypeCodeImpl" />, <see cref="M:System.Type.IsEnumDefined(System.Object)" />, <see cref="M:System.Type.IsEquivalentTo(System.Type)" />.</para>
      <para>The following virtual properties (Overridable properties in Visual Basic) of <see cref="T:System.Type" /> are not implemented by <see cref="T:System.Reflection.TypeDelegator" />: <see cref="P:System.Type.IsGenericType" />, <see cref="P:System.Type.IsGenericTypeDefinition" />, <see cref="P:System.Type.IsGenericParameter" />, <see cref="P:System.Type.ContainsGenericParameters" />, <see cref="P:System.Type.DeclaringMethod" />, <see cref="P:System.Type.GenericParameterAttributes" />, <see cref="P:System.Type.GenericParameterPosition" />, <see cref="P:System.Type.IsSecurityCritical" />, <see cref="P:System.Type.IsSecuritySafeCritical" />, <see cref="P:System.Type.IsSecurityTransparent" />.</para>
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Wraps a <see cref="T:System.Type" /> object and delegates methods to that Type.</para>
    </summary>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TypeDelegator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue />
      <Parameters />
      <Docs>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.Reflection.TypeDelegator" /> class with default properties.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TypeDelegator (Type delegatingType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type delegatingType) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue />
      <Parameters>
        <Parameter Name="delegatingType" Type="System.Type" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This constructor is called from a class to generate a delegate based upon the Type object for the class defining the method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.Reflection.TypeDelegator" /> class specifying the encapsulating instance.</para>
        </summary>
        <param name="delegatingType">
          <attribution license="cc4" from="Microsoft" modified="false" />The instance of the class <see cref="T:System.Type" /> that encapsulates the call to the method of an object. </param>
      </Docs>
    </Member>
    <Member MemberName="Assembly">
      <MemberSignature Language="C#" Value="public override System.Reflection.Assembly Assembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Assembly Assembly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Assemblies are the deployment units in the common language runtime. Assemblies establish the namespace for resolving requests and determine which resources are exposed externally and which are accessible from within the assembly. The common language runtime can determine and locate the assembly for any running object.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the assembly of the implemented type.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="AssemblyQualifiedName">
      <MemberSignature Language="C#" Value="public override string AssemblyQualifiedName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AssemblyQualifiedName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the assembly's fully qualified name.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="BaseType">
      <MemberSignature Language="C#" Value="public override Type BaseType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type BaseType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The base type is the type from which this type directly inherits. Since the <see cref="T:System.Object" /> class type is the ultimate base class of all the other types, it is the only type that does not have a base type. In this case, null is returned as the base type of the Object type.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the base type for the current type.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="FullName">
      <MemberSignature Language="C#" Value="public override string FullName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo
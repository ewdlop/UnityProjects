 sender, ItemAtEventArgs<T> e) { itemInserted(proxy, e); };
          real.ItemInserted += itemInsertedProxy;
        }
        itemInserted += value;
      }
      remove
      {
        itemInserted -= value;
        if (itemInserted == null)
          real.ItemInserted -= itemInsertedProxy;
      }
    }

    event ItemsRemovedHandler<T> itemsRemoved;
    ItemsRemovedHandler<T> itemsRemovedProxy;
    internal event ItemsRemovedHandler<T> ItemsRemoved
    {
      add
      {
        if (itemsRemoved == null)
        {
          if (itemsRemovedProxy == null)
            itemsRemovedProxy = delegate(object sender, ItemCountEventArgs<T> e) { itemsRemoved(proxy, e); };
          real.ItemsRemoved += itemsRemovedProxy;
        }
        itemsRemoved += value;
      }
      remove
      {
        itemsRemoved -= value;
        if (itemsRemoved == null)
          real.ItemsRemoved -= itemsRemovedProxy;
      }
    }

    event ItemRemovedAtHandler<T> itemRemovedAt;
    ItemRemovedAtHandler<T> itemRemovedAtProxy;
    internal event ItemRemovedAtHandler<T> ItemRemovedAt
    {
      add
      {
        if (itemRemovedAt == null)
        {
          if (itemRemovedAtProxy == null)
            itemRemovedAtProxy = delegate(object sender, ItemAtEventArgs<T> e) { itemRemovedAt(proxy, e); };
          real.ItemRemovedAt += itemRemovedAtProxy;
        }
        itemRemovedAt += value;
      }
      remove
      {
        itemRemovedAt -= value;
        if (itemRemovedAt == null)
          real.ItemRemovedAt -= itemRemovedAtProxy;
      }
    }
  }

  /// <summary>
  /// 
  /// </summary>
  /// <typeparam name="T"></typeparam>
  public class ItemAtEventArgs<T> : EventArgs
  {
    /// <summary>
    /// 
    /// </summary>
    public readonly T Item;
    /// <summary>
    /// 
    /// </summary>
    public readonly int Index;
    /// <summary>
    /// 
    /// </summary>
    /// <param name="item"></param>
    /// <param name="index"></param>
    public ItemAtEventArgs(T item, int index) { Item = item; Index = index; }
    /// <summary>
    /// 
    /// </summary>
    /// <returns></returns>
    public override string ToString()
    {
      return String.Format("(ItemAtEventArgs {0} '{1}')", Index, Item);
    }
  }

  /// <summary>
  /// 
  /// </summary>
  /// <typeparam name="T"></typeparam>
  public class ItemCountEventArgs<T> : EventArgs
  {
    /// <summary>
    /// 
    /// </summary>
    public readonly T Item;
    /// <summary>
    /// 
    /// </summary>
    public readonly int Count;
    /// <summary>
    /// 
    /// </summary>
    /// <param name="count"></param>
    /// <param name="item"></param>
    public ItemCountEventArgs(T item, int count) { Item = item; Count = count; }
    /// <summary>
    /// 
    /// </summary>
    /// <returns></returns>
    public override string ToString()
    {
      return String.Format("(ItemCountEventArgs {0} '{1}')", Count, Item);
    }
  }



  /// <summary>
  /// 
  /// </summary>
  public class ClearedEventArgs : EventArgs
  {
    /// <summary>
    /// 
    /// </summary>
    public readonly bool Full;
    /// <summary>
    /// 
    /// </summary>
    public readonly int Count;
    /// <summary>
    /// 
    /// </summary>
    /// 
    /// <param name="full">True if the operation cleared all of the collection</param>
    /// <param name="count">The number of items removed by the clear.</param>
    public ClearedEventArgs(bool full, int count) { Full = full; Count = count; }
    /// <summary>
    /// 
    /// </summary>
    /// <returns></returns>
    public override string ToString()
    {
      return String.Format("(ClearedEventArgs {0} {1})", Count, Full);
    }
  }

  /// <summary>
  /// 
  /// </summary>
  public class ClearedRangeEventArgs : ClearedEventArgs
  {
    //WE could let this be of type int? to  allow 
    /// <summary>
    /// 
    /// </summary>
    public readonly int? Start;
    /// <summary>
    /// 
    /// </summary>
    /// <param name="full"></param>
    /// <param name="count"></param>
    /// <param name="start"></param>
    public ClearedRangeEventArgs(bool full, int count, int? start) : base(full,count) { Start = start; }
    /// <summary>
    /// 
    /// </summary>
    /// <returns></returns>
    public override string ToString()
  
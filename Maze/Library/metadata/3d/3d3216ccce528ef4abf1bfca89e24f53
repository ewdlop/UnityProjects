pe c, Type[] d, ParameterModifier[] e)
		{
			return null;
		}
	}

	[TestFixture]
	public class TypeTest
	{
#if !MONOTOUCH && !FULL_AOT_RUNTIME
		private ModuleBuilder module;
#endif
		const string ASSEMBLY_NAME = "MonoTests.System.TypeTest";
		static int typeIndexer = 0;
		static bool isMono = Type.GetType ("Mono.Runtime", false) != null;

		[SetUp]
		public void SetUp ()
		{
			AssemblyName assemblyName = new AssemblyName ();
			assemblyName.Name = ASSEMBLY_NAME;
#if !MONOTOUCH && !FULL_AOT_RUNTIME
			var assembly = AppDomain.CurrentDomain.DefineDynamicAssembly (
					assemblyName, AssemblyBuilderAccess.RunAndSave, Path.GetTempPath ());
			module = assembly.DefineDynamicModule ("module1");
#endif
		}

		private string genTypeName ()
		{
			return "t" + (typeIndexer++);
		}

		private void ByrefMethod (ref int i, ref Derived1 j, ref Base1 k)
		{
		}

		public interface IFace {
		}

		private void GenericMethod<Q, T1> (Q q, T1 t) where T1 : IFace
		{
		}

		private void GenericMethod2<A, B, C, D> ()
			where C : Duper
			where A : B, IFace
			where B : C
			where D : Baz<object>
		{
		}

		public class Nested
		{

		}

		public class DummyReflectionWildcardClass {
			public DummyReflectionWildcardClass() { }
			public DummyReflectionWildcardClass(string p) { }

			public event EventHandler<string> DummyEvent;
			public event EventHandler<string> DummyEvent2;

			public string DummyField = "dummy";
			public string DummyField2 = "dummy2";
			public string AlternateField = "Alt";

			public string DummyProperty {
				get; set;
			}

			public string DummyProperty2 {
				get; set;
			}

			public void DummyMethod() { }
			public void DummyMethod2() { }

			public class DummyNested {
				public void Go() { }
			}

			public class DummyNested2 {
				public void Go() { }
			}
		}


		[Test]
		public void TestIsAssignableFrom ()
		{
			// Simple tests for inheritance
			Assert.AreEqual (typeof (Super).IsAssignableFrom (typeof (Duper)) , true, "#01");
			Assert.AreEqual (typeof (Duper).IsAssignableFrom (typeof (Duper)), true, "#02");
			Assert.AreEqual (typeof (Object).IsAssignableFrom (typeof (Duper)), true, "#03");
			Assert.AreEqual (typeof (ICloneable).IsAssignableFrom (typeof (Duper)), true, "#04");

			// Tests for arrays
			Assert.AreEqual (typeof (Super[]).IsAssignableFrom (typeof (Duper[])), true, "#05");
			Assert.AreEqual (typeof (Duper[]).IsAssignableFrom (typeof (Super[])), false, "#06");
			Assert.AreEqual (typeof (Object[]).IsAssignableFrom (typeof (Duper[])), true, "#07");
			Assert.AreEqual (typeof (ICloneable[]).IsAssignableFrom (typeof (Duper[])), true, "#08");

			// Tests for multiple dimensional arrays
			Assert.AreEqual (typeof (Super[][]).IsAssignableFrom (typeof (Duper[][])), true, "#09");
			Assert.AreEqual (typeof (Duper[][]).IsAssignableFrom (typeof (Super[][])), false, "#10");
			Assert.AreEqual (typeof (Object[][]).IsAssignableFrom (typeof (Duper[][])), true, "#11");
			Assert.AreEqual (typeof (ICloneable[][]).IsAssignableFrom (typeof (Duper[][])), true, "#12");

			// Tests for vectors<->one dimensional arrays */
			Array arr1 = Array.CreateInstance (typeof (int), new int[] {1}, new int[] {0});
			Array arr2 = Array.CreateInstance (typeof (int), new int[] {1}, new int[] {10});

			Assert.AreEqual (typeof (int[]).IsAssignableFrom (arr1.GetType ()), true, "#13");
			Assert.AreEqual (typeof (int[]).IsAssignableFrom (arr2.GetType ()), false, "#14");

			// Test that arrays of enums can be cast to their base types
			Assert.AreEqual (typeof (int[]).IsAssignableFrom (typeof (TypeCode[])), true, "#15");

			// Test that arrays of valuetypes can't be cast to arrays of
			// references
			Assert.AreEqual (typeof (object[]).IsAssignableFrom (typeof (TypeCode[])), false, "#16");
			Assert.AreEqual (typeof (ValueType[]).IsAssignableFrom (typeof (TypeCode[])), false, "#17");
			Assert.AreEqual (typeof (Enum[]).IsAssignableFrom (typeof (TypeCode[])), false, "#18");

			// Test that arrays of enums can't be cast to arrays of references
			Assert.AreEqual (typeof (object[]).IsAssignableFrom (typeof (TheEnum[])), false, "#19");
			Assert.AreEqual (typeof (ValueType[]).IsAssignableFrom (typeof (TheEnum[])), false, "#20");
			Assert.AreEqual (typeof (Enum[]).IsAssignableFrom (typeof (TheEnum[])), false, "#21");

			// Check that ValueType and Enum are recognized as reference types
			Assert.AreEqual (typeof (object).IsAssignableFrom (typeof (ValueType)), true, "#22");
			Assert.AreEqual (typeof (object).IsAssignableFrom (typeof (Enum)), true, "#23");
			Assert.AreEqual (typeof (ValueType).IsAssignableFrom (typeof (Enum)), true, "#24");

			Assert.AreEqual (typeof (object[]).IsAssignableFrom (typeof (ValueType[])), true, "#25");
			Assert.AreEqual (typeof (ValueType[]).IsAssignableFrom (typeof (ValueType[])), true, "#26");
			Assert.AreEqual (typeof (Enum[]).IsAssignableFrom (typeof (ValueType[])), false, "#27");

			Assert.AreEqual (typeof (object[]).IsAssignableFrom (typeof (Enum[])), true, "#28");
			Assert.AreEqual (typeof (ValueType[]).IsAssignableFrom (typeof (Enum[])), true, "#29");
			Assert.AreEqual (typeof (Enum[]).IsAssignableFrom (typeof (Enum[])), true, "#30");

			// Tests for byref types
			MethodInfo mi = typeof (TypeTest).GetMethod ("ByrefMethod", BindingFlags.Instance|BindingFlags.NonPublic);
			Assert.IsTrue (mi.GetParameters ()[2].ParameterType.IsAssignableFrom (mi.GetParameters ()[1].ParameterType));
			Assert.IsTrue (mi.GetParameters ()[1].ParameterType.IsAssignableFrom (mi.GetParameters ()[1].ParameterType));

			// Tests for type parameters
			mi = typeof (TypeTest).GetMethod ("GenericMethod", BindingFlags.Instance|BindingFlags.NonPublic);
			Assert.IsTrue (mi.GetParameters ()[0].ParameterType.IsAssignableFrom (mi.GetParameters ()[0].ParameterType));
			Assert.IsFalse (mi.GetParameters ()[0].ParameterType.IsAssignableFrom (typeof (int)));

			// Tests for parameters with generic constraints
			mi = typeof (TypeTest).GetMethod ("GenericMethod", BindingFlags.Instance|BindingFlags.NonPublic);
			Assert.IsTrue (typeof (IFace).IsAssignableFrom (mi.GetParameters ()[1].ParameterType));

			// Transitivity of IsAssignableFrom for type parameters
			mi = typeof (TypeTest).GetMethod ("GenericMethod2", BindingFlags.Instance|BindingFlags.NonPublic);
			var gparams = mi.GetGenericArguments ();
			// B : Duper since B : C and C : Duper
			Assert.IsTrue (typeof (Duper).IsAssignableFrom (gparams[1]), "#36");
			// A : Duper since A : B and B : Duper
			Assert.IsTrue (typeof (Duper).IsAssignableFrom (gparams[0]), "#37a");
			// A : IFace since A : IFace
			Assert.IsTrue (typeof (IFace).IsAssignableFrom (gparams[0]), "#37b");
			// B : Super since B : Duper and Duper : Super
			Assert.IsTrue (typeof (Super).IsAssignableFrom (gparams[1]), "#38");
			// A : Super since A : B and B : Super
			Assert.IsTrue (typeof (Super).IsAssignableFrom (gparams[0]), "#39");
			// D : IBar<object> since D : Baz<object> and Baz<object> : IBar<object>
			Assert.IsTrue (typeof (IBar<object>).IsAssignableFrom (gparams [3]), "#40");
			// A not assignable from B since A : B
			Assert.IsFalse (gparams[0].IsAssignableFrom (gparams [1]), "#41");
			Assert.IsFalse (gparams[0].IsAssignableFrom (gparams [2]), "#42");

			// A is not assignable from Array and Delegate and vice versa
			Assert.IsFalse (gparams[0].IsAssignableFrom (typeof (Array)), "#43");
			Assert.IsFalse (gparams[0].IsAssignableFrom (typeof (Delegate)), "#44");
			Assert.IsFalse (typeof (Array).IsAssignableFrom (gparams[0]), "#45");
			Assert.IsFalse (typeof (Delegate).IsAssignableFrom (gparams[0]), "#46");

			// Arrays of generic parameters and arrays of interfaces, see https://github.com/mono/mono/pull/15749
			var t = typeof (SampleGeneric<>).GetTypeInfo ().GenericTypeParameters [0];
			var ta = t.MakeArrayType ();
			var i = typeof (IFace1);
			var ia = i.MakeArrayType ();
			var t2 = typeof (SampleGenericConstrained<>).GetTypeInfo ().GenericTypeParameters [0];
			var ta2 = t2.MakeArrayType ();
			Assert.IsTrue (i.IsAssignableFrom (t), "#47");
			Assert.IsFal
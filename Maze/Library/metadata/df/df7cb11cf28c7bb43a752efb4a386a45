 r(static_cast<component_type>(clamp(other.r))), g(static_cast<component_type>(clamp(other.g))), b(static_cast<component_type>(clamp(other.b))), a(static_cast<component_type>(clamp(other.a))) {
  }

  inline void clear() {
    r = 0;
    g = 0;
    b = 0;
    a = 0;
  }

  inline color_quad& operator=(const color_quad& other) {
    r = other.r;
    g = other.g;
    b = other.b;
    a = other.a;
    return *this;
  }

  inline color_quad& set_rgb(const color_quad& other) {
    r = other.r;
    g = other.g;
    b = other.b;
    return *this;
  }

  template <typename other_component_type, typename other_parameter_type>
  inline color_quad& operator=(const color_quad<other_component_type, other_parameter_type>& other) {
    r = static_cast<component_type>(clamp(other.r));
    g = static_cast<component_type>(clamp(other.g));
    b = static_cast<component_type>(clamp(other.b));
    a = static_cast<component_type>(clamp(other.a));
    return *this;
  }

  inline color_quad& operator=(parameter_type y) {
    set(y, component_traits::cMax);
    return *this;
  }

  inline color_quad& set(parameter_type y, parameter_type alpha = component_traits::cMax) {
    y = clamp(y);
    alpha = clamp(alpha);
    r = static_cast<component_type>(y);
    g = static_cast<component_type>(y);
    b = static_cast<component_type>(y);
    a = static_cast<component_type>(alpha);
    return *this;
  }

  inline color_quad& set_noclamp_y_alpha(parameter_type y, parameter_type alpha = component_traits::cMax) {
    CRNLIB_ASSERT((y >= component_traits::cMin) && (y <= component_traits::cMax));
    CRNLIB_ASSERT((alpha >= component_traits::cMin) && (alpha <= component_traits::cMax));

    r = static_cast<component_type>(y);
    g = static_cast<component_type>(y);
    b = static_cast<component_type>(y);
    a = static_cast<component_type>(alpha);
    return *this;
  }

  inline color_quad& set(parameter_type red, parameter_type green, parameter_type blue, parameter_type alpha = component_traits::cMax) {
    r = static_cast<component_type>(clamp(red));
    g = static_cast<component_type>(clamp(green));
    b = static_cast<component_type>(clamp(blue));
    a = static_cast<component_type>(clamp(alpha));
    return *this;
  }

  inline color_quad& set_noclamp_rgba(parameter_type red, parameter_type green, parameter_type blue, parameter_type alpha) {
    CRNLIB_ASSERT((red >= component_traits::cMin) && (red <= component_traits::cMax));
    CRNLIB_ASSERT((green >= component_traits::cMin) && (green <= component_traits::cMax));
    CRNLIB_ASSERT((blue >= component_traits::cMin) && (blue <= component_traits::cMax));
    CRNLIB_ASSERT((alpha >= component_traits::cMin) && (alpha <= component_traits::cMax));

    r = static_cast<component_type>(red);
    g = static_cast<component_type>(green);
    b = static_cast<component_type>(blue);
    a = static_cast<component_type>(alpha);
    return *this;
  }

  inline color_quad& set_noclamp_rgb(parameter_type red, parameter_type green, parameter_type blue) {
    CRNLIB_ASSERT((red >= component_traits::cMin) && (red <= component_traits::cMax));
    CRNLIB_ASSERT((green >= component_traits::cMin) && (green <= component_traits::cMax));
    CRNLIB_ASSERT((blue >= component_traits::cMin) && (blue <= component_traits::cMax));

    r = static_cast<component_type>(red);
    g = static_cast<component_type>(green);
    b = static_cast<component_type>(blue);
    return *this;
  }

  static inline parameter_type get_min_comp() { return component_traits::cMin; }
  static inline parameter_type get_max_comp() { return component_traits::cMax; }
  static inline bool get_comps_are_signed() { return component_traits::cSigned; }

  inline component_type operator[](uint i) const {
    CRNLIB_ASSERT(i < cNumComps);
    return c[i];
  }
  inline component_type& operator[](uint i) {
    CRNLIB_ASSERT(i < cNumComps);
    return c[i];
  }

  inline color_quad& set_component(uint i, parameter_type f) {
    CRNLIB_ASSERT(i < cNumComps);

    c[i] = static_cast<component_type>(clamp(f));

    return *this;
  }

  inline color_quad& set_grayscale(parameter_t l) {
    component_t x = static_cast<component_t>(clamp(l));
    c[0]
ummary>
    /// 
    /// </summary>
    /// <returns></returns>
    public bool IsSorted() { return innerlist.IsSorted(); }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="comparer"></param>
    /// <returns></returns>
    public bool IsSorted(SCG.IComparer<T> comparer) { return innerlist.IsSorted(comparer); }

    /// <summary>
    /// 
    /// </summary>
    public void Sort() { innerlist.Sort(); }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="comparer"></param>
    public void Sort(SCG.IComparer<T> comparer) { innerlist.Sort(comparer); }

    /// <summary>
    /// 
    /// </summary>
    public void Shuffle() { innerlist.Shuffle(); }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="rnd"></param>
    public void Shuffle(Random rnd) { innerlist.Shuffle(rnd); }

    #endregion

    #region IIndexed<T> Members

    /// <summary>
    /// 
    /// </summary>
    /// <value></value>
    public Speed IndexingSpeed { get { return Speed.Constant; } }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="start"></param>
    /// <param name="count"></param>
    /// <returns></returns>
    public IDirectedCollectionValue<T> this[int start, int count] { get { return innerlist[start, count]; } }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="item"></param>
    /// <returns></returns>
    public int IndexOf(T item) { return innerlist.IndexOf(item); }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="item"></param>
    /// <returns></returns>
    public int LastIndexOf(T item) { return innerlist.LastIndexOf(item); }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="predicate"></param>
    /// <returns></returns>
    public int FindIndex(Fun<T, bool> predicate) { return innerlist.FindIndex(predicate); }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="predicate"></param>
    /// <returns></returns>
    public int FindLastIndex(Fun<T, bool> predicate) { return innerlist.FindLastIndex(predicate); }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="i"></param>
    /// <returns></returns>
    public T RemoveAt(int i) { throw new FixedSizeCollectionException(); }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="start"></param>
    /// <param name="count"></param>
    public void RemoveInterval(int start, int count) { throw new FixedSizeCollectionException(); }

    #endregion

    #region ISequenced<T> Members

    /// <summary>
    /// 
    /// </summary>
    /// <returns></returns>
    public int GetSequencedHashCode() { return innerlist.GetSequencedHashCode(); }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="that"></param>
    /// <returns></returns>
    public bool SequencedEquals(ISequenced<T> that) { return innerlist.SequencedEquals(that); }

    #endregion

    #region ICollection<T> Members
    /// <summary>
    /// 
    /// </summary>
    /// <value></value>
    public Speed ContainsSpeed { get { return Speed.Linear; } }

    /// <summary>
    /// 
    /// </summary>
    /// <returns></returns>
    public int GetUnsequencedHashCode() { return innerlist.GetUnsequencedHashCode(); }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="that"></param>
    /// <returns></returns>
    public bool UnsequencedEquals(ICollection<T> that) { return innerlist.UnsequencedEquals(that); }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="item"></param>
    /// <returns></returns>
    public bool Contains(T item) { return innerlist.Contains(item); }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="item"></param>
    /// <returns></returns>
    public int ContainsCount(T item) { return innerlist.ContainsCount(item); }

    /// <summary>
    /// 
    /// </summary>
    /// <returns></returns>
    public ICollectionValue<T> UniqueItems() { return innerlist.UniqueItems(); }

    /// <summary>
    /// 
    /// </summary>
    /// <returns></returns>
    public ICollectionValue<KeyValuePair<T, int>> ItemMultiplicities() { return innerlist.ItemMultiplicities(); }

    /// <summary>
    /// 
    /// </summary>
    /// <typeparam name="U"></typeparam>
    /// <param name="items"></param>
    /// <returns></returns>
    public bool ContainsAll<U>(System.Collections.Generic.IEnumerable<U> items) where U : T
    { return innerlist.ContainsAll(items); }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="item"></param>
    /// <returns></returns>
    public bool Find(ref T item) { return innerlist.Find(ref item); }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="item"></param>
    /// <returns></returns>
    public bool FindOrAdd(ref T item) { throw new FixedSizeCollectionException(); }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="item"></param>
    /// <returns></returns>
    public bool Update(T item) { throw new FixedSizeCollectionException(); }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="item"></param>
    /// <param name="olditem"></param>
    /// <returns></returns>
    public bool Update(T item, out T olditem) { throw new FixedSizeCollectionException(); }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="item"></param>
    /// <returns></returns>
    public bool UpdateOrAdd(T item) { throw new FixedSizeCollectionException(); }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="item"></param>
    /// <param name="olditem"></param>
    /// <returns></returns>
    public bool UpdateOrAdd(T item, out T olditem) { throw new FixedSizeCollectionException(); }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="item"></param>
    /// <returns></returns>
    public bool Remove(T item) { throw new FixedSizeCollectionException(); }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="item"></param>
    /// <param name="removeditem"></param>
    /// <returns></returns>
    public bool Remove(T item, out T removeditem) { throw new FixedSizeCollectionException(); }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="item"></param>
    public void RemoveAllCopies(T item) { throw new FixedSizeCollectionException(); }

    /// <summary>
    /// 
    /// </summary>
    /// <typeparam name="U"></typeparam>
    /// <param name="items"></param>
    public void RemoveAll<U>(System.Collections.Generic.IEnumerable<U> items) where U : T { throw new FixedSizeCollectionException(); }

    /// <summary>
    /// 
    /// </summary>
    public void Clear() { throw new FixedSizeCollectionException(); }

    /// <summary>
    /// 
    /// </summary>
    /// <typeparam name="U"></typeparam>
    /// <param name="items"></param>
    public void RetainAll<U>(System.Collections.Generic.IEnumerable<U> items) where U : T { throw new FixedSizeCollectionException(); }

    #endregion

    #region IExtensible<T> Members

    /// <summary>
    /// 
    /// </summary>
    /// <value></value>
    public bool IsReadOnly { get { return true; } }

    /// <summary>
    /// 
    /// </summary>
    /// <value></value>
    public bool AllowsDuplicates
    {
      get { return true; }
    }

    /// <summary>
    /// 
    /// </summary>
    /// <value></value>
    public SCG.IEqualityComparer<T> EqualityComparer { get { return innerlist.EqualityComparer; } }

    /// <summary>
    /// 
    /// </summary>
    /// <value></value>
    public bool DuplicatesByCounting
    {
      get { return false; }
    }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="item"></param>
    /// <returns></returns>
    public bool Add(T item)
    {
      throw new FixedSizeCollectionException();
    }

    /// <summary>
    /// 
    /// </summary>
    /// <typeparam name="U"></typeparam>
    /// <param name="items"></param>
    public void AddAll<U>(System.Collections.Generic.IEnumerable<U> items) where U : T
    {
      throw new FixedSizeCollectionException();
    }

    /// <summary>
    /// 
    /// </summary>
    /// <returns></returns>
    public bool Check()
    {
      return innerlist.Check() && (underlying == null || underlying.innerlist == innerlist.Underlying);
    }

    #endregion

    #region ICollectionValue<T> Members
    /// <summary>
    /// No listeners may be installed
    /// </summary>
    /// <value>0</value>
    public virtual EventTypeEnum ListenableEvents { get { return 0; } }

    /// <summary>
    /// No listeners ever installed
    /// </summary>
    /// <value>0</value>
    public virtual EventTypeEnum ActiveEvents { get { return 0; } }

    /// <summary>
    /// 
    /// </summary>
    /// <value></value>
    public event CollectionChangedHandler<T> CollectionChanged
    {
      add { throw new UnlistenableEventException(); }
      remove { throw new UnlistenableEventException(); }
    }

    /// <summary>
    /// 
    /// </summary>
    /// <value></value>
    public event CollectionClearedHandler<T> CollectionCleared
    {
      add { throw new UnlistenableEventException(); }
      remove { throw new UnlistenableEventException(); }
    }

    /// <summary>
    /// 
    /// </summary>
    /// <value></value>
    public event ItemsAddedHandler<T> ItemsAdded
    {
      add { throw new UnlistenableEventException(); }
      remove { throw new UnlistenableEventException(); }
    }

    /// <summary>
    /// 
    /// </summary>
    /// <value></value>
    public event ItemInsertedHandler<T> ItemInserted
    {
      add { throw new UnlistenableEventException(); }
      remove { throw new UnlistenableEventException(); }
    }

    /// <summary>
    /// 
    /// </summary>
    /// <value></value>
    public event ItemsRemovedHandler<T> ItemsRemoved
    {
      add { throw new UnlistenableEventException(); }
      remove { throw new UnlistenableEventException(); }
    }

    /// <summary>
    /// 
    /// </summary>
    /// <value></value>
    public event ItemRemovedAtHandler<T> ItemRemovedAt
    {
      add { throw new UnlistenableEventException(); }
      remove { throw new UnlistenableEventException(); }
    }

    /// <summary>
    /// 
    /// </summary>
    /// <value></value>
    public bool IsEmpty { get { return innerlist.IsEmpty; } }

    /// <summary>
    /// 
    /// </summary>
    /// <value></value>
    public int Count { get { return innerlist.Count; } }

    /// <summary>
    /// 
    /// </summary>
    /// <value></value>
    public Speed CountSpeed { get { return innerlist.CountSpeed; } }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="array"></param>
    /// <param name="index"></param>
    public void CopyTo(T[] array, int index) { innerlist.CopyTo(array, index); }

    /// <summary>
    /// 
    /// </summary>
    /// <returns></returns>
    public T[] ToArray() { return innerlist.ToArray(); }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="action"></param>
    public void Apply(Act<T> action) { innerlist.Apply(action); }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="predicate"></param>
    /// <returns></returns>
    public bool Exists(Fun<T, bool> predicate) { return innerlist.Exists(predicate); }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="predicate"></param>
    /// <param name="item"></param>
    /// <returns></returns>
    public bool Find(Fun<T, bool> predicate, out T item) { return innerlist.Find(predicate, out item); }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="predicate"></param>
    /// <returns></returns>
    public bool All(Fun<T, bool> predicate) { return innerlist.All(predicate); }

    /// <summary>
    /// 
    /// </summary>
    /// <returns></returns>
    public T Choose() { return innerlist.Choose(); }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="filter"></param>
    /// <returns></returns>
    public SCG.IEnumerable<T> Filter(Fun<T, bool> filter) { return innerlist.Filter(filter); }

    #endregion

    #region IEnumerable<T> Members

    /// <summary>
    /// 
    /// </summary>
    /// <returns></returns>
    public SCG.IEnumerator<T> GetEnumerator() { return innerlist.GetEnumerator(); }
    #endregion

    #region IShowable Members

    /// <summary>
    /// 
    /// </summary>
    /// <param name="stringbuilder"></param>
    /// <param name="rest"></param>
    /// <param name="formatProvider"></param>
    /// <returns></returns>
    public bool Show(StringBuilder stringbuilder, ref int rest, IFormatProvider formatProvider)
    { return innerlist.Show(stringbuilder, ref  rest, formatProvider); }

    #endregion

    #region IFormattable Members

    /// <summary>
    /// 
    /// </summary>
    /// <returns></returns>
    public override string ToString() { return innerlist.ToString(); }


    /// <summary>
    /// 
    /// </summary>
    /// <param name="format"></param>
    /// <param name="formatProvider"></param>
    /// <returns></returns>
    public virtual string ToString(string format, IFormatProvider formatProvider) { return innerlist.ToString(format, formatProvider); }

    #endregion

    #region IDirectedCollectionValue<T> Members

    /// <summary>
    /// 
    /// </summary>
    /// <returns></returns>
    public IDirectedCollectionValue<T> Backwards() { return innerlist.Backwards(); }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="predicate"></param>
    /// <param name="item"></param>
    /// <returns></returns>
    public bool FindLast(Fun<T, bool> predicate, out T item) { return innerlist.FindLast(predicate, out item); }

    #endregion

    #region IDirectedEnumerable<T> Members

    IDirectedEnumerable<T> IDirectedEnumerable<T>.Backwards() { return Backwards(); }

    /// <summary>
    /// 
    /// </summary>
    /// <value></value>
    public EnumerationDirection Direction { get { return EnumerationDirection.Forwards; } }

    #endregion

    #region IDisposable Members

    /// <summary>
    /// Dispose this if a view else operation is illegal 
    /// </summary>
    /// <exception cref="FixedSizeCollectionException">If not a view</exception>
    public void Dispose()
    {
      if (underlying == null)
        throw new FixedSizeCollectionException();
      else
        innerlist.Dispose();
    }

    #endregion

    #region ICloneable Members

    /// <summary>
    /// Make a shallow copy of this WrappedArray.
    /// 
    /// 
    /// </summary>
    /// <returns></returns>
    public virtual object Clone()
    {
      return new WrappedArray<T>(innerlist.ToArray());
    }

    #endregion

    #region System.Collections.Generic.IList<T> Members

    void System.Collections.Generic.IList<T>.RemoveAt(int index)
    {
      throw new FixedSizeCollectionException();
    }

    void System.Collections.Generic.ICollection<T>.Add(T item)
    {
      throw new FixedSizeCollectionException();
    }

    #endregion

    #region System.Collections.ICollection Members

    bool System.Collections.ICollection.IsSynchronized
    {
      get { return false; }
    }

    [Obsolete]
    Object System.Collections.ICollection.SyncRoot
    {
      get { return ((System.Collections.IList)innerlist).SyncRoot; }
    }

    void System.Collections.ICollection.CopyTo(Array arr, int index)
    {
      if (index < 0 || index + Count > arr.Length)
        throw new ArgumentOutOfRangeException();

      foreach (T item in this)
        arr.SetValue(item, index++);
    }
    
    #endregion

    #region System.Collections.IList Members

    Object System.Collections.IList.this[int index]
    {
      get { return this[index]; }
      set { this[index] = (T)value; }
    }

    int System.Collections.IList.Add(Object o)
    {
      bool added = Add((T)o);
      // What position to report if item not added? SC.IList.Add doesn't say
      return added ? Count - 1 : -1;
    }

    bool System.Collections.IList.Contains(Object o)
    {
      return Contains((T)o);
    }

    int System.Collections.IList.IndexOf(Object o)
    {
      return Math.Max(-1, IndexOf((T)o));
    }

    void System.Collections.IList.Insert(int index, Object o)
    {
      Insert(index, (T)o);
    }

    void System.Collections.IList.Remove(Object o)
    {
      Remove((T)o);
    }

    void System.Collections.IList.RemoveAt(int index)
    {
      RemoveAt(index);
    }

    #endregion
    
    #region IEnumerable Members

    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    {
      throw new Exception("The method or operation is not implemented.");
    }

    #endregion
  }
}                                                                                                             CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.IO;
using Mono.CodeContracts.Static.AST.Visitors;
using Mono.CodeContracts.Static.Analysis.ExpressionAnalysis.Expressions;
using Mono.CodeContracts.Static.ControlFlow;
using Mono.CodeContracts.Static.DataFlowAnalysis;
using Mono.CodeContracts.Static.DataStructures;
using Mono.CodeContracts.Static.Lattices;

namespace Mono.CodeContracts.Static.Analysis.ExpressionAnalysis {
	class ValueAnalysis<SymbolicValue, Context, EdgeData> : IAnalysis<APC, ExprDomain<SymbolicValue>,
	                                                                 IILVisitor<APC, SymbolicValue, SymbolicValue, ExprDomain<SymbolicValue>, ExprDomain<SymbolicValue>>, EdgeData>
			where SymbolicValue : IEquatable<SymbolicValue> 
			where Context : IValueContextProvider<SymbolicValue> 
			where EdgeData : IImmutableMap<SymbolicValue, Sequence<SymbolicValue>> {
		private readonly ExpressionAnalysisFacade<SymbolicValue, Context, EdgeData> parent;

		public ValueAnalysis (ExpressionAnalysisFacade<SymbolicValue, Context, EdgeData> parent)
		{
			this.parent = parent;
		}

		#region Implementation of IAnalysis<APC,ExpressionAnalysis<Local,Parameter,Method,Field,Property,Event,Type,Attribute,Assembly,SymbolicValue,contextProvider,EdgeData>.Domain,IILVisitor<APC,Local,Parameter,Method,Field,Type,SymbolicValue,SymbolicValue,ExpressionAnalysis<Local,Parameter,Method,Field,Property,Event,Type,Attribute,Assembly,SymbolicValue,contextProvider,EdgeData>.Domain,ExpressionAnalysis<Local,Parameter,Method,Field,Property,Event,Type,Attribute,Assembly,SymbolicValue,contextProvider,EdgeData>.Domain>,EdgeData>
		public ExprDomain<SymbolicValue> EdgeConversion (APC @from, APC to, bool isJoinPoint, EdgeData sourceTargetMap, ExprDomain<SymbolicValue> originalState)
		{
			if (sourceTargetMap == null)
				return originalState;

			if (DebugOptions.Debug)
			{
				Console.WriteLine ("====Expression analysis Parallel assign====");
				DumpMap (sourceTargetMap);
				DumpExpressions ("original expressions", originalState);
			}

			ExprDomain<SymbolicValue> result = originalState.Empty ();
			ExprDomain<SymbolicValue> domain = originalState.Empty ();

			foreach (SymbolicValue sv in originalState.Keys) {
				Expr<SymbolicValue> expression = originalState [sv].Value.Substitute (sourceTargetMap);
				if (expression != null)
					domain = domain.Add (sv, expression);
			}

			foreach (SymbolicValue sv in sourceTargetMap.Keys) {
				FlatDomain<Expr<SymbolicValue>> expressionDomain = domain [sv];
				if (expressionDomain.IsNormal()) {
					Expr<SymbolicValue> expression = expressionDomain.Value;
					foreach (SymbolicValue sub in sourceTargetMap [sv].AsEnumerable ())
						result = result.Add (sub, expression);
				}
			}

			if (DebugOptions.Debug)
			{
				DumpExpressions ("new expressions", result);
			}
			return result;
		}

		public IILVisitor<APC, SymbolicV// Copyright NVIDIA Corporation 2007 -- Ignacio Castano <icastano@nvidia.com>
// 
// Permission is hereby granted, free of charge, to any person
// obtaining a copy of this software and associated documentation
// files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following
// conditions:
// 
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.

#include <nvcore/Containers.h> // swap

#include <nvmath/Color.h>

#include <nvimage/ColorBlock.h>
#include <nvimage/BlockDXT.h>

#include "OptimalCompressDXT.h"
#include "SingleColorLookup.h"


using namespace nv;
using namespace OptimalCompress;



namespace
{
	static int computeGreenError(const ColorBlock & rgba, const BlockDXT1 * block)
	{
		nvDebugCheck(block != NULL);

		int palette[4];
		palette[0] = (block->col0.g << 2) | (block->col0.g >> 4);
		palette[1] = (block->col1.g << 2) | (block->col1.g >> 4);
		palette[2] = (2 * palette[0] + palette[1]) / 3;
		palette[3] = (2 * palette[1] + palette[0]) / 3;

		int totalError = 0;

		for (int i = 0; i < 16; i++)
		{
			const int green = rgba.color(i).g;
			
			int error = abs(green - palette[0]);
			error = min(error, abs(green - palette[1]));
			error = min(error, abs(green - palette[2]));
			error = min(error, abs(green - palette[3]));
			
			totalError += error;
		}

		return totalError;
	}

	static uint computeGreenIndices(const ColorBlock & rgba, const Color32 palette[4])
	{
		const int color0 = palette[0].g;
		const int color1 = palette[1].g;
		const int color2 = palette[2].g;
		const int color3 = palette[3].g;
		
		uint indices = 0;
		for (int i = 0; i < 16; i++)
		{
			const int color = rgba.color(i).g;
			
			uint d0 = abs(color0 - color);
			uint d1 = abs(color1 - color);
			uint d2 = abs(color2 - color);
			uint d3 = abs(color3 - color);
			
			uint b0 = d0 > d3;
			uint b1 = d1 > d2;
			uint b2 = d0 > d2;
			uint b3 = d1 > d3;
			uint b4 = d2 > d3;
			
			uint x0 = b1 & b2;
			uint x1 = b0 & b3;
			uint x2 = b0 & b4;
			
			indices |= (x2 | ((x0 | x1) << 1)) << (2 * i);
		}

		return indices;
	}

	// Choose quantized color that produces less error. Used by DXT3 compressor.
	inline static uint quantize4(uint8 a)
	{
		int q0 = (a >> 4) - 1;
		int q1 = (a >> 4);
		int q2 = (a >> 4) + 1;
		
		q0 = (q0 << 4) | q0;
		q1 = (q1 << 4) | q1;
		q2 = (q2 << 4) | q2;
		
		int d0 = abs(q0 - a);
		int d1 = abs(q1 - a);
		int d2 = abs(q2 - a);

		if (d0 < d1 && d0 < d2) return q0 >> 4;
		if (d1 < d2) return q1 >> 4;
		return q2 >> 4;
	}
	
	static uint computeAlphaError(const ColorBlock & rgba, const AlphaBlockDXT5 * block)
	{
		uint8 alphas[8];
		block->evaluatePalette(alphas);

		uint totalError = 0;

		for (uint i = 0; i < 16; i++)
		{
			uint8 alpha = rgba.color(i).a;

			uint besterror = 256*256;
			uint best;
			for (uint p = 0; p < 8; p++)
			{
				int d = alphas[p] - alpha;
				uint error = d * d;

				if (error < besterror)
				{
					besterror = error;
					best = p;
				}
			}

			totalError += besterror;
		}

		return totalError;
	}
	
	static void computeAlphaIndices(const ColorBlock & rgba, AlphaBlockDXT5 * block)
	{
		uint8 alphas[8];
		block->evaluatePalette(alphas);

		for (uint i = 0; i < 16; i++)
		{
			uint8 alpha = rgba.color(i).a;

			uint besterror = 256*256;
			uint best = 8;
			for(uint p = 0; p < 8; p++)
			{
				int d = alphas[p] - alpha;
				uint error = d * d;

				if (error < besterror)
				{
					besterror = error;
					best = p;
				}
			}
			nvDebugCheck(best < 8);

			block->setIndex(i, best);
		}
	}

} // namespace





// Single color compressor, based on:
// https://mollyrocket.com/forums/viewtopic.php?t=392
void OptimalCompress::compressDXT1(Color32 c, BlockDXT1 * dxtBlock)
{
	dxtBlock->col0.r = OMatch5[c.r][0];
	dxtBlock->col0.g = OMatch6[c.g][0];
	dxtBlock->col0.b = OMatch5[c.b][0];
	dxtBlock->col1.r = OMatch5[c.r][1];
	dxtBlock->col1.g = OMatch6[c.g][1];
	dxtBlock->col1.b = OMatch5[c.b][1];
	dxtBlock->indices = 0xaaaaaaaa;

	if (dxtBlock->col0.u < dxtBlock->col1.u)
	{
		swap(dxtBlock->col0.u, dxtBlock->col1.u);
		dxtBlock->indices ^= 0x55555555;
	}
}

void OptimalCompress::compressDXT1a(Color32 rgba, BlockDXT1 * dxtBlock)
{
	if (rgba.a < 128)
	{
		dxtBlock->col0.u = 0;
		dxtBlock->col1.u = 0;
		dxtBlock->indices = 0xFFFFFFFF;
	}
	else
	{
		compressDXT1(rgba, dxtBlock);
	}
}


// Brute force green channel compressor
void OptimalCompress::compressDXT1G(const ColorBlock & rgba, BlockDXT1 * block)
{
	nvDebugCheck(block != NULL);
	
	uint8 ming = 63;
	uint8 maxg = 0;
	
	// Get min/max green.
	for (uint i = 0; i < 16; i++)
	{
		uint8 green = rgba.color(i).g >> 2;
		ming = min(ming, green);
		maxg = max(maxg, green);
	}

	block->col0.r = 31;
	block->col1.r = 31;
	block->col0.g = maxg;
	block->col1.g = ming;
	block->col0.b = 0;
	block->col1.b = 0;

	if (maxg - ming > 4)
	{
		int besterror = computeGreenError(rgba, block);
		int bestg0 = maxg;
		int bestg1 = ming;
		
		for (int g0 = ming+5; g0 < maxg; g0++)
		{
			for (int g1 = ming; g1 < g0-4; g1++)
			{
				if ((maxg-g0) + (g1-ming) > besterror)
					continue;
				
				block->col0.g = g0;
				block->col1.g = g1;
				int error = computeGreenError(rgba, block);
				
				if (error < besterror)
				{
					besterror = error;
					bestg0 = g0;
					bestg1 = g1;
				}
			}
		}
		
		block->col0.g = bestg0;
		block->col1.g = bestg1;
	}
	
	Color32 palette[4];
	block->evaluatePalette(palette);
	block->indices = computeGreenIndices(rgba, palette);
}

void OptimalCompress::compressDXT3A(const ColorBlock & rgba, AlphaBlockDXT3 * dxtBlock)
{
	dxtBlock->alpha0 = quantize4(rgba.color(0).a);
	dxtBlock->alpha1 = quantize4(rgba.color(1).a);
	dxtBlock->alpha2 = quantize4(rgba.color(2).a);
	dxtBlock->alpha3 = quantize4(rgba.color(3).a);
	dxtBlock->alpha4 = quantize4(rgba.color(4).a);
	dxtBlock->alpha5 = quantize4(rgba.color(5).a);
	dxtBlock->alpha6 = quantize4(rgba.color(6).a);
	dxtBlock->alpha7 = quantize4(rgba.color(7).a);
	dxtBlock->alpha8 = quantize4(rgba.color(8).a);
	dxtBlock->alpha9 = quantize4(rgba.color(9).a);
	dxtBlock->alphaA = quantize4(rgba.color(10).a);
	dxtBlock->alphaB = quantize4(rgba.color(11).a);
	dxtBlock->alphaC = quantize4(rgba.color(12).a);
	dxtBlock->alphaD = quantize4(rgba.color(13).a);
	dxtBlock->alphaE = quantize4(rgba.color(14).a);
	dxtBlock->alphaF = quantize4(rgba.color(15).a);
}


void OptimalCompress::compressDXT5A(const ColorBlock & rgba, AlphaBlockDXT5 * dxtBlock)
{
	uint8 mina = 255;
	uint8 maxa = 0;

	// Get min/max alpha.
	for (uint i = 0; i < 16; i++)
	{
		uint8 alpha = rgba.color(i).a;
		mina = min(mina, alpha);
		maxa = max(maxa, alpha);
	}

	dxtBlock->alpha0 = maxa;
	dxtBlock->alpha1 = mina;

	/*int centroidDist = 256;
	int centroid;

	// Get the closest to the centroid.
	for (uint i = 0; i < 16; i++)
	{
		uint8 alpha = rgba.color(i).a;
		int dist = abs(alpha - (maxa + mina) / 2);
		if (dist < centroidDist)
		{
			centroidDist = dist;
			centroid = alpha;
		}
	}*/

	if (maxa - mina > 8)
	{
		int besterror = computeAlphaError(rgba, dxtBlock);
		int besta0 = maxa;
		int besta1 = mina;

		for (int a0 = mina+9; a0 < maxa; a0++)
		{
			for (int a1 = mina; a1 < a0-8; a1++)
			//for (int a1 = mina; a1 < maxa; a1++)
			{
				//nvCheck(abs(a1-a0) > 8);

				//if (abs(a0 - a1) < 8) continue;
				//if ((maxa-a0) + (a1-mina) + min(abs(centroid-a0), abs(centroid-a1)) > besterror)
				if ((maxa-a0) + (a1-mina) > besterror)
					continue;

				dxtBlock->a
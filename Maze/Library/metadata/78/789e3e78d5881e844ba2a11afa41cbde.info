// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
// 
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
// Copyright (c) 2004-2005 Novell, Inc.
//
// Authors:
//	Peter Bartok	pbartok@novell.com
//	Jackson Harper	jackson@ximian.com
//


using System.ComponentModel;

namespace System.Windows.Forms {

	[TypeConverter (typeof (ListBindingConverter))]
	public class Binding {

		private string property_name;
		private object data_source;
		private string data_member;

		private bool is_binding;
		private bool checked_isnull;

		private BindingMemberInfo binding_member_info;
		private IBindableComponent control;

		private BindingManagerBase manager;
		private PropertyDescriptor control_property;
		private PropertyDescriptor is_null_desc;

		private object data;
		private Type data_type;

		private DataSourceUpdateMode datasource_update_mode;
		private ControlUpdateMode control_update_mode;
		private object datasource_null_value = Convert.DBNull;
		private object null_value;
		private IFormatProvider format_info;
		private string format_string;
		private bool formatting_enabled;
		#region Public Constructors
		public Binding (string propertyName, object dataSource, string dataMember) 
			: this (propertyName, dataSource, dataMember, false, DataSourceUpdateMode.OnValidation, null, string.Empty, null)
		{
		}
		
		public Binding (string propertyName, object dataSource, string dataMember, bool formattingEnabled)
			: this (propertyName, dataSource, dataMember, formattingEnabled, DataSourceUpdateMode.OnValidation, null, string.Empty, null)
		{
		}
		
		public Binding (string propertyName, object dataSource, string dataMember, bool formattingEnabled, DataSourceUpdateMode dataSourceUpdateMode)
			: this (propertyName, dataSource, dataMember, formattingEnabled, dataSourceUpdateMode, null, string.Empty, null)
		{
		}
		
		public Binding (string propertyName, object dataSource, string dataMember, bool formattingEnabled, DataSourceUpdateMode dataSourceUpdateMode, object nullValue)
			: this (propertyName, dataSource, dataMember, formattingEnabled, dataSourceUpdateMode, nullValue, string.Empty, null)
		{
		}

		public Binding (string propertyName, object dataSource, string dataMember, bool formattingEnabled, DataSourceUpdateMode dataSourceUpdateMode, object nullValue, string formatString)
			: this (propertyName, dataSource, dataMember, formattingEnabled, dataSourceUpdateMode, nullValue, formatString, null)
		{
		}

		public Binding (string propertyName, object dataSource, string dataMember, bool formattingEnabled, DataSourceUpdateMode dataSourceUpdateMode, object nullValue, string formatString, IFormatProvider formatInfo)
		{
			property_name = propertyName;
			data_source = dataSource;
			data_member = dataMember;
			binding_member_info = new BindingMemberInfo (dataMember);
			datasource_update_mode = dataSourceUpdateMode;
			null_value = nullValue;
			format_string = formatString;
			format_info = formatInfo;
		}
		#endregion	// Public Constructors

		#region Public Instance Properties
		[DefaultValue (null)]
		public IBindableComponent BindableComponent {
			get {
				return control;
			}
		}

		public BindingManagerBase BindingManagerBase {
			get {
				return manager;
			}
		}

		public BindingMemberInfo BindingMemberInfo {
			get {
				return binding_member_info;
			}
		}

		[DefaultValue (null)]
		public Control Control {
			get {
				return control as Control;
			}
		}

		[DefaultValue (ControlUpdateMode.OnPropertyChanged)]
		public ControlUpdateMode ControlUpdateMode {
			get {
				return control_update_mode;
			}
			set {
				control_update_mode = value;
			}
		}

		public object DataSource {
			get {
				return data_source;
			}
		}

		[DefaultValue (DataSourceUpdateMode.OnValidation)]
		public DataSourceUpdateMode DataSourceUpdateMode {
			get {
				return datasource_update_mode;
			}
			set {
				datasource_update_mode = value;
			}
		}

		public object DataSourceNullValue {
			get {
				return datasource_null_value;
			}
			set {
				datasource_null_value = value;
			}
		}

		[DefaultValue (false)]
		public bool FormattingEnabled {
			get {
				return formatting_enabled;
			}
			
struct
            if (!mc.Property_T)
                return 1;
            else
                return 0;
        }
    }
    //</Code>
}



namespace ManagedTests.DynamicCSharp.Conformance.dynamic.context.property.regproperty.genclass.genclass002.genclass002
{
    // <Title> Tests generic class regular property used in regular method body with conditional attribute.</Title>
    // <Description>
    // </Description>
    // <RelatedBugs></RelatedBugs>
    //<Expects Status=success></Expects>
    // <Code>

    public class Test
    {
        private static int s_count = 0;
        [Fact]
        public static void DynamicCSharpRunTest()
        {
            Assert.Equal(0, MainMethod());
        }

        public static int MainMethod()
        {
            Test t1 = new Test();
            t1.TestGetMethod(new MemberClass<bool>());
            t1.TestSetMethod(new MemberClass<bool>());
            return s_count;
        }

        [System.Diagnostics.Conditional("c1")]
        public void TestGetMethod(MemberClass<bool> mc)
        {
            dynamic dy = mc;
            mc.Property_decimalArr = new decimal[1];
            if ((int)dy.Property_decimalArr.Length != 1)
                s_count++;
        }

        [System.Diagnostics.Conditional("c2")]
        public void TestSetMethod(MemberClass<bool> mc)
        {
            dynamic dy = mc;
            dy.Property_decimalArr = new decimal[]
            {
            0M, 1M
            }

            ;
            if (!((int)mc.Property_decimalArr.Length != 2))
                s_count++;
        }
    }
    //</Code>
}



namespace ManagedTests.DynamicCSharp.Conformance.dynamic.context.property.regproperty.genclass.genclass003.genclass003
{
    // <Title> Tests generic class regular property used in member initializer of anonymous type.</Title>
    // <Description>
    // </Description>
    // <RelatedBugs></RelatedBugs>
    //<Expects Status=success></Expects>
    // <Code>

    public class Test
    {
        [Fact]
        public static void DynamicCSharpRunTest()
        {
            Assert.Equal(0, MainMethod());
        }

        public static int MainMethod()
        {
            MemberClass<string> mc = new MemberClass<string>();
            mc.myT = "Test";
            mc.myDecimalArr = new decimal[]
            {
            0M, 1M
            }

            ;
            dynamic dy = mc;
            var tc = new
            {
                A1 = (string)dy.Property_T,
                A2 = (decimal[])dy.Property_decimalArr,
                A3 = (object)dy.Property_dynamic
            }

            ;
            if (tc != null && mc.myT == tc.A1 && tc.A2[0] == 0M && tc.A2[1] == 1M && tc.A3 == mc.myDynamic)
                return 0;
            return 1;
        }
    }
    //</Code>
}



namespace ManagedTests.DynamicCSharp.Conformance.dynamic.context.property.regproperty.genclass.genclass005.genclass005
{
    // <Title> Tests generic class regular property used in query expression.</Title>
    // <Description>
    // </Description>
    // <RelatedBugs></RelatedBugs>
    //<Expects Status=success></Expects>
    // <Code>
    using System.Linq;
    using System.Collections.Generic;

    public class Test
    {
        [Fact]
        public static void DynamicCSharpRunTest()
        {
            Assert.Equal(0, MainMethod());
        }

        public static int MainMethod()
        {
            var list = new List<string>()
            {
            null, "b", null, "a"
            }

            ;
            MemberClass<string> mc = new MemberClass<string>();
            mc.myT = "a";
            dynamic dy = mc;
            var result = list.Where(p => p == (string)dy.Property_T).ToList();
            if (result.Count == 1 && result[0] == "a")
                return 0;
            return 1;
        }
    }
    //</Code>
}



namespace ManagedTests.DynamicCSharp.Conformance.dynamic.context.property.regproperty.genclass.genclass006.genclass006
{
    // <Title> Tests generic class regular property used in member initializer of object initializer.</Title>
    // <Description>
    // </Description>
    // <RelatedBugs></RelatedBugs>
    //<Expects Status=success></Expects>
    // <Code>

    public class Test
    {
        private int _field1;
        private string _field2 = string.Empty;
        private MyEnum _field3;

        [Fact]
        public static void DynamicCSharpRunTest()
        {
 
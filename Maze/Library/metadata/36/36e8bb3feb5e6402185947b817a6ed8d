rmat ("Operation '{0}' not found in the service contract '{1}' in namespace '{2}'", methodName, cd.Name, cd.Namespace));
				return Inner.BeginProcess (od.BeginMethod, methodName, args, callback, state);
			}

			protected object EndInvoke (string methodName, object [] args, IAsyncResult result)
			{
				var cd = endpoint.Contract;
				var od = cd.Operations.Find (methodName);
				if (od == null)
					throw new ArgumentException (String.Format ("Operation '{0}' not found in the service contract '{1}' in namespace '{2}'", methodName, cd.Name, cd.Namespace));
				return Inner.EndProcess (od.EndMethod, methodName, args, result);
			}

			#region ICommunicationObject

			IAsyncResult ICommunicationObject.BeginClose (AsyncCallback callback, object state)
			{
				return Inner.BeginClose (callback, state);
			}

			IAsyncResult ICommunicationObject.BeginClose (TimeSpan timeout, AsyncCallback callback, object state)
			{
				return Inner.BeginClose (timeout, callback, state);
			}

			void ICommunicationObject.Close ()
			{
				Inner.Close ();
			}

			void ICommunicationObject.Close (TimeSpan timeout)
			{
				Inner.Close (timeout);
			}

			IAsyncResult ICommunicationObject.BeginOpen (AsyncCallback callback, object state)
			{
				return Inner.BeginOpen (callback, state);
			}

			IAsyncResult ICommunicationObject.BeginOpen (TimeSpan timeout, AsyncCallback callback, object state)
			{
				return Inner.BeginOpen (timeout, callback, state);
			}

			void ICommunicationObject.Open ()
			{
				Inner.Open ();
			}

			void ICommunicationObject.Open (TimeSpan timeout)
			{
				Inner.Open (timeout);
			}

			void ICommunicationObject.Abort ()
			{
				Inner.Abort ();
			}

			void ICommunicationObject.EndClose (IAsyncResult result)
			{
				Inner.EndClose (result);
			}

			void ICommunicationObject.EndOpen (IAsyncResult result)
			{
				Inner.EndOpen (result);
			}

			CommunicationState ICommunicationObject.State {
				get { return Inner.State; }
			}

			event EventHandler ICommunicationObject.Opened {
				add { Inner.Opened += value; }
				remove { Inner.Opened -= value; }
			}

			event EventHandler ICommunicationObject.Opening {
				add { Inner.Opening += value; }
				remove { Inner.Opening -= value; }
			}

			event EventHandler ICommunicationObject.Closed {
				add { Inner.Closed += value; }
				remove { Inner.Closed -= value; }
			}

			event EventHandler ICommunicationObject.Closing {
				add { Inner.Closing += value; }
				remove { Inner.Closing -= value; }
			}

			event EventHandler ICommunicationObject.Faulted {
				add { Inner.Faulted += value; }
				remove { Inner.Faulted -= value; }
			}

			#endregion

			#region IClientChannel

			public bool AllowInitializationUI {
				get { return Inner.AllowInitializationUI; }
				set { Inner.AllowInitializationUI = value; }
			}

			public bool DidInteractiveInitialization {
				get { return Inner.DidInteractiveInitialization; }
			}

			public Uri Via {
				get { return Inner.Via; }
			}

			public IAsyncResult BeginDisplayInitializationUI (
				AsyncCallback callback, object state)
			{
				return Inner.BeginDisplayInitializationUI (callback, state);
			}

			public void EndDisplayInitializationUI (
				IAsyncResult result)
			{
				Inner.EndDisplayInitializationUI (result);
			}

			public void DisplayInitializationUI ()
			{
				Inner.DisplayInitializationUI ();
			}

			public void Dispose ()
			{
				Inner.Dispose ();
			}

			public event EventHandler<UnknownMessageReceivedEventArgs> UnknownMessageReceived {
				add { Inner.UnknownMessageReceived += value; }
				remove { Inner.UnknownMessageReceived -= value; }
			}

			#endregion

			#region IContextChannel

			[MonoTODO]
			public bool AllowOutputBatching {
				get { return Inner.AllowOutputBatching; }

				set { Inner.AllowOutputBatching = value; }
			}

			[MonoTODO]
			public IInputSession InputSession {
				get { return Inner.InputSession; }
			}

			public EndpointAddress LocalAddress {
				get { return Inner.LocalAddress; }
			}

			[MonoTODO]
			public TimeSpan OperationTimeout {
				get { return Inner.OperationTimeout; }
				set { Inner.OperationTimeout = value; }
			}

			[MonoTODO]
			public IOutp
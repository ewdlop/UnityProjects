// Copyright (c) 2017 The Chromium Embedded Framework Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the CEF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//

#include "libcef_dll/cpptoc/views/browser_view_cpptoc.h"
#include "libcef_dll/cpptoc/views/button_cpptoc.h"
#include "libcef_dll/cpptoc/image_cpptoc.h"
#include "libcef_dll/cpptoc/views/label_button_cpptoc.h"
#include "libcef_dll/cpptoc/views/menu_button_cpptoc.h"
#include "libcef_dll/cpptoc/menu_model_cpptoc.h"
#include "libcef_dll/cpptoc/views/panel_cpptoc.h"
#include "libcef_dll/cpptoc/views/scroll_view_cpptoc.h"
#include "libcef_dll/cpptoc/views/textfield_cpptoc.h"
#include "libcef_dll/cpptoc/views/view_cpptoc.h"
#include "libcef_dll/cpptoc/views/window_cpptoc.h"
#include "libcef_dll/ctocpp/views/menu_button_delegate_ctocpp.h"
#include "libcef_dll/ctocpp/views/view_delegate_ctocpp.h"


// GLOBAL FUNCTIONS - Body may be edited by hand.

CEF_EXPORT cef_menu_button_t* cef_menu_button_create(
    cef_menu_button_delegate_t* delegate, const cef_string_t* text,
    int with_frame, int with_menu_marker) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: delegate; type: refptr_diff
  DCHECK(delegate);
  if (!delegate)
    return NULL;
  // Unverified params: text

  // Execute
  CefRefPtr<CefMenuButton> _retval = CefMenuButton::CreateMenuButton(
      CefMenuButtonDelegateCToCpp::Wrap(delegate),
      CefString(text),
      with_frame?true:false,
      with_menu_marker?true:false);

  // Return type: refptr_same
  return CefMenuButtonCppToC::Wrap(_retval);
}


namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

void CEF_CALLBACK menu_button_show_menu(struct _cef_menu_button_t* self,
    cef_menu_model_t* menu_model, const cef_point_t* screen_point,
    cef_menu_anchor_position_t anchor_position) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;
  // Verify param: menu_model; type: refptr_same
  DCHECK(menu_model);
  if (!menu_model)
    return;
  // Verify param: screen_point; type: simple_byref_const
  DCHECK(screen_point);
  if (!screen_point)
    return;

  // Translate param: screen_point; type: simple_byref_const
  CefPoint screen_pointVal = screen_point?*screen_point:CefPoint();

  // Execute
  CefMenuButtonCppToC::Get(self)->ShowMenu(
      CefMenuModelCppToC::Unwrap(menu_model),
      screen_pointVal,
      anchor_position);
}

void CEF_CALLBACK menu_button_trigger_menu(struct _cef_menu_button_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;

  // Execute
  CefMenuButtonCppToC::Get(self)->TriggerMenu();
}

cef_menu_button_t* CEF_CALLBACK menu_button_as_menu_button(
    struct _cef_label_button_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

  // Execute
  CefRefPtr<CefMenuButton> _retval = CefMenuButtonCppToC::Get(
      reinterpret_cast<cef_menu_button_t*>(self))->AsMenuButton();

  // Return type: refptr_same
  return CefMenuButtonCppToC::Wrap(_retval);
}

void CEF_CALLBACK menu_button_set_text(struct _cef_label_button_t* self,
    const cef_string_t* text) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;
  // Verify param: text; type: string_byref_const
  DCHECK(text);
  if (!text)
    return;

  // Execute
  CefMenuButtonCppToC::Get(reinterpret_cast<cef_menu_button_t*>(self))->SetText(
      CefString(text));
}

cef_string_userfree_t CEF_CALLBACK menu_button_get_text(
    struct _cef_label_button_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

  // Execute
  CefString _retval = CefMenuButtonCppToC::Get(
      reinterpret_cast<cef_menu_button_t*>(self))->GetText();

  // Return type: string
  return _retval.DetachToUserFree();
}

void CEF_CALLBACK menu_button_set_image(struct _cef_label_button_t* self,
    cef_button_state_t button_state, cef_image_t* image) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;
  // Unverified params: image

  // Execute
  CefMenuButtonCppToC::Get(reinterpret_cast<cef_menu_button_t*>(
      self))->SetImage(
      button_state,
      CefImageCppToC::Unwrap(image));
}

cef_image_t* CEF_CALLBACK menu_button_get_image(
    struct _cef_label_button_t* self, cef_button_state_t button_state) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

  // Execute
  CefRefPtr<CefImage> _retval = CefMenuButtonCppToC::Get(
      reinterpret_cast<cef_menu_button_t*>(self))->GetImage(
      button_state);

  // Return type: refptr_same
  return CefImageCppToC::Wrap(_retval);
}

void CEF_CALLBACK menu_button_set_text_color(struct _cef_label_button_t* self,
    cef_button_state_t for_state, cef_color_t color) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;

  // Execute
  CefMenuButtonCppToC::Get(reinterpret_cast<cef_menu_button_t*>(
      self))->SetTextColor(
      for_state,
      color);
}

void CEF_CALLBACK menu_button_set_enabled_text_colors(
    struct _cef_label_button_t* self, cef_color_t color) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;

  // Execute
  CefMenuButtonCppToC::Get(reinterpret_cast<cef_menu_button_t*>(
      self))->SetEnabledTextColors(
      color);
}

void CEF_CALLBACK menu_button_set_font_list(struct _cef_label_button_t* self,
    const cef_string_t* font_list) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;
  // Verify param: font_list; type: string_byref_const
  DCHECK(font_list);
  if (!font_list)
    return;

  // Execute
  CefMenuButtonCppToC::Get(reinterpret_cast<cef_menu_button_t*>(
      self))->SetFontList(
      CefString(font_list));
}

void CEF_CALLBACK menu_button_set_horizontal_alignment(
    struct _cef_label_button_t* self, cef_horizontal_alignment_t alignment) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;

  // Execute
  CefMenuButtonCppToC::Get(reinterpret_cast<cef_menu_button_t*>(
      self))->SetHorizontalAlignment(
      alignment);
}

void CEF_CALLBACK menu_button_set_minimum_size(struct _cef_label_button_t* self,
    const cef_size_t* size) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;
  // Verify param: size; type: simple_byref_const
  DCHECK(size);
  if (!size)
    return;

  // Translate param: size; type: simple_byref_const
  CefSize sizeVal = size?*size:CefSize();

  // Execute
  CefMenuButtonCppToC::Get(reinterpret_cast<cef_menu_button_t*>(
      self))->SetMinimumSize(
      sizeVal);
}

void CEF_CALLBACK menu_button_set_maximum_size(struct _cef_label_button_t* self,
    const cef_size_t* size) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;
  // Verify param: size; type: simple_byref_const
  DCHECK(size);
  if (!size)
    return;

  // Translate param: size; type: simple_byref_const
  CefSize sizeVal = size?*size:CefSize();

  // Execute
  CefMenuButtonCppToC::Get(reinterpret_cast<cef_menu_button_t*>(
      self))->SetMaximumSize(
      sizeVal);
}

cef_label_button_t* CEF_CALLBACK menu_button_as_label_button(
    struct _cef_button_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

  // Execute
  CefRefPtr<CefLabelButton> _retval = CefMenuButtonCppToC::Get(
      reinterpret_cast<cef_menu_button_t*>(self))->AsLabelButton();

  // Return type: refptr_same
  return
  //
    // Get length of file
    //

    ifs.seekg (0, ios::end);
    _length = ifs.tellg();
    ifs.seekg (0, ios::beg);
    
    //
    // Allocate memory
    //

    _buffer = new char [_length];
    
    //
    // Read the entire file
    //

    ifs.read (_buffer, _length);
    ifs.close();
}


MMIFStream::~MMIFStream ()
{
    delete [] _buffer;
}


bool
MMIFStream::read (char c[/*n*/], int n)
{
    if ((_pos < 0 || _pos >= _length) && n != 0)
	throw IEX_NAMESPACE::InputExc ("Unexpected end of file.");
        
    Int64 n2 = n;
    bool retVal = true;

    if (_length - _pos <= n2)
    {
        n2 = _length - _pos;
        retVal = false;
    }

    memcpy (c, &(_buffer[_pos]), n2);
    _pos += n2;
    return retVal;
}


char*
MMIFStream::readMemoryMapped (int n)
{
    if (_pos < 0 || _pos >= _length)
	throw IEX_NAMESPACE::InputExc ("Unexpected end of file.");
       
    if (_pos + n > _length)
        throw IEX_NAMESPACE::InputExc ("Reading past end of file.");    

    char* retVal = &(_buffer[_pos]);
    _pos += n;
    return retVal;
}


void
writeReadScanLines (const char fileName[],
		    int width,
		    int height,
		    const Array2D<Rgba> &p1)
{
    //
    // Save a scanline-based RGBA image, but instead of
    // letting the RgbaOutputFile object open the file,
    // make the RgbaOutputFile object use an existing
    // StdOFStream.  Read the image back, using an
    // existing StdIFStream, and compare the pixels
    // with the original data.  Then read the image
    // back a second time using a memory-mapped
    // MMIFStream (see above).
    //

    cout << "scan-line based file:" << endl;

    Header header (width, height);

    {
        cout << "writing";
	remove (fileName);
	std::ofstream os (fileName, ios_base::binary);
	StdOFStream ofs (os, fileName);
	RgbaOutputFile out (ofs, header, WRITE_RGBA);
	out.setFrameBuffer (&p1[0][0], 1, width);
	out.writePixels (height);
    }

    {
        cout << ", reading";
	std::ifstream is (fileName, ios_base::binary);
	StdIFStream ifs (is, fileName);
	RgbaInputFile in (ifs);

	const Box2i &dw = in.dataWindow();
	int w = dw.max.x - dw.min.x + 1;
	int h = dw.max.y - dw.min.y + 1;
	int dx = dw.min.x;
	int dy = dw.min.y;

	Array2D<Rgba> p2 (h, w);
	in.setFrameBuffer (&p2[-dy][-dx], 1, w);
	in.readPixels (dw.min.y, dw.max.y);

        cout << ", comparing";
	for (int y = 0; y < h; ++y)
	{
	    for (int x = 0; x < w; ++x)
	    {
		assert (p2[y][x].r == p1[y][x].r);
		assert (p2[y][x].g == p1[y][x].g);
		assert (p2[y][x].b == p1[y][x].b);
		assert (p2[y][x].a == p1[y][x].a);
	    }
	}
    }
    
    {
        cout << ", reading (memory-mapped)";
	MMIFStream ifs (fileName);
	RgbaInputFile in (ifs);

	const Box2i &dw = in.dataWindow();
	int w = dw.max.x - dw.min.x + 1;
	int h = dw.max.y - dw.min.y + 1;
	int dx = dw.min.x;
	int dy = dw.min.y;

	Array2D<Rgba> p2 (h, w);
	in.setFrameBuffer (&p2[-dy][-dx], 1, w);
	in.readPixels (dw.min.y, dw.max.y);

        cout << ", comparing";
	for (int y = 0; y < h; ++y)
	{
	    for (int x = 0; x < w; ++x)
	    {
		assert (p2[y][x].r == p1[y][x].r);
		assert (p2[y][x].g == p1[y][x].g);
		assert (p2[y][x].b == p1[y][x].b);
		assert (p2[y][x].a == p1[y][x].a);
	    }
	}
    }
    
    cout << endl;

    remove (fileName);
}
void
writeReadMultiPart (const char fileName[],
                    int width,
                    int height,
                    const Array2D<Rgba> &p1)
{
    //
    // Save a two scanline parts in an image, but instead of
    // letting the MultiPartOutputFile object open the file,
    // make the MultiPartOutputFile object use an existing
    // StdOFStream.  Read the image back, using an
    // existing StdIFStream, and compare the pixels
    // with the original data.  Then read the image
    // back a second time using a memory-mapped
    // MMIFStream (see above).
    //
                        
    cout << "scan-line based mulitpart file:" << endl;
                        
    vector<Header> headers(2);
    headers[0] = Header(width, height);
    headers[0].setName("part1");
    headers[0].channels().insert("R",Channel());
    headers[0].channels().insert("G",Channel());
    headers[0].channels().insert("B",Channel());
    headers[0].channels().insert("A",Channel());
    headers[0].setType(SCANLINEIMAGE);
    
    headers[1]=headers[0];
    headers[1].setName("part2");
    
    
    {
        cout << "writing";
        remove (fileName);
        std::ofstream os (fileName, ios_base::binary);
        StdOFStream ofs (os, fileName);
        MultiPartOutputFile out (ofs, &headers[0],2);
        FrameBuffer f;
        f.insert("R",Slice(HALF,(char *) &p1[0][0].r,sizeof(Rgba),width*sizeof(Rgba)));
        f.insert("G",Slice(HALF,(char *) &p1[0][0].g,sizeof(Rgba),width*sizeof(Rgba)));
        f.insert("B",Slice(HALF,(char *) &p1[0][0].b,sizeof(Rgba),width*sizeof(Rgba)));
        f.insert("A",Slice(HALF,(char *) &p1[0][0].a,sizeof(Rgba),width*sizeof(Rgba)));
        
        for(int i=0;i<2;i++)
        {
            OutputPart p(out,i);
            p.setFrameBuffer (f);
            p.writePixels (height);
        }
    }
                        
    {
        cout << ", reading";
        std::ifstream is (fileName, ios_base::binary);
        StdIFStream ifs (is, fileName);
        MultiPartInputFile in (ifs);
        
        assert(in.parts() == 2);
        
        assert(in.header(0).dataWindow()==in.header(1).dataWindow());
        
        const Box2i &dw = in.header(0).dataWindow();
        int w = dw.max.x - dw.min.x + 1;
        int h = dw.max.y - dw.min.y + 1;
        int dx = dw.min.x;
        int dy = dw.min.y;
        
        Array2D<Rgba> p2 (h, w);
        FrameBuffer f;
        f.insert("R",Slice(HALF,(char *) &p2[-dy][-dx].r,sizeof(Rgba),w*sizeof(Rgba)));
        f.insert("G",Slice(HALF,(char *) &p2[-dy][-dx].g,sizeof(Rgba),w*sizeof(Rgba)));
        f.insert("B",Slice(HALF,(char *) &p2[-dy][-dx].b,sizeof(Rgba),w*sizeof(Rgba)));
        f.insert("A",Slice(HALF,(char *) &p2[-dy][-dx].a,sizeof(Rgba),w*sizeof(Rgba)));
        
        for(int part=0;part<2;part++)
        {
            InputPart p(in,part);
            p.setFrameBuffer(f);
            p.readPixels (dw.min.y, dw.max.y);
                            
            cout << ", comparing pt " << part;
            for (int y = 0; y < h; ++y)
            {
                for (int x = 0; x < w; ++x)
                {
                    assert (p2[y][x].r == p1[y][x].r);
                    assert (p2[y][x].g == p1[y][x].g);
                    assert (p2[y][x].b == p1[y][x].b);
                    assert (p2[y][x].a == p1[y][x].a);
                }
            }
        }
    }
    
    {
        cout << ", reading (memory-mapped)";
        MMIFStream ifs (fileName);
        MultiPartInputFile in (ifs);
        
        assert(in.parts() == 2);
        
        assert(in.header(0).dataWindow()==in.header(1).dataWindow());
        
        
        const Box2i &dw = in.header(0).dataWindow();
        int w = dw.max.x - dw.min.x + 1;
        int h = dw.max.y - dw.min.y + 1;
        int dx = dw.min.x;
        int dy = dw.min.y;
        
        Array2D<Rgba> p2 (h, w);
        FrameBuffer f;
        f.insert("R",Slice(HALF,(char *) &p2[-dy][-dx].r,sizeof(Rgba),w*sizeof(Rgba)));
        f.insert("G",Slice(HALF,(char *) &p2[-dy][-dx].g,sizeof(Rgba),w*sizeof(Rgba)));
        f.insert("B",Slice(HALF,(char *) &p2[-dy][-dx].b,sizeof(Rgba),w*sizeof(Rgba)));
        f.insert("A",Slice(HALF,(char *) &p2[-dy][-dx].a,sizeof(Rgba),w*sizeof(Rgba)));
        
        for(int part=0;part<2;part++)
        {
            InputPart p(in,part);
            p.setFrameBuffer(f);
            p.readPixels (dw.min.y, dw.max.y);
            
            cout << ", comparing pt " << part;
            for (int y = 0; y < h; ++y)
            {
                for (int x = 0; x < w; ++x)
                {
                    assert (p2[y][x].r == p1[y][x].r);
                    assert (p2[y][x].g == p1[y][x].g);
                    assert (p2[y][x].b == p1[y][x].b);
                    assert (p2[y][x].a == p1[y][x].a);
                }
            }
        }
    }
    
    cout << endl;
                        
    remove (fileName);
}
                    


void
writeReadTiles (const char fileName[],
		int width,
		int height,
		const Array2D<Rgba> &p1)
{
    //
    // Save a tiled RGBA image, but instead of letting
    // the TiledRgbaOutputFile object open the file, make
    // it use an existing StdOFStream.  Read 
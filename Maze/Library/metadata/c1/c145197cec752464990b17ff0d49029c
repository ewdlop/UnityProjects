ng.Design.ToolboxItemCollection GetToolboxItems(string category);
        System.Drawing.Design.ToolboxItemCollection GetToolboxItems(string category, System.ComponentModel.Design.IDesignerHost host);
        bool IsSupported(object serializedObject, System.Collections.ICollection filterAttributes);
        bool IsSupported(object serializedObject, System.ComponentModel.Design.IDesignerHost host);
        bool IsToolboxItem(object serializedObject);
        bool IsToolboxItem(object serializedObject, System.ComponentModel.Design.IDesignerHost host);
        void Refresh();
        void RemoveCreator(string format);
        void RemoveCreator(string format, System.ComponentModel.Design.IDesignerHost host);
        void RemoveToolboxItem(System.Drawing.Design.ToolboxItem toolboxItem);
        void RemoveToolboxItem(System.Drawing.Design.ToolboxItem toolboxItem, string category);
        void SelectedToolboxItemUsed();
        object SerializeToolboxItem(System.Drawing.Design.ToolboxItem toolboxItem);
        bool SetCursor();
        void SetSelectedToolboxItem(System.Drawing.Design.ToolboxItem toolboxItem);
    }
    public partial interface IToolboxUser
    {
        bool GetToolSupported(System.Drawing.Design.ToolboxItem tool);
        void ToolPicked(System.Drawing.Design.ToolboxItem tool);
    }
    [System.Security.Permissions.PermissionSetAttribute(System.Security.Permissions.SecurityAction.InheritanceDemand, Unrestricted=true)]
    [System.Security.Permissions.PermissionSetAttribute(System.Security.Permissions.SecurityAction.LinkDemand, Unrestricted=true)]
    public partial class PaintValueEventArgs : System.EventArgs
    {
        public PaintValueEventArgs(System.ComponentModel.ITypeDescriptorContext context, object value, System.Drawing.Graphics graphics, System.Drawing.Rectangle bounds) { }
        public System.Drawing.Rectangle Bounds { get { throw null; } }
        public System.ComponentModel.ITypeDescriptorContext Context { get { throw null; } }
        public System.Drawing.Graphics Graphics { get { throw null; } }
        public object Value { get { throw null; } }
    }
    public delegate void PropertyValueUIHandler(System.ComponentModel.ITypeDescriptorContext context, System.ComponentModel.PropertyDescriptor propDesc, System.Collections.ArrayList valueUIItemList);
    [System.Security.Permissions.PermissionSetAttribute(System.Security.Permissions.SecurityAction.InheritanceDemand, Unrestricted=true)]
    [System.Security.Permissions.PermissionSetAttribute(System.Security.Permissions.SecurityAction.LinkDemand, Unrestricted=true)]
    public partial class PropertyValueUIItem
    {
        public PropertyValueUIItem(System.Drawing.Image uiItemImage, System.Drawing.Design.PropertyValueUIItemInvokeHandler handler, string tooltip) { }
        public virtual System.Drawing.Image Image { get { throw null; } }
        public virtual System.Drawing.Design.PropertyValueUIItemInvokeHandler InvokeHandler { get { throw null; } }
        public virtual string ToolTip { get { throw null; } }
        public virtual void Reset() { }
    }
    public delegate void PropertyValueUIItemInvokeHandler(System.ComponentModel.ITypeDescriptorContext context, System.ComponentModel.PropertyDescriptor descriptor, System.Drawing.Design.PropertyValueUIItem invokedItem);
    [System.Security.Permissions.PermissionSetAttribute(System.Security.Permissions.SecurityAction.InheritanceDemand, Unrestricted=true)]
    [System.Security.Permissions.PermissionSetAttribute(System.Security.Permissions.SecurityAction.LinkDemand, Unrestricted=true)]
    public partial class ToolboxComponentsCreatedEventArgs : System.EventArgs
    {
        public ToolboxComponentsCreatedEventArgs(System.ComponentModel.IComponent[] components) { }
        public System.ComponentModel.IComponent[] Components { get { throw null; } }
    }
    public delegate void ToolboxComponentsCreatedEventHandler(object sender, System.Drawing.Design.ToolboxComponentsCreatedEventArgs e);
    [System.Security.Permissions.PermissionSetAttribute(System.Security.Permissions.SecurityAction.InheritanceDemand, Unrestricted=true)]
    [System.Security.Permissions.PermissionSetAttribute(System.Security.Permissions.SecurityAction.LinkDemand, Unrestricted=true)]
    public partial class ToolboxComponentsCreatingEventArgs : System.EventArgs
    {
        public ToolboxComponentsCreatingEventArgs(System.ComponentModel.Design.IDesignerHost host) { }
        public System.ComponentModel.Design.IDesignerHost DesignerHost { get { throw null; } }
    }
    public delegate void ToolboxComponentsCreatingEventHandler(object sender, System.Drawing.Design.ToolboxComponentsCreatingEventArgs e);
    [System.MonoTODOAttribute("Implementation is incomplete.")]
    [System.Security.Permissions.PermissionSetAttribute(System.Security.Permissions.SecurityAction.InheritanceDemand, Unrestricted=true)]
    [System.Security.Permissions.PermissionSetAttribute(System.Security.Permissions.SecurityAction.LinkDemand, Unrestricted=true)]
    [System.SerializableAttribute]
    public partial class ToolboxItem : System.Runtime.Serialization.ISerializable
    {
        public ToolboxItem() { }
        public ToolboxItem(System.Type toolType) { }
        public System.Reflection.AssemblyName AssemblyName { get { throw null; } set { } }
        public System.Drawing.Bitmap Bitmap { get { throw null; } set { } }
        public string Company { get { throw null; } set { } }
        public virtual string ComponentType { get { throw null; } }
        public System.Reflection.AssemblyName[] DependentAssemblies { get { throw null; } set { } }
        public string Description { get { throw null; } set { } }
        public string DisplayName { get { throw null; } set { } }
        public System.Collections.ICollection Filter { get { throw null; } set { } }
        public bool IsTransient { get { throw null; } set { } }
        public virtual bool Locked { get { throw null; } }
        public System.Collections.IDictionary Properties { get { throw null; } }
        public string TypeName { get { throw null; } set { } }
        public virtual string Version { get { throw null; } }
        public event System.Drawing.Design.ToolboxComponentsCreatedEventHandler ComponentsCreated { add { } remove { } }
        public event System.Drawing.Design.ToolboxComponentsCreatingEventHandler ComponentsCreating { add { } remove { } }
        protected void CheckUnlocked() { }
        public System.ComponentModel.IComponent[] CreateComponents() { throw null; }
        public System.ComponentModel.IComponent[] CreateComponents(System.ComponentModel.Design.IDesignerHost host) { throw null; }
        public System.ComponentModel.IComponent[] CreateComponents(System.ComponentModel.Design.IDesignerHost host, System.Collections.IDictionary defaultValues) { throw null; }
        protected virtual System.ComponentModel.IComponent[] CreateComponentsCore(System.ComponentModel.Design.IDesignerHost host) { throw null; }
        protected virtual System.ComponentModel.IComponent[] CreateComponentsCore(System.ComponentModel.Design.IDesignerHost host, System.Collections.IDictionary defaultValues) { throw null; }
        protected virtual void Deserialize(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
        public override bool Equals(object obj) { throw null; }
        protected virtual object FilterPropertyValue(string propertyName, object value) { throw null; }
        public override int GetHashCode() { throw null; }
        public System.Type GetType(System.ComponentModel.Design.IDesignerHost host) { throw null; }
        protected virtual System.Type GetType(System.ComponentModel.Design.IDesignerHost host, System.Reflection.AssemblyName assemblyName, string typeName, bool reference) { throw null; }
        public virtual void Initialize(System.Type type) { }
        public virtual void Lock() { }
        protected virtual void OnComponentsCreated(System.Drawing.Design.ToolboxComponentsCreatedEventArgs args) { }
        protected virtual void OnComponentsCreating(System.Drawing.Design.ToolboxComponentsCreatingEventArgs args) { }
        protected virtual void Serialize(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
        void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
        public override string ToString() { throw null; }
        protected void ValidatePropertyType(string propertyName, object value, System.Type expectedType, bool allowNull) { }
        protected virtual object ValidatePropertyValue(string propertyName, object value) { throw null; }
    }
    [System.Security.Permissions.PermissionSetAttribute(System.Security.Permissions.SecurityAction.LinkDemand, Unrestricted=true)]
    public sealed partial class ToolboxItemCollection : System.Collections.ReadOnlyCollectionBase
    {
        public ToolboxItemCollection(System.Drawing.Design.ToolboxItemCollection value) { }
        public ToolboxItemCollection(System.Drawing.Design.ToolboxItem[] value) { }
        public System.Drawing.Design.ToolboxItem this[int index] { get { throw null; } }
        public bool Contains(System.Drawing.Design.ToolboxItem value) { throw null; }
        public void CopyTo(System.Drawing.Design.ToolboxItem[] array, int index) { }
        public int IndexOf(System.Drawing.Design.ToolboxItem value) { throw null; }
    }
    public delegate System.Drawing.Design.ToolboxItem ToolboxItemCreatorCallback(object serializedObject, string format);
    [System.Security.Permissions.PermissionSetAttribute(System.Security.Permissions.SecurityAction.InheritanceDemand, Unrestricted=true)]
    [System.Security.Permissions.PermissionSetAttribute(System.Security.Permissions.SecurityAction.LinkDemand, Unrestricted=true)]
    public partial class UITypeEditor
    {
        public UITypeEditor() { }
        public virtual bool IsDropDownResizable { get { throw null; } }
        public virtual object EditValue(System.ComponentModel.ITypeDescriptorContext context, System.IServiceProvider provider, object value) { throw null; }
        public object EditValue(System.IServiceProvider provider, object value) { throw null; }
        public System.Drawing.Design.UITypeEditorEditStyle GetEditStyle() { throw null; }
        public virtual System.Drawing.Design.UITypeEditorEditStyle GetEditStyle(System.ComponentModel.ITypeDescriptorContext context) { throw null; }
        public bool GetPaintValueSupported() { throw null; }
        public virtual bool GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext context) { throw null; }
        public virtual void PaintValue(System.Drawing.Design.PaintValueEventArgs e) { }
        public void PaintValue(object value, System.Drawing.Graphics canvas, System.Drawing.Rectangle rectangle) { }
    }
    public enum UITypeEditorEditStyle
    {
        DropDown = 3,
        Modal = 2,
        None = 1,
    }
}
namespace System.Drawing.Drawing2D
{
    public sealed partial class AdjustableArrowCap : System.Drawing.Drawing2D.CustomLineCap
    {
        public AdjustableArrowCap(float width, float height) : base (default(System.Drawing.Drawing2D.GraphicsPath), default(System.Drawing.Drawing2D.GraphicsPath)) { }
        public AdjustableArrowCap(float width, float height, bool isFilled) : base (default(System.Drawing.Drawing2D.GraphicsPath), default(System.Drawing.Drawing2D.GraphicsPath)) { }
        public bool Filled { get { throw null; } set { } }
        public float Height { get { throw null; } set { } }
        public float MiddleInset { get { throw null; } set { } }
        public float Width { get { throw null; } set { } }
    }
    public sealed partial class Blend
    {
        public Blend() { }
        public Blend(int count) { }
        public float[] Factors { get { throw null; } set { } }
        public float[] Positions { get { throw null; } set { } }
    }
    public sealed partial class ColorBlend
    {
        public ColorBlend() { }
        public ColorBlend(int count) { }
        public System.Drawing.Color[] Colors { get { throw null; } set { } }
        public float[] Positions { get { throw null; } set { } }
    }
    public enum CombineMode
    {
        Complement = 5,
        Exclude = 4,
        Intersect = 1,
        Replace = 0,
        Union = 2,
        Xor = 3,
    }
    public enum CompositingMode
    {
        SourceCopy = 1,
        SourceOver = 0,
    }
    public enum CompositingQuality
    {
        AssumeLinear = 4,
        Default = 0,
        GammaCorrected = 3,
        HighQuality = 2,
        HighSpeed = 1,
        Invalid = -1,
    }
    public enum CoordinateSpace
    {
        Device = 2,
        Page = 1,
        World = 0,
    }
    public partial class CustomLineCap : System.MarshalByRefObject, System.ICloneable, System.IDisposable
    {
        public CustomLineCap(System.Drawing.Drawing2D.GraphicsPath fillPath, System.Drawing.Drawing2D.GraphicsPath strokePath) { }
        public CustomLineCap(System.Drawing.Drawing2D.GraphicsPath fillPath, System.Drawing.Drawing2D.GraphicsPath strokePath, System.Drawing.Drawing2D.LineCap baseCap) { }
        public CustomLineCap(System.Drawing.Drawing2D.GraphicsPath fillPath, System.Drawing.Drawing2D.GraphicsPath strokePath, System.Drawing.Drawing2D.LineCap baseCap, float baseInset) { }
        public System.Drawing.Drawing2D.LineCap BaseCap { get { throw null; } set { } }
        public float BaseInset { get { throw null; } set { } }
        public System.Drawing.Drawing2D.LineJoin StrokeJoin { get { throw null; } set { } }
        public float WidthScale { get { throw null; } set { } }
        public object Clone() { throw null; }
        public void Dispose() { }
        protected virtual void Dispose(bool disposing) { }
        ~CustomLineCap() { }
        public void GetStrokeCaps(out System.Drawing.Drawing2D.LineCap startCap, out System.Drawing.Drawing2D.LineCap endCap) { startCap = default(System.Drawing.Drawing2D.LineCap); endCap = default(System.Drawing.Drawing2D.LineCap); }
        public void SetStrokeCaps(System.Drawing.Drawing2D.LineCap startCap, System.Drawing.Drawing2D.LineCap endCap) { }
    }
    public enum DashCap
    {
        Flat = 0,
        Round = 2,
        Triangle = 3,
    }
    public enum DashStyle
    {
        Custom = 5,
        Dash = 1,
        DashDot = 3,
        DashDotDot = 4,
        Dot = 2,
        Solid = 0,
    }
    public enum FillMode
    {
        Alternate = 0,
        Winding = 1,
    }
    public enum FlushIntention
    {
        Flush = 0,
        Sync = 1,
    }
    public sealed partial class GraphicsContainer : System.MarshalByRefObject
    {
        internal GraphicsContainer() { }
    }
    public sealed partial class GraphicsPath : System.MarshalByRefObject, System.ICloneable, System.IDisposable
    {
        public GraphicsPath() { }
        public GraphicsPath(System.Drawing.Drawing2D.FillMode fillMode) { }
        public GraphicsPath(System.Drawing.PointF[] pts, byte[] types) { }
        public GraphicsPath(System.Drawing.PointF[] pts, byte[] types, System.Drawing.Drawing2D.FillMode fillMode) { }
        public GraphicsPath(System.Drawing.Point[] pts, byte[] types) { }
        public GraphicsPath(System.Drawing.Point[] pts, byte[] types, System.Drawing.Drawing2D.FillMode fillMode) { }
        public System.Drawing.Drawing2D.FillMode FillMode { get { throw null; } set { } }
        public System.Drawing.Drawing2D.PathData PathData { get { throw null; } }
        public System.Drawing.PointF[] PathPoints { get { throw null; } }
        public byte[] PathTypes { get { throw null; } }
        public int PointCount { get { throw null; } }
        public void AddArc(System.Drawing.Rectangle rect, float start_angle, float sweep_angle) { }
        public void AddArc(System.Drawing.RectangleF rect, float start_angle, float sweep_angle) { }
        public void AddArc(int x, int y, int width, int height, float start_angle, float sweep_angle) { }
        public void AddArc(float x, float y, float width, float height, float start_angle, float sweep_angle) { }
        public void AddBezier(System.Drawing.Point pt1, System.Drawing.Point pt2, System.Drawing.Point pt3, System.Drawing.Point pt4) { }
        public void AddBezier(System.Drawing.PointF pt1, System.Drawing.PointF pt2, System.Drawing.PointF pt3, System.Drawing.PointF pt4) { }
        public void AddBezier(int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4) { }
        public void AddBezier(float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4) { }
        public void AddBeziers(System.Drawing.PointF[] pts) { }
        public void AddBeziers(params System.Drawing.Point[] pts) { }
        public void AddClosedCurve(System.Drawing.PointF[] points) { }
        public void AddClosedCurve(System.Drawing.PointF[] points, float tension) { }
        public void AddClosedCurve(System.Drawing.Point[] points) { }
        public void AddClosedCurve(System.Drawing.Point[] points, float tension) { }
        public void AddCurve(System.Drawing.PointF[] points) { }
        public void AddCurve(System.Drawing.PointF[] points, int offset, int numberOfSegments, float tension) { }
        public void AddCurve(System.Drawing.PointF[] points, float tension) { }
        public void AddCurve(System.Drawing.Point[] points) { }
        public void AddCurve(System.Drawing.Point[] points, int offset, int numberOfSegments, float tension) { }
        public void AddCurve(System.Drawing.Point[] points, float tension) { }
        public void AddEllipse(System.Drawing.Rectangle r) { }
        public void AddEllipse(System.Drawing.RectangleF r) { }
        public void AddEllipse(int x, int y, int width, int height) { }
        public void AddEllipse(float x, float y, float width, float height) { }
        public void AddLine(System.Drawing.Point a, System.Drawing.Point b) { }
        public void AddLine(System.Drawing.PointF a, System.Drawing.PointF b) { }
        public void AddLine(int x1, int y1, int x2, int y2) { }
        public void AddLine(float x1, float y1, float x2, float y2) { }
        public void AddLines(System.Drawing.PointF[] points) { }
        public void AddLines(System.Drawing.Point[] points) { }
        public void AddPath(System.Drawing.Drawing2D.GraphicsPath addingPath, bool connect) { }
        public void AddPie(System.Drawing.Rectangle rect, float startAngle, float sweepAngle) { }
        public void AddPie(int x, int y, int width, int height, float startAngle, float sweepAngle) { }
        public void AddPie(float x, float y, float width, float height, float startAngle, float sweepAngle) { }
        public void AddPolygon(System.Drawing.PointF[] points) { }
        public void AddPolygon(System.Drawing.Point[] points) { }
        public void AddRectangle(System.Drawing.Rectangle rect) { }
        public void AddRectangle(System.Drawing.RectangleF rect) { }
        public void AddRectangles(System.Drawing.RectangleF[] rects) { }
        public void AddRectangles(System.Drawing.Rectangle[] rects) { }
        [System.MonoTODOAttribute("The StringFormat parameter is ignored when using libgdiplus.")]
        public void AddString(string s, System.Drawing.FontFamily family, int style, float emSize, System.Drawing.Point origin, System.Drawing.StringFormat format) { }
        [System.MonoTODOAttribute("The StringFormat parameter is ignored when using libgdiplus.")]
        public void AddString(string s, System.Drawing.FontFamily family, int style, float emSize, System.Drawing.PointF origin, System.Drawing.StringFormat format) { }
        [System.MonoTODOAttribute("The layoutRect and StringFormat parameters are ignored when using libgdiplus.")]
        public void AddString(string s, System.Drawing.FontFamily family, int style, float emSize, System.Drawing.Rectangle layoutRect, System.Drawing.StringFormat format) { }
        [System.MonoTODOAttribute("The layoutRect and StringFormat parameters are ignored when using libgdiplus.")]
        public void AddString(string s, System.Drawing.FontFamily family, int style, float emSize, System.Drawing.RectangleF layoutRect, System.Drawing.StringFormat format) { }
        public void ClearMarkers() { }
        public object Clone() { throw null; }
        public void CloseAllFigures() { }
        public void CloseFigure() { }
        public void Dispose() { }
        ~GraphicsPath() { }
        public void Flatten() { }
        public void Flatten(System.Drawing.Drawing2D.Matrix matrix) { }
        public void Flatten(System.Drawing.Drawing2D.Matrix matrix, float flatness) { }
        public System.Drawing.RectangleF GetBounds() { throw null; }
        public System.Drawing.RectangleF GetBounds(System.Drawing.Drawing2D.Matrix matrix) { throw null; }
        public System.Drawing.RectangleF GetBounds(System.Drawing.Drawing2D.Matrix matrix, System.Drawing.Pen pen) { throw null; }
        public System.Drawing.PointF GetLastPoint() { throw null; }
        public bool IsOutlineVisible(System.Drawing.Point point, System.Drawing.Pen pen) { throw null; }
        public bool IsOutlineVisible(System.Drawing.Point pt, System.Drawing.Pen pen, System.Drawing.Graphics graphics) { throw null; }
        public bool IsOutlineVisible(System.Drawing.PointF point, System.Drawing.Pen pen) { throw null; }
        public bool IsOutlineVisible(System.Drawing.PointF pt, System.Drawing.Pen pen, System.Drawing.Graphics graphics) { throw null; }
        public bool IsOutlineVisible(int x, int y, System.Drawing.Pen pen) { throw null; }
        public bool IsOutlineVisible(int x, int y, System.Drawing.Pen pen, System.Drawing.Graphics graphics) { throw null; }
        public bool IsOutlineVisible(float x, float y, System.Drawing.Pen pen) { throw null; }
        public bool IsOutlineVisible(float x, float y, System.Drawing.Pen pen, System.Drawing.Graphics graphics) { throw null; }
        public bool IsVisible(System.Drawing.Point point) { throw null; }
        public bool IsVisible(System.Drawing.Point pt, System.Drawing.Graphics graphics) { throw null; }
        public bool IsVisible(System.Drawing.PointF point) { throw null; }
        public bool IsVisible(System.Drawing.PointF pt, System.Drawing.Graphics graphics) { throw null; }
        public bool IsVisible(int x, int y) { throw null; }
        public bool IsVisible(int x, int y, System.Drawing.Graphics graphics) { throw null; }
        public bool IsVisible(float x, float y) { throw null; }
        public bool IsVisible(float x, float y, System.Drawing.Graphics graphics) { throw null; }
        public void Reset() { }
        public void Reverse() { }
        public void SetMarkers() { }
        public void StartFigure() { }
        public void Transform(System.Drawing.Drawing2D.Matrix matrix) { }
        [System.MonoTODOAttribute("GdipWarpPath isn't implemented in libgdiplus")]
        public void Warp(System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect) { }
        [System.MonoTODOAttribute("GdipWarpPath isn't implemented in libgdiplus")]
        public void Warp(System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.Drawing2D.Matrix matrix) { }
        [System.MonoTODOAttribute("GdipWarpPath isn't implemented in libgdiplus")]
        public void Warp(System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.Drawing2D.Matrix matrix, System.Drawing.Drawing2D.WarpMode warpMode) { }
        [System.MonoTODOAttribute("GdipWarpPath isn't implemented in libgdiplus")]
        public void Warp(System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.Drawing2D.Matrix matrix, System.Drawing.Drawing2D.WarpMode warpMode, float flatness) { }
        [System.MonoTODOAttribute("GdipWidenPath isn't implemented in libgdiplus")]
        public void Widen(System.Drawing.Pen pen) { }
        [System.MonoTODOAttribute("GdipWidenPath isn't implemented in libgdiplus")]
        public void Widen(System.Drawing.Pen pen, System.Drawing.Drawing2D.Matrix matrix) { }
        [System.MonoTODOAttribute("GdipWidenPath isn't implemented in libgdiplus")]
        public void Widen(System.Drawing.Pen pen, System.Drawing.Drawing2D.Matrix matrix, float flatness) { }
    }
    public sealed partial class GraphicsPathIterator : System.MarshalByRefObject, System.IDisposable
    {
        public GraphicsPathIterator(System.Drawing.Drawing2D.GraphicsPath path) { }
        public int Count { get { throw null; } }
        public int SubpathCount { get { throw null; } }
        public int CopyData(ref System.Drawing.PointF[] points, ref byte[] types, int startIndex, int endIndex) { throw null; }
        public void Dispose() { }
        public int Enumerate(ref System.Drawing.PointF[] points, ref byte[] types) { throw null; }
        ~GraphicsPathIterator() { }
        public bool HasCurve() { throw null; }
        public int NextMarker(System.Drawing.Drawing2D.GraphicsPath path) { throw null; }
        public int NextMarker(out int startIndex, out int endIndex) { startIndex = default(int); endIndex = default(int); throw null; }
        public int NextPathType(out byte pathType, out int startIndex, out int endIndex) { pathType = default(byte); startIndex = default(int); endIndex = default(int); throw null; }
        public int NextSubpath(System.Drawing.Drawing2D.GraphicsPath path, out bool isClosed) { isClosed = default(bool); throw null; }
        public int NextSubpath(out int startIndex, out int endIndex, out bool isClosed) { startIndex = default(int); endIndex = default(int); isClosed = default(bool); throw null; }
        public void Rewind() { }
    }
    public sealed partial class GraphicsState : System.MarshalByRefObject
    {
        internal GraphicsState() { }
    }
    public sealed partial class HatchBrush : System.Drawing.Brush
    {
        public HatchBrush(System.Drawing.Drawing2D.HatchStyle hatchStyle, System.Drawing.Color foreColor) { }
        public HatchBrush(System.Drawing.Drawing2D.HatchStyle hatchStyle, System.Drawing.Color foreColor, System.Drawing.Color backColor) { }
        public System.Drawing.Color BackgroundColor { get { throw null; } }
        public System.Drawing.Color ForegroundColor { get { throw null; } }
        public System.Drawing.Drawing2D.HatchStyle HatchStyle { get { throw null; } }
        public override object Clone() { throw null; }
    }
    public enum HatchStyle
    {
        BackwardDiagonal = 3,
        Cross = 4,
        DarkDownwardDiagonal = 20,
        DarkHorizontal = 29,
        DarkUpwardDiagonal = 21,
        DarkVertical = 28,
        DashedDownwardDiagonal = 30,
        DashedHorizontal = 32,
        DashedUpwardDiagonal = 31,
        DashedVertical = 33,
        DiagonalBrick = 38,
        DiagonalCross = 5,
        Divot = 42,
        DottedDiamond = 44,
        DottedGrid = 43,
        ForwardDiagonal = 2,
        Horizontal = 0,
        HorizontalBrick = 39,
        LargeCheckerBoard = 50,
        LargeConfetti = 35,
        LargeGrid = 4,
        LightDownwardDiagonal = 18,
        LightHorizontal = 25,
        LightUpwardDiagonal = 19,
        LightVertical = 24,
        Max = 4,
        Min = 0,
        NarrowHorizontal = 27,
        NarrowVertical = 26,
        OutlinedDiamond = 51,
        Percent05 = 6,
        Percent10 = 7,
        Percent20 = 8,
        Percent25 = 9,
        Percent30 = 10,
        Percent40 = 11,
        Percent50 = 12,
        Percent60 = 13,
        Percent70 = 14,
        Percent75 = 15,
        Percent80 = 16,
        Percent90 = 17,
        Plaid = 41,
        Shingle = 45,
        SmallCheckerBoard = 49,
        SmallConfetti = 34,
        SmallGrid = 48,
        SolidDiamond = 52,
        Sphere = 47,
        Trellis = 46,
        Vertical = 1,
        Wave = 37,
        Weave = 40,
        WideDownwardDiagonal = 22,
        WideUpwardDiagonal = 23,
        ZigZag = 36,
    }
    public enum InterpolationMode
    {
        Bicubic = 4,
        Bilinear = 3,
        Default = 0,
        High = 2,
        HighQualityBicubic = 7,
        HighQualityBilinear = 6,
        Invalid = -1,
        Low = 1,
        NearestNeighbor = 5,
    }
    public sealed partial class LinearGradientBrush : System.Drawing.Brush
    {
        public LinearGradientBrush(System.Drawing.Point point1, System.Drawing.Point point2, System.Drawing.Color color1, System.Drawing.Color color2) { }
        public LinearGradientBrush(System.Drawing.PointF point1, System.Drawing.PointF point2, System.Drawing.Color color1, System.Drawing.Color color2) { }
        public LinearGradientBrush(System.Drawing.Rectangle rect, System.Drawing.Color color1, System.Drawing.Color color2, System.Drawing.Drawing2D.LinearGradientMode linearGradientMode) { }
        public LinearGradientBrush(System.Drawing.Rectangle rect, System.Drawing.Color color1, System.Drawing.Color color2, float angle) { }
        public LinearGradientBrush(System.Drawing.Rectangle rect, System.Drawing.Color color1, System.Drawing.Color color2, float angle, bool isAngleScaleable) { }
        public LinearGradientBrush(System.Drawing.RectangleF rect, System.Drawing.Color color1, System.Drawing.Color color2, System.Drawing.Drawing2D.LinearGradientMode linearGradientMode) { }
        public LinearGradientBrush(System.Drawing.RectangleF rect, System.Drawing.Color color1, System.Drawing.Color color2, float angle) { }
        public LinearGradientBrush(System.Drawing.RectangleF rect, System.Drawing.Color color1, System.Drawing.Color color2, float angle, bool isAngleScaleable) { }
        public System.Drawing.Drawing2D.Blend Blend { get { throw null; } set { } }
        [System.MonoTODOAttribute("The GammaCorrection value is ignored when using libgdiplus.")]
        public bool GammaCorrection { get { throw null; } set { } }
        public System.Drawing.Drawing2D.ColorBlend InterpolationColors { get { throw null; } set { } }
        public System.Drawing.Color[] LinearColors { get { throw null; } set { } }
        public System.Drawing.RectangleF Rectangle { get { throw null; } }
        public System.Drawing.Drawing2D.Matrix Transform { get { throw null; } set { } }
        public System.Drawing.Drawing2D.WrapMode WrapMode { get { throw null; } set { } }
        public override object Clone() { throw null; }
        public void MultiplyTransform(System.Drawing.Drawing2D.Matrix matrix) { }
        public void MultiplyTransform(System.Drawing.Drawing2D.Matrix matrix, System.Drawing.Drawing2D.MatrixOrder order) { }
        public void ResetTransform() { }
        public void RotateTransform(float angle) { }
        public void RotateTransform(float angle, System.Drawing.Drawing2D.MatrixOrder order) { }
        public void ScaleTransform(float sx, float sy) { }
        public void ScaleTransform(float sx, float sy, System.Drawing.Drawing2D.MatrixOrder order) { }
        public void SetBlendTriangularShape(float focus) { }
        public void SetBlendTriangularShape(float focus, float scale) { }
        public void SetSigmaBellShape(float focus) { }
        public void SetSigmaBellShape(float focus, float scale) { }
        public void TranslateTransform(float dx, float dy) { }
        public void TranslateTransform(float dx, float dy, System.Drawing.Drawing2D.MatrixOrder order) { }
    }
    public enum LinearGradientMode
    {
        BackwardDiagonal = 3,
        ForwardDiagonal = 2,
        Horizontal = 0,
        Vertical = 1,
    }
    public enum LineCap
    {
        AnchorMask = 240,
        ArrowAnchor = 20,
        Custom = 255,
        DiamondAnchor = 19,
        Flat = 0,
        NoAnchor = 16,
        Round = 2,
        RoundAnchor = 18,
        Square = 1,
        SquareAnchor = 17,
        Triangle = 3,
    }
    public enum LineJoin
    {
        Bevel = 1,
        Miter = 0,
        MiterClipped = 3,
        Round = 2,
    }
    public sealed partial class Matrix : System.MarshalByRefObject, System.IDisposable
    {
        public Matrix() { }
        public Matrix(System.Drawing.Rectangle rect, System.Drawing.Point[] plgpts) { }
        public Matrix(System.Drawing.RectangleF rect, System.Drawing.PointF[] plgpts) { }
        public Matrix(float m11, float m12, float m21, float m22, float dx, float dy) { }
        public float[] Elements { get { throw null; } }
        public bool IsIdentity { get { throw null; } }
        public bool IsInvertible { get { throw null; } }
        public float OffsetX { get { throw null; } }
        public float OffsetY { get { throw null; } }
        public System.Drawing.Drawing2D.Matrix Clone() { throw null; }
        public void Dispose() { }
        public override bool Equals(object obj) { throw null; }
        ~Matrix() { }
        public override int GetHashCode() { throw null; }
        public void Invert() { }
        public void Multiply(System.Drawing.Drawing2D.Matrix matrix) { }
        public void Multiply(System.Drawing.Drawing2D.Matrix matrix, System.Drawing.Drawing2D.MatrixOrder order) { }
        public void Reset() { }
        public void Rotate(float angle) { }
        public void Rotate(float angle, System.Drawing.Drawing2D.MatrixOrder order) { }
        public void RotateAt(float angle, System.Drawing.PointF point) { }
        public void RotateAt(float angle, System.Drawing.PointF point, System.Drawing.Drawing2D.MatrixOrder order) { }
        public void Scale(float scaleX, float scaleY) { }
        public void Scale(float scaleX, float scaleY, System.Drawing.Drawing2D.MatrixOrder order) { }
        public void Shear(float shearX, float shearY) { }
        public void Shear(float shearX, float shearY, System.Drawing.Drawing2D.MatrixOrder order) { }
        public void TransformPoints(System.Drawing.PointF[] pts) { }
        public void TransformPoints(System.Drawing.Point[] pts) { }
        public void TransformVectors(System.Drawing.PointF[] pts) { }
        public void TransformVectors(System.Drawing.Point[] pts) { }
        public void Translate(float offsetX, float offsetY) { }
        public void Translate(float offsetX, float offsetY, System.Drawing.Drawing2D.MatrixOrder order) { }
        public void VectorTransformPoints(System.Drawing.Point[] pts) { }
    }
    public enum MatrixOrder
    {
        Append = 1,
        Prepend = 0,
    }
    public sealed partial class PathData
    {
        public PathData() { }
        public System.Drawing.PointF[] Points { get { throw null; } set { } }
        public byte[] Types { get { throw null; } set { } }
    }
    [System.MonoTODOAttribute("libgdiplus/cairo doesn't support path gradients - unless it can be mapped to a radial gradient")]
    public sealed partial class PathGradientBrush : System.Drawing.Brush
    {
        public PathGradientBrush(System.Drawing.Drawing2D.GraphicsPath path) { }
        public PathGradientBrush(System.Drawing.PointF[] points) { }
        public PathGradientBrush(System.Drawing.PointF[] points, System.Drawing.Drawing2D.WrapMode wrapMode) { }
        public PathGradientBrush(System.Drawing.Point[] points) { }
        public PathGradientBrush(System.Drawing.Point[] points, System.Drawing.Drawing2D.WrapMode wrapMode) { }
        public System.Drawing.Drawing2D.Blend Blend { get { throw null; } set { } }
        public System.Drawing.Color CenterColor { get { throw null; } set { } }
        public System.Drawing.PointF CenterPoint { get { throw null; } set { } }
        public System.Drawing.PointF FocusScales { get { throw null; } set { } }
        public System.Drawing.Drawing2D.ColorBlend InterpolationColors { get { throw null; } set { } }
        public System.Drawing.RectangleF Rectangle { get { throw null; } }
        public System.Drawing.Color[] SurroundColors { get { throw null; } set { } }
        public System.Drawing.Drawing2D.Matrix Transform { get { throw null; } set { } }
        public System.Drawing.Drawing2D.WrapMode WrapMode { get { throw null; } set { } }
        public override object Clone() { throw null; }
        public void MultiplyTransform(System.Drawing.Drawing2D.Matrix matrix) { }
        public void MultiplyTransform(System.Drawing.Drawing2D.Matrix matrix, System.Drawing.Drawing2D.MatrixOrder order) { }
        public void ResetTransform() { }
        public void RotateTransform(float angle) { }
        public void RotateTransform(float angle, System.Drawing.Drawing2D.MatrixOrder order) { }
        public void ScaleTransform(float sx, float sy) { }
        public void ScaleTransform(float sx, float sy, System.Drawing.Drawing2D.MatrixOrder order) { }
        public void SetBlendTriangularShape(float focus) { }
        public void SetBlendTriangularShape(float focus, float scale) { }
        public void SetSigmaBellShape(float focus) { }
        public void SetSigmaBellShape(float focus, float scale) { }
        public void TranslateTransform(float dx, float dy) { }
        public void TranslateTransform(float dx, float dy, System.Drawing.Drawing2D.MatrixOrder order) { }
    }
    public enum PathPointType
    {
        Bezier = 3,
        Bezier3 = 3,
        CloseSubpath = 128,
        DashMode = 16,
        Line = 1,
        PathMarker = 32,
        PathTypeMask = 7,
        Start = 0,
    }
    public enum PenAlignment
    {
        Center = 0,
        Inset = 1,
        Left = 3,
        Outset = 2,
        Right = 4,
    }
    public enum PenType
    {
        HatchFill = 1,
        LinearGradient = 4,
        PathGradient = 3,
        SolidColor = 0,
        TextureFill = 2,
    
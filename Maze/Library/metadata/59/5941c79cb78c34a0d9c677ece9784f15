mantic::Enum)semantic) == id)
		{
			break;
		}
	}
	if (semantic == RenderVertexSemantic::NUM_SEMANTICS)
	{
		semantic = RenderVertexSemantic::CUSTOM;
	}

	NvParameterized::Handle handle(*mParams);
	mParams->getParameterHandle("bufferFormats", handle);

	mParams->getArraySize(handle, index);

	mParams->resizeArray(handle, index + 1);

	NvParameterized::Handle elementHandle(*mParams);
	handle.getChildHandle(index, elementHandle);
	NvParameterized::Handle subElementHandle(*mParams);
	elementHandle.getChildHandle(mParams, "name", subElementHandle);
	mParams->setParamString(subElementHandle, name);
	elementHandle.getChildHandle(mParams, "semantic", subElementHandle);
	mParams->setParamI32(subElementHandle, semantic);
	elementHandle.getChildHandle(mParams, "id", subElementHandle);
	mParams->setParamU32(subElementHandle, (uint32_t)id);
	elementHandle.getChildHandle(mParams, "format", subElementHandle);
	mParams->setParamU32(subElementHandle, (uint32_t)RenderDataFormat::UNSPECIFIED);
	elementHandle.getChildHandle(mParams, "access", subElementHandle);
	mParams->setParamU32(subElementHandle, (uint32_t)RenderDataAccess::STATIC);
	elementHandle.getChildHandle(mParams, "serialize", subElementHandle);
	mParams->setParamBool(subElementHandle, true);

	return index;
}

bool ApexVertexFormat::bufferReplaceWithLast(uint32_t index)
{
	PX_ASSERT((int32_t)index < mParams->bufferFormats.arraySizes[0]);
	if ((int32_t)index < mParams->bufferFormats.arraySizes[0])
	{
		ParamArray<VertexFormatParametersNS::BufferFormat_Type> bufferFormats(mParams, "bufferFormats", reinterpret_cast<ParamDynamicArrayStruct*>(&mParams->bufferFormats));
		bufferFormats.replaceWithLast(index);
		return true;
	}

	return false;
}

bool ApexVertexFormat::setBufferFormat(uint32_t index, RenderDataFormat::Enum format)
{
	if (index < getBufferCount())
	{
		mParams->bufferFormats.buf[index].format = format;
		return true;
	}

	return false;
}

bool ApexVertexFormat::setBufferAccess(uint32_t index, RenderDataAccess::Enum access)
{
	if (index < getBufferCount())
	{
		mParams->bufferFormats.buf[index].access = access;
		return true;
	}

	return false;
}

bool ApexVertexFormat::setBufferSerialize(uint32_t index, bool serialize)
{
	if (index < getBufferCount())
	{
		mParams->bufferFormats.buf[index].serialize = serialize;
		return true;
	}

	return false;
}

const char* ApexVertexFormat::getBufferName(uint32_t index) const
{
	return index < getBufferCount() ? (const char*)mParams->bufferFormats.buf[index].name : NULL;
}

RenderVertexSemantic::Enum ApexVertexFormat::getBufferSemantic(uint32_t index) const
{
	return index < getBufferCount() ? (RenderVertexSemantic::Enum)mParams->bufferFormats.buf[index].semantic : RenderVertexSemantic::NUM_SEMANTICS;
}

VertexFormat::BufferID ApexVertexFormat::getBufferID(uint32_t index) const
{
	return index < getBufferCount() ? (BufferID)mParams->bufferFormats.buf[index].id : (BufferID)0;
}

RenderDataFormat::Enum ApexVertexFormat::getBufferFormat(uint32_t index) const
{
	return index < getBufferCount() ? (RenderDataFormat::Enum)mParams->bufferFormats.buf[index].format : RenderDataFormat::UNSPECIFIED;
}

RenderDataAccess::Enum ApexVertexFormat::getBufferAccess(uint32_t index) const
{
	return index < getBufferCount() ? (RenderDataAccess::Enum)mParams->bufferFormats.buf[index].access : RenderDataAccess::ACCESS_TYPE_COUNT;
}

bool ApexVertexFormat::getBufferSerialize(uint32_t index) const
{
	return index < getBufferCount() ? mParams->bufferFormats.buf[index].serialize : false;
}

uint32_t ApexVertexFormat::getBufferCount() const
{
	return (uint32_t)mParams->bufferFormats.arraySizes[0];
}

uint32_t ApexVertexFormat::getCustomBufferCount() const
{
	PX_ASSERT(mParams != NULL);
	uint32_t customBufferCount = 0;
	for (int32_t i = 0; i < mParams->bufferFormats.arraySizes[0]; ++i)
	{
		if (mParams->bufferFormats.buf[i].semantic == RenderVertexSemantic::CUSTOM)
		{
			++customBufferCount;
		}
	}
	return customBufferCount;
}

int32_t ApexVertexFormat::getBufferIndexFromID(BufferID id) const
{
	for (int32_t i = 0; i < mParams->bufferFormats.arraySizes[0]; ++i)
	{
		if (mParams->bufferFormats.buf[i].id == (uint32_t)id)
		{
			return i;
		}
	}

	return -1;
}



// ApexVertexFormat functions

ApexVertexFormat::ApexVertexFormat()
{
	NvParameterized::Traits* traits = GetInternalApexSDK()->get
<?xml version="1.0" encoding="utf-8"?>
<Type Name="DefaultHttpHandler" FullName="System.Web.DefaultHttpHandler">
  <TypeSignature Language="C#" Value="public class DefaultHttpHandler : System.Web.IHttpAsyncHandler" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.IHttpAsyncHandler</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <since version=".NET 2.0" />
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>A <see cref="T:System.Web.DefaultHttpHandler" /> object intercepts incoming requests in the HTTP pipeline when both request interception has been configured through Internet Information Services (IIS) 6.0 and no explicit <format type="text/html"><a href="24ca01f3-7141-4fdc-acac-71c0733cf6c2">httpHandlers</a></format> bindings apply to the requested extension. </para>
      <para>Request interception can be set up through the wildcard application mapping feature introduced in IIS 6.0. For more information, search the <see cref="http://go.microsoft.com/fwlink/?linkid=37118">MSDN Library</see> for information about using wildcard application maps to remap a URL. </para>
      <para>The <see cref="T:System.Web.DefaultHttpHandler" /> class implements the <see cref="T:System.Web.IHttpAsyncHandler" /> interface to provide asynchronous request processing. For general information about HTTP handlers, see <format type="text/html"><a href="f540bdeb-d22e-4e1d-ba8a-fe6c9926283b">HTTP Handlers and HTTP Modules Overview</a></format>. Additionally, for more information see the following: </para>
      <list type="bullet">
        <item>
          <para>About creating asynchronous HTTP handlers, see <format type="text/html"><a href="1b5c4a27-599b-44d0-8a06-72edc6765aa9">How to: Create an Asynchronous HTTP Handler</a></format>. </para>
        </item>
        <item>
          <para>About registering HTTP handlers, see <format type="text/html"><a href="d5633f9a-03fb-4ccc-a799-dc67d656fa60">How to: Register HTTP Handlers</a></format>. </para>
        </item>
      </list>
      <para>Classes can derive from the <see cref="T:System.Web.DefaultHttpHandler" /> class to provide customized handling of requests. An asynchronous HTTP handler that is derived from the <see cref="T:System.Web.DefaultHttpHandler" /> could override the <see cref="M:System.Web.DefaultHttpHandler.BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)" /> method to change how requests are processed.</para>
      <para>A <see cref="T:System.Web.DefaultHttpHandler" /> does not use ASP.NET errors. Existing content that uses IIS errors or a propriety ISAPI custom error mechanism would work unchanged.</para>
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Represents the properties and methods of a default HTTP handler.</para>
    </summary>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DefaultHttpHandler ();" />
      <MemberType>Constructor</MemberType>
      <Parameters />
      <Docs>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.Web.DefaultHttpHandler" /> class.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="BeginProcessRequest">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginProcessRequest (System.Web.HttpContext context, AsyncCallback callback, object state);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />

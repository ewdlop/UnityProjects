t Y { get { throw null; } set { } }
        public static System.Drawing.PointF Add(System.Drawing.PointF pt, System.Drawing.Size sz) { throw null; }
        public static System.Drawing.PointF Add(System.Drawing.PointF pt, System.Drawing.SizeF sz) { throw null; }
        public override bool Equals(object obj) { throw null; }
        public override int GetHashCode() { throw null; }
        public static System.Drawing.PointF operator +(System.Drawing.PointF pt, System.Drawing.Size sz) { throw null; }
        public static System.Drawing.PointF operator +(System.Drawing.PointF pt, System.Drawing.SizeF sz) { throw null; }
        public static bool operator ==(System.Drawing.PointF left, System.Drawing.PointF right) { throw null; }
        public static bool operator !=(System.Drawing.PointF left, System.Drawing.PointF right) { throw null; }
        public static System.Drawing.PointF operator -(System.Drawing.PointF pt, System.Drawing.Size sz) { throw null; }
        public static System.Drawing.PointF operator -(System.Drawing.PointF pt, System.Drawing.SizeF sz) { throw null; }
        public static System.Drawing.PointF Subtract(System.Drawing.PointF pt, System.Drawing.Size sz) { throw null; }
        public static System.Drawing.PointF Subtract(System.Drawing.PointF pt, System.Drawing.SizeF sz) { throw null; }
        public override string ToString() { throw null; }
    }
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Drawing.RectangleConverter))]
    [System.Runtime.InteropServices.ComVisibleAttribute(true)]
    [System.SerializableAttribute]
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct Rectangle
    {
        public static readonly System.Drawing.Rectangle Empty;
        public Rectangle(System.Drawing.Point location, System.Drawing.Size size) { throw null;}
        public Rectangle(int x, int y, int width, int height) { throw null;}
        [System.ComponentModel.BrowsableAttribute(false)]
        public int Bottom { get { throw null; } }
        public int Height { get { throw null; } set { } }
        [System.ComponentModel.BrowsableAttribute(false)]
        public bool IsEmpty { get { throw null; } }
        [System.ComponentModel.BrowsableAttribute(false)]
        public int Left { get { throw null; } }
        [System.ComponentModel.BrowsableAttribute(false)]
        public System.Drawing.Point Location { get { throw null; } set { } }
        [System.ComponentModel.BrowsableAttribute(false)]
        public int Right { get { throw null; } }
        [System.ComponentModel.BrowsableAttribute(false)]
        public System.Drawing.Size Size { get { throw null; } set { } }
        [System.ComponentModel.BrowsableAttribute(false)]
        public int Top { get { throw null; } }
        public int Width { get { throw null; } set { } }
        public int X { get { throw null; } set { } }
        public int Y { get { throw null; } set { } }
        public static System.Drawing.Rectangle Ceiling(System.Drawing.RectangleF value) { throw null; }
        public bool Contains(System.Drawing.Point pt) { throw null; }
        public bool Contains(System.Drawing.Rectangle rect) { throw null; }
        public bool Contains(int x, int y) { throw null; }
        public override bool Equals(object obj) { throw null; }
        public static System.Drawing.Rectangle FromLTRB(int left, int top, int right, int bottom) { throw null; }
        public override int GetHashCode() { throw null; }
        public static System.Drawing.Rectangle Inflate(System.Drawing.Rectangle rect, int x, int y) { throw null; }
        public void Inflate(System.Drawing.Size size) { }
        public void Inflate(int width, int height) { }
        public void Intersect(System.Drawing.Rectangle rect) { }
        public static System.Drawing.Rectangle Intersect(System.Drawing.Rectangle a, System.Drawing.Rectangle b) { throw null; }
        public bool IntersectsWith(System.Drawing.Rectangle rect) { throw null; }
        public void Offset(System.Drawing.Point pos) { }
        public void Offset(int x, int y) { }
        public static bool operator ==(System.Drawing.Rectangle left, System.Drawing.Rectangle right) { throw null; }
        public static bool operator !=(System.Drawing.Rectangle left, System.Drawing.Rectangle right) { throw null; }
        public static System.Drawing.Rectangle Round(System.Drawing.RectangleF value) { throw null; }
        public override string ToString() { throw null; }
        public static System.Drawing.Rectangle Truncate(System.Drawing.RectangleF value) { throw null; }
        public static System.Drawing.Rectangle Union(System.Drawing.Rectangle a, System.Drawing.Rectangle b) { throw null; }
    }
    public partial class RectangleConverter : System.ComponentModel.TypeConverter
    {
        public RectangleConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { throw null; }
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { throw null; }
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { throw null; }
        public override object CreateInstance(System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary propertyValues) { throw null; }
        public override bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext context) { throw null; }
        public override System.ComponentModel.PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributes) { throw null; }
        public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) { throw null; }
    }
    [System.SerializableAttribute]
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct RectangleF
    {
        public static readonly System.Drawing.RectangleF Empty;
        public RectangleF(System.Drawing.PointF location, System.Drawing.SizeF size) { throw null;}
        public RectangleF(float x, float y, float width, float height) { throw null;}
        [System.ComponentModel.BrowsableAttribute(false)]
        public float Bottom { get { throw null; } }
        public float Height { get { throw null; } set { } }
        [System.ComponentModel.BrowsableAttribute(false)]
        public bool IsEmpty { get { throw null; } }
        [System.ComponentModel.BrowsableAttribute(false)]
        public float Left { get { throw null; } }
        [System.ComponentModel.BrowsableAttribute(false)]
        public System.Drawing.PointF Location { get { throw null; } set { } }
        [System.ComponentModel.BrowsableAttribute(false)]
        public float Right { get { throw null; } }
        [System.ComponentModel.BrowsableAttribute(false)]
        public System.Drawing.SizeF Size { get { throw null; } set { } }
        [System.ComponentModel.BrowsableAttribute(false)]
        public float Top { get { throw null; } }
        public float Width { get { throw null; } set { } }
        public float X { get { throw null; } set { } }
        public float Y { get { throw null; } set { } }
        public bool Contains(System.Drawing.PointF pt) { throw null; }
        public bool Contains(System.Drawing.RectangleF rect) { throw null; }
        public bool Contains(float x, float y) { throw null; }
        public override bool Equals(object obj) { throw null; }
        public static System.Drawing.RectangleF FromLTRB(float left, float top, float right, float bottom) { throw null; }
        public override int GetHashCode() { throw null; }
        public static System.Drawing.RectangleF Inflate(System.Drawing.RectangleF rect, float x, float y) { throw null; }
        public void Inflate(System.Drawing.SizeF size) { }
        public void Inflate(float x, float y) { }
        public void Intersect(System.Drawing.RectangleF rect) { }
        public static System.Drawing.RectangleF Intersect(System.Drawing.RectangleF a, System.Drawing.RectangleF b) { throw null; }
        public bool IntersectsWith(System.Drawing.RectangleF rect) { throw null; }
        public void Offset(System.Drawing.PointF pos) { }
        public void Offset(float x, float y) { }
        public static bool operator ==(System.Drawing.RectangleF left, System.Drawing.RectangleF right) { throw null; }
        public static implicit operator System.Drawing.RectangleF (System.Drawing.Rectangle r) { throw null; }
        public static bool operator !=(System.Drawing.RectangleF left, System.Drawing.RectangleF right) { throw null; }
        public override string ToString() { throw null; }
        public static System.Drawing.RectangleF Union(System.Drawing.RectangleF a, System.Drawing.RectangleF b) { throw null; }
    }
    public sealed partial class Region : System.MarshalByRefObject, System.IDisposable
    {
        public Region() { }
        public Region(System.Drawing.Drawing2D.GraphicsPath path) { }
        public Region(System.Drawing.Drawing2D.RegionData rgnData) { }
        public Region(System.Drawing.Rectangle rect) { }
        public Region(System.Drawing.RectangleF rect) { }
        public System.Drawing.Region Clone() { throw null; }
        public void Complement(System.Drawing.Drawing2D.GraphicsPath path) { }
        public void Complement(System.Drawing.Rectangle rect) { }
        public void Complement(System.Drawing.RectangleF rect) { }
        public void Complement(System.Drawing.Region region) { }
        public void Dispose() { }
        public bool Equals(System.Drawing.Region region, System.Drawing.Graphics g) { throw null; }
        public void Exclude(System.Drawing.Drawing2D.GraphicsPath path) { }
        public void Exclude(System.Drawing.Rectangle rect) { }
        public void Exclude(System.Drawing.RectangleF rect) { }
        public void Exclude(System.Drawing.Region region) { }
        ~Region() { }
        [System.Security.Permissions.SecurityPermissionAttribute(System.Security.Permissions.SecurityAction.Demand, UnmanagedCode=true)]
        public static System.Drawing.Region FromHrgn(System.IntPtr hrgn) { throw null; }
        public System.Drawing.RectangleF GetBounds(System.Drawing.Graphics g) { throw null; }
        public System.IntPtr GetHrgn(System.Drawing.Graphics g) { throw null; }
        public System.Drawing.Drawing2D.RegionData GetRegionData() { throw null; }
        public System.Drawing.RectangleF[] GetRegionScans(System.Drawing.Drawing2D.Matrix matrix) { throw null; }
        public void Intersect(System.Drawing.Drawing2D.GraphicsPath path) { }
        public void Intersect(System.Drawing.Rectangle rect) { }
        public void Intersect(System.Drawing.RectangleF rect) { }
        public void Intersect(System.Drawing.Region region) { }
        public bool IsEmpty(System.Drawing.Graphics g) { throw null; }
        public bool IsInfinite(System.Drawing.Graphics g) { throw null; }
        public bool IsVisible(System.Drawing.Point point) { throw null; }
        public bool IsVisible(System.Drawing.Point point, System.Drawing.Graphics g) { throw null; }
        public bool IsVisible(System.Drawing.PointF point) { throw null; }
        public bool IsVisible(System.Drawing.PointF point, System.Drawing.Graphics g) { throw null; }
        public bool IsVisible(System.Drawing.Rectangle rect) { throw null; }
        public bool IsVisible(System.Drawing.Rectangle rect, System.Drawing.Graphics g) { throw null; }
        public bool IsVisible(System.Drawing.RectangleF rect) { throw null; }
        public bool IsVisible(System.Drawing.RectangleF rect, System.Drawing.Graphics g) { throw null; }
        public bool IsVisible(int x, int y, System.Drawing.Graphics g) { throw null; }
        public bool IsVisible(int x, int y, int width, int height) { throw null; }
        public bool IsVisible(int x, int y, int width, int height, System.Drawing.Graphics g) { throw null; }
        public bool IsVisible(float x, float y) { throw null; }
        public bool IsVisible(float x, float y, System.Drawing.Graphics g) { throw null; }
        public bool IsVisible(float x, float y, float width, float height) { throw null; }
        public bool IsVisible(float x, float y, float width, float height, System.Drawing.Graphics g) { throw null; }
        public void MakeEmpty() { }
        public void MakeInfinite() { }
        [System.Security.Permissions.SecurityPermissionAttribute(System.Security.Permissions.SecurityAction.Demand, UnmanagedCode=true)]
        public void ReleaseHrgn(System.IntPtr regionHandle) { }
        public void Transform(System.Drawing.Drawing2D.Matrix matrix) { }
        public void Translate(int dx, int dy) { }
        public void Translate(float dx, float dy) { }
        public void Union(System.Drawing.Drawing2D.GraphicsPath path) { }
        public void Union(System.Drawing.Rectangle rect) { }
        public void Union(System.Drawing.RectangleF rect) { }
        public void Union(System.Drawing.Region region) { }
        public void Xor(System.Drawing.Drawing2D.GraphicsPath path) { }
        public void Xor(System.Drawing.Rectangle rect) { }
        public void Xor(System.Drawing.RectangleF rect) { }
        public void Xor(System.Drawing.Region region) { }
    }
    public enum RotateFlipType
    {
        Rotate180FlipNone = 2,
        Rotate180FlipX = 6,
        Rotate180FlipXY = 0,
        Rotate180FlipY = 4,
        Rotate270FlipNone = 3,
        Rotate270FlipX = 7,
        Rotate270FlipXY = 1,
        Rotate270FlipY = 5,
        Rotate90FlipNone = 1,
        Rotate90FlipX = 5,
        Rotate90FlipXY = 3,
        Rotate90FlipY = 7,
        RotateNoneFlipNone = 0,
        RotateNoneFlipX = 4,
        RotateNoneFlipXY = 2,
        RotateNoneFlipY = 6,
    }
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Drawing.SizeConverter))]
    [System.Runtime.InteropServices.ComVisibleAttribute(true)]
    [System.SerializableAttribute]
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct Size
    {
        public static readonly System.Drawing.Size Empty;
        public Size(System.Drawing.Point pt) { throw null;}
        public Size(int width, int height) { throw null;}
        public int Height { get { throw null; } set { } }
        [System.ComponentModel.BrowsableAttribute(false)]
        public bool IsEmpty { get { throw null; } }
        public int Width { get { throw null; } set { } }
        public static System.Drawing.Size Add(System.Drawing.Size sz1, System.Drawing.Size sz2) { throw null; }
        public static System.Drawing.Size Ceiling(System.Drawing.SizeF value) { throw null; }
        public override bool Equals(object obj) { throw null; }
        public override int GetHashCode() { throw null; }
        public static System.Drawing.Size operator +(System.Drawing.Size sz1, System.Drawing.Size sz2) { throw null; }
        public static bool operator ==(System.Drawing.Size sz1, System.Drawing.Size sz2) { throw null; }
        public static explicit operator System.Drawing.Point (System.Drawing.Size size) { throw null; }
        public static implicit operator System.Drawing.SizeF (System.Drawing.Size p) { throw null; }
        public static bool operator !=(System.Drawing.Size sz1, System.Drawing.Size sz2) { throw null; }
        public static System.Drawing.Size operator -(System.Drawing.Size sz1, System.Drawing.Size sz2) { throw null; }
        public static System.Drawing.Size Round(System.Drawing.SizeF value) { throw null; }
        public static System.Drawing.Size Subtract(System.Drawing.Size sz1, System.Drawing.Size sz2) { throw null; }
        public override string ToString() { throw null; }
        public static System.Drawing.Size Truncate(System.Drawing.SizeF value) { throw null; }
    }
    public partial class SizeConverter : System.ComponentModel.TypeConverter
    {
        public SizeConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { throw null; }
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { throw null; }
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { throw null; }
        public override object CreateInstance(System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary propertyValues) { throw null; }
        public override bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext context) { throw null; }
        public override System.ComponentModel.PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributes) { throw null; }
        public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) { throw null; }
    }
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Drawing.SizeFConverter))]
    [System.Runtime.InteropServices.ComVisibleAttribute(true)]
    [System.SerializableAttribute]
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct SizeF
    {
        public static readonly System.Drawing.SizeF Empty;
        public SizeF(System.Drawing.PointF pt) { throw null;}
        public SizeF(System.Drawing.SizeF size) { throw null;}
        public SizeF(float width, float height) { throw null;}
        public float Height { get { throw null; } set { } }
        [System.ComponentModel.BrowsableAttribute(false)]
        public bool IsEmpty { get { throw null; } }
        public float Width { get { throw null; } set { } }
        public static System.Drawing.SizeF Add(System.Drawing.SizeF sz1, System.Drawing.SizeF sz2) { throw null; }
        public override bool Equals(object obj) { throw null; }
        public override int GetHashCode() { throw null; }
        public static System.Drawing.SizeF operator +(System.Drawing.SizeF sz1, System.Drawing.SizeF sz2) { throw null; }
        public static bool operator ==(System.Drawing.SizeF sz1, System.Drawing.SizeF sz2) { throw null; }
        public static explicit operator System.Drawing.PointF (System.Drawing.SizeF size) { throw null; }
        public static bool operator !=(System.Drawing.SizeF sz1, System.Drawing.SizeF sz2) { throw null; }
        public static System.Drawing.SizeF operator -(System.Drawing.SizeF sz1, System.Drawing.SizeF sz2) { throw null; }
        public static System.Drawing.SizeF Subtract(System.Drawing.SizeF sz1, System.Drawing.SizeF sz2) { throw null; }
        public System.Drawing.PointF ToPointF() { throw null; }
        public System.Drawing.Size ToSize() { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class SizeFConverter : System.ComponentModel.TypeConverter
    {
        public SizeFConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { throw null; }
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { throw null; }
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { throw null; }
        public override object CreateInstance(System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary propertyValues) { throw null; }
        public override bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext context) { throw null; }
        public override System.ComponentModel.PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributes) { throw null; }
        public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) { throw null; }
    }
    public sealed partial class SolidBrush : System.Drawing.Brush
    {
        public SolidBrush(System.Drawing.Color color) { }
        public System.Drawing.Color Color { get { throw null; } set { } }
        public override object Clone() { throw null; }
        protected override void Dispose(bool disposing) { }
    }
    public enum StringAlignment
    {
        Center = 1,
        Far = 2,
        Near = 0,
    }
    public enum StringDigitSubstitute
    {
        National = 2,
        None = 1,
        Traditional = 3,
        User = 0,
    }
    public sealed partial class StringFormat : System.MarshalByRefObject, System.ICloneable, System.IDisposable
    {
        public StringFormat() { }
        public StringFormat(System.Drawing.StringFormat format) { }
        public StringFormat(System.Drawing.StringFormatFlags options) { }
        public StringFormat(System.Drawing.StringFormatFlags options, int language) { }
        public System.Drawing.StringAlignment Alignment { get { throw null; } set { } }
        public int DigitSubstitutionLanguage { get { throw null; } }
        public System.Drawing.StringDigitSubstitute DigitSubstitutionMethod { get { throw null; } }
        public System.Drawing.StringFormatFlags FormatFlags { get { throw null; } set { } }
        public static System.Drawing.StringFormat GenericDefault { get { throw null; } }
        public static System.Drawing.StringFormat GenericTypographic { get { throw null; } }
        public System.Drawing.Text.HotkeyPrefix HotkeyPrefix { get { throw null; } set { } }
        public System.Drawing.StringAlignment LineAlignment { get { throw null; } set { } }
        public System.Drawing.StringTrimming Trimming { get { throw null; } set { } }
        public object Clone() { throw null; }
        public void Dispose() { }
        ~StringFormat() { }
        public float[] GetTabStops(out float firstTabOffset) { firstTabOffset = default(float); throw null; }
        public void SetDigitSubstitution(int language, System.Drawing.StringDigitSubstitute substitute) { }
        public void SetMeasurableCharacterRanges(System.Drawing.CharacterRange[] ranges) { }
        public void SetTabStops(float firstTabOffset, float[] tabStops) { }
        public override string ToString() { throw null; }
    }
    [System.FlagsAttribute]
    public enum StringFormatFlags
    {
        DirectionRightToLeft = 1,
        DirectionVertical = 2,
        DisplayFormatControl = 32,
        FitBlackBox = 4,
        LineLimit = 8192,
        MeasureTrailingSpaces = 2048,
        NoClip = 16384,
        NoFontFallback = 1024,
        NoWrap = 4096,
    }
    public enum StringTrimming
    {
        Character = 1,
        EllipsisCharacter = 3,
        EllipsisPath = 5,
        EllipsisWord = 4,
        None = 0,
        Word = 2,
    }
    public enum StringUnit
    {
        Display = 1,
        Document = 5,
        Em = 32,
        Inch = 4,
        Millimeter = 6,
        Pixel = 2,
        Point = 3,
        World = 0,
    }
    public sealed partial class SystemBrushes
    {
        internal SystemBrushes() { }
        public static System.Drawing.Brush ActiveBorder { get { throw null; } }
        public static System.Drawing.Brush ActiveCaption { get { throw null; } }
        public static System.Drawing.Brush ActiveCaptionText { get { throw null; } }
        public static System.Drawing.Brush AppWorkspace { get { throw null; } }
        public static System.Drawing.Brush ButtonFace { get { throw null; } }
        public static System.Drawing.Brush ButtonHighlight { get { throw null; } }
        public static System.Drawing.Brush ButtonShadow { get { throw null; } }
        public static System.Drawing.Brush Control { get { throw null; } }
        public static System.Drawing.Brush ControlDark { get { throw null; } }
        public static System.Drawing.Brush ControlDarkDark { get { throw null; } }
        public static System.Drawing.Brush ControlLight { get { throw null; } }
        public static System.Drawing.Brush ControlLightLight { get { throw null; } }
        public static System.Drawing.Brush ControlText { get { throw null; } }
        public static System.Drawing.Brush Desktop { get { throw null; } }
        public static System.Drawing.Brush GradientActiveCaption { get { throw null; } }
        public static System.Drawing.Brush GradientInactiveCaption { get { throw null; } }
        public static System.Drawing.Brush GrayText { get { throw null; } }
        public static System.Drawing.Brush Highlight { get { throw null; } }
        public static System.Drawing.Brush HighlightText { get { throw null; } }
        public static System.Drawing.Brush HotTrack { get { throw null; } }
        public static System.Drawing.Brush InactiveBorder { get { throw null; } }
        public static System.Drawing.Brush InactiveCaption { get { throw null; } }
        public static System.Drawing.Brush InactiveCaptionText { get { throw null; } }
        public static System.Drawing.Brush Info { get { throw null; } }
        public static System.Drawing.Brush InfoText { get { throw null; } }
        public static System.Drawing.Brush Menu { get { throw null; } }
        public static System.Drawing.Brush MenuBar { get { throw null; } }
        public static System.Drawing.Brush MenuHighlight { get { throw null; } }
        public static System.Drawing.Brush MenuText { get { throw null; } }
        public static System.Drawing.Brush ScrollBar { get { throw null; } }
        public static System.Drawing.Brush Window { get { throw null; } }
        public static System.Drawing.Brush WindowFrame { get { throw null; } }
        public static System.Drawing.Brush WindowText { get { throw null; } }
        public static System.Drawing.Brush FromSystemColor(System.Drawing.Color c) { throw null; }
    }
    public sealed partial class SystemColors
    {
        internal SystemColors() { }
        public static System.Drawing.Color ActiveBorder { get { throw null; } }
        public static System.Drawing.Color ActiveCaption { get { throw null; } }
        public static System.Drawing.Color ActiveCaptionText { get { throw null; } }
        public static System.Drawing.Color AppWorkspace { get { throw null; } }
        public static System.Drawing.Color ButtonFace { get { throw null; } }
        public static System.Drawing.Color ButtonHighlight { get { throw null; } }
        public static System.Drawing.Color ButtonShadow { get { throw null; } }
        public static System.Drawing.Color Control { get { throw null; } }
        public static System.Drawing.Color ControlDark { get { throw null; } }
        public static System.Drawing.Color ControlDarkDark { get { throw null; } }
        public static System.Drawing.Color ControlLight { get { throw null; } }
        public static System.Drawing.Color ControlLightLight { get { throw null; } }
        public static System.Drawing.Color ControlText { get { throw null; } }
        public static System.Drawing.Color Desktop { get { throw null; } }
        public static System.Drawing.Color GradientActiveCaption { get { throw null; } }
        public static System.Drawing.Color GradientInactiveCaption { get { throw null; } }
        public static System.Drawing.Color GrayText { get { throw null; } }
        public static System.Drawing.Color Highlight { get { throw null; } }
        public static System.Drawing.Color HighlightText { get { throw null; } }
        public static System.Drawing.Color HotTrack { get { throw null; } }
        public static System.Drawing.Color InactiveBorder { get { throw null; } }
        public static System.Drawing.Color InactiveCaption { get { throw null; } }
        public static System.Drawing.Color InactiveCaptionText { get { throw null; } }
        public static System.Drawing.Color Info { get { throw null; } }
        public static System.Drawing.Color InfoText { get { throw null; } }
        public static System.Drawing.Color Menu { get { throw null; } }
        public static System.Drawing.Color MenuBar { get { throw null; } }
        public static System.Drawing.Color MenuHighlight { get { throw null; } }
        public static System.Drawing.Color MenuText { get { throw null; } }
        public static System.Drawing.Color ScrollBar { get { throw null; } }
        public static System.Drawing.Color Window { get { throw null; } }
        public static System.Drawing.Color WindowFrame { get { throw null; } }
        public static System.Drawing.Color WindowText { get { throw null; } }
    }
    public sealed partial class SystemFonts
    {
        internal SystemFonts() { }
        public static System.Drawing.Font CaptionFont { get { throw null; } }
        public static System.Drawing.Font DefaultFont { get { throw null; } }
        public static System.Drawing.Font DialogFont { get { throw null; } }
        public static System.Drawing.Font IconTitleFont { get { throw null; } }
        public static System.Drawing.Font MenuFont { get { throw null; } }
        public static System.Drawing.Font MessageBoxFont { get { throw null; } }
        public static System.Drawing.Font SmallCaptionFont { get { throw null; } }
        public static System.Drawing.Font StatusFont { get { throw null; } }
        public static System.Drawing.Font GetFontByName(string systemFontName) { throw null; }
    }
    public sealed partial class SystemIcons
    {
        internal SystemIcons() { }
        public static System.Drawing.Icon Application { get { throw null; } }
        public static System.Drawing.Icon Asterisk { get { throw null; } }
        public static System.Drawing.Icon Error { get { throw null; } }
        public static System.Drawing.Icon Exclamation { get { throw null; } }
        public static System.Drawing.Icon Hand { get { throw null; } }
        public static System.Drawing.Icon Information { get { throw null; } }
        public static System.Drawing.Icon Question { get { throw null; } }
        public static System.Drawing.Icon Shield { get { throw null; } }
        public static System.Drawing.Icon Warning { get { throw null; } }
        public static System.Drawing.Icon WinLogo { get { throw null; } }
    }
    public sealed partial class SystemPens
    {
        internal SystemPens() { }
        public static System.Drawing.Pen ActiveBorder { get { throw null; } }
        public static System.Drawing.Pen ActiveCaption { get { throw null; } }
        public static System.Drawing.Pen ActiveCaptionText { get { throw null; } }
        public static System.Drawing.Pen AppWorkspace { get { throw null; } }
        public static System.Drawing.Pen ButtonFace { get { throw null; } }
        public static System.Drawing.Pen ButtonHighlight { get { throw null; } }
        public static System.Drawing.Pen ButtonShadow { get { throw null; } }
        public static System.Drawing.Pen Control { get { throw null; } }
        public static System.Drawing.Pen ControlDark { get { throw null; } }
        public static System.Drawing.Pen ControlDarkDark { get { throw null; } }
        public static System.Drawing.Pen ControlLight { get { throw null; } }
        public static System.Drawing.Pen ControlLightLight { get { throw null; } }
        public static System.Drawing.Pen ControlText { get { throw null; } }
        public static System.Drawing.Pen Desktop { get { throw null; } }
        public static System.Drawing.Pen GradientActiveCaption { get { throw null; } }
        public static System.Drawing.Pen GradientInactiveCaption { get { throw null; } }
        public static System.Drawing.Pen GrayText { get { throw null; } }
        public static System.Drawing.Pen Highlight { get { throw null; } }
        public static System.Drawing.Pen HighlightText { get { throw null; } }
        public static System.Drawing.Pen HotTrack { get { throw null; } }
        public static System.Drawing.Pen InactiveBorder { get { throw null; } }
        public static System.Drawing.Pen InactiveCaption { get { throw null; } }
        public static System.Drawing.Pen InactiveCaptionText { get { throw null; } }
        public static System.Drawing.Pen Info { get { throw null; } }
        public static System.Drawing.Pen InfoText { get { throw null; } }
        public static System.Drawing.Pen Menu { get { throw null; } }
        public static System.Drawing.Pen MenuBar { get { throw null; } }
        public static System.Drawing.Pen MenuHighlight { get { throw null; } }
        public static System.Drawing.Pen MenuText { get { throw null; } }
        public static System.Drawing.Pen ScrollBar { get { throw null; } }
        public static System.Drawing.Pen Window { get { throw null; } }
        public static System.Drawing.Pen WindowFrame { get { throw null; } }
        public static System.Drawing.Pen WindowText { get { throw null; } }
        public static System.Drawing.Pen FromSystemColor(System.Drawing.Color c) { throw null; }
    }
    public sealed partial class TextureBrush : System.Drawing.Brush
    {
        public TextureBrush(System.Drawing.Image bitmap) { }
        public TextureBrush(System.Drawing.Image image, System.Drawing.Drawing2D.WrapMode wrapMode) { }
        public TextureBrush(System.Drawing.Image image, System.Drawing.Drawing2D.WrapMode wrapMode, System.Drawing.Rectangle dstRect) { }
        public TextureBrush(System.Drawing.Image image, System.Drawing.Drawing2D.WrapMode wrapMode, System.Drawing.RectangleF dstRect) { }
        public TextureBrush(System.Drawing.Image image, System.Drawing.Rectangle dstRect) { }
        [System.MonoLimitationAttribute("ImageAttributes are ignored when using libgdiplus")]
        public TextureBrush(System.Drawing.Image image, System.Drawing.Rectangle dstRect, System.Drawing.Imaging.ImageAttributes imageAttr) { }
        public TextureBrush(System.Drawing.Image image, System.Drawing.RectangleF dstRect) { }
        [System.MonoLimitationAttribute("ImageAttributes are ignored when using libgdiplus")]
        public TextureBrush(System.Drawing.Image image, System.Drawing.RectangleF dstRect, System.Drawing.Imaging.ImageAttributes imageAttr) { }
        public System.Drawing.Image Image { get { throw null; } }
        public System.Drawing.Drawing2D.Matrix Transform { get { throw null; } set { } }
        public System.Drawing.Drawing2D.WrapMode WrapMode { get { throw null; } set { } }
        public override object Clone() { throw null; }
        public void MultiplyTransform(System.Drawing.Drawing2D.Matrix matrix) { }
        public void MultiplyTransform(System.Drawing.Drawing2D.Matrix matrix, System.Drawing.Drawing2D.MatrixOrder order) { }
        public void ResetTransform() { }
        public void RotateTransform(float angle) { }
        public void RotateTransform(float angle, System.Drawing.Drawing2D.MatrixOrder order) { }
        public void ScaleTransform(float sx, float sy) { }
        public void ScaleTransform(float sx, float sy, System.Drawing.Drawing2D.MatrixOrder order) { }
        public void TranslateTransform(float dx, float dy) { }
        public void TranslateTransform(float dx, float dy, System.Drawing.Drawing2D.MatrixOrder order) { }
    }
    [System.AttributeUsageAttribute((System.AttributeTargets)(4))]
    public partial class ToolboxBitmapAttribute : System.Attribute
    {
        public static readonly System.Drawing.ToolboxBitmapAttribute Default;
        public ToolboxBitmapAttribute(string imageFile) { }
        public ToolboxBitmapAttribute(System.Type t) { }
        public ToolboxBitmapAttribute(System.Type t, string name) { }
        public override bool Equals(object value) { throw null; }
        public override int GetHashCode() { throw null; }
        public System.Drawing.Image GetImage(object component) { throw null; }
        public System.Drawing.Image GetImage(object component, bool large) { throw null; }
        public System.Drawing.Image GetImage(System.Type type) { throw null; }
        public System.Drawing.Image GetImage(System.Type type, bool large) { throw null; }
        public System.Drawing.Image GetImage(System.Type type, string imgName, bool large) { throw null; }
        public static System.Drawing.Image GetImageFromResource(System.Type t, string imageName, bool large) { throw null; }
    }
}
namespace System.Drawing.Design
{
    [System.Security.Permissions.PermissionSetAttribute(System.Security.Permissions.SecurityAction.LinkDemand, Unrestricted=true)]
    public sealed partial class CategoryNameCollection : System.Collections.ReadOnlyCollectionBase
    {
        public CategoryNameCollection(System.Drawing.Design.CategoryNameCollection value) { }
        public CategoryNameCollection(string[] value) { }
        public string this[int index] { get { throw null; } }
      
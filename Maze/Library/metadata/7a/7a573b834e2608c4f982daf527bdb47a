//------------------------------------------------------------------------------
// <copyright file="DataTableReader.cs" company="Microsoft">
//     Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>
// <owner current="true" primary="true">Microsoft</owner>
// <owner current="true" primary="false">Microsoft</owner>
// <owner current="false" primary="false">Microsoft</owner>
//------------------------------------------------------------------------------

namespace System.Data {
    using System;
    using System.Data.Common;
    using System.Data.SqlTypes;
    using System.Collections;
    using System.ComponentModel;

    public sealed class DataTableReader : DbDataReader  {

        private readonly DataTable[] tables = null;
        private bool isOpen = true;
        private DataTable schemaTable = null;

        private int tableCounter = -1;
        private int rowCounter = -1;
        private DataTable currentDataTable = null;
        private DataRow currentDataRow = null;

        private bool hasRows= true;
        private bool reachEORows = false;
        private bool currentRowRemoved = false;
        private bool schemaIsChanged = false;
        private bool started = false;
        private bool readerIsInvalid = false;
        private DataTableReaderListener listener = null;
        private bool tableCleared = false;

       public  DataTableReader(DataTable dataTable) {
            if (dataTable == null)
                throw ExceptionBuilder.ArgumentNull("DataTable");
            tables = new DataTable[1] {dataTable};

            init();
//            schemaTable = GetSchemaTableFromDataTable(currentDataTable);
        }

        public  DataTableReader(DataTable [] dataTables) {
           if (dataTables == null)
                throw ExceptionBuilder.ArgumentNull("DataTable");

           if (dataTables.Length == 0)
               throw ExceptionBuilder.DataTableReaderArgumentIsEmpty();


           tables = new DataTable[dataTables.Length];
           for (int i = 0; i < dataTables.Length ; i++) {
               if (dataTables[i] == null)
                   throw ExceptionBuilder.ArgumentNull("DataTable");
               tables[i] = dataTables[i];
           }

           init();
//           schemaTable = GetSchemaTableFromDataTable(currentDataTable);
        }

        private bool ReaderIsInvalid {
            get {
                return readerIsInvalid;
            }
            set {
                if (readerIsInvalid == value)
                    return;
                readerIsInvalid = value;
                if (readerIsInvalid && listener != null) {
                    listener.CleanUp();
                }
            }
        }

        private bool IsSchemaChanged {
            get {
                return schemaIsChanged;
            }
            set {
                if (!value || schemaIsChanged == value) //once it is set to false; should not change unless in init() or NextResult()
                    return;
                schemaIsChanged  = value;
                if (listener != null) {
                    listener.CleanUp();
                }
            }
        }

        internal DataTable CurrentDataTable {
            get {
                return currentDataTable;
            }
        }

        private void init() {
            tableCounter = 0;
            reachEORows = false;
            schemaIsChanged = false;
            currentDataTable = tables[tableCounter];
            hasRows = (currentDataTable.Rows.Count > 0);
            ReaderIsInvalid = false;
 
// we need to listen to current tables event so create a listener, it will listen to events and call us back.
            listener = new DataTableReaderListener(this);
        }


        override public void Close() {
            if (!isOpen)
                return;
// no need to listen to events after close
            if (listener != null)
                listener.CleanUp();

            listener = null;
            schemaTable = null;

            isOpen = false;
        }

        override public DataTable GetSchemaTable(){
            ValidateOpen("GetSchemaTabl
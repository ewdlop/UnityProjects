###############

# ::tk::ButtonEnter --
# The procedure below is invoked when the mouse pointer enters a
# button widget.  It records the button we're in and changes the
# state of the button to active unless the button is disabled.
#
# Arguments:
# w -		The name of the widget.

proc ::tk::ButtonEnter {w} {
    variable ::tk::Priv
    if {[$w cget -state] ne "disabled"} {

	# If there's an -overrelief value, set the relief to that.

	if {$Priv(buttonWindow) eq $w} {
	    $w configure -state active
	} elseif {[set over [$w cget -overrelief]] ne ""} {
	    set Priv($w,relief)  [$w cget -relief]
	    set Priv($w,prelief) $over
	    $w configure -relief $over
	}
    }
    set Priv(window) $w
}

# ::tk::ButtonLeave --
# The procedure below is invoked when the mouse pointer leaves a
# button widget.  It changes the state of the button back to
# inactive.  If we're leaving the button window with a mouse button
# pressed (Priv(buttonWindow) == $w), restore the relief of the
# button too.
#
# Arguments:
# w -		The name of the widget.

proc ::tk::ButtonLeave w {
    variable ::tk::Priv
    if {$w eq $Priv(buttonWindow)} {
	$w configure -state normal
    }

    # Restore the original button relief if it was changed by Tk.
    # That is signaled by the existence of Priv($w,prelief).

    if {[info exists Priv($w,relief)]} {
	if {[info exists Priv($w,prelief)] && \
		$Priv($w,prelief) eq [$w cget -relief]} {
	    $w configure -relief $Priv($w,relief)
	}
	unset -nocomplain Priv($w,relief) Priv($w,prelief)
    }

    set Priv(window) ""
}

# ::tk::ButtonDown --
# The procedure below is invoked when the mouse button is pressed in
# a button widget.  It records the fact that the mouse is in the button,
# saves the button's relief so it can be restored later, and changes
# the relief to sunken.
#
# Arguments:
# w -		The name of the widget.

proc ::tk::ButtonDown w {
    variable ::tk::Priv

    if {[$w cget -state] ne "disabled"} {
	set Priv(buttonWindow) $w
	$w configure -state active

	# If this button has a repeatdelay set up, get it going with an after
	after cancel $Priv(afterId)
	set Priv(repeated) 0
	if { ![catch {$w cget -repeatdelay} delay] } {
	    if {$delay > 0} {
		set Priv(afterId) [after $delay [list tk::ButtonAutoInvoke $w]]
	    }
	}
    }
}

# ::tk::ButtonUp --
# The procedure below is invoked when the mouse button is released
# in a button widget.  It restores the button's relief and invokes
# the command as long as the mouse hasn't left the button.
#
# Arguments:
# w -		The name of the widget.

proc ::tk::ButtonUp w {
    variable ::tk::Priv
    if {$Priv(buttonWindow) eq $w} {
	set Priv(buttonWindow) ""
	$w configure -state normal

	# Restore the button's relief if it was cached.

	if {[info exists Priv($w,relief)]} {
	    if {[info exists Priv($w,prelief)] && \
		    $Priv($w,prelief) eq [$w cget -relief]} {
		$w configure -relief $Priv($w,relief)
	    }
	    unset -nocomplain Priv($w,relief) Priv($w,prelief)
	}

	# Clean up the after event from the auto-repeater
	after cancel $Priv(afterId)

	if {$Priv(window) eq $w && [$w cget -state] ne "disabled"} {
	    # Only invoke the command if it wasn't already invoked by the
	    # auto-repeater functionality
	    if { $Priv(repeated) == 0 } {
		uplevel #0 [list $w invoke]
	    }
	}
    }
}

}

##################
# Shared routines
##################

# ::tk::ButtonInvoke --
# The procedure below is called when a button is invoked through
# the keyboard.  It simulate a press of the button via the mouse.
#
# Arguments:
# w -		The name of the widget.

proc ::tk::ButtonInvoke w {
    if {[$w cget -state] ne "disabled"} {
	set oldRelief [$w cget -relief]
	set oldState [$w cget -state]
	$w configure -state active -relief sunken
	update idletasks
	after 100
	$w configure -state $oldState -relief $oldRelief
	uplevel #0 [list $w invoke]
    }
}

# ::tk::ButtonAutoInvoke --
#
#	Invoke an auto-repeating button, and set it up to continue to repeat.
#
# Arguments:
#	w	button to invoke.
#
# Results:
#	None.
#
# Side effects:
#	May create an after event to call ::tk::ButtonAutoInvoke.

proc ::tk::ButtonAutoInvoke {w} {
    variable ::tk::Priv
    after cancel $Priv(afterId)
    set delay [$w cget -repeatinterval]
    if {$Priv(window) eq $w} {
	incr Priv(repeated)
	uplevel #0 [list $w invoke]
    }
    if {$delay > 0} {
	set Priv(afterId) [after $delay [list tk::ButtonAutoInvoke $w]]
    }
}

# ::tk::CheckRadioInvoke --
# The procedure below is invoked when the mouse button is pressed in
# a checkbutton or radiobutton widget, or when the widget is invoked
# through the keyboard.  It invokes the widget if it
# isn't disabled.
#
# Arguments:
# w -		The name of the widget.
# cmd -		The subcommand to invoke (one of invoke, select, or deselect).

proc ::tk::CheckRadioInvoke {w {cmd invoke}} {
    if {[$w cget -state] ne "disabled"} {
	uplevel #0 [list $w $cmd]
    }
}

# Special versions of the handlers for checkbuttons on Unix that do the magic
# to make things work right when the checkbutton indicator is hidden;
# radiobuttons don't need this complexity.

# ::tk::CheckInvoke --
# The procedure below invokes the checkbutton, like ButtonInvoke, but handles
# what to do when the checkbutton indicator is missing. Only used on Unix.
#
# Arguments:
# w -		The name of the widget.

proc ::tk::CheckInvoke {w} {
    variable ::tk::Priv
    if {[$w cget -state] ne "disabled"} {
	# Additional logic to switch the "selected" colors around if necessary
	# (when we're indicator-less).

	if {![$w cget -indicatoron] && [info exist Priv($w,selectcolor)]} {
	    if {[$w cget -selectcolor] eq $Priv($w,aselectcolor)} {
		$w configure -selectcolor $Priv($w,selectcolor)
	    } else {
		$w configure -selectcolor $Priv($w,aselectcolor)
	    }
	}
	uplevel #0 [list $w invoke]
    }
}

# ::tk::CheckEnter --
# The procedure below enters the checkbutton, like ButtonEnter, but handles
# what to do when the checkbutton indicator is missing. Only used on Unix.
#
# Arguments:
# w -		The name of the widget.

proc ::tk::CheckEnter {w} {
    variable ::tk::Priv
    if {[$w cget -state] ne "disabled"} {
	# On unix the state is active just with mouse-over
	$w configure -state active

	# If the mouse button is down, set the relief to sunken on entry.
	# Overwise, if there's an -overrelief value, set the relief to that.

	set Priv($w,relief) [$w cget -relief]
	if {$Priv(buttonWindow) eq $w} {
	    $w configure -relief sunken
	    set Priv($w,prelief) sunken
	} elseif {[set over [$w cget -overrelief]] ne ""} {
	    $w configure -relief $over
	    set Priv($w,prelief) $over
	}

	# Compute what the "selected and active" color should be.

	if {![$w cget -indicatoron] && [$w cget -selectcolor] ne ""} {
	    set Priv($w,selectcolor) [$w cget -selectcolor]
	    lassign [winfo rgb $w [$w cget -selectcolor]]      r1 g1 b1
	    lassign [winfo rgb $w [$w cget -activebackground]] r2 g2 b2
	    set Priv($w,aselectcolor) \
		[format "#%04x%04x%04x" [expr {($r1+$r2)/2}] \
		     [expr {($g1+$g2)/2}] [expr {($b1+$b2)/2}]]
	    # use uplevel to work with other var resolvers
	    if {[uplevel #0 [list set [$w cget -variable]]]
		 eq [$w cget -onvalue]} {
		$w configure -selectcolor $Priv($w,aselectcolor)
	    }
	}
    }
    set Priv(window) $w
}

# ::tk::CheckLeave --
# The procedure below leaves the checkbutton, like ButtonLeave, but handles
# what to do when the checkbutton indicator is missing. Only used on Unix.
#
# Arguments:
# w -		The name of the widget.

proc ::tk::CheckLeave {w} {
    variable ::tk::Priv
    if {[$w cget -state] ne "disabled"} {
	$w configure -state normal
    }

    # Restore the original button "selected" color; assume that the user
    # wasn't monkeying around with things too much.

    if {![$w cget -indicatoron] && [info exist Priv($w,selectcolor)]} {
	$w configure -selectcolor $Priv($w,selectcolor)
    }
    unset -nocomplain Priv($w,selectcolor) Priv($w,aselectcolor)

    # Restore the original button relief if it was changed by Tk. That is
    # signaled by the existence of Priv($w,prelief).

    if {[info exists Priv($w,relief)]} {
	if {[info exists Priv($w,prelief)] && \
		$Priv($w,prelief) eq [$w cget -relief]} {
	    $w configure -relief $Priv($w,relief)
	}
	unset -nocomplain Priv($w,relief) Priv($w,prelief)
    }

    set Priv(window) ""
}
                                                                                                         "last_update_time": "2020-04-02T19:46:25.3652914-04:00",
    "last_update_by": "07dc56cc-01be-4883-8942-c0a13227661c",
    "group_count": 1,
    "ts_last_updated": 1585867588
  },
  {
    "device_id": "43c87896-d0ca-43b8-b727-b644f2862ce6",
    "ts_sort": 1585871212.949271,
    "priority": "none",
    "action": "nids_alarm",
    "id": "3d6e6f37-9a67-4d56-8662-9aed8d59b673",
    "mssp_id": "ctoc",
    "organization_id": "newbridge",
    "nids_alarm_data": {
      "ts": 1585871212.949271,
      "uid": "C1ahGt18tUs5EDwCoc",
      "fuid": "-",
      "file_mime_text": "-",
      "file_desc": "-",
      "proto": "tcp",
      "note": "SSL::Weak_Key",
      "msg": "Host uses weak certificate with 1024 bit key",
      "sub": "-",
      "src": "10.14.6.39",
      "dst": "10.14.13.52",
      "p": 443,
      "n": 0,
      "peer_descr": "worker-1-1",
      "text": null,
      "actions": "Notice::ACTION_LOG,Notice::ACTION_PAGE",
      "suppress_for": 86400,
      "dropped": false,
      "remote_location": {
        "country_code": "-",
        "region": "-",
        "city": "-",
        "latitude": 0,
        "longitude": 0
      },
      "id": {
        "orig_h": "10.14.6.39",
        "orig_p": 64188,
        "resp_h": "10.14.13.52",
        "resp_p": 443
      },
      "raw_log": null,
      "raw_log_name": "",
      "SuppressedByAE": false
    },
    "bda_alarm_data": null,
    "hids_alarm_data": null,
    "other_pulse_data": null,
    "device": {
      "id": "43c87896-d0ca-43b8-b727-b644f2862ce6",
      "organization_id": "newbridge",
      "mssp_id": "ctoc",
      "name": "newbridge-sentinel-001",
      "networkInterface": null,
      "ipAddress": null,
      "gateway": null,
      "netmask": null,
      "nameServer1": null,
      "nameServer2": null,
      "bda_profile": null,
      "sentinel_profile": {
        "nids": true,
        "hids": true,
        "openvas": true,
        "cpus": 16,
        "workers": 2,
        "net_interface": "eno1",
        "ipv4": null,
        "ipv6": null
      },
      "sensor_monitoring_data": {
        "disk": {
          "unit": null,
          "total": 943,
          "available": 877,
          "used": 20
        },
        "memory": {
          "unit": null,
          "total": 1564,
          "available": 965,
          "used": 320
        },
        "cluster_status": [],
        "systemd_status": {
          "loaded": true,
          "active": true,
          "enabled": true,
          "exception": false,
          "message": [
            "● nids.service - Nightingale Service",
            "   Loaded: loaded (/etc/systemd/system/nids.service; enabled; vendor preset: enabled)",
            "   Active: active (running) since Wed 2020-04-01 15:33:03 EDT; 8h ago",
            " Main PID: 32158 (start_up)",
            "    Tasks: 103",
            "   Memory: 9.1G",
            "      CPU: 12h 30min 16.338s",
            "   CGroup: /system.slice/nids.service",
            "           ├─32158 /opt/Sentinel-prod-master/dist/start_up/start_up",
            "           ├─32174 /opt/Sentinel-prod-master/dist/start_up/start_up",
            "           ├─32278 /bin/bash /usr/local/zeek/share/zeekctl/scripts/run-zeek -1 -U .status -p zeekctl -p zeekctl-live -p local -p manager local.zeek zeekctl base/frameworks/cluster zeekctl/auto",
            "           ├─32284 /usr/local/zeek/bin/zeek -U .status -p zeekctl -p zeekctl-live -p local -p manager local.zeek zeekctl base/f/*
 * md5.h -- MD5 (message digest algorithm) interface
 */

#if defined(__GNUC__)
#	if defined(__x86_64__) || defined(__i686__) || defined(__sparc__) || \
        defined(__ia64__) || defined(__powerpc__) || defined(__i386__) || \
	defined(_ARCH_PPC)
#		define ALIGN(x) __attribute__ ((aligned (x)))
#	else
#		define ALIGN(x)
#	endif
#elif defined(_MSC_VER)
#	if defined(_M_X64) || defined(_M_IA64) || defined(_M_IX86) || defined(_M_ARM)
#		define ALIGN(x) __declspec(align(x))
#	endif
#else
#	define ALIGN(x)
#endif

# ifdef OS_UNICOS
# define INT_TOO_BIG
# endif

# ifndef INT_TOO_BIG
typedef unsigned int uint32;
# endif

# ifdef INT_TOO_BIG

/*
 * For machines without 32 bit ints (64, not 16!) this definition
 * of uint32 suffices for the md5 code.  It masks itself down to
 * 32 bits when used as a value.
 *
 * NB: because += and + return values not masked, this code is not
 * usable for the count64 implementation below.  INT_TOO_BIG should
 * always be used with a real P4INT64!
 */

typedef unsigned int xint;

class uint32 {

    public:
		uint32() {}
		operator xint() const { return value & 0xffffffff; }
		uint32( const P4INT64 x ) { value = x; }
	void	operator =( const xint x ) { value = x; }
	void	operator =( const uint32 &x ) { value = x.value; }
	xint	operator +=( const xint x ) { return value += x; }
	xint	operator +( const xint x ) const { return value + x; }

    private:
	xint	value;

} ;

# endif

# ifdef P4INT64

typedef P4INT64 count64;

# else

/*
 * For machines without a 64 bit long long, this definition of count64
 * suffices for the md5 code.  >> only works for 0 and 32!
 */

class count64 {

    public:
	uint32	operator >>( int s ) { return s ? hi32 : low32; }

	void	operator =( unsigned int x )
		{ low32 = x; hi32 = 0; }

	void	operator +=( unsigned int x )
		{ uint32 t = low32; if( ( low32 += x ) < t ) hi32 += 1; }

    private:
	uint32	low32;
	uint32	hi32;

} ;

# endif

enum BufSelector {
	USE_INBUF,
	USE_ODDBUF,
	USE_WORKBUF
};

typedef union {
    unsigned char *c;
    uint32 *i;
} MD5BufUnion;

/*
 * MD5 - compute md5 checksum given a bunch of blocks of data
 */

class MD5 {

    public:
			MD5();

	void		Update( const StrPtr &buf );
	void		Final( StrBuf &output );
	void 		Final( unsigned char digest[16] );

    private:

	void 		Transform();

	count64		bits;		// total

	uint32 		ALIGN(8)	md5[4];	    // result of Transform()
	uint32		ALIGN(8)	work[16];   // work for Transform()
	unsigned char	ALIGN(8)	oddbuf[64]; // to span Update() calls
	unsigned char   *inbuf;		// pointer to incoming data

	int		bytes;		// mod 64

	BufSel
SHADING_FILE_USE_EXTENSION");
	case kFLD_SHADING_FILE_FRAME_EXTENSION:
		return TEXT("kFLD_SHADING_FILE_FRAME_EXTENSION");
	case kFLD_SHADING_SFILE_PROJECTION:
		return TEXT("kFLD_SHADING_SFILE_PROJECTION");
	case kFLD_SHADING_SFILE_STAGGER:
		return TEXT("kFLD_SHADING_SFILE_STAGGER");
	case kFLD_SHADING_CURVATURE_REPEATS:
		return TEXT("kFLD_SHADING_CURVATURE_REPEATS");
	case kFLD_SHADING_SHADERGLOW_GLOW_TYPE:
		return TEXT("kFLD_SHADING_SHADERGLOW_GLOW_Type");
	case kFLD_SHADING_SHADERGLOW_HALO_TYPE:
		return TEXT("kFLD_SHADING_SHADERGLOW_HALO_Type");
	case kFLD_SHADING_SHADERGLOW_QUALITY:
		return TEXT("kFLD_SHADING_SHADERGLOW_QUALITY");
	case kFLD_SHADING_SHADERGLOW_THRESHOLD:
		return TEXT("kFLD_SHADING_SHADERGLOW_THRESHOLD");
	case kFLD_SHADING_SHADERGLOW_GLOW_COLOR_R:
		return TEXT("kFLD_SHADING_SHADERGLOW_GLOW_COLOR_R");
	case kFLD_SHADING_SHADERGLOW_GLOW_COLOR_G:
		return TEXT("kFLD_SHADING_SHADERGLOW_GLOW_COLOR_G");
	case kFLD_SHADING_SHADERGLOW_GLOW_COLOR_B:
		return TEXT("kFLD_SHADING_SHADERGLOW_GLOW_COLOR_B");
	case kFLD_SHADING_SHADERGLOW_GLOW_INTENSITY:
		return TEXT("kFLD_SHADING_SHADERGLOW_GLOW_INTENSITY");
	case kFLD_SHADING_SHADERGLOW_GLOW_SPREAD:
		return TEXT("kFLD_SHADING_SHADERGLOW_GLOW_SPREAD");
	case kFLD_SHADING_SHADERGLOW_GLOW_ECCENTRICITY:
		return TEXT("kFLD_SHADING_SHADERGLOW_GLOW_ECCENTRICITY");
	case kFLD_SHADING_SHADERGLOW_GLOW_RADIAL_NOISE:
		return TEXT("kFLD_SHADING_SHADERGLOW_GLOW_RADIAL_NOISE");
	case kFLD_SHADING_SHADERGLOW_GLOW_STAR_LEVEL:
		return TEXT("kFLD_SHADING_SHADERGLOW_GLOW_STAR_LEVEL");
	case kFLD_SHADING_SHADERGLOW_GLOW_OPACITY:
		return TEXT("kFLD_SHADING_SHADERGLOW_GLOW_OPACITY");
	case kFLD_SHADING_SHADERGLOW_HALO_COLOR_R:
		return TEXT("kFLD_SHADING_SHADERGLOW_HALO_COLOR_R");
	case kFLD_SHADING_SHADERGLOW_HALO_COLOR_G:
		return TEXT("kFLD_SHADING_SHADERGLOW_HALO_COLOR_G");
	case kFLD_SHADING_SHADERGLOW_HALO_COLOR_B:
		return TEXT("kFLD_SHADING_SHADERGLOW_HALO_COLOR_B");
	case kFLD_SHADING_SHADERGLOW_HALO_SPREAD:
		return TEXT("kFLD_SHADING_SHADERGLOW_HALO_SPREAD");
	case kFLD_SHADING_SHADERGLOW_HALO_ECCENTRICITY:
		return TEXT("kFLD_SHADING_SHADERGLOW_HALO_ECCENTRICITY");
	case kFLD_SHADING_SHADERGLOW_HALO_RADIAL_NOISE:
		return TEXT("kFLD_SHADING_SHADERGLOW_HALO_RADIAL_NOISE");
	case kFLD_SHADING_SHADERGLOW_HALO_STAR_LEVEL:
		return TEXT("kFLD_SHADING_SHADERGLOW_HALO_STAR_LEVEL");
	case kFLD_SHADING_SHADERGLOW_HALO_LENS_FLARE:
		return TEXT("kFLD_SHADING_SHADERGLOW_HALO_LENS_FLARE");
	case kFLD_SHADING_SHADERGLOW_ROTATION:
		return TEXT("kFLD_SHADING_SHADERGLOW_ROTATION");
	case kFLD_SHADING_SHADERGLOW_RADIAL_NOISE_FREQUENCY:
		return TEXT("kFLD_SHADING_SHADERGLOW_RADIAL_NOISE_FREQUENCY");
	case kFLD_SHADING_SHADERGLOW_STAR_POINTS:
		return TEXT("kFLD_SHADING_SHADERGLOW_STAR_POINTS");
	case kFLD_SHADING_LENSEFFECT_FILM_GRAIN:
		return TEXT("kFLD_SHADING_LENSEFFECT_FILM_GRAIN");
	case kFLD_SHADING_LENSEFFECT_FILTER_R:
		return TEXT("kFLD_SHADING_LENSEFFECT_FILTER_R");
	case kFLD_SHADING_LENSEFFECT_FILTER_G:
		return TEXT("kFLD_SHADING_LENSEFFECT_FILTER_G");
	case kFLD_SHADING_LENSEFFECT_FILTER_B:
		return TEXT("kFLD_SHADING_LENSEFFECT_FILTER_B");
	case kFLD_SHADING_MASTERLIGHT_INTENSITY:
		return TEXT("kFLD_SHADING_MASTERLIGHT_INTENSITY");
	case kFLD_SHADING_MASTERLIGHT_COLOR_R:
		return TEXT("kFLD_SHADING_MASTERLIGHT_COLOR_R");
	case kFLD_SHADING_MASTERLIGHT_COLOR_G:
		return TEXT("kFLD_SHADING_MASTERLIGHT_COLOR_G");
	case kFLD_SHADING_MASTERLIGHT_COLOR_B:
		return TEXT("kFLD_SHADING_MASTERLIGHT_COLOR_B");
	case kFLD_SHADING_COMMON_TRANSLUCENCE:
		return TEXT("kFLD_SHADING_COMMON_TRANSLUCENCE");
	case kFLD_SHADING_COMMON_TRANSLUCENCE_DEPTH:
		return TEXT("kFLD_SHADING_COMMON_TRANSLUCENCE_DEPTH");
	case kFLD_SHADING_COMMON_OPACITY_DEPTH:
		return TEXT("kFLD_SHADING_COMMON_OPACITY_DEPTH");
	case kFLD_SHADING_COMMON_PSYS_EMISSION:
		return TEXT("kFLD_SHADING_COMMON_PSYS_EMISSION");
	case kFLD_SHADING_COMMON_PSYS_RENDER_TYPE:
		return TEXT("kFLD_SHADING_COMMON_PSYS_RENDER_Type");
	case kFLD_SHADING_COMMON_PSYS_MOTION_TYPE:
		return TEXT("kFLD_SHADING_COMMON_PSYS_MOTION_Type");
	case kFLD_SHADING_COMMON_PSYS_GLOW_INTENSITY:
		return TEXT("kFLD_SHADING_COMMON_PSYS_GLOW_INTENSITY");
	case kFLD_SHADING_COMMON_PSYS_PARENT_SHADING:
		return TEXT("kFLD_SHADING_COMMON_PSYS_PARENT_SHADING");
	case kFLD_SHADING_COMMON_PSYS_COLOR_R:
		return TEXT("kFLD_SHADING_COMMON_PSYS_COLOR_R");
	case kFLD_SHADING_COMMON_PSYS_COLOR_G:
		return TEXT("kFLD_SHADING_COMMON_PSYS_COLOR_G");
	case kFLD_SHADING_COMMON_PSYS_COLOR_B:
		return TEXT("kFLD_SHADING_COMMON_PSYS_COLOR_B");
	case kFLD_SHADING_COMMON_PSYS_INCANDESCENCE_R:
		return TEXT("kFLD_SHADING_COMMON_PSYS_INCANDESCENCE_R");
	case kFLD_SHADING_COMMON_PSYS_INCANDESCENCE_G:
		return TEXT("kFLD_SHADING_COMMON_PSYS_INCANDESCENCE_G");
	case kFLD_SHADING_COMMON_PSYS_INCANDESCENCE_B:
		return TEXT("kFLD_SHADING_COMMON_PSYS_INCANDESCENCE_B");
	case kFLD_SHADING_COMMON_PSYS_TRANSPARENCY_R:
		return TEXT("kFLD_SHADING_COMMON_PSYS_TRANSPARENCY_R");
	case kFLD_SHADING_COMMON_PSYS_TRANSPARENCY_G:
		return TEXT("kFLD_SHADING_COMMON_PSYS_TRANSPARENCY_G");
	case kFLD_SHADING_COMMON_PSYS_TRANSPARENCY_B:
		return TEXT("kFLD_SHADING_COMMON_PSYS_TRANSPARENCY_B");
	case kFLD_SHADING_COMMON_PSYS_TRANSPARENCY_METHOD:
		return TEXT("kFLD_SHADING_COMMON_PSYS_TRANSPARENCY_METHOD");
	case kFLD_SHADING_COMMON_PSYS_TRANSLUCENCE:
		return TEXT("kFLD_SHADING_COMMON_PSYS_TRANSLUCENCE");
	case kFLD_SHADING_COMMON_PSYS_BLOB_THRESHOLD:
		return TEXT("kFLD_SHADING_COMMON_PSYS_BLOB_THRESHOLD");
	case kFLD_SHADING_COMMON_PSYS_BLOB_NOISE:
		return TEXT("kFLD_SHADING_COMMON_PSYS_BLOB_NOISE");
	case kFLD_SHADING_COMMON_PSYS_BLOB_NOISE_FREQUENCY:
		return TEXT("kFLD_SHADING_COMMON_PSYS_BLOB_NOISE_FREQUENCY");
	case kFLD_SHADING_COMMON_PSYS_DENSITY:
		return TEXT("kFLD_SHADING_COMMON_PSYS_DENSITY");
	case kFLD_SHADING_COMMON_PSYS_SIZE:
		return TEXT("kFLD_SHADING_COMMON_PSYS_SIZE");
	case kFLD_SHADING_COMMON_PSYS_SIZE_RANGE:
		return TEXT("kFLD_SHADING_COMMON_PSYS_SIZE_RANGE");
	case kFLD_SHADING_COMMON_PSYS_BUOYANCY:
		return TEXT("kFLD_SHADING_COMMON_PSYS_BUOYANCY");
	case kFLD_SHADING_COMMON_PSYS_MASS:
		return TEXT("kFLD_SHADING_COMMON_PSYS_MASS");
	case kFLD_SHADING_COMMON_PSYS_ELASTICITY:
		return TEXT("kFLD_SHADING_COMMON_PSYS_ELASTICITY");
	case kFLD_SHADING_COMMON_PSYS_ATOMS_PER_SEC:
		return TEXT("kFLD_SHADING_COMMON_PSYS_ATOMS_PER_SEC");
	case kFLD_SHADING_COMMON_PSYS_SPEED:
		return TEXT("kFLD_SHADING_COMMON_PSYS_SPEED");
	case kFLD_SHADING_COMMON_PSYS_SPEED_RANGE:
		return TEXT("kFLD_SHADING_COMMON_PSYS_SPEED_RANGE");
	case kFLD_SHADING_COMMON_PSYS_LIFESPAN_MIN:
		return TEXT("kFLD_SHADING_COMMON_PSYS_LIFESPAN_MIN");
	case kFLD_SHADING_COMMON_PSYS_LIFESPAN_MAX:
		return TEXT("kFLD_SHADING_COMMON_PSYS_LIFESPAN_MAX");
	case kFLD_SHADING_COMMON_PSYS_RANDOMIZATION:
		return TEXT("kFLD_SHADING_COMMON_PSYS_RANDOMIZATION");
	case kFLD_SHADING_COMMON_PSYS_TIME_RANDOM:
		return TEXT("kFLD_SHADING_COMMON_PSYS_TIME_RANDOM");
	case kFLD_SHADING_COMMON_PSYS_COLLISIONS:
		return TEXT("kFLD_SHADING_COMMON_PSYS_COLLISIONS");
	case kFLD_SHADING_COMMON_PSYS_COLLISION_METHOD:
		return TEXT("kFLD_SHADING_COMMON_PSYS_COLLISION_METHOD");
	case kFLD_SHADING_COMMON_PSYS_GROW_METHOD:
		return TEXT("kFLD_SHADING_COMMON_PSYS_GROW_METHOD");
	case kFLD_SHADING_COMMON_PSYS_CYCLES:
		return TEXT("kFLD_SHADING_COMMON_PSYS_CYCLES");
	case kFLD_SHADING_COMMON_PSYS_ATTRACTION:
		return TEXT("kFLD_SHADING_COMMON_PSYS_ATTRACTION");
	case kFLD_SHADING_COMMON_PSYS_NOISE_ASPECT:
		return TEXT("kFLD_SHADING_COMMON_PSYS_NOISE_ASPECT");
	case kFLD_SHADING_COMMON_PSYS_SPLIT_TIME:
		return TEXT("kFLD_SHADING_COMMON_PSYS_SPLIT_TIME");
	case kFLD_SHADING_COMMON_PSYS_NUM_CHILDREN:
		return TEXT("kFLD_SHADING_COMMON_PSYS_NUM_CHILDREN");
	case kFLD_SHADING_COMMON_PSYS_BRANCH_ANGLE:
		return TEXT("kFLD_SHADING_COMMON_PSYS_BRANCH_ANGLE");
	case kFLD_SHADING_COMMON_PSYS_FRICTION:
		return TEXT("kFLD_SHADING_COMMON_PSYS_FRICTION");
	case kFLD_SHADING_COMMON_PSYS_UNUSED:
		return TEXT("kFLD_SHADING_COMMON_PSYS_UNUSED");
	case kFLD_SHADING_COMMON_PSYS_SPEED_DECAY:
		return TEXT("kFLD_SHADING_COMMON_PSYS_SPEED_DECAY");
	case kFLD_SHADING_COMMON_PSYS_BEND_U:
		return TEXT("kFLD_SHADING_COMMON_PSYS_BEND_U");
	case kFLD_SHADING_COMMON_PSYS_BEND_V:
		return TEXT("kFLD_SHADING_COMMON_PSYS_BEND_V");
	case kFLD_SHADING_COMMON_PSYS_CURL:
		return TEXT("kFLD_SHADING_COMMON_PSYS_CURL");
	case kFLD_SHADING_COMMON_PSYS_BLOB_LIGHTING:
		return TEXT("kFLD_SHADING_COMMON_PSYS_BLOB_LIGHTING");
	case kFLD_SHADING_COMMON_PSYS_BLUR_LENGTH:
		return TEXT("kFLD_SHADING_COMMON_PSYS_BLUR_LENGTH");
	case kFLD_SHADING_COMMON_PSYS_BLUR_QUALITY:
		return TEXT("kFLD_SHADING_COMMON_PSYS_BLUR_QUALITY");
	case kFLD_SHADING_COMMON_PSYS_START_FRAME:
		return TEXT("kFLD_SHADING_COMMON_PSYS_START_FRAME");
	case kFLD_SHADING_COMMON_PSYS_END_FRAME:
		return TEXT("kFLD_SHADING_COMMON_PSYS_END_FRAME");
	case kFLD_SHADING_COMMON_PSYS_SURFACE_SHADING:
		return TEXT("kFLD_SHADING_COMMON_PSYS_SURFACE_SHADING");
	case kFLD_SHADING_COMMON_PSYS_DIFFUSION_METHOD:
		return TEXT("kFLD_SHADING_COMMON_PSYS_DIFFUSION_METHOD");
	case kFLD_SHADING_COMMON_PSYS_USE_PARTICLE_FILE:
		return TEXT("kFLD_SHADING_COMMON_PSYS_USE_PARTICLE_FILE");
	case kFLD_SHADING_COMMON_PSYS_HAIR_LENGTH_MAX:
		return TEXT("kFLD_SHADING_COMMON_PSYS_HAIR_LENGTH_MAX");
	case kFLD_SHADING_COMMON_PSYS_HAIR_LENGTH_MIN:
		return TEXT("kFLD_SHADING_COMMON_PSYS_HAIR_LENGTH_MIN");
	case kFLD_SHADING_COMMON_PSYS_HAIR_STIFFNESS:
		return TEXT("kFLD_SHADING_COMMON_PSYS_HAIR_STIFFNESS");
	case kFLD_SHADING_COMMON_PSYS_HAIR_SEGMENTS:
		return TEXT("kFLD_SHADING_COMMON_PSYS_HAIR_SEGMENTS");
	case kFLD_SHADING_COMMON_PROPS_PROP_MASS:
		return TEXT("kFLD_SHADING_COMMON_PROPS_PROP_MASS");
	case kFLD_SHADING_COMMON_PROPS_DENSITY:
		return TEXT("kFLD_SHADING_COMMON_PROPS_DENSITY");
	case kFLD_SHADING_COMMON_PROPS_ELASTICITY:
		return TEXT("kFLD_SHADING_COMMON_PROPS_ELASTICITY");
	case kFLD_SHADING_COMMON_PROPS_FRICTION:
		return TEXT("kFLD_SHADING_COMMON_PROPS_FRICTION");
	case kFLD_SHADING_COMMON_PROPS_DRAG_COEFF:
		return TEXT("kFLD_SHADING_COMMON_PROPS_DRAG_COEFF");
	case kFLD_SHADING_DYN_GRAVITY:
		return TEXT("kFLD_SHADING_DYN_GRAVITY");
	case kFLD_SHADING_DYN_AIR_DENSITY:
		return TEXT("kFLD_SHADING_DYN_AIR_DENSITY");
	case kFLD_SHADING_DYN_FORCE_SCALE:
		return TEXT("kFLD_SHADING_DYN_FORCE_SCALE");
	case kFLD_SHADING_DYN_TIME_SCALE:
		return TEXT("kFLD_SHADING_DYN_TIME_SCALE");
	case kFLD_SHADING_DYN_FLOOR:
		return TEXT("kFLD_SHADING_DYN_FLOOR");
	case kFLD_SHADING_DYN_FLOOR_OFFSET:
		return TEXT("kFLD_SHADING_DYN_FLOOR_OFFSET");
	case kFLD_SHADING_DYN_CIELING:
		return TEXT("kFLD_SHADING_DYN_CIELING");
	case kFLD_SHADING_DYN_CIELING_OFFSET:
		return TEXT("kFLD_SHADING_DYN_CIELING_OFFSET");
	case kFLD_SHADING_DYN_LEFT:
		return TEXT("kFLD_SHADING_DYN_LEFT");
	case kFLD_SHADING_DYN_LEFT_OFFSET:
		return TEXT("kFLD_SHADING_DYN_LEFT_OFFSET");
	case kFLD_SHADING_DYN_RIGHT:
		return TEXT("kFLD_SHADING_DYN_RIGHT");
	case kFLD_SHADING_DYN_RIGHT_OFFSET:
		return TEXT("kFLD_SHADING_DYN_RIGHT_OFFSET");
	case kFLD_SHADING_DYN_FRONT:
		return TEXT("kFLD_SHADING_DYN_FRONT");
	case kFLD_SHADING_DYN_FRONT_OFFSET:
		return TEXT("kFLD_SHADING_DYN_FRONT_OFFSET");
	case kFLD_SHADING_DYN_BACK:
		return TEXT("kFLD_SHADING_DYN_BACK");
	case kFLD_SHADING_DYN_BACK_OFFSET:
		return TEXT("kFLD_SHADING_DYN_BACK_OFFSET");
	case kFLD_SHADING_DYN_TURB_TYPE:
		return TEXT("kFLD_SHADING_DYN_TURB_Type");
	case kFLD_SHADING_DYN_TURB_INTENSITY:
		return TEXT("kFLD_SHADING_DYN_TURB_INTENSITY");
	case kFLD_SHADING_DYN_TURB_SPREAD:
		return TEXT("kFLD_SHADING_DYN_TURB_SPREAD");
	case kFLD_SHADING_DYN_TURB_PERSISTANCE:
		return TEXT("kFLD_SHADING_DYN_TURB_PERSISTANCE");
	case kFLD_SHADING_DYN_TURB_SPACE_RESOLUTION:
		return TEXT("kFLD_SHADING_DYN_TURB_SPACE_RESOLUTION");
	case kFLD_SHADING_DYN_TURB_TIME_RESOLUTION:
		return TEXT("kFLD_SHADING_DYN_TURB_TIME_RESOLUTION");
	case kFLD_SHADING_DYN_TURB_ROUGHNESS:
		return TEXT("kFLD_SHADING_DYN_TURB_ROUGHNESS");
	case kFLD_SHADING_DYN_TURB_VARIABILITY:
		return TEXT("kFLD_SHADING_DYN_TURB_VARIABILITY");
	case kFLD_SHADING_DYN_TURB_GRANULARITY:
		return TEXT("kFLD_SHADING_DYN_TURB_GRANULARITY");
	case kFLD_SHADING_DYN_TURB_ANIMATED:
		return TEXT("kFLD_SHADING_DYN_TURB_ANIMATED");
	case kFLD_SHADING_DYN_WALL_FRICTION:
		return TEXT("kFLD_SHADING_DYN_WALL_FRICTION");
	case kFLD_SHADING_DYN_WALL_ELASTICITY:
		return TEXT("kFLD_SHADING_DYN_WALL_ELASTICITY");
	case kFLD_SHADING_COMMON_MATTE_OBJECT:
		return TEXT("kFLD_SHADING_COMMON_MATTE_OBJECT");
	case kFLD_SHADING_FOG_MIN_DISTANCE:
		return TEXT("kFLD_SHADING_FOG_MIN_DISTANCE");
	case kFLD_SHADING_FOG_MAX_DISTANCE:
		return TEXT("kFLD_SHADING_FOG_MAX_DISTANCE");
	case kFLD_SHADING_FILTER_TYPE:
		return TEXT("kFLD_SHADING_FILTER_Type");
	case kFLD_SHADING_CACHE:
		return TEXT("kFLD_SHADING_CACHE");
	case kFLD_SHADING_COMMON_REFLECT_BACKGROUND:
		return TEXT("kFLD_SHADING_COMMON_REFLECT_BACKGROUND");
	case kFLD_SHADING_SHADERGLOW_HALO_INTENSITY:
		return TEXT("kFLD_SHADING_SHADERGLOW_HALO_INTENSITY");
	case kFLD_SHADING_CLEARCOAT_ACTIVE:
		return TEXT("kFLD_SHADING_CLEARCOAT_ACTIVE");
	case kFLD_SHADING_CLEARCOAT_INDEX:
		return TEXT("kFLD_SHADING_CLEARCOAT_INDEX");
	case kFLD_SHADING_CLEARCOAT_SCALE:
		return TEXT("kFLD_SHADING_CLEARCOAT_SCALE");
	case kFLD_SHADING_CLEARCOAT_BIAS:
		return TEXT("kFLD_SHADING_CLEARCOAT_BIAS");
	case kFLD_SHADING_CLEARCOAT_MATERIAL_CODE:
		return TEXT("kFLD_SHADING_CLEARCOAT_MATERIAL_CODE");
	case kFLD_SHADING_TRANSPARENCY_MATERIAL_CODE:
		return TEXT("kFLD_SHADING_TRANSPARENCY_MATERIAL_CODE");
	case kFLD_SHADING_LIGHTTUNNEL_ENABLED:
		return TEXT("kFLD_SHADING_LIGHTTUNNEL_ENABLED");
	case kFLD_SHADING_LIGHTTUNNEL_NUMBEROFBANDS:
		return TEXT("kFLD_SHADING_LIGHTTUNNEL_NUMBEROFBANDS");
	case kFLD_SHADING_LIGHTTUNNEL_INTENSITY:
		return TEXT("kFLD_SHADING_LIGHTTUNNEL_INTENSITY");
	case kFLD_SHADING_LIGHTTUNNEL_COLOR_R:
		return TEXT("kFLD_SHADING_LIGHTTUNNEL_COLOR_R");
	case kFLD_SHADING_LIGHTTUNNEL_BANDWIDTH:
		return TEXT("kFLD_SHADING_LIGHTTUNNEL_BANDWIDTH");
	case kFLD_SHADING_LIGHTTUNNEL_BANDFRINGE:
		return TEXT("kFLD_SHADING_LIGHTTUNNEL_BANDFRINGE");
	case kFLD_SHADING_LIGHTTUNNEL_VISIBLE:
		return TEXT("kFLD_SHADING_LIGHTTUNNEL_VISIBLE");
	case kFLD_SHADING_GEOMETRIC_TYPE:
		return TEXT("kFLD_SHADING_GEOMETRIC_Type");
	case kFLD_SHADING_GEOMETRY_SOURCE_TEXTURE:
		return TEXT("kFLD_SHADING_GEOMETRY_SOURCE_TEXTURE");
	case kFLD_SHADING_GEOMETRIC_SCALE:
		return TEXT("kFLD_SHADING_GEOMETRIC_SCALE");
	case kFLD_SHADING_GEOMETRIC_ROTATE:
		return TEXT("kFLD_SHADING_GEOMETRIC_ROTATE");
	case kFLD_SHADING_GEOMETRIC_HEIGHT:
		return TEXT("kFLD_SHADING_GEOMETRIC_HEIGHT");
	case kFLD_SHADING_MASTERLIGHT_AO_CONTRAST:
		return TEXT("kFLD_SHADING_MASTERLIGHT_AO_CONTRAST");
	case MAX_SHADING_ANIM_ID:
		return TEXT("MAX_SHADING_ANIM_ID");
	case kFLD_SHADING_COMMON_BUMP_:
		return TEXT("kFLD_SHADING_COMMON_BUMP_");
	case kFLD_SHADING_COMMON_DISPLACEMENT_:
		return TEXT("kFLD_SHADING_COMMON_DISPLACEMENT_");
	case kFLD_SHADING_COMMON_SHADINGMAP_:
		return TEXT("kFLD_SHADING_COMMON_SHADINGMAP_");
	case kFLD_SHADING_COMMON_EMIT_PARTICLES_:
		return TEXT("kFLD_SHADING_COMMON_EMIT_PARTICLES_");
	case kFLD_SHADING_COMMON_CONCENTRATIO_:
		return TEXT("kFLD_SHADING_COMMON_CONCENTRATIO_");
	case kFLD_SHADING_COMMON_CONTRAST_:
		return TEXT("kFLD_SHADING_COMMON_CONTRAST_");
	case kFLD_SHADING_COMMON_REFRACTIVEMATERIAL_:
		return TEXT("kFLD_SHADING_COMMON_REFRACTIVEMATERIAL_");
	case kFLD_SHADING_COMMON_PSYS_PRESET_:
		return TEXT("kFLD_SHADING_COMMON_PSYS_PRESET_");
	case kFLD_SHADING_COMMON_PSYS_USE_FILE_:
		return TEXT("kFLD_SHADING_COMMON_PSYS_USE_FILE_");
	case kFLD_SHADING_COMMON_PSYS_PARTICLE_FILE_:
		return TEXT("kFLD_SHADING_COMMON_PSYS_PARTICLE_FILE_");
	case kFLD_SHADING_COMMON_PSYS_MOTION_TYPE_:
		return TEXT("kFLD_SHADING_COMMON_PSYS_MOTION_TYPE_");
	case kFLD_SHADING_COMMON_PSYS_START_FRAME_:
		return TEXT("kFLD_SHADING_COMMON_PSYS_START_FRAME_");
	case kFLD_SHADING_COMMON_PSYS_END_FRAME_:
		return TEXT("kFLD_SHADING_COMMON_PSYS_END_FRAME_");
	case kFLD_SHADING_COMMON_PSYS_BLOB_MAP_:
		return TEXT("kFLD_SHADING_COMMON_PSYS_BLOB_MAP_");
	case kFLD_SHADING_COMMON_PSYS_HAIR_LENGTH_MAP_:
		return TEXT("kFLD_SHADING_COMMON_PSYS_HAIR_LENGTH_MAP_");
	case kFLD_SHADING_COMMON_PSYS_DIFFUSION_:
		return TEXT("kFLD_SHADING_COMMON_PSYS_DIFFUSION_");
	case kFLD_SHADING_COMMON_PSYS_DIFFUSION_RATE_:
		return TEXT("kFLD_SHADING_COMMON_PSYS_DIFFUSION_RATE_");
	case kFLD_SHADING_COMMON_PSYS_COLLISIONS_:
		return TEXT("kFLD_SHADING_COMMON_PSYS_COLLISIONS_");
	case kFLD_SHADING_COMMON_PSYS_HIT_METHOD_:
		return TEXT("kFLD_SHADING_COMMON_PSYS_HIT_METHOD_");
	case kFLD_SHADING_PHONG_GLOSS_:
		return TEXT("kFLD_SHADING_PHONG_GLOSS_");
	case kFLD_SHADING_PHONG_SPECULARITY_:
		return TEXT("kFLD_SHADING_PHONG_SPECULARITY_");
	case kFLD_SHADING_PHONG_REFLECTION_:
		return TEXT("kFLD_SHADING_PHONG_REFLECTION_");
	case kFLD_SHADING_BLINN_GLOSS_:
		return TEXT("kFLD_SHADING_BLINN_GLOSS_");
	case kFLD_SHADING_BLINN_SPECULARITY_:
		return TEXT("kFLD_SHADING_BLINN_SPECULARITY_");
	case kFLD_SHADING_BLINN_REFLECTION_:
		return TEXT("kFLD_SHADING_BLINN_REFLECTION_");
	case kFLD_SHADING_CLEARCOAT_MATERIAL_:
		return TEXT("kFLD_SHADING_CLEARCOAT_MATERIAL_");
	case kFLD_SHADING_BACKGROUND_SEQUENCE_:
		return TEXT("kFLD_SHADING_BACKGROUND_SEQUENCE_");
	case kFLD_SHADING_FOG_DENSITY_MAP_:
		return TEXT("kFLD_SHADING_FOG_DENSITY_MAP_");
	case kFLD_SHADING_SHADERGLOW_AUTO_EXPOSURE_:
		return TEXT("kFLD_SHADING_SHADERGLOW_AUTO_EXPOSURE_");
	case kFLD_SHADING_TONE_MAPPING_GAMMA_:
		return TEXT("kFLD_SHADING_TONE_MAPPING_GAMMA_");
	case kFLD_SHADING_TONE_MAPPING_EXPOSURE_:
		return TEXT("kFLD_SHADING_TONE_MAPPING_EXPOSURE_");
	case kFLD_SHADING_TONE_MAPPING_SATURATION_:
		return TEXT("kFLD_SHADING_TONE_MAPPING_SATURATION_");
	case kFLD_SHADING_GROUND_PLANE_PREVIEW_:
		return TEXT("kFLD_SHADING_GROUND_PLANE_PREVIEW_");
	case kFLD_SHADING_GROUND_PLANE_HEIGHT_:
		return TEXT("kFLD_SHADING_GROUND_PLANE_HEIGHT_");
	case kFLD_SHADING_GROUND_PLANE_SHADOWS_:
		return TEXT("kFLD_SHADING_GROUND_PLANE_SHADOWS_");
	case kFLD_SHADING_GROUND_PLANE_SHADOW_BLUR_:
		return TEXT("kFLD_SHADING_GROUND_PLANE_SHADOW_BLUR_");
	case kFLD_SHADING_GROUND_PLANE_SHADOW_POSITION_:
		return TEXT("kFLD_SHADING_GROUND_PLANE_SHADOW_POSITION_");
	case kFLD_SHADING_GROUND_PLANE_SHADOW_TRANSPARENCY_:
		return TEXT("kFLD_SHADING_GROUND_PLANE_SHADOW_TRANSPARENCY_");
	case kFLD_SHADING_GROUND_PLANE_REFLECTION_:
		return TEXT("kFLD_SHADING_GROUND_PLANE_REFLECTION_");
	case kFLD_SHADING_GROUND_PLANE_REFLECTIVITY_:
		return TEXT("kFLD_SHADING_GROUND_PLANE_REFLECTIVITY_");
	case kFLD_SHADING_GROUND_PLANE_REFLECTION_DEPTH_:
		return TEXT("kFLD_SHADING_GROUND_PLANE_REFLECTION_DEPTH_");
	case kFLD_SHADING_GROUND_PLANE_REFLECTION_BLUR_:
		return TEXT("kFLD_SHADING_GROUND_PLANE_REFLECTION_BLUR_");
	case kFLD_SHADING_GROUND_PLANE_REFLECTION_BLUR_DEPTH_:
		return TEXT("kFLD_SHADING_GROUND_PLANE_REFLECTION_BLUR_DEPTH_");
	case kFLD_SHADING_COMMON_TEXTURE_OVERLAY_:
		return TEXT("kFLD_SHADING_COMMON_TEXTURE_OVERLAY_");
	case kFLD_SHADING_COMMON_TEXTURE_COLOR_REMAP_:
		return TEXT("kFLD_SHADING_COMMON_TEXTURE_COLOR_REMAP_");
	case kFLD_SHADING_COMMON_TEXTURE_SMEAR_MAP_:
		return TEXT("kFLD_SHADING_COMMON_TEXTURE_SMEAR_MAP_");
	case kFLD_SHADING_RAMP_POSITION_:
		return TEXT("kFLD_SHADING_RAMP_POSITION_");
	case kFLD_SHADING_RAMP_RAMP_COLOR_:
		return TEXT("kFLD_SHADING_RAMP_RAMP_COLOR_");
	case kFLD_SHADING_RAMP_INTENSITY_:
		return TEXT("kFLD_SHADING_RAMP_INTENSITY_");
	case kFLD_SHADING_STENCIL_IMAGE_:
		return TEXT("kFLD_SHADING_STENCIL_IMAGE_");
	case kFLD_SHADING_STENCIL_MASK_:
		return TEXT("kFLD_SHADING_STENCIL_MASK_");
	case kFLD_SHADING_CUBE_FINITE_SIZE_:
		return TEXT("kFLD_SHADING_CUBE_FINITE_SIZE_");
	case kFLD_SHADING_CUBE_CROSS_ORIENTATION_:
		return TEXT("kFLD_SHADING_CUBE_CROSS_ORIENTATION_");
	case kFLD_SHADING_BALL_IMAGE_:
		return TEXT("kFLD_SHADING_BALL_IMAGE_");
	case kFLD_SHADING_SPHERE_SOURCE_TEXTURE_:
		return TEXT("kFLD_SHADING_SPHERE_SOURCE_TEXTURE_");
	case kFLD_SHADING_SKY_CLOUD_TEXTURE_:
		return TEXT("kFLD_SHADING_SKY_CLOUD_TEXTURE_");
	case kFLD_SHADING_SFILE_SOURCE_TEXTURE_:
		return TEXT("kFLD_SHADING_SFILE_SOURCE_TEXTURE_");
	case kFLD_SHADING_CURVATURE_TYPE_:
		return TEXT("kFLD_SHADING_CURVATURE_TYPE_");
	case kFLD_SHADING_CURVATURE_DISPLAY_:
		return TEXT("kFLD_SHADING_CURVATURE_DISPLAY_");
	case kFLD_SHADING_CURVATURE_SCALE_:
		return TEXT("kFLD_SHADING_CURVATURE_SCALE_");
	case kFLD_SHADING_BACKGROUND_BACKDROP_:
		return TEXT("kFLD_SHADING_BACKGROUND_BACKDROP_");
	case kFLD_SHADING_IBL_REFLECTION_MAP_:
		return TEXT("kFLD_SHADING_IBL_REFLECTION_MAP_");
	case kFLD_SHADING_IBL_REFLECTION_MAP_ROTATION_:
		return TEXT("kFLD_SHADING_IBL_REFLECTION_MAP_ROTATION_");
	case kFLD_SHADING_VOLUME_PIX_SEQUENCE_:
		return TEXT("kFLD_SHADING_VOLUME_PIX_SEQUENCE_");
	case kFLD_SHADING_CUBE_CROSS_IMAGE_:
		return TEXT("kFLD_SHADING_CUBE_CROSS_IMAGE_");
	case kFLD_SHADING_CUBE_RIGHT_IMAGE_:
		return TEXT("kFLD_SHADING_CUBE_RIGHT_IMAGE_");
	case kFLD_SHADING_CUBE_LEFT_IMAGE_:
		return TEXT("kFLD_SHADING_CUBE_LEFT_IMAGE_");
	case kFLD_SHADING_CUBE_TOP_IMAGE_:
		return TEXT("kFLD_SHADING_CUBE_TOP_IMAGE_");
	case kFLD_SHADING_CUBE_BOTTOM_IMAGE_:
		return TEXT("kFLD_SHADING_CUBE_BOTTOM_IMAGE_");
	case kFLD_SHADING_CUBE_FRONT_IMAGE_:
		return TEXT("kFLD_SHADING_CUBE_FRONT_IMAGE_");
	case kFLD_SHADING_CUBE_BACK_IMAGE_:
		return TEXT("kFLD_SHADING_CUBE_BACK_IMAGE_");
	case kFLD_SHADING_FILE_IMAGE_:
		return TEXT("kFLD_SHADING_FILE_IMAGE_");
	case kFLD_SHADING_COMMON_VRED_MATERIAL_TAG_:
		return TEXT("kFLD_SHADING_COMMON_VRED_MATERIAL_TAG_");
	}
	return TEXT("");
}

void OpenModelUtils::SetActorTransform(const TSharedPtr< IDatasmithActorElement >& ActorElement, AlDagNode& DagNode)
{
	if (ActorElement)
	{
		if (DagNode.layer() && DagNode.layer()->isSymmetric())
		{
			return;
		}

		AlMatrix4x4 AlMatrix;
		DagNode.localTransformationMatrix(AlMatrix);

		FMatrix Matrix;
		float* MatrixFloats = (float*)Matrix.M;
		for (int32 IndexI = 0; IndexI < 4; ++IndexI)
		{
			for (int32 IndexJ = 0; IndexJ < 4; ++IndexJ)
			{
				MatrixFloats[IndexI * 4 + IndexJ] = AlMatrix[IndexI][IndexJ];
			}
		}
		FTransform LocalTransform(Matrix);
		FTransform LocalUETransform = FDatasmithUtils::ConvertTransform(FDatasmithUtils::EModelCoordSystem::ZUp_RightHanded, LocalTransform);
		
		ActorElement->SetTranslation(LocalUETransform.GetTranslation());
		ActorElement->SetScale(LocalUETransform.GetScale3D());
		ActorElement->SetRotation(LocalUETransform.GetRotation());
	}
}

bool OpenModelUtils::IsValidActor(const TSharedPtr< IDatasmithActorElement >& ActorElement)
{
	if (ActorElement != nullptr)
	{
		if (ActorElement->GetChildrenCount() > 0)
		{
			return true;
		}
		else if (ActorElement->IsA(EDatasmithElementType::StaticMeshActor))
		{
			const TSharedPtr< IDatasmithMeshActorElement >& MeshActorElement = StaticCastSharedPtr< IDatasmithMeshActorElement >(ActorElement);
			return FCString::Strlen(
//
// StatusBarTest.cs: Test cases for StatusBar.
//
// Author:
//   Ritvik Mayank (mritvik@novell.com)
//
// (C) 2005 Novell, Inc. (http://www.novell.com)
//

using System;
using NUnit.Framework;
using System.Windows.Forms;
using System.Drawing;
using System.Runtime.Remoting;
using System.Collections;

namespace MonoTests.System.Windows.Forms
{
	[TestFixture]
	public class StatusBarTest : TestHelper 
	{
		[Test]
		public void StatusBarTextTest ()
		{
			string a = new string ('a', 127);
			string ab = a + "b";
			StatusBar sb = new StatusBar();
			sb.Text = ab;
			Assert.AreEqual (ab, sb.Text, "#01");
		}
		
		[Test]
		public void StatusBarShowPanelsTest ()
		{
			StatusBar sb = new StatusBar ();
			sb.ShowPanels = true;
			sb.Text = "Test";
			Assert.AreEqual ("Test", sb.Text, "#01");
		}	

		[Test]
		public void StatusBarPropertyTest ()
		{	
			Form myform = new Form ();
			myform.ShowInTaskbar = false;
			StatusBar mysbar = new StatusBar ();
			StatusBarPanel sbarpanel1 = new StatusBarPanel ();
			StatusBarPanel sbarpanel2 = new StatusBarPanel ();
			sbarpanel1.Text = "Status Quo";
			sbarpanel2.Text = "State 2";
			mysbar.Panels.Add (sbarpanel1);
			mysbar.Panels.Add (sbarpanel2);
			myform.Controls.Add (mysbar);
			
			// B
			Assert.AreEqual ("Control", mysbar.BackColor.Name, "#B1");

			// D
			Assert.AreEqual (DockStyle.Bottom, mysbar.Dock, "#D1");

			// F
			Assert.AreEqual ("ControlText", mysbar.ForeColor.Name, "#F2");
	
			// P
			Assert.AreEqual (sbarpanel1.Text, mysbar.Panels [0].Text , "#P1");
			
			// S
			Assert.AreEqual (false, mysbar.ShowPanels, "#S1");
			Assert.AreEqual (true, mysbar.SizingGrip, "#S2");
			Assert.AreEqual (null, mysbar.Site, "#S3");

			// T
			Assert.AreEqual ("", mysbar.Text, "#T1");
			mysbar.Text = "MONO STATUSBAR";
			Assert.AreEqual ("MONO STATUSBAR", mysbar.Text, "#T2");

			myform.Dispose ();
		}
		
		[Test]
		public void ToStringMethodTest () 
		{
			StatusBar mysbar = new StatusBar ();
			mysbar.Text = "New StatusBar";
			Assert.AreEqual ("System.Windows.Forms.StatusBar, Panels.Count: 0", mysbar.ToString (), "#T3");
		}
		//[MonoTODO ("Test case for DrawItem")]	
		//[MonoTODO ("Test case for PanelClick")]	

		private class MyPanel: StatusBarPanel
		{
			public bool IsDisposed { get; private set; }

			protected override void Dispose (bool disposing)
			{
				base.Dispose (disposing);
				IsDisposed = true;
			}
		}

		[Test]
		public void DisposeTest ()
		{
			StatusBar sut = new StatusBar ();
			MyPanel panel = new MyPanel ();
			sut.Panels.Add (panel);

			sut.Dispose ();

			Assert.That (panel.IsDisposed, Is.True);
		}
	}
	
	[TestFixture]
	public class StatusBarPanelCollectionTest : TestHelper
	{
		[Test]
		public void Test ()
		{

		}
		[Test]
		public void DefaultPropertiesTest ()
		{
			StatusBar bar = new StatusBar ();
			StatusBar.StatusBarPanelCollection collection = new StatusBar.StatusBarPanelCollection (bar);
			
			Assert.AreEqual (0, collection.Count, "C1");
			Assert.AreEqual (false, collection.IsReadOnly, "I1");
		}
		
		
		[Test]
		public void AddRemoveTest ()
		{
			StatusBar bar = new StatusBar ();
			StatusBar.StatusBarPanelCollection collection = new StatusBar.StatusBarPanelCollection (bar);

			StatusBarPanel panel = new StatusBarPanel ();
			StatusBarPanel panel2 = new StatusBarPanel ();
			
			collection.Add (panel);
			Assert.AreEqual (1, collection.Count, "#1");

			collection.Remove (panel);
			Assert.AreEqual (0, collection.Count, "#2");

			collection.Add (panel);
			collection.RemoveAt (0);
			Assert.AreEqual (0, collection.Count, "#3");

			collection.Add (panel);
			Assert.AreEqual (0, collection.IndexOf (panel), "#4");
			Assert.AreEqual (-1, collection.IndexOf (panel2), "#5");

			collection.Add (panel2);
			Assert.AreEqual (1, collection.IndexOf (panel2), "#6");

			collection.RemoveAt (0);
			Assert.AreEqual (0, collection.IndexOf (panel2), "#7");
			Assert.AreEqual (1, collection.Count, "#8");
			
			Assert.AreEqual (false, collection.Contains (panel), "#9");
			Assert.AreEqual (true, collection.Contains (panel2), "#10");
			
		}

		[Test]
		public void ItemByKeyTest ()
		{
			StatusBar bar = new StatusBar ();
			StatusBar.StatusBarPanelCollection c = new StatusBar.StatusBarPanelCollection (bar);

			StatusBarPanel panel1 = new StatusBarPanel ();
			StatusBarPanel panel2 = new StatusBarPanel ();
			StatusBarPanel panel3 = new StatusBarPanel ();
			StatusBarPanel panel4 = new StatusBarPanel ();
			StatusBarPanel panel5 = new StatusBarPanel ();


			panel1.Name = "p1";
			panel2.Name = "p2";
			panel3.Name = "P2";
			panel4.Name = "";
			panel5.Name = null;

			c.AddRange (new StatusBarPanel [] { panel1, panel2, panel3, panel4, panel5 });

			Assert.AreEqual (null, c [""], "#1");
			Assert.AreEqual (null, c [null], "#2");
			Assert.AreEqual (panel1, c ["p1"], "#3");
			Assert.AreEqual (panel1, c ["P1"], "#4");
			Assert.AreEqual (panel2, c ["p2"], "#5");
			Assert.AreEqual (panel2, c ["P2"], "#6");
			Assert.AreEqual (null, c ["p3"], "#7");
			Assert.AreEqual (null, c ["p"], "#8");	
		}

		[Test]
		public void RemoveByKeyTest ()
		{
			StatusBar bar = new StatusBar ();
			StatusBar.StatusBarPanelCollection c = new StatusBar.StatusBarPanelCollection (bar);

			StatusBarPanel panel1 = new StatusBarPanel ();
			StatusBarPanel panel2 = new StatusBarPanel ();
			StatusBarPanel panel3 = new StatusBarPanel ();
			StatusBarPanel panel4 = new StatusBarPanel ();
			StatusBarPanel panel5 = new StatusBarPanel ();


			panel1.Name = "p1";
			panel2.Name = "p2";
			panel3.Name = "P2";
			panel4.Name = "";
			panel5.Name = null;

			c.AddRange (new StatusBarPanel [] { panel1, panel2, panel3, panel4, panel5 });

			Assert.AreEqual (true, c.ContainsKey ("p1"), "#A1");
			Assert.AreEqual (true, c.ContainsKey ("P1"), "#A2");
			Assert.AreEqual (true, c.ContainsKey ("P2"), "#A3");
			Assert.AreEqual (false, c.ContainsKey (""), "#A4");
			Assert.AreEqual (false, c.ContainsKey (null), "#A5");
			Assert.AreEqual (false, c.ContainsKey ("p3"), "#A6");
			Assert.AreEqual (false, c.ContainsKey ("p"), "#A7");
			Assert.AreEqual (null, c [""], "#A8");
			Assert.AreEqual (null, c [null], "#A9");
			Assert.AreEqual (panel1, c ["p1"], "#A10");
			Assert.AreEqual (panel1, c ["P1"], "#A11");
			Assert.AreEqual (pan
wn by DataColumnCollection
                    ExceptionBuilder.TraceExceptionWithoutRethrow(e);                
                    throw ExceptionBuilder.ArgumentOutOfRange("ordinal");
                }
            }
        }

        override public object this[string name] {
            get {
                ValidateOpen("Item");
                ValidateReader();
                if ((currentDataRow == null) || (currentDataRow.RowState == DataRowState.Deleted)) {
                    ReaderIsInvalid = true;
                    throw  ExceptionBuilder.InvalidDataTableReader(currentDataTable.TableName);
                }
                return currentDataRow[name];
            }
        }

        override public Int32 FieldCount {
            get {
                ValidateOpen("FieldCount");
                ValidateReader();
                return currentDataTable.Columns.Count;
            }
        }

        override public Type GetProviderSpecificFieldType(int ordinal) {
            ValidateOpen("GetProviderSpecificFieldType");
            ValidateReader();
            return GetFieldType(ordinal);
        }

        override public Object GetProviderSpecificValue(int ordinal) {
            ValidateOpen("GetProviderSpecificValue");
            ValidateReader();
            return GetValue(ordinal);
        }

        override  public int GetProviderSpecificValues(object[] values) {
            ValidateOpen("GetProviderSpecificValues");
            ValidateReader();
            return GetValues(values);
        }

        override public  bool GetBoolean (int ordinal) {
            ValidateState("GetBoolean");
            ValidateReader();
            try {
                return (bool) currentDataRow[ordinal];
            }
            catch(IndexOutOfRangeException e) { // thrown by DataColumnCollection
                ExceptionBuilder.TraceExceptionWithoutRethrow(e);                
                throw ExceptionBuilder.ArgumentOutOfRange("ordinal");
            }
        }

        override public  byte GetByte (int ordinal) {
            ValidateState("GetByte");
            ValidateReader();
            try {
                return (byte) currentDataRow[ordinal];
            }
            catch(IndexOutOfRangeException e) { // thrown by DataColumnCollection
                ExceptionBuilder.TraceExceptionWithoutRethrow(e);                
                throw ExceptionBuilder.ArgumentOutOfRange("ordinal");
            }
        }

       override public long GetBytes(int ordinal, long dataIndex, byte[] buffer, int bufferIndex, int length) {
            ValidateState("GetBytes");
            ValidateReader();
            byte[] tempBuffer;
            try {
                tempBuffer = (byte[]) currentDataRow[ordinal];
            }
            catch(IndexOutOfRangeException e) { // thrown by DataColumnCollection
                ExceptionBuilder.TraceExceptionWithoutRethrow(e);                
                throw ExceptionBuilder.ArgumentOutOfRange("ordinal");
            }
            if (buffer == null) {
                return tempBuffer.Length;
            }
            int srcIndex = (int) dataIndex;
            int byteCount = Math.Min(tempBuffer.Length - srcIndex, length);
            if (srcIndex < 0) {
                throw ADP.InvalidSourceBufferIndex(tempBuffer.Length, srcIndex, "dataIndex");
            }
            else if ((bufferIndex < 0) || (bufferIndex > 0 && bufferIndex >= buffer.Length)) {
                throw ADP.InvalidDestinationBufferIndex(buffer.Length, bufferIndex, "bufferIndex");
            }

            if (0 < byteCount) {
                Array.Copy(tempBuffer, dataIndex, buffer, bufferIndex, byteCount);
            }
            else if (length < 0) {
                throw ADP.InvalidDataLength(length);
            }
            else {
                byteCount = 0;
            }
            return byteCount;

        }

        override public  char GetChar (int ordinal) {
            ValidateState("GetChar");
            ValidateReader();
            try {
                return (char) currentDataRow[ordinal];
            }
            catch(IndexOutOfRangeException e)
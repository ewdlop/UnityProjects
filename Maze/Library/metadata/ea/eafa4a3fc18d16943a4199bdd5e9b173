
		[Test]
		public void Open ()
		{
			ServiceHost host = new ServiceHost (typeof (ZeroOperationsImpl));
			host.AddServiceEndpoint (typeof (IHaveZeroOperarationsContract), new BasicHttpBinding (), "http://localhost/echo");

			try {
				host.Open ();
				Assert.Fail ("InvalidOperationException expected");
			} 
			catch (InvalidOperationException e) {
				//"ContractDescription 'IHaveZeroOperarationsContract' has zero operations; a contract must have at least one operation."
				StringAssert.Contains ("IHaveZeroOperarationsContract", e.Message);
			}
			finally {
				if (host.State == CommunicationState.Opened)
					host.Close (); // It is to make sure to close unexpectedly opened host if the test fail.
			}
		}

		[Test]
		public void AddServiceEndpoint4 ()
		{
			ServiceHost host = new ServiceHost (typeof (Baz), new Uri ("http://localhost/echo"));
			host.AddServiceEndpoint ("MonoTests.System.ServiceModel.ServiceHostTest+IBaz", new BasicHttpBinding (), "rel");
		}

		[Test]
		[ExpectedException (typeof (InvalidOperationException))]
		public void AddServiceEndpoint5 ()
		{
			ServiceHost host = new ServiceHost (typeof (Baz), new Uri ("http://localhost/echo"));

			// Full type name is expected here (see AddServiceEndpoint4).
			host.AddServiceEndpoint ("IBaz", new BasicHttpBinding (), "rel");
		}

		[Test]
		[ExpectedException (typeof (InvalidOperationException))]
		public void AddServiceEndpoint6 ()
		{
			ServiceHost host = new ServiceHost (typeof (Foo), new Uri ("http://localhost/echo"));
			host.AddServiceEndpoint ("ISuchTypeDoesNotExist", new BasicHttpBinding (), "rel");
		}

		[Test]
		public void AddServiceEndpoint7 ()
		{
			ServiceHost host = new ServiceHost (typeof (Foo), new Uri ("http://localhost/echo"));
			var a = host.AddServiceEndpoint (typeof (Foo), new BasicHttpBinding (), "a");
			Console.WriteLine (a.Address);
			Assert.AreEqual ("http", a.Address.Uri.Scheme, "#1");
			Assert.AreEqual ("http://localhost/echo/a", a.Address.Uri.AbsoluteUri, "#2");

			var b = host.AddServiceEndpoint (typeof (Foo), new BasicHttpBinding (), "/b");
			Console.WriteLine (b.Address);
			Assert.AreEqual ("http", b.Address.Uri.Scheme, "#3");
			Assert.AreEqual ("http://localhost/echo/b", b.Address.Uri.AbsoluteUri, "#4");
		}
		
		[Test]
		[ExpectedException (typeof (InvalidOperationException))]
		public void AddServiceEndpointMexWithNoImpl ()
		{
			var port = NetworkHelpers.FindFreePort ();
			using (ServiceHost h = new ServiceHost (typeof (Foo), new Uri ("http://localhost:" + port))) {
				// it expects ServiceMetadataBehavior
				h.AddServiceEndpoint (ServiceMetadataBehavior.MexContractName, MetadataExchangeBindings.CreateMexHttpBinding (), "mex");
			}
		}

		[Test]
		public void AddServiceEndpointMetadataExchange ()
		{
			var port = NetworkHelpers.FindFreePort ();
			// MyMetadataExchange implements IMetadataExchange
			ServiceHost host = new ServiceHost (typeof (MyMetadataExchange));
			host.AddServiceEndpoint ("IMetadataExchange",
						 new BasicHttpBinding (),
						 "http://localhost:" + port + "/");
		}

		[Test]
		[ExpectedException (typeof (InvalidOperationException))]
		public void AddServiceEndpointMetadataExchangeFullNameFails ()
		{
			var port = NetworkHelpers.FindFreePort ();
			ServiceHost host = new ServiceHost (typeof (MyMetadataExchange));
			host.AddServiceEndpoint ("System.ServiceModel.Description.IMetadataExchange",
						 new BasicHttpBinding (),
						 "http://localhost:" + port);
		}

		[Test]
		public void InstanceWithNonSingletonMode ()
		{
			var ep = NetworkHelpers.LocalEphemeralEndPoint().ToString();
			ServiceHost host = new ServiceHost (
				new NonSingletonService ());
			Assert.IsNotNull (host.Description.Behaviors.Find<ServiceBehaviorAttribute> ().GetWellKnownSingleton (), "premise1");
			host.AddServiceEndpoint (
				typeof (NonSingletonService),
				new BasicHttpBinding (),
				new Uri ("http://" + ep + "/s1"));

			// in case Open() didn't fail, we need to close the host.
			// And even if Close() caused the expected exception,
			// the test should still fail.
			try {
				host.Open ();
				try {
					if (host.State == CommunicationS
<?xml version="1.0" encoding="utf-8"?>
<Type Name="Byte" FullName="System.Byte" FullNameSP="System_Byte" Maintainer="ecma">
  <TypeSignature Language="ILASM" Value=".class public sequential sealed serializable Byte extends System.ValueType implements System.IComparable, System.IFormattable" />
  <TypeSignature Language="C#" Value="public struct Byte : IComparable, IComparable&lt;byte&gt;, IConvertible, IEquatable&lt;byte&gt;, IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit unsigned int8 extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;unsigned int8&gt;, class System.IConvertible, class System.IEquatable`1&lt;unsigned int8&gt;, class System.IFormattable" />
  <MemberOfLibrary>BCL</MemberOfLibrary>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 ]</AssemblyPublicKey>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <ThreadingSafetyStatement>This type is safe for multithreaded operations. </ThreadingSafetyStatement>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.Byte&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IConvertible</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Byte&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>
        <see cref="T:System.Byte" /> is an immutable value type that represents unsigned integers with values that range from 0 (which is represented by the <see cref="F:System.Byte.MinValue" /> constant) to 255 (which is represented by the <see cref="F:System.Byte.MaxValue" /> constant). The .NET Framework also includes a signed 8-bit integer value type, <see cref="T:System.SByte" />, which represents values that range from -128 to 127.</para>
      <format type="text/html">
        <h2>Instantiating a Byte Value</h2>
      </format>
      <para>You can instantiate a <see cref="T:System.Byte" /> value in several ways:</para>
      <list type="bullet">
        <item>
          <para>You can declare a <see cref="T:System.Byte" /> variable and assign it a literal integer value that is within the range of the <see cref="T:System.Byte" /> data type. The following example declares two <see cref="T:System.Byte" /> variables and assigns them values in this way. </para>
          <para>code reference: System.Byte.Instantiation#1</para>
        </item>
        <item>
          <para>You can assign a non-byte numeric value to a byte. This is a narrowing conversion, so it requires a cast operator in C# and a conversion method in Visual Basic if Option Strict is on. If the non-byte value is a <see cref="T:System.Single" />, <see cref="T:System.Double" />, or <see cref="T:System.Decimal" /> value that includes a fractional component, the handling of its fractional part depends on the compiler performing the conversion. The following example assigns several numeric values to <see cref="T:System.Byte" /> variables.</para>
          <para>code reference: System.Byte.Instantiation#2</para>
        </item>
        <item>
          <para>You can call a method of the <see cref="T:System.Convert" /> class to convert any supported type to a <see cref="T:System.Byte" /> value. This is possible because <see cref="T:System.Byte" /> supports the <see cref="T:System.IConvertible" /> interface. The following example illustrates the conversion of an array of <see cref="T:System.Int32" /> values to <see cref="T:System.Byte" /> values.</para>
          <para>code reference: System.Conve
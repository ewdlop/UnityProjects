// Copyright (c) 2015 The Chromium Embedded Framework Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.

#include "include/base/cef_bind.h"
#include "include/cef_waitable_event.h"
#include "include/wrapper/cef_closure_task.h"
#include "tests/ceftests/test_handler.h"
#include "tests/ceftests/test_util.h"
#include "tests/gtest/include/gtest/gtest.h"
#include "tests/shared/browser/client_app_browser.h"

namespace {

// Fully qualified preference names.
const char kPrefTest[] = "test";
const char kPrefTestBool[] = "test.bool";
const char kPrefTestInt[] = "test.int";
const char kPrefTestDouble[] = "test.double";
const char kPrefTestString[] = "test.string";
const char kPrefTestList[] = "test.list";
const char kPrefTestDict[] = "test.dict";
const char kPrefTestNoExist[] = "test.noexist";

// Unqualified preference names.
const char kPrefBool[] = "bool";
const char kPrefInt[] = "int";
const char kPrefDouble[] = "double";
const char kPrefString[] = "string";
const char kPrefList[] = "list";
const char kPrefDict[] = "dict";

// Browser-side app delegate.
class PreferenceBrowserTest : public client::ClientAppBrowser::Delegate {
 public:
  PreferenceBrowserTest() {}

  void OnBeforeCommandLineProcessing(
      CefRefPtr<client::ClientAppBrowser> app,
      CefRefPtr<CefCommandLine> command_line) override {
    // Enables testing of preferences.
    // See CefBrowserPrefStore::CreateService.
    command_line->AppendSwitch("enable-preference-testing");
  }

 private:
  IMPLEMENT_REFCOUNTING(PreferenceBrowserTest);
};

void ValidateReset(CefRefPtr<CefRequestContext> context,
                   const char* name) {
  EXPECT_TRUE(context->HasPreference(name));
  EXPECT_TRUE(context->CanSetPreference(name));

  CefString error;
  EXPECT_TRUE(context->SetPreference(name, NULL, error));
  EXPECT_TRUE(error.empty());
}

void ValidateBool(CefRefPtr<CefRequestContext> context,
                  bool set,
                  bool expected,
                  const char* name = kPrefTestBool) {
  EXPECT_TRUE(context->HasPreference(name));
  EXPECT_TRUE(context->CanSetPreference(name));

  CefRefPtr<CefValue> value;

  if (set) {
    value = CefValue::Create();
    value->SetBool(expected);
    CefString error;
    EXPECT_TRUE(context->SetPreference(name, value, error));
    EXPECT_TRUE(error.empty());
  }

  value = context->GetPreference(name);
  EXPECT_TRUE(value.get());
  EXPECT_EQ(VTYPE_BOOL, value->GetType());
  EXPECT_EQ(expected, value->GetBool());
}

void ValidateInt(CefRefPtr<CefRequestContext> context,
                 bool set,
                 int expected,
                 const char* name = kPrefTestInt) {
  EXPECT_TRUE(context->HasPreference(name));
  EXPECT_TRUE(context->CanSetPreference(name));

  CefRefPtr<CefValue> value;

  if (set) {
    value = CefValue::Create();
    value->SetInt(expected);
    CefString error;
    EXPECT_TRUE(context->SetPreference(name, value, error));
    EXPECT_TRUE(error.empty());
  }

  value = context->GetPreference(name);
  EXPECT_TRUE(value.get());
  EXPECT_EQ(VTYPE_INT, value->GetType());
  EXPECT_EQ(expected, value->GetInt());
}

void ValidateDouble(CefRefPtr<CefRequestContext> context,
                    bool set,
                    double expected,
                    const char* name = kPrefTestDouble) {
  EXPECT_TRUE(context->HasPreference(name));
  EXPECT_TRUE(context->CanSetPreference(name));

  CefRefPtr<CefValue> value;

  if (set) {
    value = CefValue::Create();
    value->SetDouble(expected);
    CefString error;
    EXPECT_TRUE(context->SetPreference(name, value, error));
    EXPECT_TRUE(error.empty());
  }

  value = context->GetPreference(name);
  EXPECT_TRUE(value.get());
  EXPECT_EQ(VTYPE_DOUBLE, value->GetType());
  EXPECT_EQ(expected, value->GetDouble());
}

void ValidateString(CefRefPtr<CefRequestContext> context,
                    bool set,
                    const std::string& expected,
                    const char* name = kPrefTestString) {
  EXPECT_TRUE(context->HasPreference(name));
  EXPECT_TRUE(context->CanSetPreference(name));

  CefRefPtr<CefValue> value;

  if (set) {
    value = CefValue::Create();
    value->SetString(expected);
    CefString error;
    EXPECT_TRUE(context->SetPreference(name, value, error));
    EXPECT_TRUE(error.empty());
  }

  value = context->GetPreference(name);
  EXPECT_TRUE(value.get());
  EXPECT_EQ(VTYPE_STRING, value->GetType());
  EXPECT_STREQ(expected.c_str(), value->GetString().ToString().c_str());
}

void ValidateList(CefRefPtr<CefRequestContext> co
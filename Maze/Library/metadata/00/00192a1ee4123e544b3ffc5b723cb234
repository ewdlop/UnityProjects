     m_Connections[connectionId] = null;
            if (LogFilter.logDebug) { Debug.Log("Server lost client:" + connectionId); }

            OnDisconnected(conn);
        }

        void HandleData(int connectionId, int channelId, int receivedSize, byte error)
        {
            var conn = FindConnection(connectionId);
            if (conn == null)
            {
                if (LogFilter.logError) { Debug.LogError("HandleData Unknown connectionId:" + connectionId); }
                return;
            }
            conn.lastError = (NetworkError)error;

            if (error != 0)
            {
                OnDataError(conn, error);
                return;
            }

            m_MsgReader.SeekZero();
            OnData(conn, receivedSize, channelId);
        }

        /// <summary>
        /// This sends the data in an array of bytes to the connected client.
        /// </summary>
        /// <param name="connectionId">The id of the connection to send on.</param>
        /// <param name="bytes">The data to send.</param>
        /// <param name="numBytes">The size of the data to send.</param>
        /// <param name="channelId">The channel to send the data on.</param>
        public void SendBytesTo(int connectionId, byte[] bytes, int numBytes, int channelId)
        {
            var outConn = FindConnection(connectionId);
            if (outConn == null)
            {
                return;
            }
            outConn.SendBytes(bytes, numBytes, channelId);
        }

        /// <summary>
        /// This sends the contents of a NetworkWriter object to the connected client.
        /// </summary>
        /// <param name="connectionId">The id of the connection to send on.</param>
        /// <param name="writer">The writer object to send.</param>
        /// <param name="channelId">The channel to send the data on.</param>
        public void SendWriterTo(int connectionId, NetworkWriter writer, int channelId)
        {
            var outConn = FindConnection(connectionId);
            if (outConn == null)
            {
                return;
            }
            outConn.SendWriter(writer, channelId);
        }

        /// <summary>
        /// This disconnects the connection of the corresponding connection id.
        /// </summary>
        /// <param name="connectionId">The id of the connection to disconnect.</param>
        public void Disconnect(int connectionId)
        {
            var outConn = FindConnection(connectionId);
            if (outConn == null)
            {
                return;
            }
            outConn.Disconnect();
            m_Connections[connectionId] = null;
        }

        /// <summary>
        /// This disconnects all of the active connections.
        /// </summary>
        public void DisconnectAllConnections()
        {
            for (int i = 0; i < m_Connections.Count; i++)
            {
                NetworkConnection conn = m_Connections[i];
                if (conn != null)
                {
                    conn.Disconnect();
                    conn.Dispose();
                }
            }
        }

        // --------------------------- virtuals ---------------------------------------

        /// <summary>
        /// A virtual function that is invoked when there is a connection error.
        /// </summary>
        /// <param name="connectionId">The id of the connection with the error.</param>
        /// <param name="error">The error code.</param>
        public virtual void OnConnectError(int connectionId, byte error)
        {
            Debug.LogError("OnConnectError error:" + error);
        }

        /// <summary>
        /// A virtual function that is called when a data error occurs on a connection.
        /// </summary>
        /// <param name="conn">The connection object that the error occured on.</param>
        /// <param name="error">The error code.</param>
        public virtual void OnDataError(NetworkConnection conn, byte error)
        {
            Debug.LogError("OnDataError error:" + error);
        }

        /// <summary>
        /// A virtual function that is called when a disconnect error happens.
        /// </summary>
        /// <param name="conn">The connection object that the error occured on.</param>
 
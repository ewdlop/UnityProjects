LPER
        /// </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Vector128<double> SetAllVector128(double value)
        {
            // TODO-CQ Optimize algorithm choice based on benchmarks

            // Zero vector and load value et index 0
            Vector128<double> vector = SetScalarVector128(value);
            // Create { vl vl } and return result
            return UnpackLow(vector, vector);
        }

        /// <summary>
        /// __m128d _mm_set_sd (double a)
        ///   HELPER
        /// </summary>
        public static Vector128<double> SetScalarVector128(double value) => SetScalarVector128(value);

        /// <summary>
        /// ___m128i _mm_set_epi8 (char e15, char e14, char e13, char e12, char e11, char e10, char e9, char e8, char e7, char e6, char e5, char e4, char e3, char e2, char e1, char e0)
        ///   HELPER
        /// </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe Vector128<sbyte> SetVector128(sbyte e15, sbyte e14, sbyte e13, sbyte e12, sbyte e11, sbyte e10, sbyte e9, sbyte e8, sbyte e7, sbyte e6, sbyte e5, sbyte e4, sbyte e3, sbyte e2, sbyte e1, sbyte e0)
        {
            // TODO-CQ Optimize algorithm choice based on benchmarks

            sbyte* buffer = stackalloc sbyte[16];
            buffer[0] = e0;
            buffer[1] = e1;
            buffer[2] = e2;
            buffer[3] = e3;
            buffer[4] = e4;
            buffer[5] = e5;
            buffer[6] = e6;
            buffer[7] = e7;
            buffer[8] = e8;
            buffer[9] = e9;
            buffer[10] = e10;
            buffer[11] = e11;
            buffer[12] = e12;
            buffer[13] = e13;
            buffer[14] = e14;
            buffer[15] = e15;

            // Load 16-byte buffer into Vector
            return LoadVector128(buffer);
        }
        /// <summary>
        /// ___m128i _mm_set_epi8 (char e15, char e14, char e13, char e12, char e11, char e10, char e9, char e8, char e7, char e6, char e5, char e4, char e3, char e2, char e1, char e0)
        ///   HELPER
        /// </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe Vector128<byte> SetVector128(byte e15, byte e14, byte e13, byte e12, byte e11, byte e10, byte e9, byte e8, byte e7, byte e6, byte e5, byte e4, byte e3, byte e2, byte e1, byte e0)
        {
            // TODO-CQ Optimize algorithm choice based on benchmarks

            byte* buffer = stackalloc byte[16];
            buffer[0] = e0;
            buffer[1] = e1;
            buffer[2] = e2;
            buffer[3] = e3;
            buffer[4] = e4;
            buffer[5] = e5;
            buffer[6] = e6;
            buffer[7] = e7;
            buffer[8] = e8;
            buffer[9] = e9;
            buffer[10] = e10;
            buffer[11] = e11;
            buffer[12] = e12;
            buffer[13] = e13;
            buffer[14] = e14;
            buffer[15] = e15;

            // Load 16-byte buffer into Vector
            return LoadVector128(buffer);
        }
        /// <summary>
        /// __m128i _mm_set_epi16 (short e7, short e6, short e5, short e4, short e3, short e2, short e1, short e0)
        ///   HELPER
        /// </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Vector128<short> SetVector128(short e7, short e6, short e5, short e4, short e3, short e2, short e1, short e0)
        {
            // TODO-CQ Optimize algorithm choice based on benchmarks

            // Zero vector and load e0 et index 0
            Vector128<int> e0Vector = ConvertScalarToVector128Int32(e0);
            Vector128<short> vector = Sse.StaticCast<int, short>(e0Vector);
            // Insert e1 ... e7 at corresponding index
            vector = Insert(vector, e1, (byte)1);
            vector = Insert(vector, e2, (byte)2);
            vector = Insert(vector, e3, (byte)3);
            vector = Insert(vector, e4, (byte)4);
            vector = Insert(vector, e5, (byte)5);
            vector = Insert(vector, e6, (byte)6);
            return
nfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the process ID of the parent process.</summary>
        <returns>
          A <see cref="T:System.Int32" /> containing the process ID of the
          parent process.
        </returns>
        <remarks>
        </remarks>
        <altmember cref="M:Mono.Unix.Native.Syscall.getppid" />
      </Docs>
    </Member>
    <Member MemberName="GetProcessGroup">
      <MemberSignature Language="C#" Value="public static int GetProcessGroup ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetProcessGroup() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the process group ID of the current process.</summary>
        <returns>
          A <see cref="T:System.Int32" /> containing the process group ID of
          the current process.
        </returns>
        <remarks>
          <para>
            Process groups are used for distribution of signals, and by 
            terminals to arbitrate requests for their input: processes that 
            have the same process group as the terminal are foreground and 
            may read, while others will block with a signal if they attempt 
            to read.
          </para>
          <para>
            This system call is thus used by programs such as <c>csh</c>(1) 
            to create process groups in implementing job control.  The 
            <see cref="M:Mono.Unix.Native.Syscall.tcgetpgrp" />() and 
            <see cref="M:Mono.Unix.Native.Syscall.tcsetpgrp" />()
            calls are used to get/set the process group of the control terminal.
          </para>
        </remarks>
        <altmember cref="M:Mono.Unix.Native.Syscall.getpgrp" />
      </Docs>
    </Member>
    <Member MemberName="GetSupplementaryGroupIds">
      <MemberSignature Language="C#" Value="public static long[] GetSupplementaryGroupIds ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64[] GetSupplementaryGroupIds() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the current group access list.</summary>
        <returns>
          A <see cref="T:System.Int64" /> array containing the group access
          list of the current process.
        </returns>
        <remarks>
          <para>
            The group access list is a list of groups which the current
            process belongs to.  These groups are used for file access checks
            when the 
            <see cref="P:Mono.Unix.UnixEnvironment.RealUser" /> is not the
            file's
            <see cref="P:Mono.Unix.UnixFileSystemInfo.OwnerUser" />; each of
            the supplementary groups is checked against
            <see cref="P:Mono.Unix.UnixFileSystemInfo.OwnerGroup" /> to see if
            group access applies, before using the  "other"
            <see cref="P:Mono.Unix.UnixFileSystemInfo.FileAccessPermissions" />.
          </para>
        </remarks>
        <altmember cref="M:Mono.Unix.Native.Syscall.getgroups" />
      </Docs>
    </Member>
    <Member MemberName="GetSupplementaryGroups">
      <MemberSignature Language="C#" Value="public static Mono.Unix.UnixGroupInfo[] GetSupplementaryGroups ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Mono.Unix.UnixGroupInfo[] GetSupplementaryGroups() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</Assem
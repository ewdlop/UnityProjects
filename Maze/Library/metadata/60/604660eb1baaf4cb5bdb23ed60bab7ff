mn(SchemaTableOptionalColumn.AutoIncrementSeed,   typeof(System.Int64));
            DataColumn AutoIncrementStep   = new DataColumn(SchemaTableOptionalColumn.AutoIncrementStep,   typeof(System.Int64));
            DataColumn DefaultValue        = new DataColumn(SchemaTableOptionalColumn.DefaultValue,        typeof(System.Object));
            DataColumn Expression          = new DataColumn(SchemaTableOptionalColumn.Expression,          typeof(System.String));
            DataColumn ColumnMapping       = new DataColumn(SchemaTableOptionalColumn.ColumnMapping,       typeof(System.Data.MappingType));
            DataColumn BaseTableNamespace  = new DataColumn(SchemaTableOptionalColumn.BaseTableNamespace,  typeof(System.String));
            DataColumn BaseColumnNamespace = new DataColumn(SchemaTableOptionalColumn.BaseColumnNamespace, typeof(System.String));

           ColumnSize.DefaultValue = -1;

           if (table.DataSet != null)
               BaseCatalogName.DefaultValue =  table.DataSet.DataSetName;

           BaseTableName.DefaultValue = table.TableName;
           BaseTableNamespace.DefaultValue = table.Namespace;
           IsRowVersion.DefaultValue = false;
           IsLong.DefaultValue = false;
           IsReadOnly.DefaultValue = false;
           IsKeyColumn.DefaultValue = false;
           IsAutoIncrement.DefaultValue = false;
           AutoIncrementSeed.DefaultValue = 0;
           AutoIncrementStep.DefaultValue = 1;


           tempSchemaTable.Columns.Add(ColumnName);
           tempSchemaTable.Columns.Add(ColumnOrdinal);
           tempSchemaTable.Columns.Add(ColumnSize);
           tempSchemaTable.Columns.Add(NumericPrecision);
           tempSchemaTable.Columns.Add(NumericScale);
           tempSchemaTable.Columns.Add(DataType);
           tempSchemaTable.Columns.Add(ProviderType);
           tempSchemaTable.Columns.Add(IsLong);
           tempSchemaTable.Columns.Add(AllowDBNull);
           tempSchemaTable.Columns.Add(IsReadOnly);
           tempSchemaTable.Columns.Add(IsRowVersion);
           tempSchemaTable.Columns.Add(IsUnique);
           tempSchemaTable.Columns.Add(IsKeyColumn);
           tempSchemaTable.Columns.Add(IsAutoIncrement);
           tempSchemaTable.Columns.Add(BaseCatalogName);
           tempSchemaTable.Columns.Add(BaseSchemaName);
           // specific to datatablereader
           tempSchemaTable.Columns.Add(BaseTableName);
           tempSchemaTable.Columns.Add(BaseColumnName);
           tempSchemaTable.Columns.Add(AutoIncrementSeed);
           tempSchemaTable.Columns.Add(AutoIncrementStep);
           tempSchemaTable.Columns.Add(DefaultValue);
           tempSchemaTable.Columns.Add(Expression);
           tempSchemaTable.Columns.Add(ColumnMapping);
           tempSchemaTable.Columns.Add(BaseTableNamespace);
           tempSchemaTable.Columns.Add(BaseColumnNamespace);

           foreach (DataColumn dc in table.Columns) {
               DataRow dr = tempSchemaTable.NewRow();

               dr[ColumnName] = dc.ColumnName;
               dr[ColumnOrdinal] = dc.Ordinal;
               dr[DataType] = dc.DataType;

               if (dc.DataType == typeof(string)) {
                   dr[ColumnSize] = dc.MaxLength;
               }

               dr[AllowDBNull] = dc.AllowDBNull;
               dr[IsReadOnly] = dc.ReadOnly;
               dr[IsUnique] = dc.Unique;

               if (dc.AutoIncrement) {
                   dr[IsAutoIncrement] = true;
                   dr[AutoIncrementSeed] = dc.AutoIncrementSeed;
                   dr[AutoIncrementStep] = dc.AutoIncrementStep;
               }

               if (dc.DefaultValue != DBNull.Value)
                   dr[DefaultValue] =  dc.DefaultValue;

               if (dc.Expression.Length  != 0)  {
                   bool hasExternalDependency = false;
                   DataColumn[] dependency = dc.DataExpression.GetDependency();
                   for (int j = 0; j < dependency.Length; j++) {
                       if (dependency[j].Table != table) {
                           hasExternalDependency = true;
                           break;
                       }
                   }
                   if (!hasExternalDepend
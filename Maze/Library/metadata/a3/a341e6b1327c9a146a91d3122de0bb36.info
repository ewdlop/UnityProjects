ethodInstantiationsLock;
#if !FEATURE_CORECLR
            private RuntimeConstructorInfo m_serializationCtor;
#endif
            private string m_defaultMemberName;
            private Object m_genericCache; // Generic cache for rare scenario specific data. It is used to cache Enum names and values.
            #endregion

            #region Constructor
            internal RuntimeTypeCache(RuntimeType runtimeType)
            {
                m_typeCode = TypeCode.Empty;
                m_runtimeType = runtimeType;
                m_isGlobal = RuntimeTypeHandle.GetModule(runtimeType).RuntimeType == runtimeType;
            }
            #endregion

            #region Private Members
            private string ConstructName(ref string name, TypeNameFormatFlags formatFlags)
            {
                if (name == null) 
                {
                    name = new RuntimeTypeHandle(m_runtimeType).ConstructName(formatFlags);
                }
                return name;
            }

            private T[] GetMemberList<T>(ref MemberInfoCache<T> m_cache, MemberListType listType, string name, CacheType cacheType) 
                where T : MemberInfo
            {
                MemberInfoCache<T> existingCache = GetMemberCache<T>(ref m_cache);
                return existingCache.GetMemberList(listType, name, cacheType);
            }

#if FEATURE_LEGACYNETCF
            // Dev11 466969 quirk
            private T[] GetMemberList<T>(ref MemberInfoCache<T> m_cache, MemberListType listType, string name, CacheType cacheType, out IReadOnlyList<RuntimePropertyInfo> ambiguousProperties) 
                where T : MemberInfo
            {
                Contract.Assert(cacheType == CacheType.Property);

                MemberInfoCache<T> existingCache = GetMemberCache<T>(ref m_cache);
                T[] results = existingCache.GetMemberList(listType, name, cacheType);

                // must access property after GetMemberList() has been called
                ambiguousProperties = existingCache.AmbiguousProperties;

                // we should only have an ambiguous properties list in Mango-compat mode
                Contract.Assert(ambiguousProperties == null || CompatibilitySwitches.IsAppEarlierThanWindowsPhone8);
                return results;
            }
#endif
            
            private MemberInfoCache<T> GetMemberCache<T>(ref MemberInfoCache<T> m_cache) 
                where T : MemberInfo
            {
                MemberInfoCache<T> existingCache = m_cache;

                if (existingCache == null)
                {
                    MemberInfoCache<T> newCache = new MemberInfoCache<T>(this);
                    existingCache = Interlocked.CompareExchange(ref m_cache, newCache, null);
                    if (existingCache == null)
                        existingCache = newCache;
                }

                return existingCache;
            }
            #endregion

            #region Internal Members

            internal Object GenericCache
            {
                get { return m_genericCache; }
                set { m_genericCache = value; }
            }

            internal bool DomainInitialized
            {
                get { return m_bIsDomainInitialized; }
                set { m_bIsDomainInitialized = value; }
            }
            
            internal string GetName(TypeNameKind kind)
            {
                switch (kind)
                {
                    case TypeNameKind.Name:
                        // No namespace, full instantiation, and assembly.
                        return ConstructName(ref m_name, TypeNameFormatFlags.FormatBasic);

                    case TypeNameKind.FullName:
                        // We exclude the types that contain generic parameters because their names cannot be roundtripped.
                        // We allow generic type definitions (and their refs, ptrs, and arrays) because their names can be roundtriped.
                        // Theoretically generic types instantiated with generic type definitions can be roundtripped, e.g. List`1<Dictionary`2>.
                        // But these kind of types are useless, rare, and hard to identity. We would need to recursively examine all the 
                        // generic arguments with the same criteria. We will exclude them unless we see a real user scenario.
                        if (!m_runtimeType.GetRootElementType().IsGenericTypeDefinition && m_runtimeType.ContainsGenericParameters)
                            return null;

                        // No assembly.
                        return ConstructName(ref m_fullname, TypeNameFormatFlags.FormatNamespace | TypeNameFormatFlags.FormatFullInst);

                    case TypeNameKind.ToString:
                        // No full instantiation and assembly.
                        return ConstructName(ref m_toString, TypeNameFormatFlags.FormatNamespace);

           
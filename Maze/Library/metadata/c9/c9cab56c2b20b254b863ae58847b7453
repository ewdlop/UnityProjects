 { throw null; } set { } }
        public float Matrix00 { get { throw null; } set { } }
        public float Matrix01 { get { throw null; } set { } }
        public float Matrix02 { get { throw null; } set { } }
        public float Matrix03 { get { throw null; } set { } }
        public float Matrix04 { get { throw null; } set { } }
        public float Matrix10 { get { throw null; } set { } }
        public float Matrix11 { get { throw null; } set { } }
        public float Matrix12 { get { throw null; } set { } }
        public float Matrix13 { get { throw null; } set { } }
        public float Matrix14 { get { throw null; } set { } }
        public float Matrix20 { get { throw null; } set { } }
        public float Matrix21 { get { throw null; } set { } }
        public float Matrix22 { get { throw null; } set { } }
        public float Matrix23 { get { throw null; } set { } }
        public float Matrix24 { get { throw null; } set { } }
        public float Matrix30 { get { throw null; } set { } }
        public float Matrix31 { get { throw null; } set { } }
        public float Matrix32 { get { throw null; } set { } }
        public float Matrix33 { get { throw null; } set { } }
        public float Matrix34 { get { throw null; } set { } }
        public float Matrix40 { get { throw null; } set { } }
        public float Matrix41 { get { throw null; } set { } }
        public float Matrix42 { get { throw null; } set { } }
        public float Matrix43 { get { throw null; } set { } }
        public float Matrix44 { get { throw null; } set { } }
    }
    public enum ColorMatrixFlag
    {
        AltGrays = 2,
        Default = 0,
        SkipGrays = 1,
    }
    public enum ColorMode
    {
        Argb32Mode = 0,
        Argb64Mode = 1,
    }
    public sealed partial class ColorPalette
    {
        internal ColorPalette() { }
        public System.Drawing.Color[] Entries { get { throw null; } }
        public int Flags { get { throw null; } }
    }
    public enum EmfPlusRecordType
    {
        BeginContainer = 16423,
        BeginContainerNoParams = 16424,
        Clear = 16393,
        Comment = 16387,
        DrawArc = 16402,
        DrawBeziers = 16409,
        DrawClosedCurve = 16407,
        DrawCurve = 16408,
        DrawDriverString = 16438,
        DrawEllipse = 16399,
        DrawImage = 16410,
        DrawImagePoints = 16411,
        DrawLines = 16397,
        DrawPath = 16405,
        DrawPie = 16401,
        DrawRects = 16395,
        DrawString = 16412,
        EmfAbortPath = 68,
        EmfAlphaBlend = 114,
        EmfAngleArc = 41,
        EmfArcTo = 55,
        EmfBeginPath = 59,
        EmfBitBlt = 76,
        EmfChord = 46,
        EmfCloseFigure = 61,
        EmfColorCorrectPalette = 111,
        EmfColorMatchToTargetW = 121,
        EmfCreateBrushIndirect = 39,
        EmfCreateColorSpace = 99,
        EmfCreateColorSpaceW = 122,
        EmfCreateDibPatternBrushPt = 94,
        EmfCreateMonoBrush = 93,
        EmfCreatePalette = 49,
        EmfCreatePen = 38,
        EmfDeleteColorSpace = 101,
        EmfDeleteObject = 40,
        EmfDrawEscape = 105,
        EmfEllipse = 42,
        EmfEndPath = 60,
        EmfEof = 14,
        EmfExcludeClipRect = 29,
        EmfExtCreateFontIndirect = 82,
        EmfExtCreatePen = 95,
        EmfExtEscape = 106,
        EmfExtFloodFill = 53,
        EmfExtSelectClipRgn = 75,
        EmfExtTextOutA = 83,
        EmfExtTextOutW = 84,
        EmfFillPath = 62,
        EmfFillRgn = 71,
        EmfFlattenPath = 65,
        EmfForceUfiMapping = 109,
        EmfFrameRgn = 72,
        EmfGdiComment = 70,
        EmfGlsBoundedRecord = 103,
        EmfGlsRecord = 102,
        EmfGradientFill = 118,
        EmfHeader = 1,
        EmfIntersectClipRect = 30,
        EmfInvertRgn = 73,
        EmfLineTo = 54,
        EmfMaskBlt = 78,
        EmfMax = 122,
        EmfMin = 1,
        EmfModifyWorldTransform = 36,
        EmfMoveToEx = 27,
        EmfNamedEscpae = 110,
        EmfOffsetClipRgn = 26,
        EmfPaintRgn = 74,
        EmfPie = 47,
        EmfPixelFormat = 104,
        EmfPlgBlt = 79,
        EmfPlusRecordBase = 16384,
        EmfPolyBezier = 2,
        EmfPolyBezier16 = 85,
        EmfPolyBezierTo = 5,
        EmfPolyBezierTo16 = 88,
        EmfPolyDraw = 56,
        EmfPolyDraw16 = 92,
        EmfPolygon = 3,
        EmfPolygon16 = 86,
        EmfPolyline = 4,
        EmfPolyline16 = 87,
        EmfPolyLineTo = 6,
        EmfPolylineTo16 = 89,
        EmfPolyPolygon = 8,
        EmfPolyPolygon16 = 91,
        EmfPolyPolyline = 7,
        EmfPolyPolyline16 = 90,
        EmfPolyTextOutA = 96,
        EmfPolyTextOutW = 97,
        EmfRealizePalette = 52,
        EmfRectangle = 43,
        EmfReserved069 = 69,
        EmfReserved117 = 117,
        EmfResizePalette = 51,
        EmfRestoreDC = 34,
        EmfRoundArc = 45,
        EmfRoundRect = 44,
        EmfSaveDC = 33,
        EmfScaleViewportExtEx = 31,
        EmfScaleWindowExtEx = 32,
        EmfSelectClipPath = 67,
        EmfSelectObject = 37,
        EmfSelectPalette = 48,
        EmfSetArcDirection = 57,
        EmfSetBkColor = 25,
        EmfSetBkMode = 18,
        EmfSetBrushOrgEx = 13,
        EmfSetColorAdjustment = 23,
        EmfSetColorSpace = 100,
        EmfSetDIBitsToDevice = 80,
        EmfSetIcmMode = 98,
        EmfSetIcmProfileA = 112,
        EmfSetIcmProfileW = 113,
        EmfSetLayout = 115,
        EmfSetLinkedUfis = 119,
        EmfSetMapMode = 17,
        EmfSetMapperFlags = 16,
        EmfSetMetaRgn = 28,
        EmfSetMiterLimit = 58,
        EmfSetPaletteEntries = 50,
        EmfSetPixelV = 15,
        EmfSetPolyFillMode = 19,
        EmfSetROP2 = 20,
        EmfSetStretchBltMode = 21,
        EmfSetTextAlign = 22,
        EmfSetTextColor = 24,
        EmfSetTextJustification = 120,
        EmfSetViewportExtEx = 11,
        EmfSetViewportOrgEx = 12,
        EmfSetWindowExtEx = 9,
        EmfSetWindowOrgEx = 10,
        EmfSetWorldTransform = 35,
        EmfSmallTextOut = 108,
        EmfStartDoc = 107,
        EmfStretchBlt = 77,
        EmfStretchDIBits = 81,
        EmfStrokeAndFillPath = 63,
        EmfStrokePath = 64,
        EmfTransparentBlt = 116,
        EmfWidenPath = 66,
        EndContainer = 16425,
        EndOfFile = 16386,
        FillClosedCurve = 16406,
        FillEllipse = 16398,
        FillPath = 16404,
        FillPie = 16400,
        FillPolygon = 16396,
        FillRects = 16394,
        FillRegion = 16403,
        GetDC = 16388,
        Header = 16385,
        Invalid = 16384,
        Max = 16438,
        Min = 16385,
        MultiFormatEnd = 16391,
        MultiFormatSection = 16390,
        MultiFormatStart = 16389,
        MultiplyWorldTransform = 16428,
        Object = 16392,
        OffsetClip = 16437,
        ResetClip = 16433,
        ResetWorldTransform = 16427,
        Restore = 16422,
        RotateWorldTransform = 16431,
        Save = 16421,
        ScaleWorldTransform = 16430,
        SetAntiAliasMode = 16414,
        SetClipPath = 16435,
        SetClipRect = 16434,
        SetClipRegion = 16436,
        SetCompositingMode = 16419,
        SetCompositingQuality = 16420,
        SetInterpolationMode = 16417,
        SetPageTransform = 16432,
        SetPixelOffsetMode = 16418,
        SetRenderingOrigin = 16413,
        SetTextContrast = 16416,
        SetTextRenderingHint = 16415,
        SetWorldTransform = 16426,
        Total = 16439,
        TranslateWorldTransform = 16429,
        WmfAnimatePalette = 66614,
        WmfArc = 67607,
        WmfBitBlt = 67874,
        WmfChord = 67632,
        WmfCreateBrushIndirect = 66300,
        WmfCreateFontIndirect = 66299,
        WmfCreatePalette = 65783,
        WmfCreatePatternBrush = 66041,
        WmfCreatePenIndirect = 66298,
        WmfCreateRegion = 67327,
        WmfDeleteObject = 66032,
        WmfDibBitBlt = 67904,
        WmfDibCreatePatternBrush = 65858,
        WmfDibStretchBlt = 68417,
        WmfEllipse = 66584,
        WmfEscape = 67110,
        WmfExcludeClipRect = 66581,
        WmfExtFloodFill = 66888,
        WmfExtTextOut = 68146,
        WmfFillRegion = 66088,
        WmfFloodFill = 66585,
        WmfFrameRegion = 66601,
        WmfIntersectClipRect = 66582,
        WmfInvertRegion = 65834,
        WmfLineTo = 66067,
        WmfMoveTo = 66068,
        WmfOffsetCilpRgn = 66080,
        WmfOffsetViewportOrg = 66065,
        WmfOffsetWindowOrg = 66063,
        WmfPaintRegion = 65835,
        WmfPatBlt = 67101,
        WmfPie = 67610,
        WmfPolygon = 66340,
        WmfPolyline = 66341,
        WmfPolyPolygon = 66872,
        WmfRealizePalette = 65589,
        WmfRecordBase = 65536,
        WmfRectangle = 66587,
        WmfResizePalette = 65849,
        WmfRestoreDC = 65831,
        WmfRoundRect = 67100,
        WmfSaveDC = 65566,
        WmfScaleViewportExt = 66578,
        WmfScaleWindowExt = 66576,
        WmfSelectClipRegion = 65836,
        WmfSelectObject = 65837,
        WmfSelectPalette = 66100,
        WmfSetBkColor = 66049,
        WmfSetBkMode = 65794,
        WmfSetDibToDev = 68915,
        WmfSetLayout = 65865,
        WmfSetMapMode = 65795,
        WmfSetMapperFlags = 66097,
        WmfSetPalEntries = 65591,
        WmfSetPixel = 66591,
        WmfSetPolyFillMode = 65798,
        WmfSetRelAbs = 65797,
        WmfSetROP2 = 65796,
        WmfSetStretchBltMode = 65799,
        WmfSetTextAlign = 65838,
        WmfSetTextCharExtra = 65800,
        WmfSetTextColor = 66057,
        WmfSetTextJustification = 66058,
        WmfSetViewportExt = 66062,
        WmfSetViewportOrg = 66061,
        WmfSetWindowExt = 66060,
        WmfSetWindowOrg = 66059,
        WmfStretchBlt = 68387,
        WmfStretchDib = 69443,
        WmfTextOut = 66849,
    }
    public enum EmfType
    {
        EmfOnly = 3,
        EmfPlusDual = 5,
        EmfPlusOnly = 4,
    }
    public sealed partial class Encoder
    {
        public static readonly System.Drawing.Imaging.Encoder ChrominanceTable;
        public static readonly System.Drawing.Imaging.Encoder ColorDepth;
        public static readonly System.Drawing.Imaging.Encoder Compression;
        public static readonly System.Drawing.Imaging.Encoder LuminanceTable;
        public static readonly System.Drawing.Imaging.Encoder Quality;
        public static readonly System.Drawing.Imaging.Encoder RenderMethod;
        public static readonly System.Drawing.Imaging.Encoder SaveFlag;
        public static readonly System.Drawing.Imaging.Encoder ScanMethod;
        public static readonly System.Drawing.Imaging.Encoder Transformation;
        public static readonly System.Drawing.Imaging.Encoder Version;
        public Encoder(System.Guid guid) { }
        public System.Guid Guid { get { throw null; } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public sealed partial class EncoderParameter : System.IDisposable
    {
        public EncoderParameter(System.Drawing.Imaging.Encoder encoder, byte value) { }
        public EncoderParameter(System.Drawing.Imaging.Encoder encoder, byte value, bool undefined) { }
        public EncoderParameter(System.Drawing.Imaging.Encoder encoder, byte[] value) { }
        public EncoderParameter(System.Drawing.Imaging.Encoder encoder, byte[] value, bool undefined) { }
        public EncoderParameter(System.Drawing.Imaging.Encoder encoder, short value) { }
        public EncoderParameter(System.Drawing.Imaging.Encoder encoder, short[] value) { }
        public EncoderParameter(System.Drawing.Imaging.Encoder encoder, int numerator, int denominator) { }
        public EncoderParameter(System.Drawing.Imaging.Encoder encoder, int numberOfValues, int type, int value) { }
        public EncoderParameter(System.Drawing.Imaging.Encoder encoder, int numerator1, int denominator1, int numerator2, int denominator2) { }
        public EncoderParameter(System.Drawing.Imaging.Encoder encoder, int[] numerator, int[] denominator) { }
        public EncoderParameter(System.Drawing.Imaging.Encoder encoder, int[] numerator1, int[] denominator1, int[] numerator2, int[] denominator2) { }
        public EncoderParameter(System.Drawing.Imaging.Encoder encoder, long value) { }
        public EncoderParameter(System.Drawing.Imaging.Encoder encoder, long rangebegin, long rangeend) { }
        public EncoderParameter(System.Drawing.Imaging.Encoder encoder, long[] value) { }
        public EncoderParameter(System.Drawing.Imaging.Encoder encoder, long[] rangebegin, long[] rangeend) { }
        public EncoderParameter(System.Drawing.Imaging.Encoder encoder, string value) { }
        public System.Drawing.Imaging.Encoder Encoder { get { throw null; } set { } }
        public int NumberOfValues { get { throw null; } }
        public System.Drawing.Imaging.EncoderParameterValueType Type { get { throw null; } }
        public System.Drawing.Imaging.EncoderParameterValueType ValueType { get { throw null; } }
        public void Dispose() { }
        ~EncoderParameter() { }
    }
    public sealed partial class EncoderParameters : System.IDisposable
    {
        public EncoderParameters() { }
        public EncoderParameters(int count) { }
        public System.Drawing.Imaging.EncoderParameter[] Param { get { throw null; } set { } }
        public void Dispose() { }
    }
    public enum EncoderParameterValueType
    {
        ValueTypeAscii = 2,
        ValueTypeByte = 1,
        ValueTypeLong = 4,
        ValueTypeLongRange = 6,
        ValueTypeRational = 5,
        ValueTypeRationalRange = 8,
        ValueTypeShort = 3,
        ValueTypeUndefined = 7,
    }
    public enum EncoderValue
    {
        ColorTypeCMYK = 0,
        ColorTypeYCCK = 1,
        CompressionCCITT3 = 3,
        CompressionCCITT4 = 4,
        CompressionLZW = 2,
        CompressionNone = 6,
        CompressionRle = 5,
        Flush = 20,
        FrameDimensionPage = 23,
        FrameDimensionResolution = 22,
        FrameDimensionTime = 21,
        LastFrame = 19,
        MultiFrame = 18,
        RenderNonProgressive = 12,
        RenderProgressive = 11,
        ScanMethodInterlaced = 7,
        ScanMethodNonInterlaced = 8,
        TransformFlipHorizontal = 16,
        TransformFlipVertical = 17,
        TransformRotate180 = 14,
        TransformRotate270 = 15,
        TransformRotate90 = 13,
        VersionGif87 = 9,
        VersionGif89 = 10,
    }
    public sealed partial class FrameDimension
    {
        public FrameDimension(System.Guid guid) { }
        public System.Guid Guid { get { throw null; } }
        public static System.Drawing.Imaging.FrameDimension Page { get { throw null; } }
        public static System.Drawing.Imaging.FrameDimension Resolution { get { throw null; } }
        public static System.Drawing.Imaging.FrameDimension Time { get { throw null; } }
        public override bool Equals(object o) { throw null; }
        public override int GetHashCode() { throw null; }
        public override string ToString() { throw null; }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public sealed partial class ImageAttributes : System.ICloneable, System.IDisposable
    {
        public ImageAttributes() { }
        public void ClearBrushRemapTable() { }
        public void ClearColorKey() { }
        public void ClearColorKey(System.Drawing.Imaging.ColorAdjustType type) { }
        public void ClearColorMatrix() { }
        public void ClearColorMatrix(System.Drawing.Imaging.ColorAdjustType type) { }
        public void ClearGamma() { }
        public void ClearGamma(System.Drawing.Imaging.ColorAdjustType type) { }
        public void ClearNoOp() { }
        public void ClearNoOp(System.Drawing.Imaging.ColorAdjustType type) { }
        public void ClearOutputChannel() { }
        public void ClearOutputChannel(System.Drawing.Imaging.ColorAdjustType type) { }
        public void ClearOutputChannelColorProfile() { }
        public void ClearOutputChannelColorProfile(System.Drawing.Imaging.ColorAdjustType type) { }
        public void ClearRemapTable() { }
        public void ClearRemapTable(System.Drawing.Imaging.ColorAdjustType type) { }
        public void ClearThreshold() { }
        public void ClearThreshold(System.Drawing.Imaging.ColorAdjustType type) { }
        public object Clone() { throw null; }
        public void Dispose() { }
        ~ImageAttributes() { }
        [System.MonoTODOAttribute("Not supported by libgdiplus")]
        public void GetAdjustedPalette(System.Drawing.Imaging.ColorPalette palette, System.Drawing.Imaging.ColorAdjustType type) { }
        public void SetBrushRemapTable(System.Drawing.Imaging.ColorMap[] map) { }
        public void SetColorKey(System.Drawing.Color colorLow, System.Drawing.Color colorHigh) { }
        public void SetColorKey(System.Drawing.Color colorLow, System.Drawing.Color colorHigh, System.Drawing.Imaging.ColorAdjustType type) { }
        public void SetColorMatrices(System.Drawing.Imaging.ColorMatrix newColorMatrix, System.Drawing.Imaging.ColorMatrix grayMatrix) { }
        public void SetColorMatrices(System.Drawing.Imaging.ColorMatrix newColorMatrix, System.Drawing.Imaging.ColorMatrix grayMatrix, System.Drawing.Imaging.ColorMatrixFlag flags) { }
        public void SetColorMatrices(System.Drawing.Imaging.ColorMatrix newColorMatrix, System.Drawing.Imaging.ColorMatrix grayMatrix, System.Drawing.Imaging.ColorMatrixFlag mode, System.Drawing.Imaging.ColorAdjustType type) { }
        public void SetColorMatrix(System.Drawing.Imaging.ColorMatrix colorMatrix) { }
        public void SetColorMatrix(System.Drawing.Imaging.ColorMatrix colorMatrix, System.Drawing.Imaging.ColorMatrixFlag colorMatrixFlag) { }
        public void SetColorMatrix(System.Drawing.Imaging.ColorMatrix colorMatrix, System.Drawing.Imaging.ColorMatrixFlag colorMatrixFlag, System.Drawing.Imaging.ColorAdjustType colorAdjustType) { }
        public void SetGamma(float gamma) { }
        public void SetGamma(float gamma, System.Drawing.Imaging.ColorAdjustType coloradjust) { }
        public void SetNoOp() { }
        public void SetNoOp(System.Drawing.Imaging.ColorAdjustType type) { }
        [System.MonoTODOAttribute("Not supported by libgdiplus")]
        public void SetOutputChannel(System.Drawing.Imaging.ColorChannelFlag flags) { }
        [System.MonoTODOAttribute("Not supported by libgdiplus")]
        public void SetOutputChannel(System.Drawing.Imaging.ColorChannelFlag flags, System.Drawing.Imaging.ColorAdjustType type) { }
        [System.MonoTODOAttribute("Not supported by libgdiplus")]
        public void SetOutputChannelColorProfile(string colorProfileFilename) { }
        [System.MonoTODOAttribute("Not supported by libgdiplus")]
        public void SetOutputChannelColorProfile(string colorProfileFilename, System.Drawing.Imaging.ColorAdjustType type) { }
        public void SetRemapTable(System.Drawing.Imaging.ColorMap[] map) { }
        public void SetRemapTable(System.Drawing.Imaging.ColorMap[] map, System.Drawing.Imaging.ColorAdjustType type) { }
        [System.MonoTODOAttribute("Not supported by libgdiplus")]
        public void SetThreshold(float threshold) { }
        [System.MonoTODOAttribute("Not supported by libgdiplus")]
        public void SetThreshold(float threshold, System.Drawing.Imaging.ColorAdjustType type) { }
        public void SetWrapMode(System.Drawing.Drawing2D.WrapMode mode) { }
        public void SetWrapMode(System.Drawing.Drawing2D.WrapMode mode, System.Drawing.Color color) { }
        public void SetWrapMode(System.Drawing.Drawing2D.WrapMode mode, System.Drawing.Color color, bool clamp) { }
    }
    [System.FlagsAttribute]
    public enum ImageCodecFlags
    {
        BlockingDecode = 32,
        Builtin = 65536,
        Decoder = 2,
        Encoder = 1,
        SeekableEncode = 16,
        SupportBitmap = 4,
        SupportVector = 8,
        System = 131072,
        User = 262144,
    }
    public sealed partial class ImageCodecInfo
    {
        internal ImageCodecInfo() { }
        public System.Guid Clsid { get { throw null; } set { } }
        public string CodecName { get { throw null; } set { } }
        public string DllName { get { throw null; } set { } }
        public string FilenameExtension { get { throw null; } set { } }
        public System.Drawing.Imaging.ImageCodecFlags Flags { get { throw null; } set { } }
        public string FormatDescription { get { throw null; } set { } }
        public System.Guid FormatID { get { throw null; } set { } }
        public string MimeType { get { throw null; } set { } }
        [System.CLSCompliantAttribute(false)]
        public byte[][] SignatureMasks { get { throw null; } set { } }
        [System.CLSCompliantAttribute(false)]
        public byte[][] SignaturePatterns { get { throw null; } set { } }
        public int Version { get { throw null; } set { } }
        public static System.Drawing.Imaging.ImageCodecInfo[] GetImageDecoders() { throw null; }
        public static System.Drawing.Imaging.ImageCodecInfo[] GetImageEncoders() { throw null; }
    }
    [System.FlagsAttribute]
    public enum ImageFlags
    {
        Caching = 131072,
        ColorSpaceCmyk = 32,
        ColorSpaceGray = 64,
        ColorSpaceRgb = 16,
        ColorSpaceYcbcr = 128,
        ColorSpaceYcck = 256,
        HasAlpha = 2,
        HasRealDpi = 4096,
        HasRealPixelSize = 8192,
        HasTranslucent = 4,
        None = 0,
        PartiallyScalable = 8,
        ReadOnly = 65536,
        Scalable = 1,
    }
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Drawing.ImageFormatConverter))]
    public sealed partial class ImageFormat
    {
        public ImageFormat(System.Guid guid) { }
        public static System.Drawing.Imaging.ImageFormat Bmp { get { throw null; } }
        public static System.Drawing.Imaging.ImageFormat Emf { get { throw null; } }
        public static System.Drawing.Imaging.ImageFormat Exif { get { throw null; } }
        public static System.Drawing.Imaging.ImageFormat Gif { get { throw null; } }
        public System.Guid Guid { get { throw null; } }
        public static System.Drawing.Imaging.ImageFormat Icon { get { throw null; } }
        public static System.Drawing.Imaging.ImageFormat Jpeg { get { throw null; } }
        public static System.Drawing.Imaging.ImageFormat MemoryBmp { get { throw null; } }
        public static System.Drawing.Imaging.ImageFormat Png { get { throw null; } }
        public static System.Drawing.Imaging.ImageFormat Tiff { get { throw null; } }
        public static System.Drawing.Imaging.ImageFormat Wmf { get { throw null; } }
        public override bool Equals(object o) { throw null; }
        public override int GetHashCode() { throw null; }
        public override string ToString() { throw null; }
    }
    public enum ImageLockMode
    {
        ReadOnly = 1,
        ReadWrite = 3,
        UserInputBuffer = 4,
        WriteOnly = 2,
    }
    [System.ComponentModel.EditorAttribute("System.Drawing.Design.MetafileEditor, System.Drawing.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))]
    [System.MonoTODOAttribute("Metafiles, both WMF and EMF formats, are only partially supported.")]
    [System.SerializableAttribute]
    public sealed partial class Metafile : System.Drawing.Image
    {
        public Metafile(System.IntPtr henhmetafile, bool deleteEmf) { }
        public Metafile(System.IntPtr referenceHdc, System.Drawing.Imaging.EmfType emfType) { }
        public Metafile(System.IntPtr referenceHdc, System.Drawing.Imaging.EmfType emfType, string description) { }
        public Metafile(System.IntPtr hmetafile, System.Drawing.Imaging.WmfPlaceableFileHeader wmfHeader) { }
        public Metafile(System.IntPtr hmetafile, System.Drawing.Imaging.WmfPlaceableFileHeader wmfHeader, bool deleteWmf) { }
        public Metafile(System.IntPtr referenceHdc, System.Drawing.Rectangle frameRect) { }
        public Metafile(System.IntPtr referenceHdc, System.Drawing.Rectangle frameRect, System.Drawing.Imaging.MetafileFrameUnit frameUnit) { }
        public Metafile(System.IntPtr referenceHdc, System.Drawing.Rectangle frameRect, System.Drawing.Imaging.MetafileFrameUnit frameUnit, System.Drawing.Imaging.EmfType type) { }
        public Metafile(System.IntPtr referenceHdc, System.Drawing.Rectangle frameRect, System.Drawing.Imaging.MetafileFrameUnit frameUnit, System.Drawing.Imaging.EmfType type, string description) { }
        public Metafile(System.IntPtr referenceHdc, System.Drawing.RectangleF frameRect) { }
        public Metafile(System.IntPtr referenceHdc, System.Drawing.RectangleF frameRect, System.Drawing.Imaging.MetafileFrameUnit frameUnit) { }
        public Metafile(System.IntPtr referenceHdc, System.Drawing.RectangleF frameRect, System.Drawing.Imaging.MetafileFrameUnit frameUnit, System.Drawing.Imaging.EmfType type) { }
        public Metafile(System.IntPtr referenceHdc, System.Drawing.RectangleF frameRect, System.Drawing.Imaging.MetafileFrameUnit frameUnit, System.Drawing.Imaging.EmfType type, string description) { }
        public Metafile(System.IO.Stream stream) { }
        public Metafile(System.IO.Stream stream, System.IntPtr referenceHdc) { }
        public Metafile(System.IO.Stream stream, System.IntPtr referenceHdc, System.Drawing.Imaging.EmfType type) { }
        public Metafile(System.IO.Stream stream, System.IntPtr referenceHdc, System.Drawing.Imaging.EmfType type, string description) { }
        public Metafile(System.IO.Stream stream, System.IntPtr referenceHdc, System.Drawing.Rectangle frameRect) { }
        public Metafile(System.IO.Stream stream, System.IntPtr referenceHdc, System.Drawing.Rectangle frameRect, System.Drawing.Imaging.MetafileFrameUnit frameUnit) { }
        public Metafile(System.IO.Stream stream, System.IntPtr referenceHdc, System.Drawing.Rectangle frameRect, System.Drawing.Imaging.MetafileFrameUnit frameUnit, System.Drawing.Imaging.EmfType type) { }
        public Metafile(System.IO.Stream stream, System.IntPtr referenceHdc, System.Drawing.Rectangle frameRect, System.Drawing.Imaging.MetafileFrameUnit frameUnit, System.Drawing.Imaging.EmfType type, string description) { }
        public Metafile(System.IO.Stream stream, System.IntPtr referenceHdc, System.Drawing.RectangleF frameRect) { }
        public Metafile(System.IO.Stream stream, System.IntPtr referenceHdc, System.Drawing.RectangleF frameRect, System.Drawing.Imaging.MetafileFrameUnit frameUnit) { }
        public Metafile(System.IO.Stream stream, System.IntPtr referenceHdc, System.Drawing.RectangleF frameRect, System.Drawing.Imaging.MetafileFrameUnit frameUnit, System.Drawing.Imaging.EmfType type) { }
        public Metafile(System.IO.Stream stream, System.IntPtr referenceHdc, System.Drawing.RectangleF frameRect, System.Drawing.Imaging.MetafileFrameUnit frameUnit, System.Drawing.Imaging.EmfType type, string description) { }
        public Metafile(string filename) { }
        public Metafile(string fileName, System.IntPtr referenceHdc) { }
        public Metafile(string fileName, System.IntPtr referenceHdc, System.Drawing.Imaging.EmfType type) { }
        public Metafile(string fileName, System.IntPtr referenceHdc, System.Drawing.Imaging.EmfType type, string description) { }
        public Metafile(string fileName, System.IntPtr referenceHdc, System.Drawing.Rectangle frameRect) { }
        public Metafile(string fileName, System.IntPtr referenceHdc, System.Drawing.Rectangle frameRect, System.Drawing.Imaging.MetafileFrameUnit frameUnit) { }
        public Metafile(string fileName, System.IntPtr referenceHdc, System.Drawing.Rectangle frameRect, System.Drawing.Imaging.MetafileFrameUnit frameUnit, System.Drawing.Imaging.EmfType type) { }
        public Metafile(string fileName, System.IntPtr referenceHdc, System.Drawing.Rectangle frameRect, System.Drawing.Imaging.MetafileFrameUnit frameUnit, System.Drawing.Imaging.EmfType type, string description) { }
        public Metafile(string fileName, System.IntPtr referenceHdc, System.Drawing.Rectangle frameRect, System.Drawing.Imaging.MetafileFrameUnit frameUnit, string description) { }
        public Metafile(string fileName, System.IntPtr referenceHdc, System.Drawing.RectangleF frameRect) { }
        public Metafile(string fileName, System.IntPtr referenceHdc, System.Drawing.RectangleF frameRect, System.Drawing.Imaging.MetafileFrameUnit frameUnit) { }
        public Metafile(string fileName, System.IntPtr referenceHdc, System.Drawing.RectangleF frameRect, System.Drawing.Imaging.MetafileFrameUnit frameUnit, System.Drawing.Imaging.EmfType type) { }
        public Metafile(string fileName, System.IntPtr referenceHdc, System.Drawing.RectangleF frameRect, System.Drawing.Imaging.MetafileFrameUnit frameUnit, System.Drawing.Imaging.EmfType type, string description) { }
        public Metafile(string fileName, System.IntPtr referenceHdc, System.Drawing.RectangleF frameRect, System.Drawing.Imaging.MetafileFrameUnit frameUnit, string description) { }
        public System.IntPtr GetHenhmetafile() { throw null; }
        [System.MonoLimitationAttribute("Metafiles aren't only partially supported by libgdiplus.")]
        public System.Drawing.Imaging.MetafileHeader GetMetafileHeader() { throw null; }
        [System.MonoLimitationAttribute("Metafiles aren't only partially supported by libgdiplus.")]
        public static System.Drawing.Imaging.MetafileHeader GetMetafileHeader(System.IntPtr henhmetafile) { throw null; }
        [System.MonoLimitationAttribute("Metafiles aren't only partially supported by libgdiplus.")]
        public static System.Drawing.Imaging.MetafileHeader GetMetafileHeader(System.IntPtr henhmetafile, System.Drawing.Imaging.WmfPlaceableFileHeader wmfHeader) { throw null; }
        [System.MonoLimitationAttribute("Metafiles aren't only partially supported by libgdiplus.")]
        public static System.Drawing.Imaging.MetafileHeader GetMetafileHeader(System.IO.Stream stream) { throw null; }
        [System.MonoLimitationAttribute("Metafiles aren't only partially supported by libgdiplus.")]
        public static System.Drawing.Imaging.MetafileHeader GetMetafileHeader(string fileName) { throw null; }
        [System.MonoLimitationAttribute("Metafiles aren't only partially supported by libgdiplus.")]
        public void PlayRecord(System.Drawing.Imaging.EmfPlusRecordType recordType, int flags, int dataSize, byte[] data) { }
    }
    public enum MetafileFrameUnit
    {
        Document = 5,
        GdiCompatible = 7,
        Inch = 4,
        Millimeter = 6,
        Pixel = 2,
        Point = 3,
    }
    [System.MonoTODOAttribute("Metafiles, both WMF and EMF formats, aren't supported.")]
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public sealed partial class MetafileHeader
    {
        internal MetafileHeader() { }
        public System.Drawing.Rectangle Bounds { get { throw null; } }
        public float DpiX { get { throw null; } }
        public float DpiY { get { throw null; } }
        public int EmfPlusHeaderSize { get { throw null; } }
        public int LogicalDpiX { get { throw null; } }
        public int LogicalDpiY { get { throw null; } }
        public int MetafileSize { get { throw null; } }
        public System.Drawing.Imaging.MetafileType Type { get { throw null; } }
        public int Version { get { throw null; } }
        public System.Drawing.Imaging.MetaHeader WmfHeader { get { throw null; } }
        [System.MonoTODOAttribute("always returns false")]
        public bool IsDisplay() { throw null; }
        public bool IsEmf() { throw null; }
        public bool IsEmfOrEmfPlus() { throw null; }
        public bool IsEmfPlus() { throw null; }
        public bool IsEmfPlusDual() { throw null; }
        public bool IsEmfPlusOnly() { throw null; }
        public bool IsWmf() { throw null; }
        public bool IsWmfPlaceable() { throw null; }
    }
    public enum MetafileType
    {
        Emf = 3,
        EmfPlusDual = 5,
        EmfPlusOnly = 4,
        Invalid = 0,
        Wmf = 1,
        WmfPlaceable = 2,
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public sealed partial class MetaHeader
    {
        public MetaHeader() { }
        public short HeaderSize { get { throw null; } set { } }
        public int MaxRecord { get { throw null; } set { } }
        public short NoObjects { get { throw null; } set { } }
        public short NoParameters { get { throw null; } set { } }
        public int Size { get { throw null; } set { } }
        public short Type { get { throw null; } set { } }
        public short Version { get { throw null; } set { } }
    }
    [System.FlagsAttribute]
    public enum PaletteFlags
    {
        GrayScale = 2,
        Halftone = 4,
        HasAlpha = 1,
    }
    public enum PixelFormat
    {
        Alpha = 262144,
        Canonical = 2097152,
        DontCare = 0,
        Extended = 1048576,
        Format16bppArgb1555 = 397319,
        Format16bppGrayScale = 1052676,
        Format16bppRgb555 = 135173,
        Format16bppRgb565 = 135174,
        Format1bppIndexed = 196865,
        Format24bppRgb = 137224,
        Format32bppArgb = 2498570,
        Format32bppPArgb = 925707,
        Format32bppRgb = 139273,
        Format48bppRgb = 1060876,
        Format4bppIndexed = 197634,
        Format64bppArgb = 3424269,
        Format64bppPArgb = 1851406,
        Format8bppIndexed = 198659,
        Gdi = 131072,
        Indexed = 65536,
        Max = 15,
        PAlpha = 524288,
        Undefined = 0,
    }
    public delegate void PlayRecordCallback(System.Drawing.Imaging.EmfPlusRecordType recordType, int flags, int dataSize, System.IntPtr recordData);
    public sealed partial class PropertyItem
    {
        internal PropertyItem() { }
        public int Id { get { throw null; } set { } }
        public int Len { get { throw null; } set { } }
        public short Type { get { throw null; } set { } }
        public byte[] Value { get { throw null; } set { } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack=2)]
    public sealed partial class WmfPlaceableFileHeader
    {
        public WmfPlaceableFileHeader() { }
        public short BboxBottom { get { throw null; } set { } }
        public short BboxLeft { get { throw null; } set { } }
        public short BboxRight { get { throw null; } set { } }
        public short BboxTop { get { throw null; } set { } }
        public short Checksum { get { throw null; } set { } }
        public short Hmf { get { throw null; } set { } }
        public short Inch { get { throw null; } set { } }
        public int Key { get { throw null; } set { } }
        public int Reserved { get { throw null; } set { } }
    }
}
namespace System.Drawing.Printing
{
    [System.SerializableAttribute]
    public enum Duplex
    {
        Default = -1,
        Horizontal = 3,
        Simplex = 1,
        Vertical = 2,
    }
    [System.SerializableAttribute]
    public partial class InvalidPrinterException : System.SystemException
    {
        public InvalidPrinterException(System.Drawing.Printing.PrinterSettings settings) { }
        protected InvalidPrinterException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
        [System.Security.Permissions.SecurityPermissionAttribute(System.Security.Permissions.SecurityAction.Demand, SerializationFormatter=true)]
        public override void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
    }
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Drawing.Printing.MarginsConverter))]
    [System.SerializableAttribute]
    public partial class Margins : System.ICloneable
    {
        public Margins() { }
        public Margins(int left, int right, int top, int bottom) { }
        public int Bottom { get { throw null; } set { } }
        public int Left { get { throw null; } set { } }
        public int Right { get { throw null; } set { } }
        public int Top { get { throw null; } set { } }
        public object Clone() { throw null; }
        public override bool Equals(object obj) { throw null; }
        public override int GetHashCode() { throw null; }
        public static bool operator ==(System.Drawing.Printing.Margins m1, System.Drawing.Printing.Margins m2) { throw null; }
        public static bool operator !=(System.Drawing.Printing.Margins m1, System.Drawing.Printing.Margins m2) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class MarginsConverter : System.ComponentModel.ExpandableObjectConverter
    {
        public MarginsConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { throw null; }
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { throw null; }
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System
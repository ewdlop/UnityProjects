urns the total number of tiles in the image
    //
    //--------------------------------------------------------------------

    IMF_EXPORT
    int                 numLevels () const;
    IMF_EXPORT
    int                 numXLevels () const;
    IMF_EXPORT
    int                 numYLevels () const;
    IMF_EXPORT
    bool                isValidLevel (int lx, int ly) const;
    IMF_EXPORT
    size_t              totalTiles() const;

    //----------------------------------------------------------
    // Dimensions of a level:
    //
    // levelWidth(lx) returns the width of a level with level
    // number (lx, *), where * is any number.
    //
    //  return value is:
    //      max (1, rfunc (w / pow (2, lx)))
    //
    //
    // levelHeight(ly) returns the height of a level with level
    // number (*, ly), where * is any number.
    //
    //  return value is:
    //      max (1, rfunc (h / pow (2, ly)))
    //
    //----------------------------------------------------------

    IMF_EXPORT
    int                 levelWidth  (int lx) const;
    IMF_EXPORT
    int                 levelHeight (int ly) const;


    //--------------------------------------------------------------
    // Number of tiles:
    //
    // numXTiles(lx) returns the number of tiles in x direction
    // that cover a level with level number (lx, *), where * is
    // any number.
    //
    //  return value is:
    //      (levelWidth(lx) + tileXSize() - 1) / tileXSize()
    //
    //
    // numYTiles(ly) returns the number of tiles in y direction
    // that cover a level with level number (*, ly), where * is
    // any number.
    //
    //  return value is:
    //      (levelHeight(ly) + tileXSize() - 1) / tileXSize()
    //
    //--------------------------------------------------------------

    IMF_EXPORT
    int                 numXTiles (int lx = 0) const;
    IMF_EXPORT
    int                 numYTiles (int ly = 0) const;


    //---------------------------------------------------------------
    // Level pixel ranges:
    //
    // dataWindowForLevel(lx, ly) returns a 2-dimensional region of
    // valid pixel coordinates for a level with level number (lx, ly)
    //
    //  return value is a Box2i with min value:
    //      (dataWindow.min.x, dataWindow.min.y)
    //
    //  and max value:
    //      (dataWindow.min.x + levelWidth(lx) - 1,
    //       dataWindow.min.y + levelHeight(ly) - 1)
    //
    // dataWindowForLevel(level) is a convenience function used
    // for ONE_LEVEL and MIPMAP_LEVELS files.  It returns
    // dataWindowForLevel(level, level).
    //
    //---------------------------------------------------------------

    IMF_EXPORT
    IMATH_NAMESPACE::Box2i        dataWindowForLevel (int l = 0) const;
    IMF_EXPORT
    IMATH_NAMESPACE::Box2i        dataWindowForLevel (int lx, int ly) const;


    //-------------------------------------------------------------------
    // Tile pixel ranges:
    //
    // dataWindowForTile(dx, dy, lx, ly) returns a 2-dimensional
    // region of valid pixel coordinates for a tile with tile coordinates
    // (dx,dy) and level number (lx, ly).
    //
    //  return value is a Box2i with min value:
    //      (dataWindow.min.x + dx * tileXSize(),
    //       dataWindow.min.y + dy * tileYSize())
    //
    //  and max value:
    //      (dataWindow.min.x + (dx + 1) * tileXSize() - 1,
    //       dataWindow.min.y + (dy + 1) * tileYSize() - 1)
    //
    // dataWindowForTile(dx, dy, level) is a convenience function
    // used for ONE_LEVEL and MIPMAP_LEVELS files.  It returns
    // dataWindowForTile(dx, dy, level, level).
    //
    //-------------------------------------------------------------------

    IMF_EXPORT
    IMATH_NAMESPACE::Box2i        dataWindowForTile (int dx, int dy, int l = 0) const;

    IMF_EXPORT
    IMATH_NAMESPACE::Box2i        dataWindowForTile (int dx, int dy,
                                           int lx, int ly) const;

    //------------------------------------------------------------
    // Read pixel data:
    //
    // readTile(dx, dy, lx, ly) reads the tile with tile
    // coordinates (dx, dy), and level number (lx, ly),
    // and stores it in the current frame buffer.
    //
    //   dx must lie in the interval [0, numXTiles(lx)-1]
    //   dy must lie in the interval [0, numYTiles(ly)-1]
    //
    //   lx must lie in the interval [0, numXLevels()-1]
    //   ly must lie in the inverval [0, numYLevels()-1]
    //
    // readTile(dx, dy, level) is a convenience function used
    // for ONE_LEVEL and MIPMAP_LEVELS files.  It calls
    // readTile(dx, dy, level, level).
    //
    // The two readTiles(dx1, dx2, dy1, dy2, ...) functions allow
    // reading multiple tiles at once.  If multi-threading is used
    // the multiple tiles are read concurrently.
    //
    // Pixels that are outside the pixel coordinate range for the
    // tile's level, are never accessed by readTile().
    //
    // Attempting to access a tile that is not present in the file
    // throws an InputExc exception.
    //
    //------------------------------------------------------------

    IMF_EXPORT
    void                readTile  (int dx, int dy, int l = 0);
    IMF_EXPORT
    void                readTile  (int dx, int dy, int lx, int ly);

    IMF_EXPORT
    void                readTiles (int dx1, int dx2, int dy1, int dy2,
                                   int lx, int ly);

    IMF_EXPORT
    void                readTiles (int dx1, int dx2, int dy1, int dy2,
                                   int l = 0);


    //--------------------------------------------------
    // Read a tile of raw pixel data from the file,
    // without uncompressing it (this function is
    // used to implement TiledOutputFile::copyPixels()).
    //--------------------------------------------------

    IMF_EXPORT
    void                rawTileData (int &dx, int &dy,
                                     int &lx, int &ly,
                                     char *pixelData,
                                     Int64 &dataSize) const;

    //------------------------------------------------------------------
    // Read pixel sample counts into a slice in the frame buffer.
    //
    // readPixelSampleCount(dx, dy, lx, ly) reads the sample counts
    // for tile (dx, dy) in level (lx, ly).
    //
    // readPixelSampleCount(dx, dy, l) calls
    // readPixelSampleCount(dx, dy, lx = l, ly = l)
    //
    // dx must lie in the interval [0, numXTiles(lx)-1]
    // dy must lie in the interval [0, numYTiles(ly)-1]
    //
    // lx must lie in the interval [0, numXLevels()-1]
    // ly must lie in the inverval [0, numYLevels()-1]
    //
    // readPixelSampleCounts(dx1, dx2, dy1, dy2, lx, ly) reads all
    // the sample counts for tiles within range
    // [(min(dx1, dx2), min(dy1, dy2))...(max(dx1, dx2), max(dy1, dy2)],
    // and on level (lx, ly)
    //
    // readPixelSampleCounts(dx1, dx2, dy1, dy2, l) calls
    // readPixelSampleCounts(dx1, dx2, dy1, dy2, lx = l, ly = l).
    //------------------------------------------------------------------

    IMF_EXPORT
    void                readPixelSampleCount  (int dx, int dy, int l = 0);
    IMF_EXPORT
    void                readPixelSampleCount  (int dx, int dy, int lx, int ly);

    IMF_EXPORT
    void                readPixelSampleCounts (int dx1, int dx2,
                                              int dy1, int dy2,
                                              int lx, int ly);

    IMF_EXPORT
    void                readPixelSampleCounts (int dx1, int dx2,
                                              int dy1, int dy2,
                                              int l = 0);

    struct Data;

    
    
  private:

    friend class InputFile;
    friend class MultiPartInputFile;

    DeepTiledInputFile (InputPartData* part);

    DeepTiledInputFile (const DeepTiledInputFile &);              // not implemented
    DeepTiledInputFile & operator = (const DeepTiledInputFile &); // not implemented

    DeepTiledInputFile (const Header &header, OPENEXR_IMF_INTERNAL_NAMESPACE::IStream *is, int version,
                    int numThreads);

    void                initialize ();
    void                multiPartInitialize(InputPartData* part);
    void                compatibilityInitialize(OPENEXR_IMF_INTERNAL_NAMESPACE::IStream& is);

    bool                isValidTile (int dx, int dy,
                                     int lx, int ly) const;

    size_t              bytesPerLineForTile (int dx, int dy,
                                             int lx, int ly) const;
           
                                                
    void                getTileOrder(int dx[],int dy[],int lx[],int ly[]) const;
                                             
    
    Data *              _data;


    // needed for copyPixels
    friend void DeepTiledOutputFile::copyPixels(DeepTiledInputFile &);
};

OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_EXIT

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                €äw\À$äBHÒØùSÔÛÌÃNíY’ÅÃ…€Æ%ï›S¢π‡ífY$8tÏË∆®É_qÂnÀ√Ün2 3Ø'⁄ÌhŒ'ÁlÙà≥∂ìSÕ˝–ÑZû|gä⁄£8aêƒ ŒÕZ€bÓ7,Ãj]ÿG”.@ú/È¬ÒøKT]ã¶¿äDSµ∫∂πí)ÓÓâ≠†˙YÓ≥™≤ÿ∏ÿæﬂêø=w¡…Ì«q Uï˝&WÁ–÷ö¥í-g‰ä%uõŒ‡g˘È¥7ëÌG.¶“ª˛ãø∫Öî∏ÿqøÇbñZ :∑x~∫»≠
 èÒmI⁄æ_œÅˆ»êÕë'èõΩ_@≈‰ÖZÏ¿πÆ¿UÃ†óu«Â‘(≥®^øÍ®dûóUÿ∑2∫›9EgÌÕŒˇÀñO¸yIã·”U®uìhÜ!8ò´„ı€@âR÷l\ùR¥–7]å)´˘Ω€rÖ`nD^÷™lØÌı;¿ÿY¢aú´ñb∆™| …∆ a∞ófˇ4\!emN@TÜ(H‡ª:>f¢ˇ˛IVÉV	A5ùo•lŒ≈bgÁÌ÷Ñì?	áH˝è√±ò«[πed!Mº‡^‰«»3¯,Ê˘&kÔpΩˇ	?ÑÅôhû â	¥è+tì»©≠–Ù˚∑◊≤ø˜«IKüÇm—€®∆u8V*%ﬁK1§Õkç!/HJÑX©˙;XëèÜ˜ò|4aïàÛˇH§Äà7.LsﬁG•Ìß‹i,Ê∆ìºÊ–æpàË´G@k∆D`Ø±◊¬å§ÕKW5∏ﬁ.,&C¯FáÄ‰LEî}_∆wíVyŸÒ`£MŒƒ–!!7E9Ô7Éw*.VéOd]‘z%Â]%∆Ω‚Å*(GñÑ{$¥$*æäSf∏èÕ_aï»O\çØ¶ÿ≠)À6∏‡¨ˆ.Áô]ÛI∂!1UÅÑÂıãJˆ# çË≤.›ÿ©˝”Àñ5Ì∂∆Wç•ò∑‡˙âM„KÊaÄ¢dB≠uï5Ñ ú√‡;/æw±ƒ*QfáòD”Ü@∆äàË~‚çñÚœŒ1j˛!ÉÈ”dÕ¸lÓË<eîÆô˝®aÓºòÊ5ıóœFÂ5rc1Z‡Ç´}ÂÈ±*Õ3q‹,ãNñﬂO<‹+YXA≥Ç¨PÉBq¬÷Oie±ÁÆ∂ u¡ïb3H33ZÛ¡Ç∑t/XPcÀ(sØ/Ó≠ƒıª0WìJñÚ‡Wê§fV76+Lƒíg÷ˆPPﬂ∑∫—òˇ∆zÿDj|·áï#√ÛæcﬂKßÙ!˘=M”ÂËl(YÂÆ˝ h*{ï‘f˝ãTÑ˛¡˘€OÖOwπ1S≈‰hL,ÔJNSB¨a/O‚Ì∑;SŒ4q∞s<î˝ãU0∫πØ–!Zn∑uM~ÄîÇ'Q˘M∂M¢/≠&\LQWw8ÜhO∏Z*◊zôQ÷@Æ
ä>'Ë@YX∆EYj:˙’u
Ÿ´v[HB^PèùúS”^rﬂ(†; ìù ÌG.Œ˝è!e±zyò˚OA´âc [˚ÆΩo’Î†,úìçRy(≥Ñ7ˆ.éS∏Œbiê≥áûlˇ£‚¯FµCJ˝	D©ﬁ
˛ëe]ò9ì5‚')#µ#èTàR¿¯Í_ÚJ	>EÍ}’å“rv÷é ò¡¶÷—n –W[†ëÈ<'0'‘`(ö]ö©b‚ßì2µ~ö«äV©¸?ª†Nœ[#“4¢‹A°»‹øêkæÃß//ÂA†y~Okët‹¥Ì*V%ü`Øˆ‡:yá.¡ôe@9»≥TËµzÖü¢–™€ƒ∑õx˙Ã®N@0	/,∂l•Pr=Œ<0G|øÃUDT)$2IÁºi¬êœ∆πaƒ∫®<˙±“AKiC7øK˙ıq¬~G)Ω't‹∏.kWŒ1íá.üñ_å)µ6?˜ú¡’ò
„\‘ÿ”dñÿ©Ôiãd¯¨>íV÷GD+ÌUµ$¸Ë7s%m//üòÂS(˜H>Î-¢öe(*«5I§ lﬂK2
>¨˙üÇbΩ}
öÕ>âìn´Ö˛ÇI_YÃOvÀŸ=áÂEå∞€2º¿yä«ÜOØ?âb¥Ï	2±bOBq,U·b€uïµYKÈA£eCﬁ/.Ú1`l7ú∑∏1pG∫)%òQπ¸T¯ùà”±?a?,4Ìt´lÖ‚∆ô)éŸ—vã9Ì˙`Ø	6òeñŒ qÕ%Eˇ#·ÄFÈ&Ñõ•íΩÇ6´[ﬂ…,·)ªÆ€>GˆcP·(!TÅS%"„§Î]`∂Ãö`LóåM∏ˇ2ÌvF;è÷ì¢H&ÖÛuMÿŸf¸◊ò§cEë§'Í∫¸;_ë‰V∑ÓG¬Ω!ﬂBCæ_ñn!©:ı˙ﬂ“K ™x≈cè‹{π¯Ú<,∞`1ƒ˜õ\bÛRsº: ñú6XªPÕUµúËûULÕAÄmñeB3√qqÄ«Ewˇ˘∂Â’Ìü˛ônµ!Ê√ºˇüT˝€|%î)KÄê.ËÔñª1YßΩµl`ªﬁÑ’1ø˜fL∆e7-#1Rl±4öÆcí+9ÃËÿÀÃBJÎ≠aÔ≈∂g¯9¨@≤ÆSÿBTæê&ÃyiΩ	b?‚Œ¯´±,+¬`´¯ΩgVbıê‹´˚
[Øù_;Î;,Z◊àœŸX£ítÖFØ–J'˝‰RÇÉ¡yô	-B†√ëëió^çhª¨˜î#™8π¬êÉÌAß¨ î?ãﬁèññ¨5£e19™πLÕ-<J»’¸ÄlµÖ∞µä…´pÌ’.nìmñîﬂ–á“Ûÿv˝Ñ‘‡êâ∆”¿8K|s‰«yIáVêèqy76H9ˇQÈÜ®ø˛˛1ØAÜ@∂BºW
qPkg≈¡›3¢˜¡GÅH*Ä•Ä™M:‘"T' 8H7™Ú÷‰q…„º⁄Òóù[ùnüÜ≠Ïâ:w–∏£…#,Cªo R2|FÃ‹Áˆ‹~/√làõ“™æQ±™Ü‰“p≠ı˚É#Ï≤’x4Je\◊,%8Ov\¡k§	•ù£árØü”Z®Q@√“"È_§àLÙ÷
Gã\$õ¶«“”Y‰∑a∫]•Ø´˝’◊é
"†ö~ÜM.f9œŒ¯HπI˛Î=SQ≤pz± Ïƒ=SŸc~≤÷jƒÅÌÇ|›ﬁ7-ô.?eBhÔ≤‚U	Ö˙] ßØ„9àÜrÊ&Ÿ3ñü“GXá¸Q>
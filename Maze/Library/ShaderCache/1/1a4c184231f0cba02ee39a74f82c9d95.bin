//----------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All rights reserved.
//----------------------------------------------------------------

namespace System.Activities.Core.Presentation
{
    using System.Activities.Presentation;
    using System.Activities.Presentation.Metadata;
    using System.Activities.Presentation.Model;
    using System.Activities.Presentation.View;
    using System.Activities.Presentation.Services;
    using System.Activities.Statements;
    using System.Collections.ObjectModel;
    using System.Collections.Specialized;
    using System.ComponentModel;
    using System.Diagnostics.CodeAnalysis;
    using System.IO;
    using System.Runtime;
    using System.Windows;
    using System.Windows.Automation;
    using System.Windows.Automation.Peers;
    using System.Windows.Input;
    using System.Windows.Threading;
    using System.Windows.Controls;
    using System.Activities.Presentation.View.OutlineView;

    /// <summary>
    /// Interaction logic for TryCatchDesigner.xaml
    /// </summary>
    partial class TryCatchDesigner
    {
        const string CatchesPropertyName = "Catches";
        const string ExceptionTypePropertyName = "ExceptionType";
        const string ExpandViewStateKey = "IsExpanded";

        public static readonly DependencyProperty ShowTryExpandedProperty =
            DependencyProperty.Register(
                "ShowTryExpanded",
                typeof(bool),
                typeof(TryCatchDesigner),
                new UIPropertyMetadata(true)
            );

        public static readonly DependencyProperty ShowFinallyExpandedProperty =
            DependencyProperty.Register(
                "ShowFinallyExpanded",
                typeof(bool),
                typeof(TryCatchDesigner),
                new UIPropertyMetadata(false)
            );

        public static readonly DependencyProperty ShowTypePresenterExpandedProperty =
            DependencyProperty.Register(
                "ShowTypePresenterExpanded",
                typeof(bool),
                typeof(TryCatchDesigner),
                new UIPropertyMetadata(false)
            );

        public static readonly DependencyProperty SelectedCatchProperty =
            DependencyProperty.Register(
            "SelectedCatch",
            typeof(ModelItem),
            typeof(TryCatchDesigner),
            new UIPropertyMetadata(null));

        static ObservableCollection<Type> mostRecentlyUsedTypes;
        static ObservableCollection<Type> MostRecentlyUsedTypes
        {
            get
            {
                if (mostRecentlyUsedTypes == null)
                {
                    mostRecentlyUsedTypes = new ObservableCollection<Type>
                    {
                        typeof(ArgumentException),
                        typeof(NullReferenceException),
                        typeof(IOException),
                        typeof(InvalidOperationException),
                        typeof(Exception),
                    };
                }
                return mostRecentlyUsedTypes;
            }
        }

        public bool ShowTryExpanded
        {
            get
            {
                return (bool)this.GetValue(ShowTryExpandedProperty);
            }
            set
            {
                this.SetValue(ShowTryExpandedProperty, value);
            }
        }

        public bool ShowFinallyExpanded
        {
            get
            {
                return (bool)this.GetValue(ShowFinallyExpandedProperty);
            }
            set
            {
                this.SetValue(ShowFinallyExpandedProperty, value);
            }
        }

        public bool ShowTypePresenterExpanded
        {
            get
            {
                return (bool)this.GetValue(ShowTypePresenterExpandedProperty);
            }
            set
            {
                this.SetValue(ShowTypePresenterExpandedProperty, value);
            }
        }

        ModelItem SelectedCatch
        {
            get
            {
                return (ModelItem)this.GetValue(SelectedCatchProperty);
            }
            set
            {
                this.SetValue(SelectedCatchProperty, value);
            }
        }

        TypePresenter typePresenter;
        Label addCatchHintLabel;

        internal static void RegisterMetadata(AttributeTableBuilder builder)
        {
            Type type = typeof(TryCatch);
            builder.AddCustomAttributes(type, new DesignerAttribute(typeof(TryCatchDesigner)));
            builder.AddCustomAttributes(type, type.GetProperty("Try"), BrowsableAttribute.No);
            builder.AddCustomAttributes(type, type.GetProperty("Finally"), BrowsableAttribute.No);
            builder.AddCustomAttributes(type, type.GetProperty("Catches"), BrowsableAttribute.No);
            builder.AddCustomAttributes(type, type.GetProperty("Variables"), BrowsableAttribute.No);

            // Make Catches collection's node visible in the document treeview but hide Catches node itself.
            builder.AddCustomAttributes(type, type.GetProperty("Catches"), new ShowPropertyInOutlineViewAttribute() { CurrentPropertyVisible = false });
        }

        [SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public TryCatchDesigner()
        {
            InitializeComponent();

            this.Loaded += OnLoaded;
            this.Unloaded += OnUnloaded;
        }

        void OnLoaded(object sender, RoutedEventArgs e)
        {
            this.Context.Items.Subscribe<Selection>(OnSelectionChanged);
            // at this time, this.ModelItem is already set
            this.ModelItem.PropertyChanged += OnModelItemPropertyChanged;
            this.ModelItem.Properties[CatchesPropertyName].Collection.CollectionChanged += OnModelItemCollectionChanged;

            ViewStateService viewStateService = this.Context.Services.GetService<ViewStateService>();

            foreach (ModelItem modelItem in this.ModelItem.Properties["Catches"].Collection)
            {
                bool? isExpanded = (bool?)viewStateService.RetrieveViewState(modelItem, ExpandViewStateKey);
             
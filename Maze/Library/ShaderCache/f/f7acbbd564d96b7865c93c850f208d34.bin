c_thread_state_t *thread_state, plcrash_regnum_t regnum);

/**
 * Get the total number of registers supported by @a thread_state.
 *
 * @param thread_state The target thread state.
 */
size_t plcrash_async_thread_state_get_reg_count (const plcrash_async_thread_state_t *thread_state);

/**
 * Get a register value.
 */
plcrash_greg_t plcrash_async_thread_state_get_reg (const plcrash_async_thread_state_t *thread_state, plcrash_regnum_t regnum);

/**
 * Set a register value.
 */
void plcrash_async_thread_state_set_reg (plcrash_async_thread_state_t *thread_state, plcrash_regnum_t regnum, plcrash_greg_t reg);

/**
 * Clear all non-callee saved volatile registers in @a thread_state. The exact registers preserved depend on the target ABI.
 *
 * @param thread_state The thread state to clear.
 */
void plcrash_async_thread_state_clear_volatile_regs (plcrash_async_thread_state_t *thread_state);

/**
 * Map a plcrash_regnum_t to its corresponding DWARF register value. Returns true if a mapping is available
 * for @a regnum, or false if no DWARF register value is available for @a regnum.
 *
 * @warning This API may require changes in the future to support specifying the register mapping type; eg, DWARF debug_frame
 * vs eh_frame, or similar.
 *
 *
 * @param thread_state The thread state to be used for performing the mapping.
 * @param regnum The register number to be mapped.
 * @param[out] dwarf_reg The mapped DWARF register value.
 */
bool plcrash_async_thread_state_map_reg_to_dwarf (plcrash_async_thread_state_t *thread_state, plcrash_regnum_t regnum, uint64_t *dwarf_reg);

/**
 * Map a DWARF register number to its plcrash_regnu
     static public Exception InvokeArgument() {
            return ExceptionBuilder._Argument(Res.GetString(Res.Expr_InvokeArgument));
        }

        static public Exception NYI(string moreinfo) {
            string err = Res.GetString(Res.Expr_NYI, moreinfo);
            Debug.Fail(err);
            return _Expr(err);
        }

        static public Exception MissingOperand(OperatorInfo before) {
            return _Syntax(Res.GetString(Res.Expr_MissingOperand, Operators.ToString(before.op)));
        }

        static public Exception MissingOperator(string token) {
            return _Syntax(Res.GetString(Res.Expr_MissingOperand, token));
        }

        static public Exception TypeMismatch(string expr) {
            return _Eval(Res.GetString(Res.Expr_TypeMismatch, expr));
        }

        static public Exception FunctionArgumentOutOfRange(string arg, string func) {
            return ExceptionBuilder._ArgumentOutOfRange(arg, Res.GetString(Res.Expr_ArgumentOutofRange, func));
        }

        static public Exception ExpressionTooComplex() {
            return _Eval(Res.GetString(Res.Expr_ExpressionTooComplex));
        }

        static public Exception UnboundName(string name) {
            return _Eval(Res.GetString(Res.Expr_UnboundName, name));
        }

        static public Exception InvalidString(string str) {
            return _Syntax(Res.GetString(Res.Expr_InvalidString, str));
        }

        static public Exception UndefinedFunction(string name) {
            return _Eval(Res.GetString(Res.Expr_UndefinedFunction, name));
        }

        static public Exception SyntaxError() {
            return _Syntax(Res.GetString(Res.Expr_Syntax));
        }

        static public Exception FunctionArgumentCount(string name) {
            return _Eval(Res.GetString(Res.Expr_FunctionArgumentCount, name));
        }

        static public Exception MissingRightParen() {
            return _Syntax(Res.GetString(Res.Expr_MissingRightParen));
        }

        static public Exception UnknownToken(string token, int position) {
            return _Syntax(Res.GetString(Res.Expr_UnknownToken, token, position.ToString(CultureInfo.InvariantCulture)));
        }

        static public Exception UnknownToken(Tokens tokExpected, Tokens tokCurr, int position) {
            return _Syntax(Res.GetString(Res.Expr_UnknownToken1, tokExpected.ToString(), tokCurr.ToString(), position.ToString(CultureInfo.InvariantCulture)));
        }

        static public Exception DatatypeConvertion(Type type1, Type type2) {
            return _Eval(Res.GetString(Res.Expr_DatatypeConvertion, type1.ToString(), type2.ToString()));
        }

        static public Exception DatavalueConvertion(object value, Type type, Exception innerException) {
            return _Eval(Res.GetString(Res.Expr_DatavalueConvertion, value.ToString(), type.ToString()), innerException);
        }

        static public Exception InvalidName(string name) {
            return _Syntax(Res.GetString(Res.Expr_InvalidName, name));
        }

        static public Exception InvalidDate(string date) {
            return _Syntax(Res.GetString(Res.Expr_InvalidDate, date));
        }

        static public Exception NonConstantArgument() {
            return _Eval(Res.GetString(Res.Expr_NonConstantArgument));
        }

        static public Exception InvalidPattern(string pat) {
            return _Eval(Res.GetString(Res.Expr_InvalidPattern, pat));
        }

        static public Exception InWithoutParentheses() {
            return _Syntax(Res.GetString(Res.Expr_InWithoutParentheses));
        }

        static public Exception InWithoutList() {
            return _Syntax(Res.GetString(Res.Expr_InWithoutList));
        }

        static public Exception InvalidIsSyntax() {
            return _Syntax(Res.GetString(Res.Expr_IsSyntax));
        }

        static public Exception Overflow(Type type) {
            return _Overflow(Res.GetString(Re
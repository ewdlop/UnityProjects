        [System.MonoNotSupportedAttribute("")]
        public EditableDesignerRegion(System.Web.UI.Design.ControlDesigner owner, string name) : base (default(System.Web.UI.Design.ControlDesigner), default(string)) { }
        [System.MonoNotSupportedAttribute("")]
        public EditableDesignerRegion(System.Web.UI.Design.ControlDesigner owner, string name, bool serverControlsOnly) : base (default(System.Web.UI.Design.ControlDesigner), default(string)) { }
        [System.MonoNotSupportedAttribute("")]
        public virtual string Content { get { throw null; } set { } }
        [System.MonoNotSupportedAttribute("")]
        public bool ServerControlsOnly { get { throw null; } set { } }
        [System.MonoNotSupportedAttribute("")]
        public virtual bool SupportsDataBinding { get { throw null; } set { } }
        [System.MonoNotSupportedAttribute("")]
        public virtual System.Web.UI.Design.ViewRendering GetChildViewRendering(System.Web.UI.Control control) { throw null; }
    }
    public abstract partial class ExpressionEditor
    {
        protected ExpressionEditor() { }
        public string ExpressionPrefix { get { throw null; } }
        public abstract object EvaluateExpression(string expression, object parseTimeData, System.Type propertyType, System.IServiceProvider serviceProvider);
        public static System.Web.UI.Design.ExpressionEditor GetExpressionEditor(string expressionPrefix, System.IServiceProvider serviceProvider) { throw null; }
        [System.MonoTODOAttribute("the docs make it sound like this still requires accessing <expressionBuilders>")]
        public static System.Web.UI.Design.ExpressionEditor GetExpressionEditor(System.Type expressionBuilderType, System.IServiceProvider serviceProvider) { throw null; }
        public virtual System.Web.UI.Design.ExpressionEditorSheet GetExpressionEditorSheet(string expression, System.IServiceProvider serviceProvider) { throw null; }
    }
    public abstract partial class ExpressionEditorSheet
    {
        protected ExpressionEditorSheet(System.IServiceProvider serviceProvider) { }
        [System.ComponentModel.BrowsableAttribute(false)]
        public virtual bool IsValid { get { throw null; } }
        [System.ComponentModel.BrowsableAttribute(false)]
        public System.IServiceProvider ServiceProvider { get { throw null; } }
        public abstract string GetExpression();
    }
    [System.Security.Permissions.SecurityPermissionAttribute(System.Security.Permissions.SecurityAction.Demand, Flags=(System.Security.Permissions.SecurityPermissionFlag)(2))]
    public partial class ExpressionsCollectionConverter : System.ComponentModel.TypeConverter
    {
        public ExpressionsCollectionConverter() { }
        [System.MonoTODOAttribute]
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { throw null; }
    }
    [System.Security.Permissions.SecurityPermissionAttribute(System.Security.Permissions.SecurityAction.Demand, Flags=(System.Security.Permissions.SecurityPermissionFlag)(2))]
    public partial class ExpressionsColl
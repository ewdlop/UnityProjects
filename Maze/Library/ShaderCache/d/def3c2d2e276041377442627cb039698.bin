stem.Collections.ICollection errors) { }
        protected abstract System.CodeDom.CodeCompileUnit Parse();
        protected override void PerformFlush(System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager) { }
        protected override void PerformLoad(System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager) { }
        System.Collections.ICollection System.ComponentModel.Design.Serialization.IDesignerSerializationService.Deserialize(object serializationData) { throw null; }
        object System.ComponentModel.Design.Serialization.IDesignerSerializationService.Serialize(System.Collections.ICollection objects) { throw null; }
        string System.ComponentModel.Design.Serialization.INameCreationService.CreateName(System.ComponentModel.IContainer container, System.Type dataType) { throw null; }
        bool System.ComponentModel.Design.Serialization.INameCreationService.IsValidName(string name) { throw null; }
        void System.ComponentModel.Design.Serialization.INameCreationService.ValidateName(string name) { }
        protected abstract void Write(System.CodeDom.CodeCompileUnit unit);
    }
    public enum CodeDomLocalizationModel
    {
        None = 0,
        PropertyAssignment = 1,
        PropertyReflection = 2,
    }
    public sealed partial class CodeDomLocalizationProvider : System.ComponentModel.Design.Serialization.IDesignerSerializationProvider, System.IDisposable
    {
        [System.MonoTODOAttribute]
        public CodeDomLocalizationProvider(System.IServiceProvider provider, System.ComponentModel.Design.Serialization.CodeDomLocalizationModel model) { }
        [System.MonoTODOAttribute]
        public CodeDomLocalizationProvider(System.IServiceProvider provider, System.ComponentModel.Design.Serialization.CodeDomLocalizationModel model, System.Globalization.CultureInfo[] supportedCultures) { }
        [System.MonoTODOAttribute]
        public void Dispose() { }
        [System.MonoTODOAttribute]
        object System.ComponentModel.Design.Serialization.IDesignerSerializationProvider.GetSerializer(System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, object currentSerializer, System.Type objectType, System.Type serializerType) { throw null; }
    }
    public partial class CodeDomSerializer : System.ComponentModel.Design.Serialization.CodeDomSerializerBase
    {
        public CodeDomSerializer() { }
        public virtual object Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, object codeObject) { throw null; }
        protected object DeserializeStatementToInstance(System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, System.CodeDom.CodeStatement statement) { throw null; }
        public virtual string GetTargetComponentName(System.CodeDom.CodeStatement statement, System.CodeDom.CodeExpression expression, System.Type targetType) { throw null; }
        public virtual object Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, object value) { throw null; }
        public virtual object SerializeAbsolute(System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, object value) { throw null; }
        public virtual System.CodeDom.CodeStatementCollection SerializeMember(System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, object owningObject, System.ComponentModel.MemberDescriptor member) { throw null; }
        public virtual System.CodeDom.CodeStatementCollection SerializeMemberAbsolute(System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, object owningObject, System.ComponentModel.MemberDescriptor member) { throw null; }
        [System.ObsoleteAttribute("This method has been deprecated. Use SerializeToExpression or GetExpression instead.")]
     
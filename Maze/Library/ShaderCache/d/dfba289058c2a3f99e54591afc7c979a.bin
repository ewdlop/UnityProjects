 CreateInstance(System.Type type) { throw null; }
        public System.ComponentModel.INestedContainer CreateNestedContainer(System.ComponentModel.IComponent owningComponent) { throw null; }
        public System.ComponentModel.INestedContainer CreateNestedContainer(System.ComponentModel.IComponent owningComponent, string containerName) { throw null; }
        public void Dispose() { }
        protected virtual void Dispose(bool disposing) { }
        public void Flush() { }
        public object GetService(System.Type serviceType) { throw null; }
        protected virtual void OnLoaded(System.ComponentModel.Design.LoadedEventArgs e) { }
        protected virtual void OnLoading(System.EventArgs e) { }
        protected virtual void OnUnloaded(System.EventArgs e) { }
        protected virtual void OnUnloading(System.EventArgs e) { }
        protected virtual void OnViewActivate(System.EventArgs e) { }
    }
    public sealed partial class DesignSurfaceCollection : System.Collections.ICollection, System.Collections.IEnumerable
    {
        internal DesignSurfaceCollection() { }
        public int Count { get { throw null; } }
        public System.ComponentModel.Design.DesignSurface this[int index] { get { throw null; } }
        int System.Collections.ICollection.Count { get { throw null; } }
        bool System.Collections.ICollection.IsSynchronized { get { throw null; } }
        object System.Collections.ICollection.SyncRoot { get { throw null; } }
        public void CopyTo(System.ComponentModel.Design.DesignSurface[] array, int index) { }
        public System.Collections.IEnumerator GetEnumerator() { throw null; }
        void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { throw null; }
    }
    public partial class DesignSurfaceEventArgs : System.EventArgs
    {
        public DesignSurfaceEventArgs(System.ComponentModel.Design.DesignSurface surface) { }
        public System.ComponentModel.Design.DesignSurface Surface { get { throw null; } }
    }
    public delegate void DesignSurfaceEventHandler(object sender, System.ComponentModel.Design.DesignSurfaceEventArgs e);
    public partial class DesignSurfaceManager : System.IDisposable, System.IServiceProvider
    {
        public DesignSurfaceManager() { }
        public DesignSurfaceManager(System.IServiceProvider parentProvider) { }
        public virtual System.ComponentModel.Design.DesignSurface ActiveDesignSurface { get { throw null; } set { } 
if (!self)
    return CefRect();

  // Execute
  cef_rect_t _retval = CefScrollViewCppToC::Get(
      reinterpret_cast<cef_scroll_view_t*>(self))->GetBounds();

  // Return type: simple
  return _retval;
}

cef_rect_t CEF_CALLBACK scroll_view_get_bounds_in_screen(
    struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return CefRect();

  // Execute
  cef_rect_t _retval = CefScrollViewCppToC::Get(
      reinterpret_cast<cef_scroll_view_t*>(self))->GetBoundsInScreen();

  // Return type: simple
  return _retval;
}

void CEF_CALLBACK scroll_view_set_size(struct _cef_view_t* self,
    const cef_size_t* size) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;
  // Verify param: size; type: simple_byref_const
  DCHECK(size);
  if (!size)
    return;

  // Translate param: size; type: simple_byref_const
  CefSize sizeVal = size?*size:CefSize();

  // Execute
  CefScrollViewCppToC::Get(reinterpret_cast<cef_scroll_view_t*>(self))->SetSize(
      sizeVal);
}

cef_size_t CEF_CALLBACK scroll_view_get_size(struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return CefSize();

  // Execute
  cef_size_t _retval = CefScrollViewCppToC::Get(
      reinterpret_cast<cef_scroll_view_t*>(self))->GetSize();

  // Return type: simple
  return _retval;
}

void CEF_CALLBACK scroll_view_set_position(struct _cef_view_t* self,
    const cef_point_t* position) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;
  // Verify param: position; type: simple_byref_const
  DCHECK(position);
  if (!position)
    return;

  // Translate param: position; type: simple_byref_const
  CefPoint positionVal = position?*position:CefPoint();

  // Execute
  CefScrollViewCppToC::Get(reinterpret_cast<cef_scroll_view_t*>(
      self))->SetPosition(
      positionVal);
}

cef_point_t CEF_CALLBACK scroll_view_get_position(struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return CefPoint();

  // Execute
  cef_point_t _retval = CefScrollViewCppToC::Get(
      reinterpret_cast<cef_scroll_view_t*>(self))->GetPosition();

  // Return type: simple
  return _retval;
}

cef_size_t CEF_CALLBACK scroll_view_get_preferred_size(
    struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return CefSize();

  // Execute
  cef_size_t _retval = CefScrollViewCppToC::Get(
      reinterpret_cast<cef_scroll_view_t*>(self))->GetPreferredSize();

  // Return type: simple
  return _retval;
}

void CEF_CALLBACK scroll_view_size_to_preferred_size(struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;

  // Execute
  CefScrollViewCppToC::Get(reinterpret_cast<cef_scroll_view_t*>(
      self))->SizeToPreferredSize();
}

cef_size_t CEF_CALLBACK scroll_view_get_minimum_size(struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return CefSize();

  // Execute
  cef_size_t _retval = CefScrollViewCppToC::Get(
      reinterpret_cast<cef_scroll_view_t*>(self))->GetMinimumSize();

  // Return type: simple
  return _retval;
}

cef_size_t CEF_CALLBACK scroll_view_get_maximum_size(struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return CefSize();

  // Execute
  cef_size_t _retval = CefScrollViewCppToC::Get(
      reinterpret_cast<cef_scroll_view_t*>(self))->GetMaximumSize();

  // Return type: simple
  return _retval;
}

int CEF_CALLBACK scroll_view_get_height_for_width(struct _cef_view_t* self,
    int width) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return 0;

  // Execute
  int _retval = CefScrollViewCppToC::Get(reinterpret_cast<cef_scroll_view_t*>(
      self))->GetHeightForWidth(
      width);

  // Return type: simple
  return _retval;
}

void CEF_CALLBACK scroll_view_invalidate_layout(struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;

  // Execute
  CefScrollViewCppToC::Get(reinterpret_cast<cef_scroll_view_t*>(
      self))->InvalidateLayout();
}

void CEF_CALLBACK scroll_view_set_visible(struct _cef_view_t* self,
    int visible) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;

  // Execute
  CefScrollViewCppToC::Get(reinterpret_cast<cef_scroll_view_t*>(
      self))->SetVisible(
      visible?true:false);
}

int CEF_CALLBACK scroll_view_is_visible(struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return 0;

  // Execute
  bool _retval = CefScrollViewCppToC::Get(reinterpret_cast<cef_scroll_view_t*>(
      self))->IsVisible();

  // Return type: bool
  return _retval;
}

int CEF_CALLBACK scroll_view_is_drawn(struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return 0;

  // Execute
  bool _retval = CefScrollViewCppToC::Get(reinterpret_cast<cef_scroll_view_t*>(
      self))->IsDrawn();

  // Return type: bool
  return _retval;
}

void CEF_CALLBACK scroll_view_set_enabled(struct _cef_view_t* self,
    int enabled) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;

  // Execute
  CefScrollViewCppToC::Get(reinterpret_cast<cef_scroll_view_t*>(
      self))->SetEnabled(
      enabled?true:false);
}

int CEF_CALLBACK scroll_view_is_enabled(struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return 0;

  // Execute
  bool _retval = CefScrollViewCppToC::Get(reinterpret_cast<cef_scroll_view_t*>(
      self))->IsEnabled();

  // Return type: bool
  return _retval;
}

void CEF_CALLBACK scroll_view_set_focusable(struct _cef_view_t* self,
    int focusable) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;

  // Execute
  CefScrollViewCppToC::Get(reinterpret_cast<cef_scroll_view_t*>(
      self))->SetFocusable(
      focusable?true:false);
}

int CEF_CALLBACK scroll_view_is_focusable(struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return 0;

  // Execute
  bool _retval = CefScrollViewCppToC::Get(reinterpret_cast<cef_scroll_view_t*>(
      self))->IsFocusable();

  // Return type: bool
  return _retval;
}

int CEF_CALLBACK scroll_view_is_accessibility_focusable(
    struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return 0;

  // Execute
  bool _retval = CefScrollViewCppToC::Get(reinterpret_cast<cef_scroll_view_t*>(
      self))->IsAccessibilityFocusable();

  // Return type: bool
  return _retval;
}

void CEF_CALLBACK scroll_view_request_focus(struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;

  // Execute
  CefScrollViewCppToC::Get(reinterpret_cast<cef_scroll_view_t*>(
      self
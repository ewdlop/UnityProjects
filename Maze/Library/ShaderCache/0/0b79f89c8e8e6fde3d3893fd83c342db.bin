 and thus it is copied by value.
            Prior to being copied, one of its Task, SetResult, or SetException members must be accessed,
            or else the copies may end up building distinct Task instances.
            </remarks>
        </member>
        <member name="F:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.s_defaultResultTask">
            <summary>A cached task for default(TResult).</summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.m_coreState">
            <summary>State related to the IAsyncStateMachine.</summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.m_task">
            <summary>The lazily-initialized task.</summary>
            <remarks>Must be named m_task for debugger step-over to work correctly.</remarks>
        </member>
        <member name="F:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.m_taskCompletionSource">
            <summary>The lazily-initialized task completion source.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.#cctor">
            <summary>Temporary support for disabling crashing if tasks go unobserved.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Create">
            <summary>Initializes a new <see cref="T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder"/>.</summary>
            <returns>The initialized <see cref="T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder"/>.</returns>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start``1(``0@)">
            <summary>Initiates the builder's execution with the associated state machine.</summary>
            <typeparam name="TStateMachine">Specifies the type of the state machine.</typeparam>
            <param name="stateMachine">The state machine instance, passed by reference.</param>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
            <summary>Associates the builder with the state machine it represents.</summary>
            <param name="stateMachine">The heap-allocated state machine object.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="stateMachine"/> argument was null (Nothing in Visual Basic).</exception>
            <exception cref="T:System.InvalidOperationException">The builder is incorrectly initialized.</exception>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.System#Runtime#CompilerServices#IAsyncMethodBuilder#PreBoxInitialization">
            <summary>Perform any initialization necessary prior to lifting the builder to the heap.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AwaitOnCompleted``2(``0@,``1@)">
            <summary>
            Schedules the specified state machine to be pushed forward when the specified awaiter completes.
            </summary>
            <typeparam name="TAwaiter">Specifies the type of the awaiter.</typeparam>
            <typeparam name="TStateMachine">Specifies the type of the state machine.</typeparam>
            <param name="awaiter">The awaiter.</param>
            <param name="stateMachine">The state machine.</param>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AwaitUnsafeOnCompleted``2(``0@,``1@)">
            <summary>
            Schedules the specified state machine to be pushed forward when the specified awaiter completes.
            </summary>
            <typeparam name="TAwaiter">Specifies the type of the awaiter.</typeparam>
            <typeparam name="TStateMachine">Specifies the type of the state machine.</typeparam>
            <param name="awaiter">The awaiter.</param>
            <param name="stateMachine">The state machine.</param>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetResult(`0)">
            <summary>
            Completes the <see cref="T:System.Threading.Tasks.Task`1"/> in the 
            <see cref="T:System.Threading.Tasks.TaskStatus">RanToCompletion</see> state with the specified result.
            </summary>
            <param name="result">The result to use to complete the task.</param>
            <exception cref="T:System.InvalidOperationException">The task has already completed.</exception>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetResult(System.Threading.Tasks.TaskCompletionSource{`0})">
            <summary>
            Completes the builder by using either the supplied completed task, or by completing
            the builder's previously accessed task using default(TResult).
            </summary>
            <param name="completedTask">A task already completed with the value default(TResult).</param>
            <exception cref="T:System.InvalidOperationException">The task has already completed.</exception>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetException(System.Exception)">
            <summary>
            Completes the <see cref="T:System.Threading.Tasks.Task`1"/> in the 
            <see cref="T:System.Threading.Tasks.TaskStatus">Faulted</see> state with the specified exception.
            </summary>
            <param name="exception">The <see cref="T:System.Exception"/> to use to fault the task.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="exception"/> argument is null (Nothing in Visual Basic).</exception>
            <exception cref="T:System.InvalidOperationException">The task has already completed.</exception>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetNotificationForWaitCompletion(System.Boolean)">
            <summary>
            Called by the debugger to request notification when the first wait operation
            (await, Wait, Result, etc.) on this builder's task completes.
            </summary>
            <param name="enabled">
            true to enable notification; false to disable a previously set notification.
            </param>
            <remarks>
            This should only be invoked from within an asynchronous method,
            and only by the debugger.
            </remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.GetTaskForResult(`0)">
            <summary>
            Gets a task for the specified result.  This will either
            be a cached or new task, never null.
            </summary>
            <param name="result">The result for which we need a task.</param>
            <returns>The completed task containing the result.</returns>
        </member>
        <member name="P:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.CompletionSource">
            <summary>Gets the lazily-initialized TaskCompletionSource.</summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Task">
            <summary>Gets the <see cref="T:System.Threading.Tasks.Task`1"/> for this builder.</summary>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> representing the builder's asynchronous operation.</returns>
        </member>
        <member name="P:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.ObjectIdForDebugger">
            <summary>
            Gets an object that may be used to uniquely identify this builder to the debugger.
            </summary>
            <remarks>
            This property lazily instantiates the ID in a non-thread-safe manner.  
            It must only be used by the debugger, and only in a single-threaded manner
            when no other threads are in the middle of accessing this property or this.Task.
            </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.AsyncVoidMethodBuilder">
            <summary>
            Provides a builder for asynchronous methods that return void.
            This type is intended for compiler use only.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.m_synchronizationContext">
            <summary>The synchronization context associated with this operation.</summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.m_coreState">
            <summary>State related to the IAsyncStateMachine.</summary>
        </member>
   
ull; }
        public override int ReadElementContentAsBinHex(byte[] buffer, int index, int count) { throw null; }
        public override string ReadString() { throw null; }
        public object ReadTypedValue() { throw null; }
        public override void ResolveEntity() { }
        System.Collections.Generic.IDictionary<string, string> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope scope) { throw null; }
        string System.Xml.IXmlNamespaceResolver.LookupNamespace(string prefix) { throw null; }
        string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName) { throw null; }
    }
    public partial class XmlWhitespace : System.Xml.XmlCharacterData
    {
        protected internal XmlWhitespace(string strData, System.Xml.XmlDocument doc) : base (default(string), default(System.Xml.XmlDocument)) { }
        public override string LocalName { get { throw null; } }
        public override string Name { get { throw null; } }
        public override System.Xml.XmlNodeType NodeType { get { throw null; } }
        public override System.Xml.XmlNode ParentNode { get { throw null; } }
        public override System.Xml.XmlNode PreviousText { get { throw null; } }
        public override string Value { get { throw null; } set { } }
        public override System.Xml.XmlNode CloneNode(bool deep) { throw null; }
        public override void WriteContentTo(System.Xml.XmlWriter w) { }
        public override void WriteTo(System.Xml.XmlWriter w) { }
    }
    public abstract partial class XmlWriter : System.IDisposable
    {
        protected XmlWriter() { }
        public virtual System.Xml.XmlWriterSettings Settings { get { throw null; } }
        public abstract System.Xml.WriteState WriteState { get; }
        public virtual string XmlLang { get { throw null; } }
        public virtual System.Xml.XmlSpace XmlSpace { get { throw null; } }
        public virtual void Close() { }
        public static System.Xml.XmlWriter Create(System.IO.Stream output) { throw null; }
        public static System.Xml.XmlWriter Create(System.IO.Stream output, System.Xml.XmlWriterSettings settings) { throw null; }
        public static System.Xml.XmlWriter Create(System.IO.TextWriter output) { throw null; }
        public static System.Xml.XmlWriter Create(System.IO.TextWriter output, System.Xml.XmlWriterSettings settings) { throw null; }
        public static System.Xml.XmlWriter Create(string outputFileName) { throw null; }
        public static System.Xml.XmlWriter Create(string outputFileName, System.Xml.XmlWriterSettings settings) { throw null; }
        public static System.Xml.XmlWriter Create(System.Text.StringBuilder output) { throw null; }
        public static System.Xml.XmlWriter Create(System.Text.StringBuilder output, System.Xml.XmlWriterSettings settings) { throw null; }
        public static System.Xml.XmlWriter Create(System.Xml.XmlWriter output) { throw null; }
        public static System.Xml.XmlWriter Create(System.Xml.XmlWriter output, System.Xml.XmlWriterSettings settings) { throw null; }
        public void Dispose() { }
        protected virtual void Dispose(bool disposing) { }
        public abstract void Flush();
        public virtual System.Threading.Tasks.Task FlushAsync() 
} }
        public override string Name { get { throw null; } }
        public override System.Xml.XmlNodeType NodeType { get { throw null; } }
        public override string OuterXml { get { throw null; } }
        public string PublicId { get { throw null; } }
        public string SystemId { get { throw null; } }
        public override System.Xml.XmlNode CloneNode(bool deep) { throw null; }
        public override void WriteContentTo(System.Xml.XmlWriter w) { }
        public override void WriteTo(System.Xml.XmlWriter w) { }
    }
    public enum XmlOutputMethod
    {
        AutoDetect = 3,
        Html = 1,
        Text = 2,
        Xml = 0,
    }
    public partial class XmlParserContext
    {
        public XmlParserContext(System.Xml.XmlNameTable nt, System.Xml.XmlNamespaceManager nsMgr, string docTypeName, string pubId, string sysId, string internalSubset, string baseURI, string xmlLang, System.Xml.XmlSpace xmlSpace) { }
        public XmlParserContext(System.Xml.XmlNameTable nt, System.Xml.XmlNamespaceManager nsMgr, string docTypeName, string pubId, string sysId, string internalSubset, string baseURI, string xmlLang, System.Xml.XmlSpace xmlSpace, System.Text.Encoding enc) { }
        public XmlParserContext(System.Xml.XmlNameTable nt, System.Xml.XmlNamespaceManager nsMgr, string xmlLang, System.Xml.XmlSpace xmlSpace) { }
        public XmlParserContext(System.Xml.XmlNameTable nt, System.Xml.XmlNamespaceManager nsMgr, string xmlLang, System.Xml.XmlSpace xmlSpace, System.Text.Encoding enc) { }
        public string BaseURI { get { throw null; } set { } }
        public string DocTypeName { get { throw null; } set { } }
        public System.Text.Encoding Encoding { get { throw null; } set { } }
        public string InternalSubset { get { throw null; } set { } }
        public System.Xml.XmlNamespaceManager NamespaceManager { get { throw null; } set { } }
        public System.Xml.XmlNameTable NameTable { get { throw null; } set { } }
        public string PublicId { get { throw null; } set { } }
        public string SystemId { get { throw null; } set { } }
        public string XmlLang { get { throw null; } set { } }
        public System.Xml.XmlSpace XmlSpace { get { throw null; } set { } }
    }
    public partial class XmlProcessingInstruction : System.Xml.XmlLinkedNode
    {
        protected internal XmlProcessingInstruction(string target, string data, System.Xml.XmlDocument doc) { }
        public string Data { get { throw null; } set { } }
        public override string InnerText { get { throw null; } set { } }
        public override string LocalName { get { throw null; } }
        public override string Name { get { throw null; } }
        public override System.Xml.XmlNodeType NodeType { get { throw null; } }
        public string Target { get { throw null; } }
        public override string Value { get { throw null; } set { } }
        public override System.Xml.XmlNode CloneNode(bool deep) { throw null; }
        public override void WriteContentTo(System.Xml.XmlWriter w) { }
        public override void WriteTo(System.Xml.XmlWriter w) { }
    }
    [System.SerializableAttribute]
    public partial class XmlQualifiedName
    {
        public static readonly System.Xml.XmlQualifiedName Empty;
        public XmlQualifiedName() { }
        public XmlQualifiedName(string name) { }
        public XmlQualifiedName(string name, string ns) { }
        public bool IsEmpty { get { throw null; } }
        public string Name { get { throw null; } }
        public string Namespace { get { throw null; } }
        public override bool Equals(object other) { throw null; }
        public override int GetHashCode() { throw null; }
        public static bool operator ==(System.Xml.XmlQualifiedName a, System.Xml.XmlQualifiedName b) { throw null; }
        public static bool operator !=(System.Xml.XmlQualifiedName a, System.Xml.XmlQualifiedName b) { throw null; }
        public override string ToString() { throw null; }
        public static string ToString(string name, string ns) { throw null; }
    }
    [System.Diagnostics.DebuggerDisplayAttribute("{debuggerDisplayProxy}")]
    [System.Diagnostics.DebuggerDisplayAttribute("{debuggerDisplayProxy}")]
    public abstract partial class XmlReader : System.IDisposable
    {
        protected XmlReader() { }
        public abstract int AttributeCount { get; }
        public abstract string BaseURI { get; }
        public virtual bool CanReadBinaryContent { get { throw null; } }
        public virtual bool CanReadValueChunk { get { throw null; } }
        public virtual bool CanResolveEntity { get { throw null; } }
        public abstract int Depth { get; }
        public abstract bool EOF { get; }
        public virtual bool HasAttributes { get { throw null; } }
        public virtual bool HasValue { get { throw null; } }
        public virtual bool IsDefault { get { throw null; } }
        public abstract bool IsEmptyElement { get; }
        public virtual string this[int i] { get { throw null; } }
        public virtual string this[string name] { get { throw null; } }
        public virtual string this[string name, string namespaceURI] { get { throw null; } }
        public abstract string LocalName { get; }
        public virtual string Name { get { throw null; } }
        public abstract string NamespaceURI { get; }
        public abstract System.Xml.XmlNameTable NameTable { get; }
        public abstract System.Xml.XmlNodeType NodeType { get; }
        public abstract string Prefix { get; }
        public virtual char QuoteChar { get { throw null; } }
        public abstract System.Xml.ReadState ReadState { get; }
        public virtual System.Xml.Schema.IXmlSchemaInfo SchemaInfo { get { throw null; } }
        public virtual System.Xml.XmlReaderSettings Settings { get { throw null; } }
        public abstract string Value { get; }
        public virtual System.Type ValueType { get { throw null; } }
        public virtual string XmlLang { get { throw null; } }
        public virtual System.Xml.XmlSpace XmlSpace { get { throw null; } }
        public virtual void Close() { }
        public static System.Xml.XmlReader Create(System.IO.Stream input) { throw null; }
        public static System.Xml.XmlReader Create(System.IO.Stream input, System.Xml.XmlReaderSettings settings) { throw null; }
        public static System.Xml.XmlReader Create(System.IO.Stream input, System.Xml.XmlReaderSettings settings, string baseUri) { throw null; }
        public static System.Xml.XmlReader Create(System.IO.Stream input, System.Xml.XmlReaderSettings settings, System.Xml.XmlParserContext inputContext) { throw null; }
        public static System.Xml.XmlReader Create(System.IO.TextReader input) { throw null; }
        public static System.Xml.XmlReader Create(System.IO.TextReader input, System.Xml.XmlReaderSettings settings) { throw null; }
        public static System.Xml.XmlReader Create(System.IO.TextReader input, System.Xml.XmlReaderSettings settings, string baseUri) { throw null; }
        public static System.Xml.XmlReader Create(System.IO.TextReader input, System.Xml.XmlReaderSettings settings, System.Xml.XmlParserContext inputContext) { throw null; }
        public static System.Xml.XmlReader Create(string inputUri) { throw null; }
        public static System.Xml.XmlReader Create(string inputUri, System.Xml.XmlReaderSettings settings) { throw null; }
        public static System.Xml.XmlReader Create(string inputUri, System.Xml.XmlReaderSettings settings, System.Xml.XmlParserContext inputContext) { throw null; }
        public static System.Xml.XmlReader Create(System.Xml.XmlReader reader, Syste
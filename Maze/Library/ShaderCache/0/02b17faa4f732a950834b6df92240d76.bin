ame="FullTrust")]
    public sealed partial class XmlReaderSettings
    {
        public XmlReaderSettings() { }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)]
        public XmlReaderSettings(System.Xml.XmlResolver resolver) { }
        public bool Async { get { throw null; } set { } }
        public bool CheckCharacters { get { throw null; } set { } }
        public bool CloseInput { get { throw null; } set { } }
        public System.Xml.ConformanceLevel ConformanceLevel { get { throw null; } set { } }
        public System.Xml.DtdProcessing DtdProcessing { get { throw null; } set { } }
        public bool IgnoreComments { get { throw null; } set { } }
        public bool IgnoreProcessingInstructions { get { throw null; } set { } }
        public bool IgnoreWhitespace { get { throw null; } set { } }
        public int LineNumberOffset { get { throw null; } set { } }
        public int LinePositionOffset { get { throw null; } set { } }
        public long MaxCharactersFromEntities { get { throw null; } set { } }
        public long MaxCharactersInDocument { get { throw null; } set { } }
        public System.Xml.XmlNameTable NameTable { get { throw null; } set { } }
        [System.ObsoleteAttribute("Use XmlReaderSettings.DtdProcessing property instead.")]
        public bool ProhibitDtd { get { throw null; } set { } }
        public System.Xml.Schema.XmlSchemaSet Schemas { get { throw null; } set { } }
        public System.Xml.Schema.XmlSchemaValidationFlags ValidationFlags { get { throw null; } set { } }
        public System.Xml.ValidationType ValidationType { get { throw null; } set { } }
        public System.Xml.XmlResolver XmlResolver { set { } }
        public event System.Xml.Schema.ValidationEventHandler ValidationEventHandler { add { } remove { } }
        public System.Xml.XmlReaderSettings Clone() { throw null; }
        public void Reset() { }
    }
    public abstract partial class XmlResolver
    {
        protected XmlResolver() { }
        public virtual System.Net.ICredentials Credentials { set { } }
        public abstract object GetEntity(System.Uri absoluteUri, string role, System.Type ofObjectToReturn);
        public virtual System.Threading.Tasks.Task<object> GetEntityAsync(System.Uri absoluteUri, string role, System.Type ofObjectToReturn) { throw null; }
        public virtual System.Uri ResolveUri(System.Uri baseUri, string relativeUri) { throw null; }
        public virtual bool SupportsType(System.Uri absoluteUri, System.Type type) { throw null; }
    }
    [System.Security.Permissions.PermissionSetAttribute(System.Security.Permissions.SecurityAction.InheritanceDemand, Name="FullTrust")]
    [System.Security.Permissions.PermissionSetAttribute(System.Security.Permissions.SecurityAction.InheritanceDemand, Name="FullTrust")]
    public partial class XmlSecureResolver : System.Xml.XmlResolver
    {
        public XmlSecureResolver(System.Xml.XmlResolver resolver, System.Security.PermissionSet permissionSet) { }
        public XmlSecureResolver(System.Xml.XmlResolver resolver, System.Security.Policy.Evidence evidence) { }
        public XmlSecureResolver(System.Xml.XmlResolver resolver, string securityUrl) { }
        public override System.Net.ICredentials Credentials { set { } }
        public static System.Security.Policy.Evidence CreateEvidenceForUrl(string securityUrl) { throw null; }
        public override object GetEntity(System.Uri absoluteUri, string role, System.Type ofObjectToReturn) { throw null; }
        public override System.Threading.Tasks.Task<object> GetEntityAsync(System.Uri absoluteUri, string role, System.Type ofObjectToReturn) { throw null; }
        public override System.Uri ResolveUri(System.Uri baseUri, string relativeUri) { throw null; }
    }
    public partial class XmlSignificantWhitespace : System.Xml.XmlCharacterData
    {
        protected internal XmlSignificantWhitespace(string strData, System.Xml.XmlDocument doc) : base (default(string), default(System.Xml.XmlDocument)) { }
        public override string LocalName { get { throw null; } }
        public override string Name { get { throw null; } }
        public override System.Xml.XmlNodeType NodeType { get { throw null; } }
        public override System.Xml.XmlNode ParentNode { get { throw null; } }
        public override System.Xml.XmlNode PreviousText { get { throw null; } }
        public override string Value { get { throw null; } set { } }
        public override System.Xml.XmlNode CloneNode(bool deep) { throw null; }
        public override void WriteContentTo(System.Xml.XmlWriter w) { }
        public override void WriteTo(System.Xml.XmlWriter w) { }
    }
    public enum XmlSpace
    {
        Default = 1,
        None = 0,
        Preserve = 2,
    }
    public partial class XmlText : System.Xml.XmlCharacterData
    {
        protected internal XmlText(string strData, System.Xml.XmlDocument doc) : base (default(string), default(System.Xml.XmlDocument)) { }
        public override string LocalName { get { throw null; } }
        public override string Name { get { throw null; } }
        public override System.Xml.XmlNodeType NodeType { get { throw null; } }
        public override System.Xml.XmlNode ParentNode { get { throw null; } }
        public override System.Xml.XmlNode PreviousText { get { throw null; } }
        public override string Value { get { throw null; } set { } }
        public override System.Xml.XmlNode CloneNode(bool deep) { throw null; }
        public virtual System.Xml.XmlText SplitText(int offset) { throw null; }
        public override void WriteContentTo(System.Xml.XmlWriter w) { }
        public override void WriteTo(System.Xml.XmlWriter w) { }
    }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    [System.Security.Permissions.PermissionSetAttribute(System.Security.Permissions.SecurityAction.InheritanceDemand, Name="FullTrust")]
    public partial class XmlTextReader : System.Xml.XmlReader, System.Xml.IXmlLineInfo, System.Xml.IXmlNamespaceResolver
    {
        protected XmlTextReader() { }
        public XmlTextReader(System.IO.Stream input) { }
        public XmlTextReader(System.IO.Stream input, System.Xml.XmlNameTable nt) { }
        public XmlTextReader(System.IO.Stream xmlFragment, System.Xml.XmlNodeType fragType, System.Xml.XmlParserContext context) { }
        public XmlTextReader(System.IO.TextReader input) { }
        public XmlTextReader(System.IO.TextReader input, System.Xml.XmlNameTable nt) { }
        public XmlTextReader(string url) { }
        public XmlTextReader(string url, System.IO.Stream input) { }
        public XmlTextReader(string url, System.IO.Stream input, System.Xml.XmlNameTable nt) { }
        public XmlTextReader(string url, System.IO.TextReader input) { }
        public XmlTextReader(string url, System.IO.TextReader input, System.Xml.XmlNameTable nt) { }
        public XmlTextReader(string url, System.Xml.XmlNameTable nt) { }
        public XmlTextReader(string xmlFragment, System.Xml.XmlNodeType fragType, System.Xml.XmlParserContext context) { }
        protected XmlTextReader(System.Xml.XmlNameTable nt) { }
        public override int AttributeCount { get { throw null; } }
        public override string BaseURI { get { throw null; } }
        public override bool CanReadBinaryContent { get { throw null; } }
        public override bool CanReadValueChunk { get { throw null; } }
        public override bool CanResolveEntity { get { throw null; } }
        public override int Depth { get { throw null; } }
        public System.Xml.DtdProcessing DtdProcessing { get { throw null; } set { } }
        public System.Text.Encoding Encoding { get { throw null; } }
        public System.Xml.EntityHandling EntityHandling { get { throw null; } set { } }
        public override bool EOF { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override bool IsDefault { get { throw null;
public virtual System.Xml.XmlNode PreviousText { get { throw null; } }
        public virtual System.Xml.Schema.IXmlSchemaInfo SchemaInfo { get { throw null; } }
        public virtual string Value { get { throw null; } set { } }
        public virtual System.Xml.XmlNode AppendChild(System.Xml.XmlNode newChild) { throw null; }
        public virtual System.Xml.XmlNode Clone() { throw null; }
        public abstract System.Xml.XmlNode CloneNode(bool deep);
        public virtual System.Xml.XPath.XPathNavigator CreateNavigator() { throw null; }
        public System.Collections.IEnumerator GetEnumerator() { throw null; }
        public virtual string GetNamespaceOfPrefix(string prefix) { throw null; }
        public virtual string GetPrefixOfNamespace(string namespaceURI) { throw null; }
        public virtual System.Xml.XmlNode InsertAfter(System.Xml.XmlNode newChild, System.Xml.XmlNode refChild) { throw null; }
        public virtual System.Xml.XmlNode InsertBefore(System.Xml.XmlNode newChild, System.Xml.XmlNode refChild) { throw null; }
        public virtual void Normalize() { }
        public virtual System.Xml.XmlNode PrependChild(System.Xml.XmlNode newChild) { throw null; }
        public virtual void RemoveAll() { }
        public virtual System.Xml.XmlNode RemoveChild(System.Xml.XmlNode oldChild) { throw null; }
        public virtual System.Xml.XmlNode ReplaceChild(System.Xml.XmlNode newChild, System.Xml.XmlNode oldChild) { throw null; }
        public System.Xml.XmlNodeList SelectNodes(string xpath) { throw null; }
        public System.Xml.XmlNodeList SelectNodes(string xpath, System.Xml.XmlNamespaceManager nsmgr) { throw null; }
        public System.Xml.XmlNode SelectSingleNode(string xpath) { throw null; }
        public System.Xml.XmlNode SelectSingleNode(string xpath, System.Xml.XmlNamespaceManager nsmgr) { throw null; }
        public virtual bool Supports(string feature, string version) { throw null; }
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { throw null; }
        object System.ICloneable.Clone() { throw null; }
        public abstract void WriteContentTo(System.Xml.XmlWriter w);
        public abstract void WriteTo(System.Xml.XmlWriter w);
    }
    public enum XmlNodeChangedAction
    {
        Change = 2,
        Insert = 0,
        Remove = 1,
    }
    public partial class XmlNodeChangedEventArgs : System.EventArgs
    {
        public XmlNodeChangedEventArgs(System.Xml.XmlNode node, System.Xml.XmlNode oldParent, System.Xml.XmlNode newParent, string oldValue, string newValue, System.Xml.XmlNodeChangedAction action) { }
        public System.Xml.XmlNodeChangedAction Action { get { throw null; } }
        public System.Xml.XmlNode NewParent { get { throw null; } }
        public string NewValue { get { throw null; } }
        public System.Xml.XmlNode Node { get { throw null; } }
        public System.Xml.XmlNode OldParent { get { throw null; } }
        public string OldValue { get { throw null; } }
    }
    public delegate void XmlNodeChangedEventHandler(object sender, System.Xml.XmlNodeChangedEventArgs e);
    public abstract partial class XmlNodeList : System.Collections.IEnumerable, System.IDisposable
    {
        protected XmlNodeList() { }
        public abstract int Count { get; }
        [System.Runtime.CompilerServices.IndexerName("ItemOf")]
        public virtual System.Xml.XmlNode this[int i] { get { throw null; } }
        public abstract System.Collections.IEnumerator GetEnumerator();
        public abstract System.Xml.XmlNode Item(int index);
        protected virtual void PrivateDisposeNodeList() { }
        void System.IDisposable.Dispose() { }
    }
    public enum XmlNodeOrder
    {
        After = 1,
        Before = 0,
        Same = 2,
        Unknown = 3,
    }
    public partial class XmlNodeReader : System.Xml.XmlReader, System.Xml.IXmlNamespaceResolver
    {
        public XmlNodeReader(System.Xml.XmlNode node) { }
        public override int AttributeCount { get { throw null; } }
        public override string BaseURI { get { throw null; } }
        public override bool CanReadBinaryContent { get { throw null; } }
        public override bool CanResolveEntity { get { throw null; } }
        public override int Depth { get { throw null; } }
        public override bool EOF { get { throw null; } }
        public override bool HasAttributes { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override bool IsDefault { get { throw null; } }
        public override bool IsEmptyElement { get { throw null; } }
        public override string LocalName { get { throw null; } }
        public override string Name { get { throw null; } }
        public override string NamespaceURI { get { throw null; } }
        public override System.Xml.XmlNameTable NameTable { get { throw null; } }
        public override System.Xml.XmlNodeType NodeType { get { throw null; } }
        public override string Prefix { ge
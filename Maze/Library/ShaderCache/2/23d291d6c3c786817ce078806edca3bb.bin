.ToString());

		// Need to dismiss menus early or the slow task in GetMontagesAndNodesUsingSlot will fail to show onscreen
		FSlateApplication::Get().DismissAllMenus();

		// Make sure the name doesn't already exist
		if(EditableSkeletonPtr.Pin()->GetSkeleton().ContainsSlotName(NewName))
		{
			FNotificationInfo Notification(FText::Format(LOCTEXT("ToastRenameFailDesc", "Rename Failed! Slot name {0} already exists in the target skeleton."), FText::FromName(NewName)));
			Notification.ExpireDuration = 3.0f;
			Notification.bFireAndForget = true;

			NotifyUser(Notification);

			return;
		}

		// Validate references
		TArray<FAssetData> CompatibleMontages;
		TMultiMap<UAnimBlueprint*, UAnimGraphNode_Slot*> CompatibleSlotNodes;
		GetMontagesAndNodesUsingSlot(OldName, CompatibleMontages, CompatibleSlotNodes);

		if(CompatibleMontages.Num() > 0 || CompatibleSlotNodes.Num() > 0)
		{
			// We can't rename here - still have references. Give the user a chance to fix.
			if(!ReferenceWindow.IsValid())
			{
				// No existing window
				SAssignNew(ReferenceWindow, SWindow)
					.AutoCenter(EAutoCenter::PreferredWorkArea)
					.SizingRule(ESizingRule::Autosized)
					.Title(LOCTEXT("ReferenceWindowTitle", "Slot References"));

				ReferenceWindow->SetContent
					(
					SNew(SBorder)
					.Padding(FMargin(3))
					.BorderImage(FEditorStyle::GetBrush("ToolPanel.GroupBorder"))
					[
						SAssignNew(ReferenceWidget, SSlotNameReferenceWindow)
						.ReferencingMontages(&CompatibleMontages)
						.ReferencingNodes(&CompatibleSlotNodes)
						.SlotName(OldName.ToString())
						.OperationText(LOCTEXT("RenameOperation", "Rename"))
						.WidgetWindow(ReferenceWindow)
						.OnRetry(FSimpleDelegate::CreateSP(this, &SSkeletonSlotNames::RetryRenameSlot, OldName, NewName))
					]
				);

				TSharedPtr<SWindow> ParentWindow;
				IMainFrameModule& MainFrameModule = FModuleManager::LoadModuleChecked<IMainFrameModule>(TEXT("MainFrame"));
				ParentWindow = MainFrameModule.GetParentWindow();

				FSlateApplication::Get().AddWindowAsNativeChild(ReferenceWindow.ToSharedRef(), ParentWindow.ToSharedRef());
				ReferenceWindow->SetOnWindowClosed(FOnWindowClosed::CreateSP(this, &SSkeletonSlotNames::ReferenceWindowClosed));
			}
			else
			{
				TSharedPtr<SSlotNameReferenceWindow> RefWidgetPinned = ReferenceWidget.Pin();
				if(RefWidgetPinned.IsValid())
				{
					FReferenceWindowInfo WindowInfo;
					WindowInfo.ReferencingMontages = &CompatibleMontages;
					WindowInfo.ReferencingNodes = &CompatibleSlotNodes;
					WindowInfo.ItemText = FText::FromName(OldName);
					WindowInfo.OperationText = LOCTEXT("RenameOperation", "Rename");
					WindowInfo.RetryDelegate = FSimpleDelegate::CreateSP(this, &SSkeletonSlotNames::RetryRenameSlot, OldName, NewName);

					RefWidgetPinned->UpdateInfo(WindowInfo);
					ReferenceWindow->BringToFront();
				}
			}
		}
		else
		{
			RenameSlot(OldName, NewName);
		}
	}
}

void SSkeletonSlotNames::OnRenameSlot(FName CurrentName)
{
	TSharedRef<STextEntryPopup> TextEntry =
		SNew(STextEntryPopup)
		.Label(LOCTEXT("RenameSlotName_AskSlotName", "New Slot Name"))
		.OnTextCommitted(this, &SSkeletonSlotNames::OnRenameSlotPopupCommitted, CurrentName);

	// Show dialog to enter new track name
	FSlateApplication::Get().PushMenu(
		SharedThis(this),
		FWidgetPath(),
		TextEntry,
		FSlateApplication::Get().GetCursorPos(),
		FPopupTransitionEffect(FPopupTransitionEffect::TypeInPopup)
		);
}

void SSkeletonSlotNames::RenameSlot(FName CurrentName, FName NewName)
{
	if(EditableSkeletonPtr.Pin()->GetSkeleton().ContainsSlotName(CurrentName))
	{
		EditableSkeletonPtr.Pin()->RenameSlotName(CurrentName, NewName);
		RefreshSlotNameListWithFilter();
	}
}

void SSkeletonSlotNames::RetryRenameSlot(FName CurrentName, FName NewName)
{
	TArray<FAssetData> CompatibleMontages;
	TMultiMap<UAnimBlueprint*, UAnimGraphNode_Slot*> CompatibleSlotNodes;
	GetMontagesAndNodesUsingSlot(CurrentName, CompatibleMontages, CompatibleSlotNodes);

	if(CompatibleMontages.Num() > 0 || CompatibleSlotNodes.Num() > 0)
	{
		// Still can't rename
		TSharedPtr<SSlotNameReferenceWindow> PinnedWidget = ReferenceWidget.Pin();
		if(PinnedWidget.IsValid())
		{
			FReferenceWindowInfo WindowInfo;
			WindowInfo.ReferencingMontages = &CompatibleMontages;
			WindowInfo.ReferencingNodes = &CompatibleSlotNodes;
			WindowInfo.ItemText = FText::FromName(CurrentName);
			WindowInfo.OperationText = LOCTEXT("DeleteOperation", "Delete");
			WindowInfo.RetryDelegate = FSimpleDelegate::CreateSP(this, &SSkeletonSlotNames::RetryRenameSlot, CurrentName, NewName);

			PinnedWidget->UpdateInfo(WindowInfo);
			ReferenceWindow->BringToFront();
		}
	}
	else
	{
		ReferenceWindow->RequestDestroyWindow();
		RenameSlot(CurrentName, NewName);
	}
}

void SSkeletonSlotNames::OnDeleteSlotGroup(FName GroupName)
{
	TArray<FAssetData> CompatibleMontages;
	TMultiMap<UAnimBlueprint*, UAnimGraphNode_Slot*> CompatibleSlotNodes;
	GetMontagesAndNodesUsingSlotGroup(GroupName, CompatibleMontages, CompatibleSlotNodes);

	if(CompatibleMontages.Num() > 0 || CompatibleSlotNodes.Num() > 0)
	{
		// Can't delete, still referenced
		// We can't rename here - still have references. Give the user a chance to fix.
		if(!ReferenceWindow.IsValid())
		{
			// No existing window
			SAssignNew(ReferenceWindow, SWindow)
				.AutoCenter(EAutoCenter::PreferredWorkArea)
				.SizingRule(ESizingRule::Autosized)
				.Title(LOCTEXT("ReferenceWindowTitle", "Slot References"));

			ReferenceWindow->SetContent
				(
				SNew(SBorder)
				.Padding(FMargin(3))
				.BorderImage(FEditorStyle::GetBrush("ToolPanel.GroupBorder"))
				[
					SAssignNew(ReferenceWidget, SSlotNameReferenceWindow)
					.ReferencingMontages(&CompatibleMontages)
					.ReferencingNodes(&CompatibleSlotNodes)
					.SlotName(GroupName.ToString())
					.OperationText(LOCTEXT("DeleteGroupOperation", "Delete Group"))
					.WidgetWindow(ReferenceWindow)
					.OnRetry(FSimpleDelegate::CreateSP(this, &SSkeletonSlotNames::RetryDeleteSlotGroup, GroupName))
				]
			);

			TSharedPtr<SWindow> ParentWindow;
			IMainFrameModule& MainFrameModule = FModuleManager::LoadModuleChecked<IMainFrameModule>(TEXT("MainFrame"));
			ParentWindow = MainFrameModule.GetParentWindow();

			FSlateApplication::Get().AddWindowAsNativeChild(ReferenceWindow.ToSharedRef(), ParentWindow.ToSharedRef());
			ReferenceWindow->SetOnWindowClosed(FOnWindowClosed::CreateSP(this, &SSkeletonSlotNames::ReferenceWindowClosed));
		}
		else
		{
			TSharedPtr<SSlotNameReferenceWindow> RefWidgetPinned = ReferenceWidget.Pin();
			if(RefWidgetPinned.IsValid())
			{
				FReferenceWindowInfo WindowInfo;
				WindowInfo.ReferencingMontages = &CompatibleMontages;
				WindowInfo.ReferencingNodes = &CompatibleSlotNodes;
				WindowInfo.ItemText = FText::FromName(GroupName);
				WindowInfo.OperationText = LOCTEXT("DeleteGroupOperation", "Delete Group");
				WindowInfo.RetryDelegate = FSimpleDelegate::CreateSP(this, &SSkeletonSlotNames::RetryDeleteSlotGroup, GroupName);

				RefWidgetPinned->UpdateInfo(WindowInfo);
				ReferenceWindow->BringToFront();
			}
		}
	}
	else
	{
		DeleteSlotGroup(GroupName);
	}
}

void SSkeletonSlotNames::RetryDeleteSlotGroup(FName GroupName)
{
	TArray<FAssetData> CompatibleMontages;
	TMultiMap<UAnimBlueprint*, UAnimGraphNode_Slot*> CompatibleSlotNodes;
	GetMontagesAndNodesUsingSlotGroup(GroupName, CompatibleMontages, CompatibleSlotNodes);

	if(CompatibleMontages.Num() > 0 || CompatibleSlotNodes.Num() > 0)
	{
		// Still can't rename
		TSharedPtr<SSlotNameReferenceWindow> PinnedWidget = ReferenceWidget.Pin();
		if(PinnedWidget.IsValid())
		{
			FReferenceWindowInfo WindowInfo;
			WindowInfo.ReferencingMontages = &CompatibleMontages;
			WindowInfo.ReferencingNodes = &CompatibleSlotNodes;
			WindowInfo.ItemText = FText::FromName(GroupName);
			WindowInfo.OperationText = LOCTEXT("DeleteGroupOperation", "Delete Group");
			WindowInfo.RetryDelegate = FSimpleDelegate::CreateSP(this, &SSkeletonSlotNames::RetryDeleteSlotGroup, GroupName);

			PinnedWidget->UpdateInfo(WindowInfo);
			ReferenceWindow->BringToFront();
		}
	}
	else
	{
		ReferenceWindow->RequestDestroyWindow();
		DeleteSlotGroup(GroupName);
	}
}

bool SSkeleto
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Threading.Tasks.Extensions</name>
    </assembly>
    <members>
        <member name="M:System.Threading.Tasks.TaskServices.FromCancellation(System.Threading.CancellationToken)">
            <summary>Returns a canceled task.</summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The canceled task.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskServices.FromCancellation``1(System.Threading.CancellationToken)">
            <summary>Returns a canceled task.</summary>
            <typeparam name="TResult">Specifies the type of the result.</typeparam>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The canceled task.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskServices.HandleEapCompletion``1(System.Threading.Tasks.TaskCompletionSource{``0},System.Boolean,System.ComponentModel.AsyncCompletedEventArgs,System.Func{``0},System.Action)">
            <summary>
            Completes the Task if the user state matches the TaskCompletionSource.
            </summary>
            <typeparam name="T">Specifies the type of data returned by the Task.</typeparam>
            <param name="tcs">The TaskCompletionSource.</param>
            <param name="e">The completion event arguments.</param>
            <param name="requireMatch">Whether we require the tcs to match the e.UserState.</param>
            <param name="getResult">A function that gets the result with which to complete the task.</param>
            <param name="unregisterHandler">An action used to unregister work when the operaiton completes.</param>
        </member>
        <member name="T:AsyncExtensions">
            <summary>
                Provides asynchronous wrappers for .NET Framework operations.
            </summary>
        </member>
        <member name="M:AsyncExtensions.ReadAsync(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <returns>A Task that represents the asynchronous read.</returns>
            <param name="source">The source.</param>
            <param name="buffer">The buffer to read data into. </param>
            <param name="offset">The byte offset in  at which to begin reading. </param>
            <param name="count">The maximum number of bytes to read. </param>
            <exception cref="T:System.ArgumentException">The array length minus  is less than <paramref name="count" />. </exception>
            <exception cref="T:System.ArgumentNullException"> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> or <paramref name="count" /> is negative. </exception>
            <exception cref="T:System.IO.IOException">An asynchronous read was attempted past the end of the file. </exception>
        </member>
        <member name="M:AsyncExtensions.ReadAsync(System.IO.Stream,System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <returns>A Task that represents the asynchronous read.</returns>
            <param name="source">The source.</param>
            <param name="buffer">The buffer to read data into. </param>
            <param name="offset">The byte offset in  at which to begin reading. </param>
            <param name="count">The maximum number of bytes to read. </param>
             <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentException">The array length minus  is less than <paramref name="count" />. </exception>
            <exception cref="T:System.ArgumentNullException"> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> or <paramref name="count" /> is negative. </exception>
            <exception cref="T:System.IO.IOException">An asynchronous read was attempted past the end of the file. </exception>
        </member>
        <member name="M:AsyncExtensions.WriteAsync(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes asynchronously a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <returns>A Task that represents the asynchronous write.</returns>
            <param name="source">The source.</param>
            <param name="buffer">The buffer containing data to write to the current stream.</param>
            <param name="offset">The zero-based byte offset in  at which to begin copying bytes to the current stream.</param>
            <param name="count">The maximum number of bytes to write. </param>
            <exception cref="T:System.ArgumentException"> length minus <paramref name="offset" /> is less than <paramref name="count" />. </exception>
            <exception cref="T:System.ArgumentNullException"> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> or <paramref name="count" /> is negative. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing. </exception>
            <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        </member>
        <member name="M:AsyncExtensions.WriteAsync(System.IO.Stream,System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Writes asynchronously a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <returns>A Task that represents the asynchronous write.</returns>
            <param name="source">The source.</param>
            <param name="buffer">The buffer containing data to write to the current stream.</param>
            <param name="offset">The zero-based byte offset in  at which to begin copying bytes to the current stream.</param>
            <param name="count">The maximum number of bytes to write. </param>
             <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentException"> length minus <paramref name="offset" /> is less than <paramref name="count" />. </exception>
            <exception cref="T:System.ArgumentNullException"> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> or <paramref name="count" /> is negative. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing. </exception>
            <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        </member>
        <member name="M:AsyncExtensions.FlushAsync(System.IO.Stream)">
            <summary>
            Flushes asynchronously the current stream.
            </summary>
            <returns>A Task that represents the asynchronous flush.</returns>
        </member>
        <member name="M:AsyncExtensions.FlushAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Flushes asynchronously the current stream.
            </summary>
            <returns>A Task that r
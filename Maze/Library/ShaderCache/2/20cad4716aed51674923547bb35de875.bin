<?xml version="1.0" encoding="utf-8"?>
<Type Name="XmlResolver" FullName="System.Xml.XmlResolver" FullNameSP="System_Xml_XmlResolver" Maintainer="ecma">
  <TypeSignature Language="ILASM" Value=".class public abstract XmlResolver extends System.Object" />
  <TypeSignature Language="C#" Value="public abstract class XmlResolver" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit XmlResolver extends System.Object" />
  <MemberOfLibrary>XML</MemberOfLibrary>
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 ]</AssemblyPublicKey>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <ThreadingSafetyStatement>All public static members of this type are safe for multithreaded operations. No instance members are guaranteed to be thread safe.</ThreadingSafetyStatement>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>XmlResolver is used to resolve external XML resources, such as entities, document type definitions (DTDs), or schemas. It is also used to process include and import elements found in Extensible StyleSheet Language (XSL) style sheets or XML Schema definition language (XSD) schemas.</para>
      <para>
        <see cref="T:System.Xml.XmlUrlResolver" /> is a concrete implementation of XmlResolver and is the default resolver for all classes in the System.Xml namespace. You can also create your own resolver.</para>
      <format type="text/html">
        <h2>Security Considerations</h2>
      </format>
      <para>Consider the following items when working with the <see cref="T:System.Xml.XmlResolver" /> class.</para>
      <list type="bullet">
        <item>
          <para>
            <see cref="T:System.Xml.XmlResolver" /> objects can contain sensitive information such as user credentials. You should be careful when caching <see cref="T:System.Xml.XmlResolver" /> objects and should not pass the <see cref="T:System.Xml.XmlResolver" /> object to an untrusted component.</para>
        </item>
        <item>
          <para>If you are designing a class property that uses the <see cref="T:System.Xml.XmlResolver" /> class, the property should be defined as a write-only property. The property can be used to specify the <see cref="T:System.Xml.XmlResolver" /> to use, but it cannot be used to return an <see cref="T:System.Xml.XmlResolver" /> object.</para>
        </item>
        <item>
          <para>If your application accepts <see cref="T:System.Xml.XmlResolver" /> objects from untrusted code, you cannot assume that the URI passed into the <see cref="M:System.Xml.XmlResolver.GetEntity(System.Uri,System.String,System.Type)" /> method will be the same as that returned by the <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" /> method. Classes derived from the <see cref="T:System.Xml.XmlResolver" /> class can override the <see cref="M:System.Xml.XmlResolver.GetEntity(System.Uri,System.String,System.Type)" /> method and return data that is different than what was contained in the original URI.</para>
        </item>
        <item>
          <para>Your application can mitigate memory Denial of Service threats to the <see cref="M:System.Xml.XmlResolver.GetEntity(System.Uri,System.String,System.Type)" /> method by implementing a wrapping implemented IStream that limits the number of bytes read. This helps to guard against situations where malicious code attempts to pass an infinite stream of bytes to the <see cref="M:System.Xml.XmlResolver.GetEntity(System.Uri,System.String,System.Type)" /> method.</para>
        </item>
      </list>
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Resolves external XML resources named by a Uniform Resource Identifier (URI).</para>
    </summary>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="ILASM" Value="family specialname instance void .ctor()" />
      <MemberSignature Language="C#" Value="protected XmlResolver ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue />
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This constructor is called by derived class constructors to initialize state in this type.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.Xml.XmlResolver" /> class.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Credentials">
      <MemberSignature Language="ILASM" Value=".property class System.Net.ICredentials Credentials { public hidebysig virtual abstract specialname void set_Credentials(class System.Net.ICredentials value) }" />
      <MemberSignature Language="C#" Value="public virtual System.Net.ICredentials Credentials { set;
M64_LR, plcrash_async_cfe_entry_return_address_register(&entry), @"Incorrect return address register set");

    /* Verify the register decoding */
    plcrash_regnum_t reg[reg_count];
    
    plcrash_async_cfe_entry_register_list(&entry, reg);
    
    plcrash_regnum_t expected_reg[] = {
        PLCRASH_ARM64_X28,
        PLCRASH_ARM64_X27,
        PLCRASH_ARM64_X26,
        PLCRASH_ARM64_X25,
    };
    for (uint32_t i = 0; i < (sizeof(expected_reg)/sizeof(expected_reg[0])); i++) {
        STAssertEquals(reg[i], expected_reg[i], @"Incorrect register value extracted for position %" PRId32, i);
    }
    
    plcrash_async_cfe_entry_free(&entry);
}

/**
 * Decode an ARM64 DWARF encoding.
 */
- (void) testARM64DecodeDWARF {
    /* Create a frame encoding */
    const uint32_t encoded_
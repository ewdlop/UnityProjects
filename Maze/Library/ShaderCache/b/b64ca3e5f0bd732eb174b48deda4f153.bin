xception(nameof(buffer), SR.ArgumentNull_Buffer);
            }
            if (index < 0 || count < 0)
            {
                throw new ArgumentOutOfRangeException((index < 0 ? nameof(index): nameof(count)), SR.ArgumentOutOfRange_NeedNonNegNum);
            }
            if (buffer.Length - index < count)
            {
                throw new ArgumentException(SR.Argument_InvalidOffLen);
            }

#if !__MonoCS__
            return ReadAsyncInternal(new Memory<char>(buffer, index, count), default).AsTask();
#else
            return ReadAsyncInternal(new Memory<char>(buffer, index, count), default);
#endif
        }

        public virtual ValueTask<int> ReadAsync(Memory<char> buffer, CancellationToken cancellationToken = default(CancellationToken)) =>
            new ValueTask<int>(MemoryMarshal.TryGetArray(buffer, out ArraySegment<char> array) ?
                ReadAsync(array.Array, array.Offset, array.Count) :
                Task<int>.Factory.StartNew(state =>
                {
                    var t = (Tuple<TextReader, Memory<char>>)state;
                    return t.Item1.Read(t.Item2.Span);
                }, Tuple.Create(this, buffer), cancellationToken, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default));

#if !__MonoCS__
        internal virtual ValueTask<int> ReadAsyncInternal(Memory<char> buffer, CancellationToken cancellationToken)
#else
        internal virtual Task<int> ReadAsyncInternal(Memory<char> buffer, CancellationToken cancellationToken)
#endif
        {
            var tuple = new Tuple<TextReader, Memory<char>>(this, buffer);
#if !__MonoCS__
            return new ValueTask<int>(Task<int>.Factory.StartNew(state =>
            {
                var t = (Tuple<TextReader, Memory<char>>)state;
                return t.Item1.Read(t.Item2.Span);
            },
            tuple, cancellationToken, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default));
#else
            return Task<int>.Factory.StartNew(state =>
            {
                var t = (Tuple<TextReader, Memory<char>>)state;
                return t.Item1.Read(t.Item2.Span);
            },
            tuple, cancellationToken, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);
#endif

        }

        public virtual Task<int> ReadBlockAsync(char[] buffer, int index, int count)
        {
            if (buffer == null)
            {
                throw new ArgumentNullException(nameof(buffer), SR.ArgumentNull_Buffer);
            }
            if (index < 0 || count < 0)
            {
                throw new ArgumentOutOfRangeException((index < 0 ? nameof(index): nameof(count)), SR.ArgumentOutOfRange_NeedNonNegNum);
            }
            if (buffer.Length - index < count)
            {
                throw new ArgumentException(SR.Argument_InvalidOffLen);
            }

#if !__MonoCS__
            return ReadBlockAsyncInternal(new Memory<char>(buffer, index, count), default).AsTask();
#else
            return ReadBlockAsyncInte
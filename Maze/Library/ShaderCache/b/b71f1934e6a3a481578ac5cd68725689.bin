  // try loading the whole buffer
         //
         if(entire_buffer)
         {
            comp.readPixels(comp.dataWindow().min.y,comp.dataWindow().max.y);
         }else{
           int low = comp.dataWindow().min.y;
           while(low<comp.dataWindow().max.y)
           {
               int high = low + rand()%64;
               if(high>comp.dataWindow().max.y) 
                   high = comp.dataWindow().max.y;
               comp.readPixels(low,high);
               low = high;
           }
         }
        
         master.checkValues(data,comp.dataWindow(),load_depths);
  
         for(int i=0;i<number_of_parts;i++)
         {
            delete parts[i];
         }
     }
     if(number_of_parts==1)
     {
         // also test InputFile interface
         InputFile file(fn.c_str());
         vector<T> data;
         FrameBuffer testbuf;
         const Box2i & dataWindow = file.header().dataWindow();
         master.setUpFrameBuffer(data,testbuf,dataWindow,load_depths);
         file.setFrameBuffer(testbuf);
         if(entire_buffer)
         {
             file.readPixels(dataWindow.min.y,dataWindow.max.y);
         }else{
             int low = dataWindow.min.y;
             while(low<dataWindow.max.y)
             {
                 int high = low + rand()%64;
                 if(high>dataWindow.max.y) 
                     high = dataWindow.max.y;
                 file.readPixels(low,high);
                 low = high;
             }
         }
         
         master.checkValues (data, dataWindow, load_depths);
         
     }
     remove (fn.c_str());
}

}

void testCompositeDeepScanLine (const std::string & tempDir)
{
    
    cout << "\n\nTesting deep compositing interface basic functionality:\n" << endl;

    int passes=2;
    if (!ILMTHR
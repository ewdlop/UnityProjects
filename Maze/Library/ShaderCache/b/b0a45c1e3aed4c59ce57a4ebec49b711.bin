LCRASH_X86_64_R14), (plcrash_greg_t)14, @"Incorrect register value");
    
    plcrash_async_cfe_entry_free(&entry);
}

/* This test requires storing local pointers to the host's stack in 32-bit x86's thread state; it can only be run on a 32-bit host,
 * as the 64-bit stack pointers may exceed the UINT32_MAX. */
#ifndef __LP64__
- (void) testx86_32_ApplyFramePTRState {
    plcrash_async_cfe_entry_t entry;
    plcrash_async_thread_state_t ts;
    
    /* Set up a faux frame */
    uint32_t stackframe[] = {
        12, // ebx
        13, // ecx
        0,  // sparse slot
        14, // edi
        
        1,  // ebp
        2,  // ret addr
    };
    
    /* Create a frame encoding, with registers saved at ebp-16 bytes. We insert
     * a sparse slot to test the sparse handling */
    const uint32_t encoded_reg_ebp_offset = 16;
    const uint32_t encoded_regs = UNWIND_X86_REG_EBX |
                                    (UNWIND_X86_REG_ECX << 3) |
                                    0 << 6 /* SPARSE */ |
                                    (UNWIND_X86_REG_EDI << 9);
    
    uint32_t encoding = UNWIND_X86_MODE_EBP_FRAME |
    INSERT_BITS(encoded_reg_ebp_offset/4, UNWIND_X86_EBP_FRA
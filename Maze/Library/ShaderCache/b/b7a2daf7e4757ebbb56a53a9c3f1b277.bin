ional = false (
        doc = """When this is on, the texture projects along a direction
        using the orthographic projection. When it is off, the texture
        projects using a focal point specified by the analytic:apex."""
    )
    float analytic:shearX = 0 (
        doc = """Shear the projection along the X axis."""
    )
    float analytic:shearY = 0 (
        doc = """Shear the projection along the Y axis."""
    )
    float analytic:apex = 25 (
        doc = """Distance between the center of cookie and the center of projection."""
    )
    bool analytic:useLightDirection = false (
        doc = """When this is on, If this is on, the projection direction
        is determined by the position of the center of the light source.
        Otherwise, it only follows the orientation of the filter. WARNING:
        This does not work with dome and mesh lights."""
    )
    float analytic:blur:amount = 0 (
        doc = """Specify the blur of projected texture from 0-1. This
        gets multiplied by the blurNear/blurFar interpolation. This
        blurs between the projected color and the fill color when the
        texture is not repeating."""
    )
    float analytic:blur:sMult = 0 (
        doc = """Blur multiplier in the S direction."""
    )
    float analytic:blur:tMult = 0 (
        doc = """Blur multiplier in the T direction."""
    )
    float analytic:blur:nearDistance = 0.0 (
        doc = """Distance from the cookie where the blur interpolation
        starts."""
    )
    float analytic:blur:midpoint = 0.5 (
        doc = """Distance between near and far where midValue is located."""
    )
    float analytic:blur:farDistance = 10.0 (
        doc = """Distance from the cookie where the blur interpolation ends."""
    )
    float analytic:blur:nearValue = 1 (
        doc = """Blur multiplier where the blur interpolation starts."""
    )
    float analytic:blur:midValue = 1 (
        doc = """Blur multiplier in the middle of interpolation."""
    )
    float analytic:blur:farValue = 1 (
        doc = """Blur multiplier at the end of interpolation."""
    )
    float analytic:blur:exponent = 1 (
        doc = """Power exponent of the blur interpolation."""
    )


    float analytic:density:nearDistance = 0.0 (
        doc = """Distance from the cookie where the density
        interpolation starts."""
    )
    float analytic:density:midpoint = 0.5 (
        doc = """Distance between near and far where midValue is located."""
    )
    float analytic:density:farDistance = 10.0 (
        doc = """Distance from the cookie where the density interpolation
        ends."""
    )
    float analytic:density:nearValue = 1 (
        doc = """Density multiplier where the density interpolation starts."""
    )
    float analytic:density:midValue = 1 (
        doc = """Density multiplier in the middle of interpolation."""
    )
    float analytic:density:farValue = 1 (
        doc = """Density multiplier at the end of interpolation."""
    )
    float analytic:density:exponent = 1 (
        doc = """Power exponent of the density interpolation."""
    )

    float color:saturation = 1 (
        doc = """Saturation of the result (0=greyscale, 1=normal,
        >1=boosted colors)."""
    )
    float color:midpoint = 0.18 (
        doc = """Midpoint for the contrast control."""
    )
    float color:contrast = 1 (
        doc = """Contrast control (less than 1 = contrast reduction,
        larger than 1 = contrast increase)."""
    )
    float color:whitepoint = 1 (
        doc = """White point for the contrast control if (contrast > 1.0)."""
    )
    color3f color:tint = (1, 1, 1)  (
        doc = """Tint of the resulting color after saturation, contrast
        and clamp."""
    )
}

class PxrRampLightFilter "PxrRampLightFilter" (
    inherits = </LightFilter>
    doc = """A ramp to modulate how a light falls off with distance."""
    customData = {
        string extraIncludes = """
#include "pxr/usd/usdRi/splineAPI.h"
"""
    }
) {
    token rampMode = "distanceToLight" (
        allowedTokens = ["distanceToLight", "linear", "spherical", "radial"]
        doc = """Specifies the direction in which the ramp is applied"""
    )
    # distances apply to both the falloff and color ramps
    float beginDistance = 0 (
	doc = """Distance where the ramp starts."""
    )
    float endDistance = 10 (
	doc = """Distance where the ramp ends."""
    )
    # this is called ramp in the args file and code
    int falloff = 4 (
        doc = """Controls the transition from the core to the edge."""
    )
    float[] falloff:knots = [0, 0, 1, 1] (
        doc = """Knots of the falloff spline."""
    )
    float[] falloff:floats = [0, 0, 1, 1] (
        doc = """Float values of the falloff spline."""
    )
    token falloff:interpolation = "linear" (
        allowedTokens = ["linear", "catmull-rom", "bspline", "constant"]
        doc = """Falloff spline type. """
    )
    int colorRamp = 4 (
        doc = """Controls the color gradient for the transition."""
    )
    float[] colorRamp:knots = [0, 0, 1, 1] (
        doc = """Knots of the colorRamp spline."""
    )
    color3f[] colorRamp:colors = [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)] (
        doc = """Color values of the colorRamp spline."""
    )
    token colorRamp:interpolation = "linear" (
        allowedTokens = ["linear", "catmull-rom", "bspline", "constant"]
        doc = """ColorRamp spline type. """
    )
}

class PxrRodLightFilter "PxrRodLightFilter" (
    inherits = </LightFilter>
    doc = """Simulates a rod or capsule-shaped region to modulate light."""
    customData = {
        string extraIncludes = """
#include "pxr/usd/usdRi/splineAPI.h"
"""
    }
) {
    float width = 0 (
        doc = """Width of the inner region of the rod (X axis)."""
    )
    float height = 0 (
        doc = """Height of the inner region of the rod (Y axis)."""
    )
    float depth = 0 (
        doc = """Depth of the inner region of the rod (Z axis)."""
    )
    float radius = 1 (
        doc = """Radius of the corners of the inner rod box."""
    )
    float edgeThickness = 0.25 (
        doc = """Thickness of the edge region.  Larger values will
        soften the edge shape."""
    )
    float scale:width = 1 (
        doc = """Scale the width of the inner rod shape."""
    )
    float scale:height = 1 (
        doc = """Scale the height of the inner rod shape."""
    )
    float scale:depth = 1 (
        doc = """Scale the depth of the inner rod shape."""
    )

    float refine:top = 0 (
        doc = """Additional offset adjustment to the top region."""
    )
    float refine:bottom = 0 (
        doc = """Additional offset adjustment to the top region."""
    )
    float refine:left = 0 (
        doc = """Additional offset adjustment to the left region."""
    )
    float refine:right = 0 (
        doc = """Additional offset adjustment to the left region."""
    )
    float refine:front = 0 (
        doc = """Additional offset adjustment to the front region."""
    )
    float refine:back = 0 (
        doc = """Additional offset adjustment to the back region."""
    )

    float edgeScale:top = 1 (
        doc = """Additional edge scale adjustment to the top region."""
    )
    float edgeScale:bottom = 1 (
        doc = """Additional edge scale adjustment to the top region."""
    )
    float edgeScale:left = 1 (
        doc = """Additional edge scale adjustment to the left region."""
    )
    float edgeScale:right = 1 (
        doc = """Additional edge scale adjustment to the left region."""
    )
    float edgeScale:front = 1 (
        doc = """Additional edge scale adjustment to the front region."""
    )
    float edgeScale:back = 1 (
        doc = """Additional edge scale adjustment to the back region."""
    )

    float color:saturation = 1 (
        doc = """Saturation of the result (0=greyscale, 1=normal,
        >1=boosted colors)."""
    )

    int falloff = 6 (
        doc = """Controls the transition from the core to the edge."""
    )
    float[] falloff:knots = [0, 0, 0.3, 0.7, 1, 1] (
        doc = """Knots of the falloff spline."""
    )
    float[] falloff:floats = [0, 0, 0.2, 0.8, 1, 1] (
        doc = """Float values of the falloff spline."""
    )
    token falloff:interpolation = "bspline" (
        allowedTokens = ["linear", "catmull-rom", "bspline", "constant"]
     
nction to compare two WAVEFORMATEX structs */
FORCEINLINE bool operator==(const WAVEFORMATEX& FormatA, const WAVEFORMATEX& FormatB)
{
	/** Unfortunately, need to compare every member of the WAVEFORMATEX struct */
	return FormatA.cbSize 			== FormatB.cbSize &&
			FormatA.nAvgBytesPerSec == FormatB.nAvgBytesPerSec &&
			FormatA.nBlockAlign 	== FormatB.nBlockAlign &&
			FormatA.nChannels 		== FormatB.nChannels &&
			FormatA.nSamplesPerSec 	== FormatB.nSamplesPerSec &&
			FormatA.wBitsPerSample 	== FormatB.wBitsPerSample &&
			FormatA.wFormatTag 		== FormatB.wFormatTag;
}


/** This structure holds any singleton XAudio2 resources which need to be used, not just "properties" of the device. */
struct FXAudioDeviceProperties final : public IDeviceChangedListener
{
	// These variables are non-static to support multiple audio device instances
	struct IXAudio2*					XAudio2;
	struct IXAudio2MasteringVoice*		MasteringVoice;

	// These variables are static because they are common across all audio device instances
	static int32						NumSpeakers;
	static const float*					OutputMixMatrix;
#if XAUDIO_SUPPORTS_DEVICE_DETAILS
	static XAUDIO2_DEVICE_DETAILS		DeviceDetails;
#endif	//XAUDIO_SUPPORTS_DEVICE_DETAILS

#if PLATFORM_WINDOWS
	FMMNotificationClient* NotificationClient;
	static HMODULE XAudio2Dll;
#endif

	// For calculating speaker maps for 3d audio
	FSpatializationHelper				SpatializationHelper;

	/** Source callback to handle looping sound callbacks */
	FXAudio2SoundSourceCallback	SourceCallback;
	
	/** Number of non-free active voices */
	int32 NumActiveVoices;

	/** Whether or not the audio device changed. Used to trigger device reset when audio device changes. */
	FThreadSafeBool bDeviceChanged;

	/** Whether or not to allow new voices to be created. */
	FThreadSafeBool bAllowNewVoices;

	FXAudioDeviceProperties()
		: XAudio2(nullptr)
		, MasteringVoice(nullptr)
		, NumActiveVoices(0)
		, bDeviceChanged(false)
		, bAllowNewVoices(true)
	{
#if PLATFORM_WINDOWS
		NotificationClient = new FMMNotificationClient();
		NotificationClient->RegisterDeviceChangedListener(this);
#endif
	}
	
	virtual ~FXAudioDeviceProperties()
	{
#if PLATFORM_WINDOWS
		if (NotificationClient)
		{
			NotificationClient->UnRegisterDeviceDeviceChangedListener(this);
			NotificationClient->Release();
			NotificationClient = nullptr;
		}
#endif

		// Make sure we've free'd all of our active voices at this point!
		check(NumActiveVoices == 0);

		// close hardware interfaces
		if (MasteringVoice)
		{
			MasteringVoice->DestroyVoice();
			MasteringVoice = nullptr;
		}

		if (XAudio2)
		{
			// Force the hardware to release all references
			Validate(TEXT("~FXAudioDeviceProperties: XAudio2->Release()"),
					 XAudio2->Release());
			XAudio2 = nullptr;
		}

#if PLATFORM_WINDOWS && PLATFORM_64BITS
		// Only free the library if we're shutting down
		if (XAudio2Dll != nullptr && IsEngineExitRequested())
		{
			UE_LOG(LogAudio, Verbose, TEXT("Freeing XAudio2 dll"));
			if (!FreeLibrary(XAudio2Dll))
			{
				UE_LOG(LogAudio, Warning, TEXT("Failed to free XAudio2 Dll"));
			}
			XAudio2Dll = nullptr;
		}
#endif
	}

	void OnDeviceRemoved(FString DeviceID) override
	{
#if XAUDIO_SUPPORTS_DEVICE_DETAILS
		if (DeviceID == FString(DeviceDetails.DeviceID))
		{
			bDeviceChanged = true;

			// Immediately disallow new voices to be created
			bAllowNewVoices = false;

			// Log that the default audio device changed 
			UE_LOG(LogAudio, Warning, TEXT("Current Audio Device with ID %s was removed. Shutting down audio device."), *DeviceID);
		}
#endif // XAUDIO_SUPPORTS_DEVICE_DETAILS
	}

	void OnDefaultDeviceChanged() override
	{
		bDeviceChanged = true;

		// Immediately disallow new voices to be created
		bAllowNewVoices = false;
	}

	bool DidAudioDeviceChange()
	{
		bool bChanged = bDeviceChanged;
		bDeviceChanged = false;
		return bChanged;
	}

	bool Validate(const TCHAR* Function, uint32 ErrorCode) const
	{
		if (ErrorCode != S_OK)
		{
			switch (ErrorCode)
			{
				case XAUDIO2_E_INVALID_CALL:
				UE_LOG(LogAudio, Error, TEXT("%s error: Invalid Call"), Function);
				break;

				case XAUDIO2_E_XMA_DECODER_ERROR:
				UE_LOG(LogAudio, Error, TEXT("%s error: XMA Decoder Error"), Function);
				break;

				case XAUDIO2_E_XAPO_CREATION_FAILED:
				UE_LOG(LogAudio, Error, TEXT("%s error: XAPO Creation Failed"), Function);
				break;

				case XAUDIO2_E_DEVICE_INVALIDATED:
				UE_LOG(LogAudio, Error, TEXT("%s error: Device Invalidated"), Function);
				break;

				default:
				UE_LOG(LogAudio, Error, TEXT("%s error: Unhandled error code %d"), Function, ErrorCode);
				break;
			};

			return false;
		}

		return true;
	}


	void GetAudioDeviceList(TArray<FString>& OutAudioDeviceList) const
	{
		OutAudioDeviceList.Reset();

#if XAUDIO_SUPPORTS_DEVICE_DETAILS
		uint32 NumDevices = 0;
		if (XAudio2)
		{
			if (Validate( TEXT("GetAudioDeviceList: XAudio2->GetDeviceCount"),
				XAudio2->GetDeviceCount(&NumDevices)))
			{
				for (uint32 i = 0; i < NumDevices; ++i)
				{
					XAUDIO2_DEVICE_DETAI
thon code
more readable in two ways. First, the use of indentation reduces visual clutter
and makes programs shorter, thus reducing the attention span needed to take in
a basic unit of code. Second, it allows the programmer less freedom in
formatting, thereby enabling a more uniform style, which makes it easier to
read someone else's code. (Compare, for instance, the three or four different
conventions for the placement of braces in C, each with strong proponents.)

This emphasis on readability is no accident. As an object-oriented language,
Python aims to encourage the creation of reusable code. Even if we all wrote
perfect documentation all of the time, code can hardly be considered reusable
if it's not readable. Many of Python's features, in addition to its use of
indentation, conspire to make Python code highly readable. This reflects the
philosophy of ABC, which was intended to teach programming in its purest form,
and therefore placed a high value on clarity.

Readability is often enhanced by reducing unnecessary variability. When
possible, there's a single, obvious way to code a particular construct. This
reduces the number of choices facing the programmer who is writing the code,
and increases the chance that will appear familiar to a second programmer
reading it. Yet another contribution to Python's readability is the choice to
use punctuation mostly in a conservative, conventional manner. Most operator
symbols are familiar to anyone with even a vague recollection of high school
math, and no new meanings have to be learned for comic strip curse characters
like @&$!.

I will gladly admit that Python is not the fastest running scripting language.
It is a good runner-up though. With ever-increasing hardware speed, the
accumulated running time of a program during its lifetime is often negligible
compared to the programmer time needed to write and debug it
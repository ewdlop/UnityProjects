g about lately: a descendant of
ABC that would appeal to Unix/C hackers. I chose Python as a working title for
the project, being in a slightly irreverent mood (and a big fan of Monty
Python's Flying Circus).

Today, I can safely say that Python has changed my life. I have moved to a
different continent. I spend my working days developing large systems in
Python, when I'm not hacking on Python or answering Python-related email. There
are Python T-shirts, workshops, mailing lists, a newsgroup, and now a book.
Frankly, my only unfulfilled wish is to have my picture on the front page of
the New York Times. But before I get carried away daydreaming, here are a few
tidbits from Python's past.

It all started with ABC, a wonderful teaching language that I had helped create
in the early eighties. It was an incredibly elegant and powerful language,
aimed at non-professional programmers. Despite all its elegance and power and
the availability of a free implementation, ABC never became popular in the
Unix/C world. I can only speculate about the reasons, but here's a likely one:
the difficulty of adding new "primitive" operations to ABC. It was a
monolithic, "closed system", with only the most basic I/O operations: read a
string from the console, write a string to the console. I decided not repeat
this mistake in Python.

Besides this intention, I had a number of other ideas for improvement over ABC,
and was eager to try them out. For instance, ABC's powerful data types turned
out to be less efficient than we hoped. There was too much emphasis on
theoretically optimal algorithms, and not enough tuning for common cases. I
also felt that some of ABC's features, aimed at novice programmers, were less
desirable for the (then!) intended audience of experienced Unix/C programmers.
For instance: ABC's ideosyncratic syntax (all uppercase keywords!); some
terminology (e.g. "how-to" instead of "procedure"); and the integrated
structured editor, which its users almost universally hated. Python would rely
more on the Unix infrastructure and conventions, without being Unix-bound. And
in fact, the first implementation was done on a Mac.

As it turned out, Python is remarkably free from many of the hang-ups of
conventional programming languages. This is perhaps due to my choice of
examples: besides ABC, my main influence was Modula-3. This is another language
with remarkable elegance and power, designed by a small, strong-willed team
(most of whom I had met during a summer internship at DEC's Systems Research
Center in Palo Alto). Imagine what Python would have looked like if I had
modelled it after the Unix shell and C instead! (Yes, I borrowed from C too,
but only its least controversial features, in my desire to please the Unix/C
audience.)

Any individual creation has its ideosyncracies, and occasionally its creator
has to justify these. Perhaps Python's most controversial feature 
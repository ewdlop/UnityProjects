hat Python would have looked like if I had
modelled it after the Unix shell and C instead! (Yes, I borrowed from C too,
but only its least controversial features, in my desire to please the Unix/C
audience.)

Any individual creation has its ideosyncracies, and occasionally its creator
has to justify these. Perhaps Python's most controversial feature is its use of
indentation for statement grouping, which derives directly from ABC. It is one
of the language's features that is dearest to my heart. It makes Python code
more readable in two ways. First, the use of indentation reduces visual clutter
and makes programs shorter, thus reducing the attention span needed to take in
a basic unit of code. Second, it allows the programmer less freedom in
formatting, thereby enabling a more uniform style, which makes it easier to
read someone else's code. (Compare, for instance, the three or four different
conventions for the placement of braces in C, each with strong proponents.)

This emphasis on readability is no accident. As an object-oriented language,
Python aims to encourage the creation of reusable code. Even if we all wrote
perfect documentation all of the time, code can hardly be considered reusable
if it's not readable. Many of Python's features, in addition to its use of
indentation, conspire to make Python code highly readable. This reflects the
philosophy of ABC, which was intended to teach programming in its purest form,
and therefore placed a high value on clarity.

Readability is often enhanced by reducing unnecessary variability. When
possible, there's a single, obvious way to code a particular construct. This
reduces the number of choi
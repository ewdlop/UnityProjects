//------------------------------------------------------------------------------
// <copyright file="SqlDecimal.cs" company="Microsoft">
//     Copyright (c) Microsoft Corporation.  All rights reserved.
//  </copyright>
// <owner current="true" primary="true">junfang</owner>
// <owner current="true" primary="false">Microsoft</owner>
// <owner current="true" primary="false">Microsoft</owner>
// <owner current="true" primary="false">Microsoft</owner>
//------------------------------------------------------------------------------

//**************************************************************************
// @File: SqlNumeric.cs
//
// Create by:    JunFang
// @Owner:      JunFang
//
// Purpose: Implementation of SqlMoney which is equivalent to
//            data type "numeric" and "decimal" in SQL Server
//
// Notes:
//
// History:
//
//    @Version: Yukon
//    118776 JXF  09/17/02 Double to SqlDecimal/SqlMoney conversion
//    102740 BDS  03/28/02 UDT Serialization
//    86121 AZA  08/21/01 Stop accessing Precision and Scale on null SqlDecimal
//                        objects.
//
//   09/17/99  JunFang    Created and implemented as first drop.
//
// @EndHeader@
//**************************************************************************

using System;
using System.Data.Common;
using System.Diagnostics;
using System.Globalization;
using System.Runtime.InteropServices;
using System.Xml;
using System.Xml.Schema;
using System.Xml.Serialization;

namespace System.Data.SqlTypes {

    /// <devdoc>
    ///    <para>
    ///       Represents a fixed precision and scale numeric value between -10<superscript term='38'/>
    ///       -1 and 10<superscript term='38'/> -1 to be stored in or retrieved from a database.
    ///    </para>
    /// </devdoc>
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    [XmlSchemaProvider("GetXsdType")]
    public struct SqlDecimal : INullable, IComparable, IXmlSerializable {
        // data in CSsNumeric in SQL Server
        // BYTE    m_cbLen;                // # of DWORDs + 1 (1 is for sign)
        // BYTE    m_bPrec;                // precision
        // BYTE    m_bScale;                // scale
        // BYTE    m_bSign;                // NUM_POSITIVE or NUM_NEGATIVE
        // ULONG    m_rgulData [x_culNumeMax];

        internal byte    m_bStatus;      // bit 0: fNotNull, bit 1: fNegative
        internal byte    m_bLen;         // number of uints used, = (CSsNumeric.m_cbLen - 1) / 4.
        internal byte    m_bPrec;
        internal byte    m_bScale;
        internal UInt32  m_data1;
        internal UInt32  m_data2;
        internal UInt3
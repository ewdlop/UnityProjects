he saved prologue setup for any instructions
      // that come after the ret instruction

      UnwindPlan::Row *newrow = new UnwindPlan::Row;
      *newrow = *prologue_completed_row.get();
      row.reset(newrow);
      current_sp_bytes_offset_from_cfa =
          prologue_completed_sp_bytes_offset_from_cfa;

      saved_registers.clear();
      saved_registers.resize(prologue_completed_saved_registers.size(), false);
      for (size_t i = 0; i < prologue_completed_saved_registers.size(); ++i) {
        saved_registers[i] = prologue_completed_saved_registers[i];
      }

      in_epilogue = true;
      row_updated = true;
    }

    // call next instruction
    //     call 0
    //  => pop  %ebx
    // This is used in i386 programs to get the PIC base address for finding
    // global data
    else if (call_next_insn_pattern_p()) {
      current_sp_bytes_offset_from_cfa += m_wordsize;
      if (row->GetCFAValue().GetRegisterNumber() == m_lldb_sp_regnum) {
        row->GetCFAValue().SetOffset(current_sp_bytes_offset_from_cfa);
        row_updated = true;
      }
    }

    if (row_updated) {
      if (current_func_text_offset + insn_len < size) {
        row->SetOffset(curre
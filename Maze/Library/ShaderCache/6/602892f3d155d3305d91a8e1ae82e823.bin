"Haziness"
        doc = """haziness: The turbidity of the sky.  The lower limit of the
        model is 1.7 for  an exceptionally clear sky, and 10, for an
        nversion, is the upper  limit."""
    )
    float hour = 14.633333 (
        displayGroup = "MsApprox"
        displayName = "Hour"
        doc = """hour: Hours since midnight, local standard time.  May be
        fractional to include minutes and seconds.  If daylight saving time
        is in effect, subtract 1 to correct to standard time.  This is
        ignored if month is 0."""
    )
    float latitude = 47.602 (
        displayGroup = "MsApprox"
        displayName = "Latitude"
        doc = """latitude: Latitude in degrees.  Positive for north, negative
        for south.  Ranges frmo -90 to +90 degrees. This is ignored if
        month is 0."""
    )
    float longitude = -122.332 (
        displayGroup = "MsApprox"
        displayName = "Longitude"
        doc = """longitude: Longitude in degrees.  Positive for east, negative
        for west.  Ranges frmo -180 to +180 degrees.    This is ignored
        if month is 0."""
    )
    int month = 0 (
        displayGroup = "MsApprox"
        displayName = "Month"
        doc = """month: Month of the year, 1 through 12.      The default,
        0, means to use the explicitly given sun direction   instead of
        automatically computing it."""
    )
    color3f skyTint = (1, 1, 1) (
        displayGroup = "MsApprox"
        displayName = "Sky Tint"
        doc = """skyTint: Tweak the sky's contribution and color.  The
        default, white (1,1,1),  gives results based on measured
        physical values."""
    )
    vector3f sunDirection = (0, 0, 1) (
        displayGroup = "MsApprox"
        displayName = "Direction"
        doc = """sunDirection: The *apparent* direction towards the center
        of the sun. The zenith  is at +Y (for noon light) and the horizon
        is in the XZ plane (for  sunrise/set).  Note that the Y component
        must non- negative.  Ignored if a month is given."""
    )
    float sunSize = 1 (
        displayGroup = "MsApprox"
        displayName = "Sun Size"
        doc = """sunSize: Scale the apparent size of the sun in the sky.
        Leave at 1 for a  realistic sun size with an 0.55 degree
        angular diameter."""
    )
    color3f sunTint = (1, 1, 1) (
        displayGroup = "MsApprox"
        displayName = "Sun Tint"
        doc = """sunTint: Tweak the sun's contribution and color.  The
        default, white (1,1,1),  gives results based on measured
        physical values. Setting this to black removes the sun
        contribution."""
    )
    int year = 2015 (
        displayGroup = "MsApprox"
        displayName = "Year"
        doc = "year: Four-digit year.    This is ignored if month is 0."
    )
    float zone = -8 (
        displayGroup = "MsApprox"
        displayName = "Time Zone"
        doc = """zone: Standard time zone offset from GMT/UTC in hours.
        Positive for east,  negative for west.  For example, this would
        be -8 for Pacific time.    This is ignored if month is 0."""
    )
}

class PxrAovLight "PxrAovLight" (
    inherits = </Light>
)
{
    string aovName = "" (
        displayGroup = "Advanced"
        displayName = "AOV Name"
        doc = "The name of the AOV to write to."
    )
    bool inPrimaryHit = True (
        displayGroup = "Refine"
        displayName = "In Primvary Hit"
        doc = """If this is on, the usual mask of the illuminated objects
        is generated. If this is off, you can get a mask of only in the
        refraction or reflection."""
    )
    bool inReflection = False (
        displayGroup = "Refine"
        displayName = "In Reflection"
        doc = """If this is on, the rays are traced through the specular
        reflections to get  the masking signal.  Warning: this will
        require some amount of samples to get a clean mask."""
    )
    bool inRefraction = False (
        displayGroup = "Refine"
        displayName = "In Refraction"
        doc = """If this is on, the rays are traced through the glass
        refractions  to get the masking signal.  Warning: this will
        require some amount of samples to get a clean mask."""
    )
    bool invert = False (
        displayGroup = "Refine"
        displayName = "Invert"
        doc = "If this is on, it inverts the signal for the AOV."
    )
    bool onVolumeBoundaries = True (
        displayGroup = "Refine"
        displayName = "On Volume Boundaries"
        doc = """If this is on, the bounding box or shape of volumes will
        appear in the mask. Since this is not always desirable, this can
        be turned off."""
    )
    bool useColor = False (
        displayGroup = "Refine"
        displayName = "Use Color"
        doc = """If this is on, it outputs a RGB color image instead of a
        float image for the AOV."""
    )
    bool useThroughput = True (
        displayGroup = "Refine"
        displayName = "Use Throughput"
        doc = """If this is on, the values in the mask for the reflected
        or refracted rays will be affected by the strength of the reflection
        or refraction. This can lead to values below and above 1.0. Turn
        this off if you want a more solid mask."""
    )
}

#########################################################################
# Light filters

class PxrIntMultLightFilter "PxrIntMultLightFilter" (
    inherits = </LightFilter>
    doc = """Multiplies the intensity of a given light."""
) {
    # override the class defn in RiLightFilterAPI because the class default is 0.0
    float ri:intensity = 1 (
        doc = """Multipier for the light intensity.
	This setting is meant to override the fallback value in RiLightFilterAPI"""
    )
    float color:saturation = 1 (
        doc = """Saturation of the light before hitting the surface (0=greyscale,1=normal,
	>1=boosted colors)."""
    )
}

class PxrBarnLightFilter "PxrBarnLightFilter" (
    inherits = </LightFilter>
    doc = """Simulated geometric barn doors that control the spread of light."""
) {
    token barnMode = "physical" (
        allowedTokens = ["physical", "analytic"]
        doc = """Chooses a physical or analytic evaluation model for
        the barn."""
    )
    float width = 1 (
        doc = """Width of the inner region of the barn (X axis)."""
    )
    float height = 1 (
        doc = """Height of the inner region of the barn (Y axis)."""
    )
    float radius = 0.5 (
        doc = """Radius of the corners of the inner barn square."""
    )
    bool analytic:directional = false (
        doc = """When this is on, the texture projects along a direction
        using the orthographic projection. When it is off, the texture
        projects using a focal point specified by the analytic:apex."""
    )
    float analytic:shearX = 0 (
        doc = """Shear the projection along the X axis."""
    )
    float analytic:shearY = 0 (
        doc = """Shear the projection along the Y axis."""
    )
    float analytic:apex = 25 (
        doc = """Shear the projection along the Y axis."""
    )
    bool analytic:useLightDirection = false (
        doc = """When this is on, If this is on, the projection direction
        is determined by the position of the center of the light source.
        Otherwise, it only follows the orientation of the barn. WARNING:
        This does not work with dome and mesh lights."""
    )
    float analytic:density:nearDistance = 0 (
        doc = """Distance from the barn where the density
        interpolation starts."""
    )
    float analytic:density:farDistance = 0 (
        doc = """Distance from the barn where the density interpolation
        ends."""
    )
    float analytic:density:nearValue = 0 (
        doc = """Density multiplier where the density interpolation starts."""
    )
    float analytic:density:farValue = 1 (
        doc = """Density multiplier at the end of interpolation."""
    )
    float analytic:density:exponent = 1 (
        doc = """Power exponent of the density interpolation."""
    )
    float edgeThickness = 0 (
        doc = """Thickness of the edge region.  Larger values will
        soften the edge shape."""
    )
    token preBarnEffect = "noLight" (
        allowedTokens = ["noEffect", "cone", "noLight"]
        doc = """The effect on light before it reaches the barn
        geometry."""
    )
    float scale:width = 1 (
        doc = """Scale the width of the inner barn shape."""
    )
    float scale:height = 1 (
        doc = """Scale the height of the inner barn shape."""
    )
    float refine:top = 0 (
        doc = """Additional offset adjustment to the top region."""
    )
    float refine:bottom = 0 (
        doc = """Additional offset adjustment to the top region."""
    )
    float refine:left = 0 (
        doc = """Additional offset adjustment to the left region."""
    )
    float refine:right = 0 (
        doc = """Additional offset adjustment to the left region."""
    )
    float edgeScale:top = 1 (
        doc = """Additional edge scale adjustment to the top region."""
    )
    float edgeScale:bottom = 1 (
        doc = """Additional edge scale adjustment to the top region."""
    )
    float edgeScale:left = 1 (
        doc = """Additional edge scale adjustment to the left region."""
    )
    float edgeScale:right = 1 (
        doc = """Additional edge scale adjustment to the left region."""
    )
}

class PxrCookieLightFilter "PxrCookieLightFilter" (
    inherits = </LightFilter>
    doc = """A textured surface that filters light."""
) {
    token cookieMode = "physical" (
        allowedTokens = ["physical", "analytic"]
        doc = """Chooses a physical or analytic evaluation model for
        the cookie:
        - physical: The cookie behaves like a stained glass window
          through which light falls. The falloff and blur are determined
          by the size of the light, the distance to the light and distance
          from the cookie.
        - analytic: The cookie has a fixed p
nt. As an object-oriented language,
Python aims to encourage the creation of reusable code. Even if we all wrote
perfect documentation all of the time, code can hardly be considered reusable
if it's not readable. Many of Python's features, in addition to its use of
indentation, conspire to make Python code highly readable. This reflects the
philosophy of ABC, which was intended to teach programming in its purest form,
and therefore placed a high value on clarity.

Readability is often enhanced by reducing unnecessary variability. When
possible, there's a single, obvious way to code a particular construct. This
reduces the number of choices facing the programmer who is writing the code,
and increases the chance that will appear familiar to a second programmer
reading it. Yet another contribution to Python's readability is the choice to
use punctuation mostly in a conservative, conventional manner. Most operator
symbols are familiar to anyone with even a vague recollection of high school
math, and no new meanings have to be learned for comic strip curse characters
like @&$!.

I will gladly admit that Python is not the fastest running scripting language.
It is a good runner-up though. With ever-increasing hardware speed, the
accumulated running time of a program during its lifetime is often negligible
compared to the programmer time needed to write and debug it. This, of course,
is where the real savings can be made. While this is hard to assess
objectively, Python is considered a winner in coding time by most who have
tried it. In addition, many consider using Python a pleasure -- a better
recommendation is hard to imagine.

I am solely responsible for Python's strengths and shortcomings, even when some
of the code has been written by others. However, its success is the product of
a community, starting with the early adopters who picked it up when I first
published Python on the net, and who spread the word about it in their own
environment. They sent me their praise, criticism, feature requests, code
contributions, and personal revelations via email. They were willing to discuss
every aspect of Python in the mailing list that I soon set up, and educate me
or nudge me in the right direction where my initial intuition failed me. There
have been too many contributors to thank individually. I'll make one exception,
however: this book's author was one of Python's early adopters and evangelists.
With its publication, his longstanding wish (and mine!) of having a more
accessible description of Python than the standard set of manuals, is
fulfilled.

But enough rambling. I highly recommend this book
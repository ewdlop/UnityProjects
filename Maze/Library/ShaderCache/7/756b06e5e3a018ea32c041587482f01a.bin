//---------------------------------------------------------------------
// <copyright file="ViewKeyConstraint.cs" company="Microsoft">
//      Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>
//
// @owner Microsoft
// @backupOwner Microsoft
//---------------------------------------------------------------------

namespace System.Data.Mapping.ViewGeneration.Validation
{
    using System.Collections.Generic;
    using System.Data.Common.Utils;
    using System.Data.Entity;
    using System.Data.Mapping.ViewGeneration.Structures;
    using System.Data.Mapping.ViewGeneration.Utils;
    using System.Data.Metadata.Edm;
    using System.Text;

    // Class representing a key constraint on the view cell relations
    internal class ViewKeyConstraint : KeyConstraint<ViewCellRelation, ViewCellSlot>
    {


        #region Constructor
        //  effects: Constructs a key constraint for the given relation and keyslots
        internal ViewKeyConstraint(ViewCellRelation relation, IEnumerable<ViewCellSlot> keySlots) :
            base(relation, keySlots, ProjectedSlot.EqualityComparer)
        {
        }
        #endregion

        #region Properties
        // effects: Returns the cell corresponding to this constraint
        internal Cell Cell
        {
            get { return CellRelation.Cell; }
        }
        #endregion

        #region Methods
        internal bool Implies(ViewKeyConstraint second)
        {
            if (false == Object.ReferenceEquals(CellRelation, second.CellRelation))
            {
                return false;
            }
            // Check if the slots in this key are a subset of slots in
            // second. If it is a key in this e.g., <A.pid> then <A.pid,
            // A.foo> is certainly a key as well

            if (KeySlots.IsSubsetOf(second.KeySlots))
            {
                return true;
            }

            // Now check for subsetting taking referential constraints into account
            // Check that each slot in KeySlots can be found in second.KeySlots if we take
            // slot equivalence into account

            Set<ViewCellSlot> secondKeySlots = new Set<ViewCellSlot>(second.KeySlots);

            foreach (ViewCellSlot firstSlot in KeySlots)
            {
                bool found = false; // Need to find a match for firstSlot

                foreach (ViewCellSlot secondSlot in secondKeySlots)
                {
                    if (ProjectedSlot.Equal
 keyAlgorithmParameters.ToHexStringUpper ();
		}

		public virtual byte[] GetPublicKey ()
		{
			ThrowIfInvalid ();

			byte[] publicKey = lazyPublicKey;
			if (publicKey == null)
				publicKey = lazyPublicKey = Impl.PublicKeyValue;
			return publicKey.CloneByteArray ();
		}

		public virtual byte[] GetSerialNumber ()
		{
			ThrowIfInvalid ();
			byte[] serialNumber = GetRawSerialNumber ().CloneByteArray ();
			// PAL always returns big-endian, GetSerialNumber returns little-endian
			Array.Reverse (serialNumber);
			return serialNumber;
		}

		public virtual string GetSerialNumberString ()
		{
			ThrowIfInvalid ();
			// PAL always returns big-endian, GetSerialNumberString returns big-endian too
			return GetRawSerialNumber ().ToHexStringUpper ();
		}

		// Only use for internal purposes when the returned byte[] will not be mutated
		byte[] GetRawSerialNumber ()
		{
			return lazySerialNumber ?? (lazySerialNumber = Impl.SerialNumber);
		}

		// See https://github.com/dotnet/corefx/issues/30544
		[Obsolete ("This method has been deprecated.  Please use the Subject property instead.  http://go.microsoft.com/fwlink/?linkid=14202")]
		public virtual string GetName ()
		{
			ThrowIfInvalid ();
			return Impl.LegacySubject;
		}

		// See https://github.com/dotnet/corefx/issues/30544
		[Obsolete ("This method has been deprecated.  Please use the Issuer property instead.  http://go.microsoft.com/fwlink/?linkid=14202")]
		public virtual string GetIssuerName ()
		{
			ThrowIfInvalid ();
			return Impl.LegacyIssuer;
		}

		public override string ToString ()
		{
			return ToString (fVerbose: false);
		}

		public virtual string ToString (bool fVerbose)
		{
			if (!fVerbose || !X509Helper.IsValid (impl))
				return base.ToString ();

			StringBuilder sb = new StringBuilder ();

			// Subject
			sb.AppendLine ("[Subject]");
			sb.Append ("  ");
			sb.AppendLine (Subject);

			// Issuer
			sb.AppendLine ();
			sb.AppendLine ("[Issuer]");
			sb.Append ("  ");
			sb.AppendLine (Issuer);

			// Serial Number
			sb.AppendLine ();
			sb.AppendLine ("[Serial Number]");
			sb.Append ("  ");
			byte[] serialNumber = GetSerialNumber ();
			Array.Reverse (serialNumber);
			sb.Append (serialNumber.ToHexArrayUpper ());
			sb.AppendLine ();

			// NotBefore
			sb.AppendLine ();
			sb.AppendLine ("[Not Before]");
			sb.Append ("  ");
			sb.AppendLine (FormatDate (GetNotBefore ()));

			// NotAfter
			sb.AppendLine ();
			sb.AppendLine ("[Not After]");
			sb.Append ("  ");
			sb.AppendLine (FormatDate (GetNotAfter ()));

			// Thumbprint
			sb.AppendLine ();
			sb.AppendLine ("[Thumbprint]");
			sb.Append ("  ");
			sb.Append (GetRawCertHash ().ToHexArrayUpper ());
			sb.AppendLine ();

			return sb.ToString ();
		}

		[ComVisible (false)]
		public virtual void Import (byte[] rawData)
		{
			throw new PlatformNotSupportedException (S
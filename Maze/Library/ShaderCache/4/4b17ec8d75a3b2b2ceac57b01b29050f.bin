            }
        }
    }

#if MONO
    class RequestCacheValidator
    {
        public object CreateValidator ()
        {
            throw new NotImplementedException ();
        }
    }

    class RequestCachingSectionInternal
    {
        // TODO: Implement
        public readonly bool DisableAllCaching = true;
    }
#endif

    //
    //
    internal class RequestCacheBinding  {
        private RequestCache          m_RequestCache;
        private RequestCacheValidator m_CacheValidator;
        private RequestCachePolicy    m_Policy;


        internal RequestCacheBinding (RequestCache requestCache, RequestCacheValidator cacheValidator, RequestCachePolicy  policy) {
            m_RequestCache = requestCache;
            m_CacheValidator = cacheValidator;
            m_Policy = policy;
        }

        internal RequestCache Cache {
            get {return m_RequestCache;}
        }

        internal RequestCacheValidator Validator {
            get {return m_CacheValidator;}
        }

        internal RequestCachePolicy Policy {
            get {retu
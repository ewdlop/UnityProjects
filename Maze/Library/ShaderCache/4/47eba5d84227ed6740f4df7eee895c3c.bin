enableSsl]; }
            set { this[this.enableSsl] = value; }
        }

	        
        // 



        ConfigurationPropertyCollection properties = new ConfigurationPropertyCollection();

        readonly ConfigurationProperty defaultCredentials =
            new ConfigurationProperty(ConfigurationStrings.DefaultCredentials, typeof(bool), false,
                    ConfigurationPropertyOptions.None);

        readonly ConfigurationProperty host =
            new ConfigurationProperty(ConfigurationStrings.Host, typeof(string), null,
                    ConfigurationPropertyOptions.None);

        readonly ConfigurationProperty clientDomain =
            new ConfigurationProperty(ConfigurationStrings.ClientDomain, typeof(string), null,
                    ConfigurationPropertyOptions.None);

        readonly ConfigurationProperty password =
            new ConfigurationProperty(ConfigurationStrings.Password, typeof(string), null,
                    ConfigurationPropertyOptions.None);

        readonly ConfigurationProperty port =
            new ConfigurationProperty(ConfigurationStrings.Port, typeof(int), 25,
                    null, new IntegerValidator(IPEndPoint.MinPort+1, IPEndPoint.MaxPort), ConfigurationPropertyOptions.None);

        readonly ConfigurationProperty userName =
            new ConfigurationProperty(ConfigurationStrings.UserName, typeof(string), null,
                    ConfigurationPropertyOptions.None);

        readonly ConfigurationProperty targetName =
            new ConfigurationProperty(ConfigurationStrings.TargetName, typeof(string), null, ConfigurationPropertyOptions.None);

        readonly ConfigurationProperty enableSsl =
            new ConfigurationProperty(ConfigurationStrings.EnableSsl, typeof(bool), false,
                    ConfigurationPropertyOptions.None);

    }

    internal sealed class SmtpNetworkElementInternal
    {
        internal SmtpNetworkElementInternal(SmtpNetworkElement element)
        {
            this.host = element.Host;
            this.port = element.Port;
            this.targetname = element.TargetName;
            this.clientDomain = element.ClientDomain;
            this.enableSsl = element.EnableSsl;

            if (element.DefaultCredentials)
            {
                this.credential = (NetworkCredential)CredentialCache.DefaultCredentials;
            }
            else if (element.UserName != null && element.UserName.Length > 0)
            {
                this.credential = new NetworkCredential(element.UserName, element.Password);
            }

        }

        internal NetworkCredential Credential
        {
            get { return this.credential; }
        }

        internal string Host
        {
            get { return this.host; }
        }

        internal string ClientDomain
        {
            get { return this.clientDomain; }
        }

        internal int Port
        {
            get { return this.port; }
        }

        internal string TargetName
        {
            get { return
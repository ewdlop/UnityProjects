// This code contains NVIDIA Confidential Information and is disclosed to you
// under a form of NVIDIA software license agreement provided separately to you.
//
// Notice
// NVIDIA Corporation and its licensors retain all intellectual property and
// proprietary rights in and to this software and related documentation and
// any modifications thereto. Any use, reproduction, disclosure, or
// distribution of this software and related documentation without an express
// license agreement from NVIDIA Corporation is strictly prohibited.
//
// ALL NVIDIA DESIGN SPECIFICATIONS, CODE ARE PROVIDED "AS IS.". NVIDIA MAKES
// NO WARRANTIES, EXPRESSED, IMPLIED, STATUTORY, OR OTHERWISE WITH RESPECT TO
// THE MATERIALS, AND EXPRESSLY DISCLAIMS ALL IMPLIED WARRANTIES OF NONINFRINGEMENT,
// MERCHANTABILITY, AND FITNESS FOR A PARTICULAR PURPOSE.
//
// Information and code furnished is believed to be accurate and reliable.
// However, NVIDIA Corporation assumes no responsibility for the consequences of use of such
// information or for any infringement of patents or other rights of third parties that may
// result from its use. No license is granted by implication or otherwise under any patent
// or patent rights of NVIDIA Corporation. Details are subject to change without notice.
// This code supersedes and replaces all information previously supplied.
// NVIDIA Corporation products are not authorized for use as critical
// components in life support devices or systems without express written approval of
// NVIDIA Corporation.
//
// Copyright (c) 2008-2017 NVIDIA Corporation. All rights reserved.

// This file was generated by NvParameterized/scripts/GenParameterized.pl


#ifndef HEADER_ClothingAssetParameters_0p4_h
#define HEADER_ClothingAssetParameters_0p4_h

#include "NvParametersTypes.h"

#ifndef NV_PARAMETERIZED_ONLY_LAYOUTS
#include "nvparameterized/NvParameterized.h"
#include "nvparameterized/NvParameterizedTraits.h"
#include "NvParameters.h"
#include "NvTraitsInternal.h"
#endif

namespace nvidia
{
namespace parameterized
{

#if PX_VC
#pragma warning(push)
#pragma warning(disable: 4324) // structure was padded due to __declspec(align())
#endif

namespace ClothingAssetParameters_0p4NS
{

struct BoneEntry_Type;
struct ActorEntry_Type;
struct CookedEntry_Type;
struct SimulationParams_Type;

struct REF_DynamicArray1D_Type
{
	NvParameterized::Interface** buf;
	bool isAllocated;
	int32_t elementSize;
	int32_t arraySizes[1];
};

struct BoneEntry_DynamicArray1D_Type
{
	BoneEntry_Type* buf;
	bool isAllocated;
	int32_t elementSize;
	int32_t arraySizes[1];
};

struct ActorEntry_DynamicArray1D_Type
{
	ActorEntry_Type* buf;
	bool isAllocated;
	int32_t elementSize;
	int32_t arraySizes[1];
};

struct VEC3_DynamicArray1D_Type
{
	physx::PxVec3* buf;
	bool isAllocated;
	int32_t elementSize;
	int32_t arraySizes[1];
};

struct CookedEntry_DynamicArray1D_Type
{
	CookedEntry_Type* buf;
	bool isAllocated;
	int32_t elementSize;
	int32_t arraySizes[1];
};

struct SimulationParams_Type
{
	uint32_t hierarchicalLevels;
	float thickness;
	float selfcollisionThickness;
	physx::PxVec3 gravityDirection;
	float sleepLinearVelocity;
	bool disableCCD;
	bool untangling;
	bool selfcollision;
	bool twowayInteraction;
};
struct CookedEntry_Type
{
	float scale;
	NvParameterized::Interface* cookedData;
};
struct BoneEntry_Type
{
	int32_t internalIndex;
	int32_t externalIndex;
	uint32_t numMeshReferenced;
	uint32_t numRigidBodiesReferenced;
	int32_t parentIndex;
	float bindPose[12];
	NvParameterized::DummyStringStruct name;
};
struct ActorEntry_Type
{
	int32_t boneIndex;
	uint32_t convexVerticesStart;
	uint32_t convexVerticesCount;
	float capsuleRadius;
	float capsuleHeight;
	float localPose[12];
};

struct ParametersStruct
{

	REF_DynamicArray1D_Type physicalMeshes;
	REF_DynamicArray1D_Type graphicalLods;
	SimulationParams_Type simulation;
	BoneEntry_DynamicArray1D_Type bones;
	uint32_t bonesReferenced;
	uint32_t bonesReferencedByMesh;
	ActorEntry_DynamicArray1D_Type boneActors;
	VEC3_DynamicArray1D_Type boneVertices;
	CookedEntry_DynamicArray1D_Type cookedData;
	physx::PxBounds3 boundingBox;
	NvParameterized::Interface* materialLibrary;
	uint32_t materialIndex;

};

static const uint32_t checksum[] = { 0xfb509bc0, 0x1f80b5fa, 0x4ebbea14, 0x8c9c33b5, };

} // namespace ClothingAssetParameters_0p4NS

#ifndef NV_PARAMETERIZED_ONLY_LAYOUTS
class ClothingAssetParameters_0p4 : public NvParameterized::NvParameters, public ClothingAssetParameters_0p4NS::ParametersStruct
{
public:
	ClothingAssetParameters_0p4(NvParameterized::Traits* traits, void* buf = 0, int32_t* refCount = 0);

	virtual ~ClothingAssetParameters_0p4();

	virtual void destroy();

	static const char* staticClassName(void)
	{
		return("ClothingAssetParameters");
	}

	const char* className(void) const
	{
		return(staticClassName());
	}

	static const uint32_t ClassVersion = ((uint32_t)0 << 16) + (uint32_t)4;

	static uint32_t staticVersion(void)
	{
		return ClassVersion;
	}

	uint32_t version(void) const
	{
		return(staticVersion());
	}

	static const uint32_t ClassAlignment = 8;

	static const uint32_t* staticChecksum(uint32_t& bits)
	{
		bits = 8 * sizeof(ClothingAssetParameters_0p4NS::checksum);
		return ClothingAssetParameters_0p4NS::checksum;
	}

	static void freeParameterDefinitionTable(NvParameterized::Traits* traits);

	const uint32_t* checksum(uint32_t& bits) const
	{
		return staticChecksum(bits);
	}

	const ClothingAssetParameters_0p4NS::ParametersStruct& parameters(void) const
	{
		Clothin
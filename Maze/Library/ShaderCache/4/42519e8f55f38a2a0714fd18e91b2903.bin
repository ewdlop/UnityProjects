using System;
using System.Collections;
using System.Collections.Generic;

class Program
{
	public static void Main ()
	{
		SerializeDictionary (new SerializerLazyDictionary ());
	}

	static void SerializeDictionary (IDictionary values)
	{
	}

	static void SerializeDictionary (IDictionary<string, object> values)
	{
	}
}

sealed class SerializerLazyDictionary : LazyDictionary
{
	protected override IEnumerator<KeyValuePair<string, object>> GetEnumerator ()
	{
		return null;
	}
}

internal abstract class LazyDictionary : IDictionary<string, object>
{
	void IDictionary<string, object>.Add (string key, object value)
	{
		throw new NotSupportedException ();
	}

	bool IDictionary<string, object>.ContainsKey (string key)
	{
		throw new NotSupportedException ();
	}

	ICollection<string> IDictionary<string, object>.Keys
	{
		get { throw new NotSupportedException (); }
	}

	bool IDictionary<string, object>.Remove (string key)
	{
		throw new NotSupportedException ();
	}

	bool IDictionary<string, object>.TryGetValue (string key, out object value)
	{
		throw new NotSupportedException ();
	}

	ICollection<object> IDictionary
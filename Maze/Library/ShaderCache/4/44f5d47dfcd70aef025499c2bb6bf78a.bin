ull) {
                    stream.Close();
                }
            }
            if(Logging.On)Logging.Exit(Logging.Web, this, "Close", "");
        }

        /// <summary>
        /// <para>Queries the length of the response</para>
        /// </summary>
        public override long ContentLength {
            get {
                if (HttpProxyMode) {
                    return m_HttpWebResponse.ContentLength;
                }
                return m_ContentLength;
            }
        }
        internal void SetContentLength(long value)
        {
            if (HttpProxyMode)
                return; //m_HttpWebResponse.ContentLength = value;
            m_ContentLength = value;
        }


        /// <devdoc>
        /// <para>
        /// A collection of headers, currently nothing is return except an empty collection
        /// </para>
        /// </devdoc>
        public override WebHeaderCollection Headers {
            get {
                if (HttpProxyMode) {
                    return m_HttpWebResponse.Headers;
                }

                if (m_FtpRequestHeaders == null) {
                    lock(this) {
                        if (m_FtpRequestHeaders == null) {
                            m_FtpRequestHeaders         = new WebHeaderCollection(WebHeaderCollectionType.FtpWebResponse);
                        }
                    }
                }
                return m_FtpRequestHeaders;
            }
        }
        
        // For portability only
        public override bool SupportsHeaders {
            get {
                return true;
            }
        }

        /// <summary>
        /// <para>Shows the final Uri that the FTP request ended up on</para>
        /// </summary>
        public override Uri ResponseUri {
            get {
                if (HttpProxyMode) {
                    return m_HttpWebResponse.ResponseUri;
                }
                return m_ResponseUri;
            }
        }


        /// <summary>
        /// <para>Last status code retrived</para>
        /// </summary>
        public FtpStatusCode StatusCode {
            get {
                if (HttpProxyMode) {
                    return ((FtpStatusCode) ((int) m_HttpWebResponse.StatusCode));
                }
                return m_StatusCode;
            }
        }

        /// <summary>
        /// <para>Last status line retrived</para>
        /// </summary>
        public string StatusDescription {
            get {
                if (HttpProxyMode) {
                    return m_HttpWebResponse.StatusDescription;
              
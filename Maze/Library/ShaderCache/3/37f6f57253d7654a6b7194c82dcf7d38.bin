or;
		Section->bFadeAudio = MatineeFadeTrack->bFadeAudio;
	}

	return bSectionCreated;
}

bool FMatineeImportTools::CopyInterpDirectorTrack( UInterpTrackDirector* DirectorTrack, UMovieSceneCameraCutTrack* CameraCutTrack, AMatineeActor* MatineeActor, IMovieScenePlayer& Player )
{
	const FScopedTransaction Transaction( NSLOCTEXT( "Sequencer", "PasteMatineeDirectorTrack", "Paste Matinee Director Track" ) );
	bool bCutsAdded = false;

	FFrameRate FrameRate = CameraCutTrack->GetTypedOuter<UMovieScene>()->GetTickResolution();

	CameraCutTrack->Modify();
	
	for (FDirectorTrackCut TrackCut : DirectorTrack->CutTrack)
	{
		int32 GroupIndex = MatineeActor->MatineeData->FindGroupByName(TrackCut.TargetCamGroup);
		
		UInterpGroupInst* ViewGroupInst = (GroupIndex != INDEX_NONE) ? MatineeActor->FindFirstGroupInstByName( TrackCut.TargetCamGroup.ToString() ) : NULL;
		if ( GroupIndex != INDEX_NONE && ViewGroupInst )
		{
			// Find a valid move track for this cut.
			UInterpGroup* Group = MatineeActor->MatineeData->InterpGroups[GroupIndex];
			if (Group)
			{
				AActor* CameraActor = ViewGroupInst->GetGroupActor();
		
				FGuid CameraHandle = Player.FindObjectId(*CameraActor, MovieSceneSequenceID::Root);
				if (CameraHandle.IsValid())
				{
					FMovieSceneObjectBindingID CameraBindingID(CameraHandle, MovieSceneSequenceID::Root);
					CameraCutTrack->AddNewCameraCut(CameraBindingID, (TrackCut.Time * FrameRate).RoundToFrame());
					bCutsAdded = true;
				}
			}
		}
	}

	return bCutsAdded;
}

bool FMatineeImportTools::CopyInterpEventTrack( UInterpTrackEvent* MatineeEventTrack, UMovieSceneEventTrack* EventTrack )
{
	const FScopedTransaction Transaction( NSLOCTEXT( "Sequencer", "PasteMatineeEventTrack", "Paste Matinee Event Track" ) );
	bool bSectionCreated = false;

	EventTrack->Modify();

	if (MatineeEventTrack->EventTrack.Num())
	{
		FFrameRate   FrameRate    = EventTrack->GetTypedOuter<UMovieScene>()->GetTickResolution();
		FFrameNumber FirstKeyTime = (MatineeEventTrack->EventTrack[0].Time * FrameRate).RoundToFrame();

		UMovieSceneEventTriggerSection* Section = Cast<UMovieSceneEventTriggerSection>( MovieSceneHelpers::FindSectionAtTime( EventTrack->GetAllSections(), FirstKeyTime ) );
		if ( Section == nullptr )
		{
			Section = Cast<UMovieSceneEventTriggerSection>( EventTrack->CreateNewSection() );
			Section->SetRange(TRange<FFrameNumber>::All());
			EventTrack->AddSection(*Section);
			bSectionCreated = true;
		}

		UMovieSceneSequence* Sequence = Section->GetTypedOuter<UMovieSceneSequence>();
		if (Section->TryModify())
		{
			FMovieSceneSequenceEditor* SequenceEditor = FMovieSceneSequenceEditor::Find(Sequence);
			UBlueprint* SequenceDirectorBP = SequenceEditor  ? SequenceEditor->GetOrCreateDirectorBlueprint(Sequence) : nullptr;
			if (SequenceDirectorBP)
			{
				SequenceDirectorBP->Modify();
				FMovieSceneEventUtils::BindEventSectionToBlueprint(Section, SequenceDirectorBP);
			}

			TRange<FFrameNumber> KeyRange = TRange<FFrameNumber>::Empty();

			FMovieSceneEventChannel* EventChannel = Section->GetChannelProxy().GetChannel<FMovieSceneEventChannel>(0);
			check(EventChannel);
			TMovieSceneChannelData<FMovieSceneEvent> ChannelData = EventChannel->GetData();
			TMap<FName, UK2Node_CustomEvent*> EventMap;

			for (const FEventTrackKey& EventTrackKey : MatineeEventTrack->EventTrack)
			{
				FFrameNumber KeyTime = (EventTrackKey.Time * FrameRate).RoundToFrame();

				FMovieSceneEvent Event;

				UK2Node_CustomEvent* ExistingEndpoint = EventMap.FindRef(EventTrackKey.EventName);
				if (ExistingEndpoint)
				{
					FMovieSceneEventUtils::SetEndpoint(&Event, Section, ExistingEndpoint, nullptr);
				}
				else if (SequenceDirectorBP)
				{
					FMovieSceneEventEndpointParameters Params;
					Params.SanitizedEventName = TEXT("MatineeEvent");

					UK2Node_CustomEvent* NewEndpoint = FMovieSceneEventUtils::CreateUserFacingEvent(SequenceDirectorBP, Params);
					EventMap.Add(EventTrackKey.EventName, NewEndpoint);

					FMovieSceneEventUtils::SetEndpoint(&Event, Section, NewEndpoint, nullptr);
				}

				ChannelData.AddKey(KeyTime, Event);
			}
		}
	}	
	
	return bSectionCreated;
}

bool FMatineeImportTools::CopyInterpVisibilityTrack( UInterpTrackVisibility* MatineeVisibilityTrack, UMovieSceneVisibilityTrack* VisibilityTrack )
{
	const FScopedTransaction Transaction( NSLOCTEXT( "Sequencer", "PasteMatineeVisibilityTrack", "Paste Matinee Visibility track" ) );
	bool bSectionCreated = false;

	VisibilityTrack->Modify();

	if (MatineeVisibilityTrack->VisibilityTrack.Num())
	{
		FFrameRate   FrameRate    = VisibilityTrack->GetTypedOuter<UMovieScene>()->GetTickResolution();
		FFrameNumber FirstKeyTime = (MatineeVisibilityTrack->GetKeyframeTime( 0 ) * FrameRate).RoundToFrame();

		UMovieSceneBoolSection* Section = Cast<UMovieSceneBoolSection>( MovieSceneHelpers::FindSectionAtTime( VisibilityTrack->GetAllSections(), FirstKeyTime ) );
		if ( Section == nullptr )
		{
			Section = Cast<UMovieSceneBoolSection>( VisibilityTrack->CreateNewSection() );
			VisibilityTrack->AddSection( *Section );
			bSectionCreated = true;
		}
		if (Section->TryModify())
		{
			TRange<FFrameNumber> KeyRange = TRange<FFrameNumber>::Empty();

			bool bVisible = true;

			FMovieSceneBoolChannel* VisibilityChannel = Section->GetChannelProxy().GetChannel<FMovieSceneBoolChannel>(0);
			check(VisibilityChannel);
			TMovieSceneChannelData<bool> ChannelData = VisibilityChannel->GetData();

			for (FVisibilityTrackKey VisibilityTrackKey : MatineeVisibilityTrack->VisibilityTrack)
			{
				if (VisibilityTrackKey.Action == EVisibilityTrackAction::EVTA_Hide)
				{
					bVisible = false;
				}
				else if (VisibilityTrackKey.Action == EVisibilityTrackAction::EVTA_Show)
				{
					bVisible = true;
				}
				else if (VisibilityTrackKey.Action == EVisibilityTrackAction::EVTA_Toggle)
				{
					bVisible = !bVisible;
				}

				FFrameNumber KeyTime = (VisibilityTrackKey.Time * FrameRate).RoundToFrame();

				ChannelData.UpdateOrAddKey(KeyTime, bVisible);

				Key
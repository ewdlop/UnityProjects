 public override int GetHashCode()
        {
            return HashUtility.CombineHash(
                errorText != null ? errorText.GetHashCode() : 0,
                tooltip != null ? tooltip.GetHashCode() : 0,
                highlightColor.GetHashCode(),
                icons != null ? icons.GetHashCode() : 0
            );
        }

        public static bool operator==(ClipDrawOptions options1, ClipDrawOptions options2)
        {
            return options1.Equals(options2);
        }

        public static bool operator!=(ClipDrawOptions options1, ClipDrawOptions options2)
        {
            return !options1.Equals(options2);
        }
    }


    /// <summary>
    /// Use this class to customize clip types in the TimelineEditor.
    /// </summary>
    public class ClipEditor
    {
        static readonly string k_NoPlayableAssetError = LocalizationDatabase.GetLocalizedString("This clip does not contain a valid playable asset");
        static readonly string k_ScriptLoadError = LocalizationDatabase.GetLocalizedString("The associated script can not be loaded");

        internal readonly bool supportsSubTimelines;

        /// <summary>
        /// Default constructor
        /// </summary>
        public ClipEditor()
        {
            supportsSubTimelines = TypeUtility.HasOverrideMethod(GetType(), nameof(GetSubTimelines));
        }

        /// <summary>
        /// Implement this method to override the default options for drawing a clip.
        /// </summary>
        /// <param name="clip">The clip being drawn.</param>
        /// <returns>The options for drawing a clip.</returns>
        public virtual ClipDrawOptions GetClipOptions(TimelineClip clip)
        {
            return new ClipDrawOptions()
            {
                errorText = GetErrorText(clip),
                tooltip = string.Empty,
                highlightColor = GetDefaultHighlightColor(clip),
                icons = System.Linq.Enumerable.Empty<Texture2D>()
            };
        }

        /// <summary>
        /// Override this method to draw a background for a clip .
        /// </summary>
        /// <param name="clip">The clip being drawn.</param>
        /// <param name="region">The on-screen area where the clip is drawn.</param>
        public virtual void DrawBackground(TimelineClip clip, ClipBackgroundRegion region)
        {
        }

        /// <summary>
        /// Called when a clip is created.
        /// </summary>
        /// <param name="clip">The newly created clip.</param>
        /// <param name="track">The track that the clip is assigned to.</param>
        /// <param name="clonedFrom">The source that the clip was copied from. This can be set to null if the clip is not a copy.</param>
        /// <remarks>
        /// The callback occurs before the clip is assigned to the track.
        /// </remarks>
        public virtual void OnCreate(TimelineClip clip, TrackAsset track, TimelineClip clonedFrom)
        {
        }

        /// <summary>
        /// Gets the error text for the specified clip.
        /// </summary>
        /// <param name="clip">The clip being drawn.</param>
        /// <returns>Returns the error text to be displayed as the tool tip for the clip. If there is no error to be displayed, this method returns string.Empty.</returns>
        public string GetErrorText(TimelineClip clip)
        {
            if (clip == null || clip.asset == null)
                return k_NoPlayableAssetError;

            var playableAsset = clip.asset as ScriptableObje
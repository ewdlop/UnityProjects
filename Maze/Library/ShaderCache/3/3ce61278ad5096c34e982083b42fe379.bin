m", exp.oneElem, t.oneElem);
			AssertionHelper.AssertEqualsXml ("t.oneElem2", exp.oneElem2, t.oneElem2);
			
			// One of the elements was null and it is ignored
			Assert.IsNotNull (t.someElems, "t.someElems");
			Assert.AreEqual (2, t.someElems.Length, "t.someElems.Length");
			AssertionHelper.AssertEqualsXml ("t.someElems[0]", exp.someElems[0], t.someElems[0]);
			AssertionHelper.AssertEqualsXml ("t.someElems[1]", exp.someElems[2], t.someElems[1]);

			Assert.IsNotNull (t.extraElems, "t.extraElems");
			Assert.AreEqual (exp.extraElems.Length, t.extraElems.Length, "t.extraElems.Length");
			for (int n=0; n<exp.extraElems.Length; n++)
				AssertionHelper.AssertEqualsXml ("t.extraElems[" + n + "]", exp.extraElems[n], t.extraElems[n]);
			
			Assert.IsNotNull (t.extraElems23, "t.extraElems23");
			Assert.AreEqual (exp.extraElems23.Length, t.extraElems23.Length, "t.extraElems23.Length");
			for (int n=0; n<t.extraElems23.Length; n++)
				AssertionHelper.AssertEqualsXml ("t.extraElems23[" + n + "]", exp.extraElems23[n], t.extraElems23[n]);
			
			AssertionHelper.AssertEqualsXml ("t.extraElemsRest", exp.extraElemsRest, t.extraElemsRest);
			
			UnknownAttributeTester.AssertEquals ("t.uktester", exp.uktester, t.uktester);

			Assert.AreEqual (exp.ob3, t.ob3, "t.ob3");
			Assert.AreEqual (exp.ob4, t.ob4, "t.ob4");
			Assert.AreEqual (exp.op1, t.op1, "t.op1");
			
			AssertionHelper.AssertEqualsArray ("t.opArray", exp.opArray, t.opArray);

			Assert.AreEqual (exp.ukOpt, t.ukOpt, "t.ukOpt");
			Assert.AreEqual (exp.opAtt, t.opAtt, "t.opAtt");

			AssertionHelper.AssertEqualsArray ("t.byteArray", exp.byteArray, t.byteArray);
			AssertionHelper.AssertEqualsArray ("t.byteByteArray", exp.byteByteArray, t.byteByteArray);
			
			Assert.IsNotNull (t.ttList, "t.ttList");
			AssertionHelper.AssertEqualsArray ("t.ttList", exp.ttList.ToArray(), t.ttList.ToArray());
			
			Assert.IsNotNull (t.RoList, "t.RoList");
//			Assert.AreEqual (exp.RoList.Count, t.RoList.Count, "t.RoList.Count");
			for (int n=0; n<t.RoList.Count; n++)
				TestPart.AssertEquals ("t.RoList " + n, (TestPart)exp.RoList[n], (TestPart)t.RoList[n]);
			
			Assert.AreEqual (exp.struc.aa, t.struc.aa, "t.struc.aa");
			Assert.AreSame (exp.struc.cc, t.struc.cc, "t.struc.cc");

			Assert.IsNull (t.multiList, "t.multiList");
//			Assert.AreEqual (exp.multiList.Length, t.multiList.Length, "t.multiList.Count");
//			for (int n=0; n<exp.multiList.Length; n++)
//				AssertionHelper.AssertEqualsArray ("t.multiList " + n, exp.multiList[n].ToArray(), t.multiList[n].ToArray());
			
			Assert.AreEqual (exp.defElem, t.defElem, "t.defElem");
			Assert.AreEqual (exp.defAttr, t.defAttr, "t.defAttr");

			CustomHashtable.AssertEquals ("t.special", exp.special, t.special);

			Assert.AreEqual (exp.attqname, t.attqname, "t.attqname");

			Assert.IsNull (t.dbscontainer, "t.dbscontainer");
//			DblStringContainer tdbca = t.dbscontainer.at as DblStringContainer;
//			DblStringContainer expdbca = exp.dbscontainer.at as DblStringContainer;
//			Assert.IsNotNull (tdbca, "t.dbscontainer.at");
			
//			Assert.IsNotNull (tdbca, "t.dbscontainer.dbca");
//			AssertionHelper.AssertEqualsArray ("t.dbscontainer.at.doublestring", expdbca.doublestring, tdbca.doublestring);
			
//			AnotherTestPart tat = tdbca.at as AnotherTestPart;
//			AnotherTestPart expat = expdbca.at as AnotherTestPart;
//			Assert.IsNotNull (tat, "t.dbscontainer.dbca.at");
//			Assert.AreEqual (expat.lo, tat.lo, "t.dbscontainer.dbca.at.lo");
		}
		
		void CheckParts (string id, TestPart[] exp, TestPart[] parts)
		{
			AssertionHelper.AssertType (id, exp, parts);
			Assert.AreEqual (exp.Length, parts.Length, id + " Len");
			for (int n=0; n<exp.Length; n++)
				TestPart.AssertEquals (id + "[" + n + "]", exp[n], parts[n]);
		}
		
		void CheckTaArray (string id, TA[][][] exp, TA[][][] arr)
		{
			AssertionHelper.AssertType (id, exp, arr);
			Assert.AreEqual (exp.Length, arr.Length, id + " Len");
			for (int n=0; n<exp.Length; n++)
			{
				TA[][] tar = arr[n];
				TA[][] expar = exp[n];
				
				AssertionHelper.AssertType (id, expar, tar);
				Assert.AreEqual (expar.Length, tar.Length);
				
				for (int m=0; m<expar.Length; m++)
				{
					TA[] tar2 = tar[m];
					TA[] expar2 = expar[m];
					
					AssertionHelper.AssertType (id, expar2, tar2);
					Assert.AreEqual (expar2.Length, tar2.Length, id);
					
					for (int i=0; i<expar2.Length; i++)
						TA.AssertEquals (id +
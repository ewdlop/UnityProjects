// ==++==
// 
//   Copyright (c) Microsoft Corporation.  All rights reserved.
// 
// ==--==

//
// X509ChainElement.cs
//

namespace System.Security.Cryptography.X509Certificates {
    using System.Collections;
    using System.Runtime.InteropServices;

    public class X509ChainElement {
        private X509Certificate2 m_certificate;
        private X509ChainStatus[] m_chainStatus;
        private string m_description;

        private X509ChainElement () {}

#if FEATURE_CORESYSTEM
        [SecuritySafeCritical]
#endif
        internal unsafe X509ChainElement (IntPtr pChainElement) {
            CAPI.CERT_CHAIN_ELEMENT chainElement = new CAPI.CERT_CHAIN_ELEMENT(Marshal.SizeOf(typeof(CAPI.CERT_CHAIN_ELEMENT)));
            uint cbSize = (uint) Marshal.ReadInt32(pChainElement);
            if (cbSize > Marshal.SizeOf(chainElement))
                cbSize = (uint) Marshal.SizeOf(chainElement);
            X509Utils.memcpy(pChainElement, new IntPtr(&chainElement), cbSize);

            m_certificate = new X509Certificate2(chainElement.pCertContext);
            if (chainElement.pwszExtendedErrorInfo == IntPtr.Zero)
                m_description = String.Empty;
            else
                m_description = Marshal.PtrToStringUni(chainElement.pwszExtendedErrorInfo);

            // We give the user a reference to the array since we'll never access it.
            if (chainElement.dwErrorStatus == 0)
                m_chainStatus = new X509ChainStatus[0]; // empty array
            else
                m_chainStatus = X509Chain.GetChainStatusInformation(chainElement.dwErrorStatus);
        }

        public X509Certificate2 Certificate {
            get {
                return m_certificate;
            }
        }

        public X509ChainStatus[] ChainElementStatus {
            get {
                return m_chainStatus;
            }
        }

        public string Information {
            get {
                return m_description;
            }
        }
    }

    public sealed class X509ChainElementCollection : ICollection {
        private X509ChainElement[] m_elements;

        internal X509ChainElementCollection () {
            m_elements = new X509ChainElement[0];
        }

#if FEATURE_CORESYSTEM
        [SecuritySafeCritical]
#endif
        internal unsafe X509ChainElementCollection (IntPtr pSimpleChain) {
            CAPI.CERT_SIMPLE_CHAIN simpleChain = new CAPI.CERT_SIMPLE_CHAIN(Marshal.SizeOf(typeof(CAPI.CERT_SIMPLE_CHAIN)));
            uint cbSize = (uint) Ma
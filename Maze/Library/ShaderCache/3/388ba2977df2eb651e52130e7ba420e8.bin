CAPI.CRYPT_OID_INFO_NAME_KEY, m_friendlyName, m_group);
                    if (oidValue != null)
                        m_value = oidValue;
                }
            }
        }
    }

    public sealed class OidCollection : ICollection {
        private ArrayList m_list;

        public OidCollection() {
            m_list = new ArrayList();
        }

        public int Add(Oid oid) {
            return m_list.Add(oid);
        }

        public Oid this[int index] {
            get {
                return m_list[index] as Oid;
            }
        }

        // Indexer using an OID friendly name or value.
        public Oid this[string oid] {
            get {
                // If we were passed the friendly name, retrieve the value string.
                string oidValue = X509Utils.FindOidInfoWithFallback(CAPI.CRYPT_OID_INFO_NAME_KEY, oid, OidGroup.All);
                if (oidValue == null)
                    oidValue = oid;
                foreach (Oid entry in m_list) {
                    if (entry.Value == oidValue)
                        return entry;
                }
                return null;
            }
        }

        public int Count {
            get {
                return m_list.Count;
            }
        }

        public OidEnumerator GetEnumerator() {
            return new OidEnumerator(this);
        }

        /// <internalonly/>
        IEnumerator IEnumerable.GetEnumerator() {
            return new OidEnumerator(this);
        }

        /// <internalonly/>
        void ICollection.CopyTo(Array array, int index) {
            if (array == null)
                throw new ArgumentNullException("array");
            if (array.Rank != 1)
                throw new ArgumentException(SR.GetString(SR.Arg_RankMultiDimNotSupported));
            if (index < 0 || index >= array.Length)
                throw new ArgumentOutOfRangeException("index", SR.GetString(SR.ArgumentOutOfRange_Index));
            if (index + this.Count > array.Length)
                throw new ArgumentException(SR.GetString(SR.Argument_InvalidOffLen));

            for (int i=0; i < this.Count; i++) {
                array.SetValue(this[i], index);
                index++;
            }
        }

        public void CopyTo(Oid[] array, int index) {
            ((ICollection)this).CopyTo(array, index);
        }

        public bool IsSynchronized {
            g
mployeeTable");
			Assert.AreEqual (table, dc.Table, "#B1-1");
			Assert.AreEqual (dc.Table, dc.Column.Table, "#B1-2");
		}

		[Test]
		public void UIHint ()
		{
			var test = new WebTest ("ListView_DynamicControl_01.aspx");
			test.Invoker = PageInvoker.CreateOnLoad (UIHint_OnLoad);
			var p = test.Run ();
			Assert.IsNotNull (test.Response, "#X1");
			Assert.AreNotEqual (HttpStatusCode.NotFound, test.Response.StatusCode, "#X1-1{0}Returned HTML:{0}{1}", Environment.NewLine, p);
			Assert.AreNotEqual (HttpStatusCode.InternalServerError, test.Response.StatusCode, "#X1-2{0}Returned HTML:{0}{1}", Environment.NewLine, p);
			Assert.IsFalse (String.IsNullOrEmpty (p), "#X1-3");

			Assert.IsTrue (p.IndexOf ("<span class=\"field\">LastName</span>: <span class=\"customFieldTemplate\">") != -1, "#Y1");
			Assert.IsTrue (p.IndexOf ("<span class=\"field\">FirstName</span>: <span class=\"defaultTemplate\">") != -1, "#Y1-1");
		}

		static void UIHint_OnLoad (Page p)
		{
			var lc = p.FindControl ("ListView1") as ListView;
			Assert.IsNotNull (lc, "#A1");

			var dc = lc.FindChild<DynamicControl> ("FirstName");
			Assert.IsNotNull (dc, "#B1");
			Assert.AreEqual ("FirstName", dc.DataField, "#B1-1");

			// Changes below won't affect rendering - we're being called too late in the process
			// This is just to test if the property is settable, what are the defaults and whether
			// they can be overriden

			// No UIHint attribute on the associated field, no explicit setting
			Assert.AreEqual (String.Empty, dc.UIHint, "#C1");
			dc.UIHint = "MyCustomUIHintTemplate_Text";
			Assert.AreEqual ("MyCustomUIHintTemplate_Text", dc.UIHint, "#C1-1");

			dc = lc.FindChild<DynamicControl> ("LastName");
			Assert.IsNotNull (dc, "#D1");
			Assert.AreEqual ("LastName", dc.DataField, "#D1-1");

			// UIHint attribute found on the associated field
			Assert.AreEqual ("CustomFieldTemplate", dc.UIHint, "#D1-2");
			dc.UIHint = "MyCustomUIHintTemplate_Text";
			Assert.AreEqual ("MyCustomUIHintTemplate_Text", dc.UIHint, "#D1-3");

			dc.UIHint = null;
			Assert.AreEqual (String.Empty, dc.UIHint, "#E1");
		}

		[Test]
		public void UIHint_1 ()
		{
			var test = new WebTest ("ListView_DynamicControl_02.aspx");
			test.Invoker = PageInvoker.CreateOnLoad (UIHint_OnLoad_1);
			var p = test.Run ();
			Assert.IsNotNull (test.Response, "#X1");
			Assert.AreNotEqual (HttpStatusCode.NotFound, test.Response.StatusCode, "#X1-1{0}Returned HTML:{0}{1}", Environment.NewLine, p);
			Assert.AreNotEqual (HttpStatusCode.InternalServerError, test.Response.StatusCode, "#X1-2{0}Returned HTML:{0}{1}", Environment.NewLine, p);
			Assert.IsFalse (String.IsNullOrEmpty (p), "#X1-3");

			Assert.IsTrue (p.IndexOf ("<span class=\"field\">LastName</span>: <span class=\"myCustomUIHintTemplate_Text\">") != -1, "#Y1");
			Assert.IsTrue (p.IndexOf ("<span class=\"field\">FirstName</span>: <span class=\"defaultTemplate\">") != -1, "#Y1-1");
		}

		static void UIHint_OnLoad_1 (Page p)
		{
			var lc = p.FindControl ("ListView2") as ListView;
			Assert.IsNotNull (lc, "#A1");

			var dc = lc.FindChild<DynamicControl> ("FirstName2");
			Assert.IsNotNull (dc, "#B1");
			Assert.AreEqual ("FirstName", dc.DataField, "#B1-1");

			// No UIHint attribute on the associated field, no explicit setting
			Assert.AreEqual (String.Empty, dc.UIHint, "#C1");

			dc = lc.FindChild<DynamicControl> ("LastName2");
			Assert.IsNotNull (dc, "#D1");
			Assert.AreEqual ("LastName", dc.DataField, "#D1-1");

			// UIHint attribute found on the associated field but overriden in the page
			Assert.AreEqual ("MyCustomUIHintTemplate_Text", dc.UIHint, "#D1-2");
		}

		[Test]
		public void UIHint_2 ()
		{
			var test = new WebTest ("ListView_DynamicControl_08.aspx");
			test.Invoker = PageInvoker.CreateOnLoad (UIHint_OnLoad_2);
			var p = test.Run ();
			Assert.IsNotNull (test.Response, "#X1");
			Assert.AreNotEqual (HttpStatusCode.NotFound, test.Response.StatusCode, "#X1-1{0}Returned HTML:{0}{1}", Environment.NewLine, p);
			Assert.AreNotEqual (HttpStatusCode.InternalServerError, test.Response.StatusCode, "#X1-2{0}Returned HTML:{0}{1}", Environment.NewLine, p);
			Assert.IsFalse (String.IsNullOrEmpty (p
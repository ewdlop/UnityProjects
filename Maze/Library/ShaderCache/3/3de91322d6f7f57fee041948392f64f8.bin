Prefix
				"bar",		// LocalName
				String.Empty,	// NamespaceURI
				"bar",		// Name
				String.Empty,	// Value
				false,		// HasAttributes
				false,		// HasChildren
				true);		// IsEmptyElement

			Assert.IsTrue (nav.MoveToFirst (), "#1-2");

			AssertNavigator ("#2", nav,
				XPathNodeType.Element,
				String.Empty,	// Prefix
				"foo",		// LocalName
				String.Empty,	// NamespaceURI
				"foo",		// Name
				String.Empty,	// Value
				false,		// HasAttributes
				false,		// HasChildren
				true);		// IsEmptyElement
		}

		[Test]
		public void ReplaceSelf ()
		{
			XPathNavigator nav = GetInstance ("<root><foo>existing_child</foo></root>");
			nav.MoveToFirstChild ();
			nav.MoveToFirstChild (); // foo

			nav.ReplaceSelf ("<hijacker>hah, hah</hijacker><next/>");

			AssertNavigator ("#1", nav,
				XPathNodeType.Element,
				String.Empty,	// Prefix
				"hijacker",	// LocalName
				String.Empty,	// NamespaceURI
				"hijacker",	// Name
				"hah, hah",	// Value
				false,		// HasAttributes
				true,		// HasChildren
				false);		// IsEmptyElement

			Assert.IsTrue (nav.MoveToNext (), "#1-2");

			AssertNavigator ("#2", nav,
				XPathNodeType.Element,
				String.Empty,	// Prefix
				"next",		// LocalName
				String.Empty,	// NamespaceURI
				"next",		// Name
				String.Empty,	// Value
				false,		// HasAttributes
				false,		// HasChildren
				true);		// IsEmptyElement
		}

		[Test]
		// possible internal behavior difference e.g. due to ReadNode()
		public void ReplaceSelfXmlReaderInteractive ()
		{
			XPathNavigator nav = GetInstance ("<root><foo>existing_child</foo></root>");
			nav.MoveToFirstChild ();
			nav.MoveToFirstChild (); // foo

			XmlReader xr = new XmlTextReader (
				"<hijacker>hah, hah</hijacker><next/>",
				XmlNodeType.Element,
				null);
			xr.MoveToContent ();
			nav.ReplaceSelf (xr);

			AssertNavigator ("#1", nav,
				XPathNodeType.Element,
				String.Empty,	// Prefix
				"hijacker",	// LocalName
				String.Empty,	// NamespaceURI
				"hijacker",	// Name
				"hah, hah",	// Value
				false,		// HasAttributes
				true,		// HasChildren
				false);		// IsEmptyElement

			Assert.IsFalse (nav.MoveToNext (), "#1-2");
		}

		[Test]
		[ExpectedException (typeof (InvalidOperationException))]
		// empty content is not allowed
		public void ReplaceSelfEmptyString ()
		{
			XPathNavigator nav = GetInstance ("<root><foo>existing_child</foo></root>");
			nav.MoveToFirstChild ();
			nav.MoveToFirstChild (); // foo

			nav.ReplaceSelf (String.Empty);
		}

		[Test]
		public void SetValueEmptyString ()
		{
			XPathNavigator nav = GetInstance ("<root><foo>existing_child</foo></root>");
			nav.MoveToFirstChild ();
			nav.MoveToFirstChild (); // foo

			nav.SetValue (String.Empty);

			AssertNavigator ("#1", nav,
				XPathNodeType.Element,
				String.Empty,	// Prefix
				"foo",		// LocalName
				String.Empty,	// NamespaceURI
				"foo",		// Name
				String.Empty,	// Value
				false,		// HasAttributes
				true,		// HasChildren
				false);		// IsEmptyElement
		}

		[Test]
		public void MoveToFollowing ()
		{
			XPathNavigator end;

			XPathNavigator nav = GetInstance ("<root><bar><foo attr='v1'><baz><foo attr='v2'/></baz></foo></bar><dummy/><foo attr='v3'></foo></root>");
			Assert.IsTrue (nav.MoveToFollowing ("foo", String.Empty), "#1");
			Assert.AreEqual ("v1", nav.GetAttribute ("attr", String.Empty), "#2");
			Assert.IsTrue (nav.MoveToFollowing ("foo", String.Empty), "#3");
			Assert.AreEqual ("v2", nav.GetAttribute ("attr", String.Empty), "#4");
			Assert.IsTrue (nav.MoveToFollowing ("foo", String.Empty), "#5");
			Assert.AreEqual ("v3", nav.GetAttribute ("attr", String.Empty), "#6");

			// round 2
			end = nav.Clone ();

			nav.MoveToRoot ();
			Assert.IsTrue (nav.MoveToFollowing ("foo", String.Empty, end), "#7");
			Assert.AreEqual ("v1", nav.GetAttribute ("attr", String.Empty), "#8");
			Assert.IsTrue (nav.MoveToFollowing ("foo", String.Empty, end), "#9");
			Assert.AreEqual ("v2", nav.GetAttribute ("attr", String.Empty), "#10");
			// end is exclusive
			Assert.IsFalse (nav.MoveToFollowing ("foo", String.Empty, end), "#11");
			// in this case it never moves to somewhere else.
			Assert.AreEqual ("v2", nav.GetAttribute ("attr", String.Empty), "#12");
		}

		[Test]
		public void MoveToFollowingFromAttribute ()
		{
			XPathNavigator nav = GetInstance ("<root a='b'><foo/></root>");
			nav.MoveToFirstChild ();
			nav.MoveToFirstAttribute ();
			// should first move to owner element and go on.
			Assert.IsTrue (nav.MoveToFollowing ("foo", String.Empty));
		}

		[Test]
		public void AppendChildInDocumentFragment ()
		{
			XmlDocumentFragment f = new XmlDocument ().CreateDocumentFragment ();
			XmlWriter w = f.CreateNavigator ().AppendChild ();
			w.WriteStartElement ("foo");
			w.WriteEndElement ();
			w.Close ();
			Assert.IsNotNull (f.FirstChild as XmlElement);
		}

		[Test]
		public void CanEdit ()
		{
			XmlDocument doc = new XmlDocument ();
			Assert.IsTrue (doc.CreateNavigator ().CanEdit);
			Assert.IsTrue (GetInstance ("<root/>").CanEdit);
		}

		[Test]
		public void DeleteSelfAttribute ()
		{
			// bug #376210.
			XmlDocument document = new XmlDocument ();
			document.LoadXml ("<test><node date='2000-12-23'>z</node></test>");
			XPathNavigator navigator = document.CreateNavigator ();
			XPathNavigator nodeElement = navigator.SelectSingleNode ("//node");
			nodeElement.MoveToAttribute ("date", String.Empty);
			nodeElement.DeleteSelf ();
			Assert.AreEqual ("<test><node>z</node></test>", document.OuterXml);
		}

		[Test]
		[Ignore ("Microsoft reference source causes InvalidOperationException")]
		public void WriteAttributeOnAppendedChild ()
		{
			XmlDocument x = new XmlDocument ();
			XmlElement y = x.CreateElement ("test");
			using (XmlWriter w = y.CreateNavigator ().AppendChild ())
				w.WriteAttributeString ("test", "test1");
		}

		[Test] // bug #1558
		public void CreateNavigatorReturnsEdidable ()
		{
			var document = new XmlDocument();
			document.LoadXml ("<div>hello world</div>");
			XPathNavigator 
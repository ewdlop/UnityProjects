le and GetColumn
			MetaTable table = MetaModel.GetModel (typeof (EmployeesDataContext)).GetTable ("EmployeeTable");
			MetaColumn column = table.GetColumn ("FirstName");
			Assert.AreEqual (column, dc.Column, "#B1-1");
			Assert.AreEqual (dc.Column.Table, dc.Table, "#B1-2");

			dc.Column = column;
			Assert.AreEqual (column, dc.Column, "#C1-3");

			column = table.GetColumn ("Active");
			dc.Column = column;
			Assert.AreEqual (column, dc.Column, "#C1-4");

			// Talk about consistency...
			table = MetaModel.GetModel (typeof (EmployeesDataContext)).GetTable ("SeasonalEmployeeTable");
			column = table.GetColumn ("FirstName");
			dc.Column = column;

			Assert.AreNotEqual (dc.Column.Table, dc.Table, "#C1-5");
		}

		[Test]
		public void ConvertEmptyStringToNull ()
		{
			var test = new WebTest ("ListView_DynamicControl_01.aspx");
			test.Invoker = PageInvoker.CreateOnLoad (ConvertEmptyStringToNull_OnLoad);
			var p = test.Run ();
			Assert.IsNotNull (test.Response, "#X1");
			Assert.AreNotEqual (HttpStatusCode.NotFound, test.Response.StatusCode, "#X1-1{0}Returned HTML:{0}{1}", Environment.NewLine, p);
			Assert.AreNotEqual (HttpStatusCode.InternalServerError, test.Response.StatusCode, "#X1-2{0}Returned HTML:{0}{1}", Environment.NewLine, p);
			Assert.IsFalse (String.IsNullOrEmpty (p), "#X1-3");
		}

		static void ConvertEmptyStringToNull_OnLoad (Page p)
		{
			var lc = p.FindControl ("ListView1") as ListView;
			Assert.IsNotNull (lc, "#A1");

			var dc = lc.FindChild<DynamicControl> ("FirstName");
			Assert.IsNotNull (dc, "#B1-1");
			Assert.AreEqual ("FirstName", dc.ID, "#B1-2");
			Assert.AreEqual (true, dc.Column.ConvertEmptyStringToNull, "#B1-3");
			Assert.AreEqual (true, dc.ConvertEmptyStringToNull, "#B1-4");

			dc = lc.FindChild<DynamicControl> ("LastName");
			Assert.IsNotNull (dc, "#C1");
			Assert.AreEqual (true, dc.ConvertEmptyStringToNull, "#C1-1");

			dc.ConvertEmptyStringToNull = false;
			Assert.AreEqual (false, dc.ConvertEmptyStringToNull, "#C1-2");
			Assert.AreEqual (true, dc.Column.ConvertEmptyStringToNull, "#C1-3");
		}

		[Test]
		public void CssClass ()
		{
			var dc = new DynamicControl ();
			dc.CssClass = "MyCssClass";
			Assert.AreEqual ("MyCssClass", dc.CssClass, "#A1");

			var test = new WebTest ("ListView_DynamicControl_01.aspx");
			test.Invoker = PageInvoker.CreateOnLoad (CssClass_OnLoad);
			var p = test.Run ();
			Assert.IsNotNull (test.Response, "#X1");
			Assert.AreNotEqual (HttpStatusCode.NotFound, test.Response.StatusCode, "#X1-1{0}Returned HTML:{0}{1}", Environment.NewLine, p);
			Assert.AreNotEqual (HttpStatusCode.InternalServerError, test.Response.StatusCode, "#X1-2{0}Returned HTML:{0}{1}", Environment.NewLine, p);
			Assert.IsFalse (String.IsNullOrEmpty (p), "#X1-3");

			string html = @"<span class=""activeCssClass"">

<span class=""field"">Active</span>:";
			Assert.IsTrue (p.IndexOf (html.Replace ("\r\n", "\n")) != -1, "#Y1");
		}

		static void CssClass_OnLoad (Page p)
		{
			var lc = p.FindControl ("ListView1") as ListView;
			Assert.IsNotNull (lc, "#B1");

			var dc = lc.FindChild<PokerDynamicControl> ("Active");
			Assert.IsNotNull (dc, "#C1");
			Assert.AreEqual ("Active", dc.DataField, "#C1-1");
			Assert.AreEqual ("activeCssClass", dc.CssClass, "#C1-2");
		}

		[Test]
		public void DataField ()
		{
			var dc = new DynamicControl ();

			Assert.AreEqual (String.Empty, dc.DataField, "#A1");
			dc.DataField = "MyField";
			Assert.AreEqual ("MyField", dc.DataField, "#A2");

			dc.DataField = "AnotherField";
			Assert.AreEqual ("AnotherField", dc.DataField, "#A3");

			dc.DataField = String.Empty;
			Assert.AreEqual (String.Empty, dc.DataField, "#A4");

			dc.DataField = null;
			Assert.AreEqual (String.Empty, dc.DataField, "#A5");
		}

		[Test]
		public void DataField_1 ()
		{
			var test = new WebTest ("ListView_DynamicControl_01.aspx");
			test.Invoker = PageInvoker.CreateOnLoad (DataField_OnLoad_1);
			var p = test.Run ();
			Assert.IsNotNull (test.Response, "#X1");
			Assert.AreNotEqual (HttpStatusCode.NotFound, test.Response.StatusCode, "#X1-1{0}Returned HTML:{0}{1}", Environment.NewLine, p);
			Assert.AreNotEqual (HttpStatusCode.InternalServerError, test.Response.StatusCode, "#X1-2{0}Returned HTML:{0}{1}", Environment.NewLine, p);
			Assert.IsFalse (String.IsNullOrEmpty (p), "#X1-3")
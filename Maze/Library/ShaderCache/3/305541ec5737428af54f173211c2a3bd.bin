mmand);

	MenuBuilder.EndSection();

	MenuBuilder.BeginSection("AddOperations", LOCTEXT("PListContextHeadingAdd", "Add Operations"));

	MenuBuilder.AddMenuEntry(FPListEditorCommands::Get().AddStringCommand);

	MenuBuilder.AddMenuEntry(FPListEditorCommands::Get().AddBooleanCommand);

	MenuBuilder.AddMenuEntry(FPListEditorCommands::Get().AddArrayCommand);

	MenuBuilder.AddMenuEntry(FPListEditorCommands::Get().AddDictionaryCommand);

	MenuBuilder.EndSection();

	return MenuBuilder.MakeWidget();
}

/** Delegate to handle when a text option is chosen from right-click menu */
void SPListEditorPanel::OnPopupTextChosen(const FString& ChosenText)
{
	FSlateApplication::Get().DismissAllMenus();
}

EActiveTimerReturnType SPListEditorPanel::DisplayDeferredNotifications( double InCurrentTime, float InDeltaTime )
{
	if ( --FramesToSkip == 0 )
	{
		for ( int32 i = 0; i < QueuedNotifications.Num(); ++i )
		{
			if ( QueuedNotifications[i].NotificationType() == NTF_Normal )
			{
				NotificationListPtr->AddNotification( FNotificationInfo( QueuedNotifications[i].Notification() ) );
			}
			else if ( QueuedNotifications[i].NotificationType() == NTF_Success )
			{
				FNotificationInfo info( QueuedNotifications[i].Notification() );
				TWeakPtr<SNotificationItem> PendingProgressPtr = NotificationListPtr->AddNotification( info );
				PendingProgressPtr.Pin()->SetCompletionState( SNotificationItem::CS_Success );
			}
			else // if(QueuedNotifications[i].NotificationType() == NTF_Failed)
			{
				FNotificationInfo info( QueuedNotifications[i].Notification() );
				TWeakPtr<SNotificationItem> PendingProgressPtr = NotificationListPtr->Add
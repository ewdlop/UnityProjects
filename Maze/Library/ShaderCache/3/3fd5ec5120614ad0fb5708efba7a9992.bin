using System.Net.Sockets;
using System.Runtime.InteropServices;

namespace System.Net.NetworkInformation
{
    
    public class PingReply
    {
        IPAddress address;
        PingOptions options;
        IPStatus ipStatus;  // the status code returned by icmpsendecho, or the icmp status field on the raw socket
        long rtt;  // the round trip time.
        byte[] buffer; //buffer of the data


        internal PingReply(){
        }

        internal PingReply (IPStatus ipStatus) {
            this.ipStatus = ipStatus;
            buffer = new byte[0];
        }

        // The downlevel constructor. 
        internal PingReply (byte[] data, int dataLength, IPAddress address, int time) {
            this.address = address;
            rtt = time;


            ipStatus = GetIPStatus ((IcmpV4Type)data[20],(IcmpV4Code) data[21]);

            if (ipStatus == IPStatus.Success) {
                buffer = new byte[dataLength - 28];
                Array.Copy (data, 28, buffer, 0, dataLength - 28);
            }
            else
                buffer = new byte[0];
        }

#if MONO
        internal PingReply (IPAddress address, byte [] buffer, PingOptions options, long roundtripTime, IPStatus status)
        {
            this.address = address;
            this.buffer = buffer;
            this.options = options;
            this.rtt = roundtripTime;
            this.ipStatus = status;
        }
#else
        // the main constructor for the icmpsendecho apis
        internal PingReply (IcmpEchoReply reply) {
            address = new IPAddress (reply.address);
            ipStatus = (IPStatus)reply.status; //the icmpsendecho ip status codes

            //only copy the data if we succeed w/ the ping operation
            if (ipStatus == IPStatus.Success) {
                rtt = (long)reply.roundTripTime;
                buffer = new byte[reply.dataSize];
                Marshal.Copy (reply.data, buffer, 0, reply.dataSize);
                options = new PingOptions (reply.options);
            }
            else
                buffer = new byte[0];

        }

                // the main constructor for the icmpsendecho apis
        internal PingReply (Icmp6EchoReply reply, IntPtr dataPtr, int sendSize) {
            
            address = new IPAddress(reply.Address.Address,reply.Address.ScopeID);
            ipStatus = (IPStatus)reply.Status; //the icmpsendecho ip status codes

            //only copy the data if we succeed w/ the ping operation
            if (ipStatus == IPStatus.Success) {
                rtt = (long)reply.RoundTripTime;
                buffer = new byte[sendS
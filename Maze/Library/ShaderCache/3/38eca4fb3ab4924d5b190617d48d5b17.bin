GetString(SR.Cryptography_Asn_MismatchedOidInCollection));
                }
                else if (szOid1 != null || szOid2 != null) {
                    // Can't be matching, since only one of them is null.
                    throw new CryptographicException(SR.GetString(SR.Cryptography_Asn_MismatchedOidInCollection));
                }
            }

            return m_list.Add(asnEncodedData);
        }

        public void Remove (AsnEncodedData asnEncodedData) {
            if (asnEncodedData == null)
                throw new ArgumentNullException("asnEncodedData");
            m_list.Remove(asnEncodedData);
        }

        public AsnEncodedData this[int index] {
            get {
                return (AsnEncodedData) m_list[index];
            }
        }

        public int Count {
            get {
                return m_list.Count;
            }
        }

        public AsnEncodedDataEnumerator GetEnumerator() {
            return new AsnEncodedDataEnumerator(this);
        }

        /// <internalonly/>
        IEnumerator IEnumerable.GetEnumerator() {
            return new AsnEncodedDataEnumerator(this);
        }

        /// <internalonly/>
        void ICollection.CopyTo(Array array, int index) {
            if (array == null)
                throw new ArgumentNullException("array");
            if (array.Rank != 1)
                throw new ArgumentException(SR.GetString(SR.Arg_RankMultiDimNotSupported));
            if (index < 0 || index 
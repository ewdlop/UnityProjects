using System;

class Base
{
	int value;

	public int Value {
		get { return value; }
	}

	protected Base (int value)
	{
		this.value = value;
	}
}

class A : Base
{
	public A (int value)
		: base (1)
	{
		Console.WriteLine ("Int");
	}

	public A (uint value)
		: base (2)
	{
		Console.WriteLine ("UInt");
	}
}

class B : Base
{
	public B (long value)
		: base (3)
	{
		Console.WriteLine ("Long");
	}

	public B (ulong value)
		: base (4)
	{
		Console.WriteLine ("ULong");
	}
}

class C : Base
{
	public C (short value)
		: base (5)
	{
		Console.WriteLine ("Short");
	}

	public C (ushort value)
		: base (6)
	{
		Console.WriteLine ("UShort");
	}
}

class D : Base
{
	public D (sbyte value)
		: base (7)
	{
		Console.WriteLine ("SByte");
	}

	public D (byte value)
		: base (8)
	{
		Console.WriteLine ("Byte");
	}
}

class E : Base
{
	public E (long value)
		: base (9)
	{
		Console.WriteLine ("Long");
	}

	public E (E e)
		: base (10)
	{
		Console.WriteLine ("E");
	}

	public static implicit operator E (long value) 
	{
		return (new E (v
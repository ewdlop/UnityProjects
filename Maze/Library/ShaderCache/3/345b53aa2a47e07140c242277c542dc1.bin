line terminator is a carriage return followed by a line feed
        ///       (\r\n).</para>
        /// </devdoc>
        public override void WriteLine(string message) {
            Write(message);
        }

        [
        ComVisible(false)
        ]
        public override void TraceEvent(TraceEventCache eventCache, string source, TraceEventType severity, int id,
                                                    string format, params object[] args)
        {
            if (Filter != null && !Filter.ShouldTrace(eventCache, source, severity, id, format, args)) 
                return;

            EventInstance data = CreateEventInstance(severity, id);

            if (args == null) {
                eventLog.WriteEvent(data, format);
            }
            else if(String.IsNullOrEmpty(format)) {
                string[] strings = new string[args.Length];
                for (int i=0; i<args.Length; i++) {
                    strings[i] = args[i].ToString();
                }

                eventLog.WriteEvent(data, strings);
            }
            else {
                eventLog.WriteEvent(data, String.Format(CultureInfo.InvariantCulture, format,args));
            }

        }

        [
        ComVisible(false)
        ]
        public override void TraceEvent(TraceEventCache eventCache, string source, TraceEventType severity, int id,
                                                    string message)
        {
            if (Filter != null && !Filter.ShouldTrace(eventCache, source, severity, id, message)
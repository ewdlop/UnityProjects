		securityInfos |= (SecurityInfos)0x40000000;
					else
						securityInfos |= (SecurityInfos)0x10000000;
					sacl = new byte[descriptor.SystemAcl.BinaryLength];
					descriptor.SystemAcl.GetBinaryForm (sacl, 0);
				}
			}
			
			return nativeCall (securityInfos, owner, group, dacl, sacl);
		}
		
		string Win32FixName (string name)
		{
			if (ResourceType == ResourceType.RegistryKey) {
				// For (Get|Set)NamedSecurityInfo, registry paths lack the HKEY_ prefix.
				if (!name.StartsWith ("HKEY_")) throw new InvalidOperationException ();
				name = name.Substring ("HKEY_".Length);
			}
			
			return name;
		}
		#endregion
		
		#region Win32 P/Invokes
		delegate int GetSecurityInfoNativeCall (SecurityInfos securityInfos,
							out IntPtr owner, out IntPtr group, out IntPtr dacl, out IntPtr sacl,
							out IntPtr descriptor);

		[DllImport ("advapi32.dll", CharSet=CharSet.Unicode, EntryPoint="GetSecurityInfo")]
		static extern int GetSecurityInfo (SafeHandle handle, ResourceType resourceType, SecurityInfos securityInfos,
						   out IntPtr owner, out IntPtr group, out IntPtr dacl, out IntPtr sacl,
						   out IntPtr descriptor);

		[DllImport ("advapi32.dll", CharSet=CharSet.Unicode, EntryPoint="GetNamedSecurityInfo")]
		static extern int GetNamedSecurityInfo (string name, ResourceType resourceType, SecurityInfos securityInfos,
							out IntPtr owner, out IntPtr group, out IntPtr dacl, out IntPtr sacl,
							out IntPtr descriptor);
							
		[DllImport ("kernel32.dll", EntryPoint="LocalFree")]
		static extern IntPtr LocalFree (IntPtr handle);

		delegate int SetSecurityInfoNativeCall (SecurityInfos securityInfos,
							byte[] owner, byte[] group, byte[] dacl, byte[] sacl);

		[DllImport ("advapi32.dll", CharSet=CharSet.Unicode, EntryPoint="SetSecurityInfo")]
		static extern int SetSecurityInfo (SafeHandle handle, ResourceType resourceType, SecurityInfos securityInfos,
						   byte[] owner, byte[] group, byte[] dacl, byte[] sacl);
						
		[DllImport ("advapi32.dll", CharSet=CharSet.Unicode, EntryPoint="SetNamedSecurityInfo")]
		static extern int SetNamedSecurityInfo (string name, ResourceType resourceType, SecurityInfos securityInfos,
							byte[] owner, byte[] group, byte[] dacl, byte[] sacl);

		[DllImport ("advapi32.dll", CharSet=CharSet.Unicode, EntryPo
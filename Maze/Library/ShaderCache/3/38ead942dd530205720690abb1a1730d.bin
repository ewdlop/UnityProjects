// ==++==
// 
//   Copyright (c) Microsoft Corporation.  All rights reserved.
// 
// ==--==

//
// AsnEncodedData.cs
//

namespace System.Security.Cryptography {
    using System.Collections;
    using System.Globalization;
    using System.Runtime.InteropServices;

    public class AsnEncodedData {
        internal Oid m_oid = null;
        internal byte[] m_rawData = null;

        internal AsnEncodedData (Oid oid) {
            m_oid = oid;
        }

        internal AsnEncodedData (string oid, CAPI.CRYPTOAPI_BLOB encodedBlob) : this(oid, CAPI.BlobToByteArray(encodedBlob)) {}
        internal AsnEncodedData (Oid oid, CAPI.CRYPTOAPI_BLOB encodedBlob) : this(oid, CAPI.BlobToByteArray(encodedBlob)) {}

        protected AsnEncodedData () {}

        public AsnEncodedData (byte[] rawData) {
            Reset(null, rawData);
        }

        public AsnEncodedData (string oid, byte[] rawData) {
            Reset(new Oid(oid), rawData);
        }

        public AsnEncodedData (Oid oid, byte[] rawData) {
            Reset(oid, rawData);
        }

        public AsnEncodedData (AsnEncodedData asnEncodedData) {
            if (asnEncodedData == null)
                throw new ArgumentNullException("asnEncodedData");
            Reset(asnEncodedData.m_oid, asnEncodedData.m_rawData);
        }

        public Oid Oid {
            get {
                return m_oid;
            }
            set {
                if (value == null)
                    m_oid = null;
                else
                    m_oid = new Oid(value);
            }
        }

        public byte[] RawData {
            get {
                return m_rawData;
            }
            set {
                if (value == null)
                    throw new ArgumentNullException("value");
                m_rawData = (byte[]) value.Clone();
            }
        }

        public virtual void CopyFrom (AsnEncodedData asnEncodedData) {
            if (asnEncodedData == null)
                throw new ArgumentNullException("asnEncodedData");
            Reset(asnEncodedData.m_oid, asnEncodedData.m_rawData);
        }

        public virtual string Format (bool multiLine) {
            // Return empty string if no data to format.
            if (m_rawData == null || m_rawData.Length == 0)
                return String.Empty;

            // If OID is not present, then we can force CryptFormatObject 
            // to use hex formatting by providing an empty OID string.
            string oidValue = String.Empty;
            if (m_oid != null && m_oid.Value != null)
                oidValue = m_oid.Value;

            return CAPI.CryptFormatObject(CAPI.X509_ASN_ENCODING, 
                                          multiLine ? CAPI.CRYPT_FORMAT_STR_MULTI_LINE : 0,
                                          oidValue,
                                          m_rawData);
        }

        private void Reset (Oid oid, byte[] rawData) {
            this.Oid = oid;
            this.RawData = rawData;
        }
    }

    public sealed class AsnEncodedDataCollection : ICollection {
        private ArrayList m_list = null;
        private Oid m_oid = null;

        public AsnEncodedDataCollection () {
            m_list = new ArrayList();
            m_oid = null;
        }

        public AsnEncodedDataCollection(AsnEncodedData asnEncodedData) : this() {
            m_list.Add(asnEncodedData);
        }

        public int Add (AsnEncodedData asnEncodedData) {
            if (asnEncodedData == null)
                throw new ArgumentNullException("asnEncodedData");

            //
            // If m_oid is not null, then OIDs must match.
            //
            if (m_oid != null)  {
                string szOid1 = m_oi
//------------------------------------------------------------------------------
// <copyright file="_PrefixLookup.cs" company="Microsoft">
//     Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>
//------------------------------------------------------------------------------

//
// This internal class implements a data structure which can be
// used for storing a set of objects keyed by string prefixes
// Looking up an object given a string returns the value associated
// with the longest matching prefix
// (A prefix "matches" a string IFF the string starts with that prefix
// The degree of the match is prefix length)
//
// The class has a configurable maximum capacity.  When adding items, if the
// list is over capacity, then the least recently used (LRU) item is dropped.
//

namespace System.Net
{
    using System.Collections.Generic;
    using System.Diagnostics;

    internal class PrefixLookup
    {

        // Do not go over this limit.  Discard old data elements
        // Longer lists suffer a search penalty
        private const int defaultCapacity = 100;
        private volatile int capacity;

        // LRU list - Least Recently Used.  
        // Add new items to the front.  Drop items from the end if beyond capacity.
        // Promote used items to the top.
        private readonly LinkedList<PrefixValuePair> lruList = new LinkedList<PrefixValuePair>();

        private class PrefixValuePair
        {
            public string prefix;
            public object value;

            public PrefixValuePair(string pre, object val)
            {
                prefix = pre;
                value = val;
            }
        }

        public PrefixLookup() : this(defaultCapacity)
        {
        }

        public PrefixLookup(int capacity)
        {
            this.capacity = capacity;
        }

#if DEBUG
        // this method is only called by test code
        internal int Capacity
        {
            get { return capacity; }
            set
            {
                lock (lruList)
                {
                    if (value <= 0)
                    {
                        // Disabled, flush list
                        capacity = 0;
                        lruList.Clear();
                    }
                    else
                    {
                        capacity = value;

                        // Ensure list is still within capacity
                        while (lruList.Count > capacity)
                        {
                            lruList.RemoveLast();
                        }
    
//
// This file was generated by txt2sr tool
//

partial class SR
{
	public const string OwningTeam = "DLinq";
	public const string CannotAddChangeConflicts = "Cannot add change conflicts. They are added automatically during SubmitChanges.";
	public const string CannotRemoveChangeConflicts = "Cannot remove change conflicts.";
	public const string InconsistentAssociationAndKeyChange = "The member '{0}' was changed to be inconsistent with the association member '{1}'.";
	public const string UnableToDetermineDataContext = "Unable to determine DataContext for compiled query execution.";
	public const string ArgumentTypeHasNoIdentityKey = "The type '{0}' has no identity key.";
	public const string CouldNotConvert = "Could not convert from type '{0}' to type '{1}'.";
	public const string CannotRemoveUnattachedEntity = "Cannot remove an entity that has not been attached.";
	public const string ColumnMappedMoreThanOnce = "Mapping Problem: The database column '{0}' is mapped more than once.";
	public const string CouldNotAttach = "Item already exists in data context.";
	public const string CouldNotGetTableForSubtype = "Could not retrieve a Table for inheritance subtype '{0}', try Table of {1} instead.";
	public const string CouldNotRemoveRelationshipBecauseOneSideCannotBeNull = "An attempt was made to remove a relationship between a {0} and a {1}. However, one of the relationship's foreign keys ({2}) cannot be set to null.";
	public const string EntitySetAlreadyLoaded = "The EntitySet is already loaded and the source cannot be changed.";
	public const string EntitySetModifiedDuringEnumeration = "EntitySet was modified during enumeration.";
	public const string ExpectedQueryableArgument = "Argument {0} does not implement {1}.";
	public const string ExpectedUpdateDeleteOrChange = "Expected update, delete, or change.";
	public const string KeyIsWrongSize = "Key is the wrong size. Expected {0}. Actual {1}.";
	public const string KeyValueIsWrongType = "Key value is the wrong type. Expected assignable from {0}. Actual {1}.";
	public const string IdentityChangeNotAllowed = "Value of member '{0}' of an object of type '{1}' changed.\r\nA member defining the identity of the object cannot be changed.\r\nConsider adding a new object with new identity and deleting the existing one instead.";
	public const string DbGeneratedChangeNotAllowed = "Value of member '{0}' of an object of type '{1}' changed.\r\nA member that is computed or generated by the database cannot be changed.";
	public const string ModifyDuringAddOrRemove = "Could not modify EntitySet.";
	public const string ProviderDoesNotImplementRequiredInterface = "Specified provider type '{0}' does not implement '{1}'.";
	public const string ProviderTypeNull = "Non-null provider type expected.";
	public const string TypeCouldNotBeAdded = "Instance of type '{0}' could not be added. This type is not part of the mapped type system.";
	public const string TypeCouldNotBeRemoved = "Instance of type '{0}' could not be removed. This type is not part of the mapped type system.";
	public const string TypeCouldNotBeTracked = "Instance of type '{0}' could not be tracked. This type is not part of the mapped type system.";
	public const string TypeIsNotEntity = "The type '{0}' is not an entity.";
	public const string UnrecognizedRefreshObject = "An object specified for refresh is not recognized.";
	public const string UnhandledExpressionType = "Unhandled Expression Type: {0}";
	public const string UnhandledBindingType = "Unhandled Binding Type: {0}";
	public const string ObjectTrackingRequired = "Object tracking is not enabled for the current data context instance.";
	public const string OptionsCannotBeModifiedAfterQuery = "Data context options cannot be modified after results have been returned from a query.";
	public const string DeferredLoadingRequiresObjectTracking = "Deferred loading requires that object tracking is also enabled.";
	public const string SubqueryDoesNotSupportOperator = "The operator '{0}' is not supported in Subquery.";
	public const string SubqueryNotSupportedOn = "Subquery is not supported on '{0}'.";
	public const string SubqueryNotSupportedOnType = "Subquery is not supported on '{0}' of type '{1}'.";
	public const string SubqueryNotAllowedAfterFreeze = "SetSubquery is not allowed after freeze or attach to DataContext.";
	public const string IncludeNotAllowedAfterFreeze = "LoadWith is not allowed after freeze or attach to DataContext.";
	public const string LoadOptionsChangeNotAllowedAfterQuery = "Setting load options is not allowed after results have been returned from a query.";
	public const string IncludeCycleNotAllowed = "Cycles not allowed in LoadOptions LoadWith type graph.";
	public const string SubqueryMustBeSequence = "Subquery must be a sequence expression.";
	public const string RefreshOfDeletedObject = "Unable to refresh the specified object.  The object no longer exists in the database.";
	public const string RefreshOfNewObject = "An object specified for refresh is pending insert and cannot be refreshed.";
	public const string CannotChangeInheritanceType = "Not allowed: Inheritance discriminator change from '{0}' to '{1}' would change type from '{2}' to '{3}'.";
	public const string DataContextCannotBeUsedAfterDispose = "DataContext accessed after Dispose.";
	public const string TypeIsNotMarkedAsTable = "The type '{0}' is not mapped as a Table.";
	public const string NonEntityAssociationMapping = "Invalid association mapping for member '{0}.{1}'.  '{2}' is not an entity.";
	public const string CannotPerformCUDOnReadOnlyTable = "Can't perform Create, Update, or Delete operations on '{0}' because it has no primary key.";
	public const string InsertCallbackComment = "--Callback into user code for insert.";
	public const string UpdateCallbackComment = "--Callback into user code for update.";
	public const string DeleteCallbackComment = "--Callback into user code for delete.";
	public const string RowNotFoundOrChanged = "Row not found or changed.";
	public const string UpdatesFailedMessage = "{0} of {1} updates failed.";
	public const string CycleDetected = "A cycle was detected in the set of changes";
	public const string CantAddAlreadyExistingItem = "Cannot add an entity that already exists.";
	public const string CantAddAlreadyExistingKey = "Cannot add an entity with a key that is already in use.";
	public const string DatabaseGeneratedAlreadyExistingKey = "The database generated a key that is already in use.";
	public const string InsertAutoSyncFailure = "Member AutoSync failure. For members to be AutoSynced after insert, the type must either have an auto-generated identity, or a key that is not modified by the database after insert.";
	public const string EntitySetDataBindingWithAbstractBaseClass = "Cannot add an instance of an abstract class to EntitySet<{0}>.";
	public const string EntitySetDataBindingWithNonPublicDefaultConstructor = "{0} must have a parameterless constructor when using IBindingList to add new instances.";
	public const string InvalidLoadOptionsLoadMemberSpecification = "The expression specified must be of the form p.A, where p is the parameter and A is a property or field member.";
	public const string EntityIsTheWrongType = "The entity is not of the correct type.";
	public const string OriginalEntityIsWrongType = "The original state instance has the wrong type.";
	public const string CannotAttachAlreadyExistingEntity = "Cannot attach an entity that already exists.";
	public const string CannotAttachAsModifiedWithoutOriginalState = "An entity can only be attached as modified without original state if it declares a version member or does not have an update check policy.";
	public const string CannotPerformOperationDuringSubmitChanges = "The operation cannot be performed during a call to SubmitChanges.";
	public const string CannotPerformOperationOutsideSubmitChanges = "The operation can only be performed inside a user override method during a call to SubmitChanges.";
	public const string CannotPerformOperationForUntrackedObject = "The operation cannot be performed for the entity because it is not being change tracked.";
	public const string CannotAttachAddNonNewEntities = "An attempt has been made to Attach or Add an entity that is not new, perhaps having been loaded from another DataContext.  This is not supported.";
	public const string QueryWasCompiledForDifferentMappingSource = "Query was compiled for a different mapping source than the one associated with the specified DataContext.";

	// manually harvested
	public const string AbstractClassAssignInheritanceDiscriminator = "Abstract class '{0}' should not be assigned an inheritance discriminator key.";
	public const string ArgumentEmpty = "The string parameter '{0}' was expected to have length greater than zero.";
	public const string ArgumentTypeMismatch = "One or more type mismatches in argument '{0}'.";
	public const string ArgumentWrongType = "The argument '{0}' was the wrong type. Expected '{1}'. Actual '{2}'.";
	public const string ArgumentWrongValue = "The argument '{0}' was the wrong value.";
	public const string BadFunctionTypeInMethodMapping = "Mapping Problem: Bad function type in mapping for method '{0}'.";
	public const string BadKeyMember = "Could not find key member '{0}' of key '{1}' on type '{2}'. The key may be wrong or the field or property on '{2}' has changed names.";
	public const string BadParameterType = "A query parameter cannot be of type '{0}'.";
	public const string BadProjectionInSelect = "Bad projection in Select.";
	public const string BadStorageProperty = "Bad Storage property: '{0}' on member '{1}.{2}'.";
	public const string BinaryOperatorNotRecognized = "Binary operator not recognized: {0}";
	public const string CannotAggregateType = "The type '{0}' is not supported in aggregation operations.";
	public const string CannotAssignNull = "The null value cannot be assigned to a member with type {0} which is a non-nullable value type.";
	public const string CannotAssignToMember = "Cannot assign value to member '{0}'. It does not define a setter.";
	public const string CannotCompareItemsAssociatedWithDifferentTable = "Cannot compare entities associated with different tables.";
	public const string CannotConvertToEntityRef = "Cannot convert type '{0}' to EntityRef/Link.";
	public const string CannotDeleteTypesOf = "Cannot delete items of type {0}.";
	public const string CannotEnumerateResultsMoreThanOnce = "The query results cannot be enumerated more than once.";
	public const string CannotGetInheritanceDefaultFromNonInheritanceClass = "Mapping Problem: Cannot get inheritance default from class not mapped into an inheritance hierarchy.";
	public const string CannotMaterializeEntityType = "Explicit construction of entity type '{0}' in query is not allowed.";
	public const string CannotMaterializeList = "Cannot create a query result of type '{0}'.";
	public const string CannotTranslateExpressionToSql = "Cannot translate expression to SQL for this server version.";
	public const string CapturedValuesCannotBeSequences = "Local sequence cannot be used in LINQ to SQL implementations of query operators except the Contains operator.";
	public const string ClassLiteralsNotAllowed = "Class literals are not allowed: {0}.";
	public const string ClientCaseShouldNotHold = "Client case should not hold '{0}'. It should probably have been SqlSimpleCase.";
	public const string ClrBoolDoesNotAgreeWithSqlType = "Expected Node with CLR Type of 'bool' to have SQL type of 'Bit' or 'Predicate'. Instead, it was type '{0}'.";
	public const string ColumnCannotReferToItself = "Column cannot refer to itself.";
	public const string ColumnClrTypeDoesNotAgreeWithExpressionsClrType = "The ClrType of the column did not agree with the ClrType of the expression.";
	public const string ColumnIsDefinedInMultiplePlaces = "Column '{0}' is defined in multiple places.";
	public const string ColumnIsNotAccessibleThroughDistinct = "Column '{0}' is not accessible through distinct.";
	public const string ColumnIsNotAccessibleThroughGroupBy = "Column '{0}' is not accessible through group by.";
	public const string ColumnReferencedIsNotInScope = "Column referenced is not in scope: '{0}'.";
	public const string ComparisonNotSupportedForType = "Comparison operators not supported for type '{0}'.";
	public const string CompiledQueryAgainstMultipleShapesNotSupported = "Compiled queries across DataContexts with different LoadOptions not supported.";
	public const string CompiledQueryCannotReturnType = "A compiled query cannot return type '{0}'.";
	public const string ConstructedArraysNotSupported = "Constructed arrays are only supported for Contains.";
	public const string ContextNotInitialized = "SqlContext is not initialized.";
	public const string ConvertToCharFromBoolNotSupported = "There is no supported conversion from a Boolean to a Character type.";
	public const string ConvertToDateTimeOnlyForDateTimeOrString = "Only DateTimes or strings can be converted to DateTime.";
	public const string CouldNotAssignSequence = "Could not assign sequence of {0} to type {1}.";
	public const string CouldNotConvertToPropertyOrField = "MemberInfo '{0}' had no corresponding field or property.";
	public const string CouldNotCreateAccessorToProperty = "Could not create PropertyAccessor<{0},{1}> to {2}.";
	public const string CouldNotDetermineCatalogName = "Unable to determine catalog name.";
	public const string CouldNotDetermineDbGeneratedSqlType = "Unable to determine SQL type for '{0}' that can also be generated by the server.";
	public const string CouldNotDetermineSqlType = "Unable to determine SQL type for '{0}'.";
	public const string CouldNotFindElementTypeInModel = "Mapping Problem: Could not find element type in model for '{0}'.";
	public const string CouldNotFindRequiredAttribute = "Mapping Problem: Could not find required attribute '{0}': {1}.";
	public const string CouldNotFindRuntimeTypeForMapping = "Mapping Problem: Cannot find runtime type for type mapping '{0}'.";
	public const string CouldNotFindTypeFromMapping = "Mapping Problem: Cannot find type '{0}' from mapping.";
	public const string CouldNotGetClrType = "Could not get the ClrType.";
	public const string CouldNotGetSqlType = "Could not get the SqlType.";
	public const string CouldNotHandleAliasRef = "Could not handle alias ref of {0}.";
	public const string CouldNotTranslateExpressionForReading = "Could not translate expression '{0}' into SQL and could not treat it as a local expression.";
	public const string CreateDatabaseFailedBecauseOfClassWithNoMembers = "Unable to create database because mapped class '{0}' has zero members.";
	public const string CreateDatabaseFailedBecauseOfContextWithNoTables = "Unable to create database because data context '{0}' has no tables.";
	public const string CreateDatabaseFailedBecauseSqlCEDatabaseAlreadyExists = "Unable to create database because the database '{0}' already exists.";
	public const string DatabaseDeleteThroughContext = "Operation not allowed after DeleteDatabase call.";
	public const string DatabaseNodeNotFound = "Database node not found.  Is the mapping namespace ({0}) correctly specified?";
	public const string DeferredMemberWrongType = "Deferred member not one of EntitySet, EntityRef, or Link.";
	public const string DidNotExpectAs = "Did not expect 'as' operator in '{0}'.";
	public const string DidNotExpectTypeBinding = "Did not expect type binding back. This should result in a type case not a simple case.";
	public const string DidNotExpectTypeChange = "Did not expect operation to change result type. Original type was '{0}' new type is '{1}'.";
	public const string DiscriminatorClrTypeNotSupported = "Discriminator '{0}.{1}' may not be type '{2}'.";
	public const string DistributedTransactionsAreNotAllowed = "Distributed transactions are not allowed.";
	public const string EmptyCaseNotSupported = "Empty case is not supported.";
	public const string EntityRefAlreadyLoaded = "The EntityRef is already loaded and the source cannot be changed.";
	public const string ExceptNotSupportedForHierarchicalTypes = "Except is not supported for hierarchical result types.";
	public const string ExpectedBitFoundPredicate = "Expected a Bit here but found a Predicate.";
	public const string ExpectedClrTypesToAgree = "Expected ClrTypes to agree. One was '{0}' the other was '{1}'.";
	public const string ExpectedEmptyElement = "Element '{0}' must be empty, but contains a node of type {1} named '{2}'.";
	public const string ExpectedNoObjectType = "Expected no ObjectType nodes to remain.";
	public const string ExpectedPredicateFoundBit = "Expected a Predicate here but found a Bit.";
	public const string ExpressionNotDeferredQuerySource = "Expression is not a deferred query source.";
	public const string GeneralCollectionMaterializationNotSupported = "General collection ma
       <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When serialized to Atom 1.0, the <see cref="P:System.ServiceModel.Syndication.SyndicationCategory.Scheme" /> property is written to the scheme attribute of the &lt;category&gt; element. </para>
          <para>When serialized to RSS 2.0, the <see cref="P:System.ServiceModel.Syndication.SyndicationCategory.Scheme" /> property is written to the domain attribute of the &lt;category&gt; element.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets and sets the scheme of the category.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="TryParseAttribute">
      <MemberSignature Language="C#" Value="protected virtual bool TryParseAttribute (string name, string ns, string value, string version);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool TryParseAttribute(string name, string ns, string value, string version) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="version" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Attribute extensions are custom attributes that are not defined by the Atom 1.0 or RSS 2.0 specifications. They are serialized as an attribute of the &lt;category&gt; element. This method is an extension point that allows you to handle the deserialization of a custom attribute extension. To do this, derive a class from <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> and override this method. This method is called for all unrecognized attribute extensions.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Attempts to parse an attribute extension.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A value that specifies whether the attribute extension was parsed successfully.</para>
        </returns>
        <param name="name">
          <attribution license="cc4" from="Microsoft" modified="false" />The name of the element.</param>
        <param name="ns">
          <attribution license="cc4" from="Microsoft" modified="false" />The namespace of the element.</param>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The attribute to parse.</param>
        <param name="version">
          <attribution license="cc4" from="Microsoft" modified="false" />The syndication version to use when parsing.</param>
      </Docs>
    </Member>
    <Member MemberName="TryParseElement">
      <MemberSignature Language="C#" Value="protected virtual bool TryParseElement (System.Xml.XmlReader reader, string version);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool TryParseElement(class System.Xml.XmlReader reader, string version) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="version" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Element extensions are valid XML elements that are not specified in either the Atom 1.0 or RSS 2.0 specifications. You can add any valid XML element as an extension, provided its namespace is different from the enclosing namespace. This method is an extension point that allows you to handle the deserialization of a custom element extension. To do this, derive a class from <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> and override this method. This method is called for all unrecognized attribute extensions.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Attempts to parse an element extension.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A value that specifies whether the element extension has been parsed successfully.</para>
        </returns>
        <param name="reader">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
        <param name="version">
          <attribution license="cc4" from="Microsoft" modified="false" />The syndication version to use while parsing.</param>
      </Docs>
    </Member>
    <Member MemberName="WriteAttributeExtensions">
      <MemberSignature Language="C#" Value="protected virtual void WriteAttributeExtensions (System.Xml.XmlWriter writer, string version);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void WriteAttributeExtensions(class System.Xml.XmlWriter writer, string version) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="version" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Attribute extensions are custom attributes that are not defined by the Atom 1.0 or RSS 2.0 specifications. They are serialized as an attribute of the &lt;category&gt; element. This method is an extension point that allows you to handle the serialization of custom attribute extensions. To do this, derive a class from <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> and override this method. This method is called for all unrecognized attribute extensions.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes the attribute extensions to the specified writer.</para>
        </summary>
        <param name="writer">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
        <param name="version">
          <attribution license="cc4" from="Microsoft" modified="false" />The syndication version to use while writing.</param>
      </Docs>
    </Member>
    <Member MemberName="WriteElementExtensions">
      <MemberSignature Language="C#" Value="protected virtual void WriteElementExtensions (System.Xml.XmlWriter writer, string version);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void WriteElementExtensions(class System.Xml.XmlWriter writer, string version) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="version" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Element extensions are valid XML elements that are not specified in either the Atom 1.0 or RSS 2.0 specification. You can add any valid XML element as an extension, provided its namespace is different from the enclosing namespace. This method is an extension point that allows you to handle the serialization of custom element extensions. To do this, derive a class from <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> and override this method. This method is called for all unrecognized element extensions.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes the element extensions to the specified writer.</para>
        </summary>
        <param name="writer">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
        <param name="version">
          <attribution license="cc4" from="Microsoft" modified="false" />The syndication version to use while writing.</param>
      </Docs>
    </Member>
  </Members>
</Type>                                                                                                                                                                                                                                                                                                                                                                 !³;size_type"›size_type"Wsize_type"size_type"Usize_type"	+size_type"bsize_type" size_type!ì)size_type&Ùósize_type&¢size_type$ùUsize_type"`ƒsize_type"RYsize_type"Qøsize_type":_size_type":Csize_type":-size_type"‰size_type"usize_type"Ðsize_type*d‚size_type(ßvsize_type(ßRsize_type(y¢size_type(y8size_type(xãsize_type(t‡size_type(t[size_type(tNsize_type(tsize_type(s’size_type(fsize_type(eésize_type(eÛsize_type(cþsizes&íésizes&ìêsizes%¬[sizes%¬Hsizes%¬Asizes%¬;sizes%¬5sizes%äsizes%gv%sizeofstruct%i%sizeofstruct%\%sizeofstruct%§sizeof_P,´#sizeofUChar&âp!sizeofEDIDú~!sizeofEDIDúy/sizeof...(_Types)
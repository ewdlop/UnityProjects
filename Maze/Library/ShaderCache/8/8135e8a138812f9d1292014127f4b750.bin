ast<cef_scroll_view_t*>(
      self))->SetBackgroundColor(
      color);
}

cef_color_t CEF_CALLBACK scroll_view_get_background_color(
    struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return 0;

  // Execute
  cef_color_t _retval = CefScrollViewCppToC::Get(
      reinterpret_cast<cef_scroll_view_t*>(self))->GetBackgroundColor();

  // Return type: simple
  return _retval;
}

int CEF_CALLBACK scroll_view_convert_point_to_screen(struct _cef_view_t* self,
    cef_point_t* point) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return 0;
  // Verify param: point; type: simple_byref
  DCHECK(point);
  if (!point)
    return 0;

  // Translate param: point; type: simple_byref
  CefPoint pointVal = point?*point:CefPoint();

  // Execute
  bool _retval = CefScrollViewCppToC::Get(reinterpret_cast<cef_scroll_view_t*>(
      self))->ConvertPointToScreen(
      pointVal);

  // Restore param: point; type: simple_byref
  if (point)
    *point = pointVal;

  // Return type: bool
  return _retval;
}

int CEF_CALLBACK scroll_view_convert_point_from_screen(struct _cef_view_t* self,
    cef_point_t* point) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return 0;
  // Verify param: point; type: simple_byref
  DCHECK(point);
  if (!point)
    return 0;

  // Translate param: point; type: simple_byref
  CefPoint pointVal = point?*point:CefPoint();

  // Execute
  bool _retval = CefScrollViewCppToC::Get(reinterpret_cast<cef_scroll_view_t*>(
      self))->ConvertPointFromScreen(
      pointVal);

  // Restore param: point; type: simple_byref
  if (point)
    *point = pointVal;

  // Return type: bool
  return _retval;
}

int CEF_CALLBACK scroll_view_convert_point_to_window(struct _cef_view_t* self,
    cef_point_t* point) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return 0;
  // Verify param: point; type: simple_byref
  DCHECK(point);
  if (!point)
    return 0;

  // Translate param: point; type: simple_byref
  CefPoint pointVal = point?*point:CefPoint();

  // Execute
  bool _retval = CefScrollViewCppToC::Get(reinterpret_cast<cef_scroll_view_t*>(
      self))->ConvertPointToWindow(
      pointVal);

  // Restore param: point; type: simple_byref
  if (point)
    *point = pointVal;

  // Return type: bool
  return _retval;
}

int CEF_CALLBACK scroll_view_convert_point_from_window(struct _cef_view_t* self,
    cef_point_t* point) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return 0;
  // Verify param: point; type: simple_byref
  DCHECK(point);
  if (!point)
    return 0;

  // Translate param: point; type: simple_byref
  CefPoint pointVal = point?*point:CefPoint();

  // Execute
  bool _retval = CefScrollViewCppToC::Get(reinterpret_cast<cef_scroll_view_t*>(
      self))->ConvertPointFromWindow(
      pointVal);

  // Restore param: point; type: simple_byref
  if (point)
    *point = pointVal;

  // Return type: bool
  return _retval;
}

int CEF_CALLBACK scroll_view_convert_point_to_view(struct _cef_view_t* self,
    struct _cef_view_t* view, cef_point_t* point) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return 0;
  // Verify param: view; type: refptr_same
  DCHECK(view);
  if (!view)
    return 0;
  // Verify param: point; type: simple_byref
  DCHECK(point);
  if (!point)
    return 0;

  // Translate param: point; type: simple_byref
  CefPoint pointVal = point?*point:CefPoint();

  // Execute
  bool _retval = CefScrollViewCppToC::Get(reinterpret_cast<cef_scroll_view_t*>(
      self))->ConvertPointToView(
      CefViewCppToC::Unwrap(view),
      pointVal);

  // Restore param: point; type: simple_byref
  if (point)
    *point = pointVal;

  // Return type: bool
  return _retval;
}

int CEF_CALLBACK scroll_view_convert_point_from_view(struct _cef_view_t* self,
    struct _cef_view_t* view, cef_point_t* point) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return 0;
  // Verify param: view; type: refptr_same
  DCHECK(view);
  if (!view)
    return 0;
  // Verify param: point; type: simple_byref
  DCHECK(point);
  if (!point)
    return 0;

  // Translate param: point; type: simple_byref
  CefPoint pointVal = point?*point:CefPoint();

  // Execute
  bool _retval = CefScrollViewCppToC::Get(reinterpret_cast<cef_scroll_view_t*>(
      self))->ConvertPointFromView(
      CefViewCppToC::Unwrap(view),
      pointVal);

  // Restore param: point; type: simple_byref
  if (point)
    *point = pointVal;

  // Return type: bool
  return _retval;
}

}  // namespace


// CONSTRUCTOR - Do not edit by hand.

CefScrollViewCppToC::CefScrollViewCppToC() {
  GetStruct()->set_content_view = scroll_view_set_content_view;
  GetStruct()->get_content_view = scroll_view_get_content_view;
  GetStruct()->get_visible_content_rect = scroll_view_get_visible_content_rect;
  GetStruct()->has_horizontal_scrollbar = scroll_view_has_horizontal_scrollbar;
  GetStruct()->get_horizontal_scrollbar_height =
      scroll_view_get_horizontal_scrollbar_height;
  GetStruct()->has_vertical_scrollbar = scroll_view_has_vertical_scrollbar;
  GetStruct()->get_vertical_scrollbar_width =
      scroll_view_get_vertical_scrollbar_width;
  GetStruct()->base.as_browser_view = scroll_view_as_browser_view;
  GetStruct()->base.as_button = scroll_view_as_button;
  GetStruct()->base.as_panel = scroll_view_as_panel;
  GetStruct()->base.as_scroll_view = scroll_view_as_scroll_view;
  GetStruct()->base.as_textfield = scroll_view_as_textfield;
  GetStruct()->base.get_type_string = scroll_view_get_type_string;
  GetStruct()->base.to_string = scroll_view_to_string;
  GetStruct()->base.is_valid = scroll_view_is_valid;
  GetStruct()->base.is_attached = scroll_view_is_attached;
  GetStruct()->base.is_same = scroll_view_is_same;
  GetStruct()->base.get_delegate = scroll_view_get_delegate;
  GetStruct()->base.get_window = scroll_view_get_window;
  GetStruct()->base.get_id = scroll_view_get_id;
  GetStruct()->base.set_id = scroll_view_set_id;
  GetStruct()->base.get_group_id = scroll_view_get_group_id;
  GetStruct()->base.set_group_id = scroll_view_set_group_id;
  GetStruct()->base.get_parent_view = scroll_view_get_parent_view;
  GetStruct()->base.get_view_for_id = scroll_view_get_view_for_id;
  GetStruct()->base.set_bounds = scroll_view_set_bounds;
  GetStruct()->base.get_bounds = scroll_view_get_bounds;
  GetStruct()->base.get_bounds_in_screen = scroll_view_get_bounds_in_screen;
  GetStruct()->base.set_size = scroll_view_set_size;
  GetStruct()->base.get_size = scroll_view_get_size;
  GetStruct()->base.set_position = scroll_view_set_position;
  GetStruct()->base.get_position = scroll_view_get_position;
  GetStruct()->base.get_preferred_size = scroll_view_get_preferred_size;
  GetStruct()->base.size_to_preferred_size = scroll_view_size_to_preferred_size;
  GetStruct()->base.get_minimum_size = scroll_view_get_minimum_size;
  GetStruct()->base.get_maximum_size = scroll_view_get_maximum_size;
  GetStruct()->base.get_height_for_width = scroll_view_get_height_for_width;
  GetStruct()->base.invalidate_layout = scroll_view_invalidate_layout;
  GetStruct()->base.set_visible = scroll_view_set_visible;
  GetStruct()->base.is_visible = scroll_view_is_visible;
  GetStruct()->base.is_drawn = scroll_view_is_drawn;
  GetStruct()->base.set_enabled = scroll_view_set_enabled;
  GetStruct()->base.is_enabled = scroll_view_is_enabled;
  GetStruct()->base.set_focusable = scroll_view_set_focusable;
  GetStruct()->base.is_focusable = scroll_view_is_focusable;
  GetStruct()->base.is_accessibility_focusable =
      scroll_view_is_accessibility_focusable;
  GetStruct()->base.request_focus = scroll_view_request_focus;
  GetStruct()->base.set_background_color = scroll_view_set_background_color;
  GetStruct()->base.get_background_color = scroll_view_get_background_color;
  GetStruct()->base.convert_poi
_16_64, &step2[10],
            &step2[13]);
  butterfly(step1[12], step1[11], cospi_16_64, cospi_16_64, &step2[11],
            &step2[12]);

  // stage 7
  out[0] = _mm_add_epi16(step2[0], step1[15]);
  out[1] = _mm_add_epi16(step2[1], step1[14]);
  out[2] = _mm_add_epi16(step2[2], step2[13]);
  out[3] = _mm_add_epi16(step2[3], step2[12]);
  out[4] = _mm_add_epi16(step2[4], step2[11]);
  out[5] = _mm_add_epi16(step2[5], step2[10]);
  out[6] = _mm_add_epi16(step2[6], step1[9]);
  out[7] = _mm_add_epi16(step2[7], step1[8]);
  out[8] = _mm_sub_epi16(step2[7], step1[8]);
  out[9] = _mm_sub_epi16(step2[6], step1[9]);
  out[10] = _mm_sub_epi16(step2[5], step2[10]);
  out[11] = _mm_sub_epi16(step2[4], step2[11]);
  out[12] = _mm_sub_epi16(step2[3], step2[12]);
  out[13] = _mm_sub_epi16(step2[2], step2[13]);
  out[14] = _mm_sub_epi16(step2[1], step1[14]);
  out[15] = _mm_sub_epi16(step2[0], step1[15]);
}

static INLINE void idct16x16_10_pass1(const __m128i *const input /*input[4]*/,
                                      __m128i *const output /*output[16]*/) {
  const __m128i zero = _mm_setzero_si128();
  const __m128i k__cospi_p16_p16 = pair_set_epi16(cospi_16_64, cospi_16_64);
  const __m128i k__cospi_m16_p16 = pair_set_epi16(-cospi_16_64, cospi_16_64);
  __m128i step1[16], step2[16];

  transpose_16bit_4x4(input, output);

  // stage 2
  {
    const __m128i k
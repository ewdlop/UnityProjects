i.GetUtcOffset (date))));

				date = new DateTime (2014, 3, 30 , 3, 59, 0);
				Assert.IsFalse (tzi.IsDaylightSavingTime (date));
				Assert.AreEqual (new TimeSpan (2, 0, 0), tzi.GetUtcOffset (date));
				Assert.IsTrue (tzi.IsDaylightSavingTime (new DateTimeOffset (date, tzi.GetUtcOffset (date))));

				date = new DateTime (2014, 3, 30 , 4, 0, 0);
				Assert.IsTrue (tzi.IsDaylightSavingTime (date));
				Assert.AreEqual (new TimeSpan (3, 0, 0), tzi.GetUtcOffset (date));
				Assert.IsTrue (tzi.IsDaylightSavingTime (new DateTimeOffset (date, tzi.GetUtcOffset (date))));
			}

			[Test] //Covers #41349
			public void TestIsDST_DateTimeOffset ()
			{
				TimeZoneInfo tzi = TimeZoneInfo.FindSystemTimeZoneById (MapTimeZoneId ("Europe/Athens"));
				var date = new DateTime (2014, 3, 30 , 2, 0, 0);
				var offset = tzi.GetUtcOffset (date);
				var dateOffset = new DateTimeOffset (date, offset);
				Assert.IsFalse (tzi.IsDaylightSavingTime (dateOffset));

				date = new DateTime (2014, 3, 30 , 3, 0, 0);
				offset = tzi.GetUtcOffset (date);
				dateOffset = new DateTimeOffset (date, offset);
				Assert.IsTrue (tzi.IsDaylightSavingTime (dateOffset));
			}

			// https://github.com/mono/mono/issues/16742
			[Test]
			public void Bug_16472 ()
			{
				var parsedTime = DateTime.Parse ("1948-02-19T23:00:00Z", CultureInfo.InvariantCulture);
				var newTime = TimeZoneInfo.ConvertTime (parsedTime, TimeZoneInfo.FindSystemTimeZoneById (MapTimeZoneId ("Europe/Rome")));
				Assert.AreEqual (1948, newTime.Year);
			}

			// https://github.com/mono/mono/issues/9664
			[Test]
			public void Bug_9664 ()
			{
				TimeZoneInfo tzi;
				try {
					tzi = TimeZoneInfo.FindSystemTimeZoneById (MapTimeZoneId ("US/Central"));
				} catch (TimeZoneNotFoundException e) {
					Assert.Ignore ("Timezone US/Central not found.");
					return;
				}
				var date = new DateTime (2019, 3, 9, 21, 0, 0);
				Assert.IsFalse (tzi.IsDaylightSavingTime (date));
				Assert.AreEqual (new TimeSpan (-6, 0, 0), tzi.GetUtcOffset (date));

				date = new DateTime (2019, 3, 10, 2, 0, 0);
				Assert.IsFalse (tzi.IsDaylightSavingTime (date));
				Assert.AreEqual (new TimeSpan (-6, 0, 0), tzi.GetUtcOffset (date));

				date = new DateTime (2019, 3, 10, 2, 30, 0);
				Assert.IsFalse (tzi.IsDaylightSavingTime (date));
				Assert.AreEqual (new TimeSpan (-6, 0, 0), tzi.GetUtcOffset (date));

				date = new DateTime (2019, 3, 10, 3, 0, 0);
				Assert.IsTrue (tzi.IsDaylightSavingTime (date));
				Assert.AreEqual (new TimeSpan (-5, 0, 0), tzi.GetUtcOffset (date));

#if !WINAOT // https://github.com/mono/mono/issues/15439
				tzi = TimeZoneInfo.FindSystemTimeZoneById (MapTimeZoneId ("Europe/Vatican"));
				date = new DateTime (2018, 10, 28, 2, 15, 0);
				Assert.IsFalse (tzi.IsDaylightSavingTime (date));
				Assert.AreEqual (new TimeSpan (1, 0, 0), tzi.GetUtcOffset (date));

				tzi = TimeZoneInfo.FindSystemTimeZoneById (MapTimeZoneId ("Asia/Tehran"));
				date = new DateTime (2018, 9, 21, 23, 15, 0);
				Assert.IsFalse (tzi.IsDaylightSavingTime (date));
				Assert.AreEqual (new TimeSpan (3, 30, 0), tzi.GetUtcOffset (date));

				// for Greenwitch Mean Time (Guernsey)
				tzi = TimeZoneInfo.FindSystemTimeZoneById (MapTimeZoneId ("Europe/Guernsey"));
				date = new DateTime (2019, 10, 27, 1, 15, 0);
				Assert.IsFalse (tzi.IsDaylightSavingTime (date));
				Assert.AreEqual (new TimeSpan (0, 0, 0), tzi.GetUtcOffset (date));
#endif
			}

			[Test]
			public void Bug_16395 ()
			{
				// Cuba, Havana (Cuba Standard Time):    Jumps ahead at 12:00 AM on 3/8/2020 to 1:00 AM
				CheckJumpingIntoDST ("America/Havana",
									new DateTime (2020, 3, 8, 0, 0, 0), new DateTime (2020, 3, 8, 0, 30, 0), new DateTime (2020, 3, 8, 1, 0, 0), 
									new TimeSpan (-5, 0, 0), new TimeSpan (-4, 0, 0));

				// US, Kansas City, MO (US Central Time):    Jumps ahead at 2:00 AM on 3/8/2020 to 3:00 AM
				CheckJumpingIntoDST ("America/Chicago",
									new DateTime (2020, 3, 8, 2, 0, 0), new DateTime (2020, 3, 8, 2, 30, 0), new DateTime (2020, 3, 8, 3, 0, 0),
									new TimeSpan (-6, 0, 0), new TimeSpan (-5, 0, 0));

				// Anchorage, AK (Alaska Time):    Jumps ahead at 2:00 AM on 3/8/2020 to 3:00 AM
				CheckJumpingIntoDST ("America/Anchorage",
									new DateTime (2020, 3, 8, 2, 0, 0), new DateTime (2020, 3, 8, 2, 30, 0), new DateTime (2020, 3, 8, 3, 0, 0),
									new TimeSpan (-9, 0, 0), new TimeSpan (-8, 0, 0));

				// Azores ST (Ponta Delgada, Portugal):    Jumps ahead at 12:00 AM on 3/29/2020 to 1:00 AM
				CheckJumpingIntoDST ("Atlantic/Azores",
									new DateTime (2020, 3, 29, 0, 0, 0), new DateTime (2020, 3, 29, 0, 30, 0), new DateTime (2020, 3, 29, 1, 0, 0),
									new TimeSpan (-1, 0, 0), new TimeSpan (0, 0, 0));
									
				// Iran, Tehran (Iran ST):    Jumps ahead at 12:00 AM on 3/21/2020 to 1:00 AM
				CheckJumpingIntoDST ("Asia/Tehran",
									new DateTime (2020, 3, 21, 0, 0, 0), new DateTime (2020, 3, 21, 0, 30, 0), new DateTime (2020, 3, 21, 1, 0, 0),
									new TimeSpan (3, 30, 0), new TimeSpan (4, 30, 0));
									
				// Israel, Jerusalem (Israel ST):    Jumps ahead at 2:00 AM on 3/27/2020 to 3:00 AM
				CheckJumpingIntoDST ("Asia/Jerusalem",
									new DateTime (2020, 3, 27, 2, 0, 0), new DateTime (2020, 3, 27, 2, 30, 0), new DateTime (2020, 3, 27, 3, 0, 0),
									new TimeSpan (2, 0, 0), new TimeSpan (3, 0, 0));

				// Jordan, Amman (Eastern European ST):    Jumps ahead at 12:00 AM on 3/27/2020 to 1:00 AM
				CheckJumpingIntoDST ("Asia/Amman",
									new DateTime (2020, 3, 27, 0, 0, 0), new DateTime (2020, 3, 27, 0, 30, 0), new DateTime (2020, 3, 27, 1, 0, 0),
									new TimeSpan (2, 0, 0), new TimeSpan (3, 0, 0));

				// Albania, Tirana (Central European ST):    Jumps ahead at 2:00 AM on 3/29/2020 to 3:00 AM
				CheckJumpingIntoDST ("Europe/Tirane",
									new DateTime (2020, 3, 29, 2, 0, 0), new DateTime (2020, 3, 29, 2, 30, 0), new DateTime (2020, 3, 29, 3, 0, 0),
									new TimeSpan (1, 0, 0), new TimeSpan (2, 0, 0));

				// Austria, Vienna (Central European ST):    Jumps ahead at 2:00 AM on 3/29/2020 to 3:00 AM
				CheckJumpingIntoDST ("Europe/Vienna",
									new DateTime (2020, 3, 29, 2, 0, 0), new DateTime (2020, 3, 29, 2, 30, 0), new DateTime (2020,
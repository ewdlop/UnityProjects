sert(checkPixels<unsigned int>(uData, b1.min.x, b2.max.x, b1.min.y, b2.max.y,
                                             w));
            break;
        case 1:
            assert(checkPixels<float>(fData, b1.min.x, b2.max.x, b1.min.y, b2.max.y,
                                      w));
            break;
        case 2:
            assert(checkPixels<half>(hData, b1.min.x, b2.max.x, b1.min.y, b2.max.y,
                                     w));
            break;
        }

        break;
    }
    case 2:
    {
        DeepScanLineInputFile part(filename.c_str());

        DeepFrameBuffer frameBuffer;

        sampleCount.resizeErase(height, width);
        frameBuffer.insertSampleCountSlice (Slice (IMF::UINT,
                                            (char *) (&sampleCount[0][0]),
                                            sizeof (unsigned int) * 1,
                                            sizeof (unsigned int) * width));

        setInputDeepFrameBuffer(frameBuffer, pixelType,
                                deepUData, deepFData, deepHData, width, height);

        part.setFrameBuffer(frameBuffer);

        int l1, l2;
        l1 = rand() % height;
        l2 = rand() % height;
        if (l1 > l2) swap(l1, l2);

        part.readPixelSampleCounts(l1, l2);
     
    }

    virtual int getHFAType(void* hClass)
    {
        CorInfoException* pException = nullptr;
        int _ret = _callbacks->getHFAType(_thisHandle, &pException, hClass);
        if (pException != nullptr)
            throw pException;
        return _ret;
    }

    virtual int GetErrorHRESULT(void* pExceptionPointers)
    {
        CorInfoException* pException = nullptr;
        int _ret = _callbacks->GetErrorHRESULT(_thisHandle, &pException, pExceptionPointers);
        if (pException != nullptr)
            throw pException;
        return _ret;
    }

    virtual unsigned int GetErrorMessage(wchar_t* buffer, unsigned int bufferLength)
    {
        CorInfoException* pException = nullptr;
        unsigned int _ret = _callbacks->GetErrorMessage(_thisHandle, &pException, buffer, bufferLength);
        if (pException != nullptr)
            throw pException;
        return _ret;
    }

    virtual int FilterException(void* pExceptionPointers);
    virtual void HandleException(void* pExceptionPointers);
    virtual void ThrowExceptionForJitResult(int result)
    {
        CorInfoException* pException = nullptr;
        _callbacks->ThrowExceptionForJitResult(_thisHandle, &pException, result);
        if (pException != nullptr)
            throw pException;
    }

    virtual void ThrowExceptionForHelper(const void* throwHelper)
    {
        CorInfoException* pException = nullptr;
        _callbacks->ThrowExceptionForHelper(_thisHandle, &pException, throwHelper);
        if (pException != nullptr)
            throw pException;
    }

    virtual bool runWithErrorTrap(void* function, void* parameter);
    virtual void getEEInfo(void* pEEInfoOut)
    {
        CorInfoException* pException = nullptr;
        _callbacks->getEEInfo(_thisHandle, &pException, pEEInfoOut);
        if (pException != nullptr)
            throw pException;
    }

    virtual const wchar_t* getJitTimeLogFilename()
    {
        CorInfoException* pException = nullptr;
        const wchar_t* _ret = _callbacks->getJitTimeLogFilename(_thisHandle, &pException);
        if (pException != nullptr)
            throw pException;
        return _ret;
    }

    virtual unsigned int getMethodDefFromMethod(void* hMethod)
    {
        CorInfoException* pException = nullptr;
        unsigned int _ret = _callbacks->getMethodDefFromMethod(_thisHandle, &pException, hMethod);
        if (pException != nullptr)
            throw pException;
        return _ret;
    }

    virtual const char* getMethodName(void* ftn, const char** moduleName)
    {
        CorInfoException* pException = nullptr;
        const char* _ret = _callbacks->getMethodName(_thisHandle, &pException, ftn, moduleName);
        if (pException != nullptr)
            throw pException;
        return _ret;
    }

    virtual const char* getMethodNameFromMetadata(void* ftn, const char** className, const char** namespaceName)
    {
        CorInfoException* pException = nullptr;
        const char* _ret = _callbacks->getMethodNameFromMetadata(_thisHandle, &pException, ftn, className, namespaceName);
        if (pException != nullptr)
            throw pException;
        return _ret;
    }

    virtual unsigned getMethodHash(void* ftn)
    {
        CorInfoException* pException = nullptr;
        unsigned _ret = _callbacks->getMethodHash(_thisHandle, &pException, ftn);
        if (pException != nullptr)
            throw pException;
        return _ret;
    }

    virtual size_t findNameOfToken(void* moduleHandle, unsigned int token, char* szFQName, size_t FQNameCapacity)
    {
        CorInfoException* pException = nullptr;
        size_t _ret = _callbacks->findNameOfToken(_thisHandle, &pException, moduleHandle, token, szFQName, FQNameCapacity);
        if (pException != nullptr)
            throw pException;
        return _ret;
    }

    virtual bool getSystemVAmd64PassStructInRegisterDescriptor(void* structHnd, void* structPassInRegDescPtr)
    {
        CorInfoException* pException = nullptr;
        bool _ret = _callbacks->getSystemVAmd64PassStructInRegisterDescriptor(_thisHandle, &pException, structHnd, structPassInRegDescPtr);
        if (pException != nullptr)
            throw pException;
        return _ret;
    }

    virtual unsigned int getThreadTLSIndex(void** ppIndirection)
    {
        CorInfoException* pException = nullptr;
        unsigned int _ret = _callbacks->getThreadTLSIndex(_thisHandle, &pException, ppIndirection);
        if (pException != nullptr)
            throw pException;
        return _ret;
    }

    virtual const void* getInlinedCallFrameVptr(void** ppIndirection)
    {
        CorInfoException* pException = nullptr;
        const void* _ret = _callbacks->getInlinedCallFrameVptr(_thisHandle, &pException, ppIndirection);
        if (pException != nullptr)
            throw pException;
        return _ret;
    }

    virtual long* getAddrOfCaptureThreadGlobal(void** ppIndirection)
    {
        CorInfoException* pException = nullptr;
        long* _ret = _callbacks->getAddrOfCaptureThreadGlobal(_thisHandle, &
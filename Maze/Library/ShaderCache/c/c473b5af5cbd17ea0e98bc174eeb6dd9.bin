<?xml version="1.0" encoding="utf-8"?>
<Type Name="SoapHeader" FullName="System.Web.Services.Protocols.SoapHeader">
  <TypeSignature Language="C#" Value="public abstract class SoapHeader" Maintainer="auto" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Services</AssemblyName>
    <AssemblyPublicKey>
    </AssemblyPublicKey>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the &lt;link location="node:gtk-sharp/programming/threads"&gt;Gtk# Thread Programming&lt;/link&gt; for details.</ThreadSafetyStatement>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Xml.Serialization.XmlType(IncludeInSchema=false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Xml.Serialization.SoapType(IncludeInSchema=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>SOAP headers offer a method for passing data to and from an XML Web service method if the data is not directly related to the XML Web service method's primary functionality. For instance, an XML Web service might contain several XML Web service methods that each require a custom authentication scheme. Instead of adding parameters to each XML Web service method for the custom authentication scheme, a <see cref="T:System.Web.Services.Protocols.SoapHeaderAttribute" />, referring to a class deriving from <see cref="T:System.Web.Services.Protocols.SoapHeader" />, can be applied to each XML Web service method. The implementation for the class deriving from <see cref="T:System.Web.Services.Protocols.SoapHeader" /> handles the custom authentication scheme. In this manner, the XML Web service method implements only the functionality specific to it and adds additional functionality using a SOAP header.</para>
      <para>The following list outlines the basic steps to receiving and processing a SOAP header: </para>
      <list type="ordered">
        <item>
          <para>Create a class that derives from <see cref="T:System.Web.Services.Protocols.SoapHeader" /> representing the data passed into the SOAP header.</para>
        </item>
        <item>
          <para>Add a member to the class implementing an XML Web service or an XML Web service client proxy class, of the type created in the first step.</para>
        </item>
        <item>
          <para>Apply a <see cref="T:System.Web.Services.Protocols.SoapHeaderAttribute" /> to the XML Web service method or the corresponding method in the proxy class, specifying the member created in the second step in the <see cref="P:System.Web.Services.Protocols.SoapHeaderAttribute.MemberName" /> property.</para>
        </item>
        <item>
          <para>Within the XML Web service method or XML Web service client code, access the <see cref="P:System.Web.Services.Protocols.SoapHeaderAttribute.MemberName" /> property to process the data sent in the SOAP header.</para>
        </item>
      </list>
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>When overridden in a derived class, represents the content of a SOAP header.</para>
    </summary>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SoapHeader ();" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters />
      <Docs>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="
 uint(UIntPtr value)
        {
#if WIN32
            return (uint)value.m_value;
#else
            return checked((uint)value.m_value);
#endif
        }   

        [System.Security.SecuritySafeCritical]  // auto-generated
        [System.Runtime.Versioning.NonVersionable]
        public unsafe static explicit operator ulong (UIntPtr  value) 
        {
            return (ulong)value.m_value;
        }

        [System.Security.SecurityCritical]
        [CLSCompliant(false)]
        [System.Runtime.Versioning.NonVersionable]
        public static unsafe explicit operator UIntPtr (void* value)
        {
            return new UIntPtr(value);
        }

        [System.Security.SecurityCritical]
        [CLSCompliant(false)]
        [System.Runtime.Versioning.NonVersionable]
        public static unsafe explicit operator void* (UIntPtr value)
        {
            return value.m_value;
        }


        [System.Security.SecuritySafeCritical]  // auto-generated
        [System.Runtime.Versioning.NonVersionable]
        public unsafe static bool operator == (UIntPtr value1, UIntPtr value2) 
        {
            return value1.m_value == value2.m_value;
        }


        [System.Security.SecuritySafeCritical]  // auto-generated
        [System.Runtime.Versioning.NonVersionable]
        public unsafe static bool operator != (UIntPtr value1, UIntPtr value2) 
        {
            return value1.m_value != value2.m_value;
        }

        [System.Runtime.Versioning.NonVersionable]
        public static UIntPtr Add(UIntPtr pointer, int offset) {
            return pointer + offset;
        }

        [System.Runtime.Versioning.NonVersionable]
        public static UIntPtr operator +(UIntPtr pointer, int offset) {
            #if WIN32
                return new UIntPtr(pointer.ToUInt32() + (uint)offset);
            #else
                return new UIntPtr(pointer.ToUInt64() + (ulong)offset);
            #endif
        }

        [System.Runtime.Versioning.NonVersionable]
        public static UIntPtr Subtract(UIntPtr pointer, int offset) {
            return pointer - offset;
        }

        [System.Runtime.Versioning.NonVersionable]
        public static UIntPtr operator -(UIntPtr pointer, int offset) {
            #if WIN32
                return new UIntPtr(pointer.ToUInt32() - (uint)offset);
            #else
                return new UIntPtr(pointer.ToUInt64() - (ulong)offset);
            #endif
        }

        public static int Size
        {
            [System.Runtime.Versioning.NonVersionable]
            get
            {
#if WIN32
               
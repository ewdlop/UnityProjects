// Copyright (c) 2017 The Chromium Embedded Framework Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the CEF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//

#include "libcef_dll/cpptoc/views/browser_view_cpptoc.h"
#include "libcef_dll/cpptoc/views/button_cpptoc.h"
#include "libcef_dll/cpptoc/views/panel_cpptoc.h"
#include "libcef_dll/cpptoc/views/scroll_view_cpptoc.h"
#include "libcef_dll/cpptoc/views/textfield_cpptoc.h"
#include "libcef_dll/cpptoc/views/view_cpptoc.h"
#include "libcef_dll/cpptoc/views/window_cpptoc.h"
#include "libcef_dll/ctocpp/views/view_delegate_ctocpp.h"


// GLOBAL FUNCTIONS - Body may be edited by hand.

CEF_EXPORT cef_scroll_view_t* cef_scroll_view_create(
    struct _cef_view_delegate_t* delegate) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: delegate

  // Execute
  CefRefPtr<CefScrollView> _retval = CefScrollView::CreateScrollView(
      CefViewDelegateCToCpp::Wrap(delegate));

  // Return type: refptr_same
  return CefScrollViewCppToC::Wrap(_retval);
}


namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

void CEF_CALLBACK scroll_view_set_content_view(struct _cef_scroll_view_t* self,
    struct _cef_view_t* view) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;
  // Verify param: view; type: refptr_same
  DCHECK(view);
  if (!view)
    return;

  // Execute
  CefScrollViewCppToC::Get(self)->SetContentView(
      CefViewCppToC::Unwrap(view));
}

struct _cef_view_t* CEF_CALLBACK scroll_view_get_content_view(
    struct _cef_scroll_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

  // Execute
  CefRefPtr<CefView> _retval = CefScrollViewCppToC::Get(self)->GetContentView();

  // Return type: refptr_same
  return CefViewCppToC::Wrap(_retval);
}

cef_rect_t CEF_CALLBACK scroll_view_get_visible_content_rect(
    struct _cef_scroll_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return CefRect();

  // Execute
  cef_rect_t _retval = CefScrollViewCppToC::Get(self)->GetVisibleContentRect();

  // Return type: simple
  return _retval;
}

int CEF_CALLBACK scroll_view_has_horizontal_scrollbar(
    struct _cef_scroll_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return 0;

  // Execute
  bool _retval = CefScrollViewCppToC::Get(self)->HasHorizontalScrollbar();

  // Return type: bool
  return _retval;
}

int CEF_CALLBACK scroll_view_get_horizontal_scrollbar_height(
    struct _cef_scroll_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return 0;

  // Execute
  int _retval = CefScrollViewCppToC::Get(self)->GetHorizontalScrollbarHeight();

  // Return type: simple
  return _retval;
}

int CEF_CALLBACK scroll_view_has_vertical_scrollbar(
    struct _cef_scroll_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return 0;

  // Execute
  bool _retval = CefScrollViewCppToC::Get(self)->HasVerticalScrollbar();

  // Return type: bool
  return _retval;
}

int CEF_CALLBACK scroll_view_get_vertical_scrollbar_width(
    struct _cef_scroll_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return 0;

  // Execute
  int _retval = CefScrollViewCppToC::Get(self)->GetVerticalScrollbarWidth();

  // Return type: simple
  return _retval;
}

cef_browser_view_t* CEF_CALLBACK scroll_view_as_browser_view(
    struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

  // Execute
  CefRefPtr<CefBrowserView> _retval = CefScrollViewCppToC::Get(
      reinterpret_cast<cef_scroll_view_t*>(self))->AsBrowserView();

  // Return type: refptr_same
  return CefBrowserViewCppToC::Wrap(_retval);
}

cef_button_t* CEF_CALLBACK scroll_view_as_button(struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

  // Execute
  CefRefPtr<CefButton> _retval = CefScrollViewCppToC::Get(
      reinterpret_cast<cef_scroll_view_t*>(self))->AsButton();

  // Return type: refptr_same
  return CefButtonCppToC::Wrap(_retval);
}

cef_panel_t* CEF_CALLBACK scroll_view_as_panel(struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

  // Execute
  CefRefPtr<CefPanel> _retval = CefScrollViewCppToC::Get(
      reinterpret_cast<cef_scroll_view_t*>(self))->AsPanel();

  // Return type: refptr_same
  return CefPanelCppToC::Wrap(_retval);
}

cef_scroll_view_t* CEF_CALLBACK scroll_view_as_scroll_view(
    struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

  // Execute
  CefRefPtr<CefScrollView> _retval = CefScrollViewCppToC::Get(
      reinterpret_cast<cef_scroll_view_t*>(self))->AsScrollView();

  // Return type: refptr_same
  return CefScrollViewCppToC::Wrap(_retval);
}

cef_textfield_t* CEF_CALLBACK scroll_view_as_textfield(
    struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

  // Execute
  CefRefPtr<CefTextfield> _retval = CefScrollViewCppToC::Get(
      reinterpret_cast<cef_scroll_view_t*>(self))->AsTextfield();

  // Return type: refptr_same
  return CefTextfieldCppToC::Wrap(_retval);
}

cef_string_userfree_t CEF_CALLBACK scroll_view_get_type_string(
    struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

  // Execute
  CefString _retval = CefScrollViewCppToC::Get(
      reinterpret_cast<cef_scroll_view_t*>(self))->GetTypeString();

  // Return type: string
  return _retval.DetachToUserFree();
}

cef_string_userfree_t CEF_CALLBACK scroll_view_to_string(
    struct _cef_view_t* self, int include_children) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

  // Execute
  CefString _retval = CefScrollViewCppToC::Get(
      reinterpret_cast<cef_scroll_view_t*>(self))->ToString(
      include_children?true:false);

  // Return type: string
  return _retval.DetachToUserFree();
}

int CEF_CALLBACK scroll_view_is_valid(struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return 0;

  // Execute
  bool _retval = CefScrollViewCppToC::Get(reinterpret_cast<cef_scroll_view_t*>(
      self))->IsValid();

  // Return type: bool
  return _retval;
}

int CEF_CALLBACK scroll_view_is_attached(struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return 0;

  // Execute
  bool _retval = CefScrollViewCppToC::Get(reinterpret_cast<cef_scroll_view_t*>(
      self))->IsAttached();

  // Return type: bool
  return _retval;
}

int CEF_CALLBACK scroll_view_is_same(struct _cef_view_t* self,
    struct _cef_view_t* that) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return 0;
  // Verify param: that; type: refptr_same
  DCHECK(that);
  if (!that)
    return 0;

  // Execute
  bool _retval = CefScrollViewCppToC::Get(reinterpret_cast<cef_scroll_view_t*>(
      self))->IsSame(
      CefViewCppToC::Unwrap(that));

  // Return type: bool
  return _retval;
}

struct _cef_view_delegate_t* CEF_CALLBACK scroll_view_get_delegate(
    struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

  // Execute
  CefRefPtr<CefViewDelegate> _retval = CefScrollViewCppToC::Get(
      reinterpret_cast<cef_scroll_view_t*>(self))->GetDelegate();

  // Return type: refptr_diff
  return CefViewDelegateCToCpp::Unwrap(_retval);
}

struct _cef_window_t* CEF_CALLBACK scroll_view_get_window(
    struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

  // Execute
  CefRefPtr<CefWindow> _retval = CefScrollViewCppToC::Get(
      reinterpret_cast<cef_scroll_view_t*>(self))->GetWindow();

  // Return type: refptr_same
  return CefWindowCppToC::Wrap(_retval);
}

int CEF_CALLBACK scroll_view_get_id(struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return 0;

  // Execute
  int _retval = CefScrollViewCppToC::Get(reinterpret_cast<cef_scroll_view_t*>(
      self))->GetID();

  // Return type: simple
  return _retval;
}

void CEF_CALLBACK scroll_view_set_id(struct _cef_view_t* self, int id) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;

  // Execute
  CefScrollViewCppToC::Get(reinterpret_cast<cef_scroll_view_t*>(self))->SetID(
      id);
}

int CEF_CALLBACK scroll_view_get_group_id(struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return 0;

  // Execute
  int _retval = CefScrollViewCppToC::Get(reinterpret_cast<cef_scroll_view_t*>(
      self))->GetGroupID();

  // Return type: simple
  return _retval;
}

void CEF_CALLBACK scroll_view_set_group_id(struct _cef_view_t* self,
    int group_id) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;

  // Execute
  CefScrollViewCppToC::Get(reinterpret_cast<cef_scroll_view_t*>(
      self))->SetGroupID(
      group_id);
}

struct _cef_view_t* CEF_CALLBACK scroll_view_get_parent_view(
    struct _cef_view_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

  // Execute
  CefRefPtr<CefView> _retval = CefScrollViewCppToC::Get(
      reinterpret_cast<cef_scroll_view_t*>(self))->GetParentView();

  // Return type: refptr_same
  return CefViewCppToC::Wrap(_retval);
}

struct _cef_view_t* CEF_CALLBACK scroll_view_get_view_for_id(
    struct _cef_view_t* self, int id) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

  // Execute
  CefRefPtr<CefView> _retval = CefScrollViewCppToC::Get(
      reinterpret_cast<cef_scroll_view_t*>(self))->GetViewForID(
      id);

  // Return type: refptr_same
  return CefViewCppToC::Wrap(_retval);
}

void CEF_CALLBACK scroll_view_set_bounds(struct _cef_view_t* self,
    const cef_rect_t* bounds) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;
  // Verify param: bounds; type: simple_byref_const
  DCHECK(bounds);
  if (!bounds)
    return;

  // Translate param: boun
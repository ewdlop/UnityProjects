/* krb5_asn.h */
/*
 * Written by Vern Staats <staatsvr@asc.hpc.mil> for the OpenSSL project, **
 * using ocsp/{*.h,*asn*.c} as a starting point
 */

/* ====================================================================
 * Copyright (c) 1998-2000 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@cryptsoft.com).
 *
 */

#ifndef HEADER_KRB5_ASN_H
# define HEADER_KRB5_ASN_H

/*
 * #include <krb5.h>
 */
# include <openssl/safestack.h>

#ifdef  __cplusplus
extern "C" {
#endif

/*
 * ASN.1 from Kerberos RFC 1510
 */

/*-     EncryptedData ::=   SEQUENCE {
 *              etype[0]                      INTEGER, -- EncryptionType
 *              kvno[1]                       INTEGER OPTIONAL,
 *              cipher[2]                     OCTET STRING -- ciphertext
 *      }
 */
typedef struct krb5_encdata_st {
    ASN1_INTEGER *etype;
    ASN1_INTEGER *kvno;
    ASN1_OCTET_STRING *cipher;
} KRB5_ENCDATA;

DECLARE_STACK_OF(KRB5_ENCDATA)

/*-     PrincipalName ::=   SEQUENCE {
 *              name-type[0]                  INTEGER,
 *              name-string[1]                SEQUENCE OF GeneralString
 *      }
 */
typedef struct krb5_princname_st {
    ASN1_INTEGER *nametype;
    STACK_OF(ASN1_GENERALSTRING) *namestring;
} KRB5_PRINCNAME;

DECLARE_STACK_OF(KRB5_PRINCNAME)

/*-     Ticket ::=      [APPLICATION 1] SEQUENCE {
 *              tkt-vno[0]                    INTEGER,
 *              realm[1]                      Realm,
 *              sname[2]                      PrincipalName,
 *              enc-part[3]                   EncryptedData
 *      }
 */
typedef struct krb5_tktbody_st {
    ASN1_INTEGER *tktvno;
    ASN1_GENERALSTRING *realm;
    KRB5_PRINCNAME *sname;
    KRB5_ENCDATA *encdata;
} KRB5_TKTBODY;

typedef STACK_OF(KRB5_TKTBODY) KRB5_TICKET;
DECLARE_STACK_OF(KRB5_TKTBODY)

/*-     AP-REQ ::=      [APPLICATION 14] SEQUENCE {
 *              pvno[0]                       INTEGER,
 *              msg-type[1]                   INTEGER,
 *              ap-options[2]                 APOptions,
 *              ticket[3]                     Ticket,
 *              authenticator[4]              EncryptedData
 *      }
 *
 *      APOptions ::=   BIT STRING {
 *              reserved(0), use-session-key(1), mutual-required(2) }
 */
typedef struct krb5_ap_req_st {
    ASN1_INTEGER *pvno;
    ASN1_INTEGER *msgtype;
    ASN1_BIT_STRING *apoptions;
    KRB5_TICKET *ticket;
    KRB5_ENCDATA *authenticator;
} KRB5_APREQBODY;

typedef STACK_OF(KRB5_APREQBODY) KRB5_APREQ;
DECLARE_STACK_OF(KRB5_APREQBODY)

/*      Authenticator Stuff     */

/*-     Checksum ::=   SEQUENCE {
 *              cksumtype[0]                  INTEGER,
 *              checksum[1]                   OCTET STRING
 *      }
 */
typedef struct krb5_checksum_st {
    ASN1_INTEGER *ctype;
    ASN1_OCTET_STRING *checksum;
} KRB5_CHECKSUM;

DECLARE_STACK_OF(KRB5_CHECKSUM)

/*-     EncryptionKey ::=   SEQUENCE {
 *              keytype[0]                    INTEGER,
 *              keyvalue[1]                   OCTET STRING
 *      }
 */
typedef struct krb5_encryptionkey_st {
    ASN1_INTEGER *ktype;
    ASN1_OCTET_STRING *keyvalue;
} KRB5_ENCKEY;

DECLARE_STACK_OF(KRB5_ENCKEY)

/*-     AuthorizationData ::=   SEQUENCE OF SEQUENCE {
 *              ad-type[0]                    INTEGER,
 *              ad-data[1]                    OCTET STRING
 *      }
 */
typedef struct krb5_authorization_st {
    ASN1_INTEGER *adtype;
    ASN1_OCTET_STRING *addata;
} KRB5_AUTHDATA;

DECLARE_STACK_OF(KRB5_AUTHDATA)

/*-     -- Unencrypted authenticator
 *      Authenticator ::=    [APPLICATION 2] SEQUENCE    {
 *              authenticator-vno[0]          INTEGER,
 *              crealm[1]                     Realm,
 *              cname[2]                      PrincipalName,
 *              cksum[3]                      Checksum OPTIONAL,
 *              cusec[4]                      INTEGER,
 *              ctime[5]                      KerberosTime,
 *              subkey[6]                     EncryptionKey OPTIONAL,
 *              seq-number[7]                 INTEGER OPTIONAL,
 *              authorization-data[8]         AuthorizationData OPTIONAL
 *      }
 */
typedef struct krb5_authenticator_st {
    ASN1_INTEGER *avno;
    ASN1_GENERALSTRING *crealm;
    KRB5_PRINCNAME *cname;
    KRB5_CHECKSUM *cksum;
    ASN1_INTEGER *cusec;
    ASN1_GENERALIZEDTIME *ctime;
    KRB5_ENCKEY *subkey;
    ASN1_INTEGER *seqnum;
    KRB5_AUTHDATA *authorization;
} KRB5_AUTHENTBODY;

typedef STACK_OF(KRB5_AUTHENTBODY) KRB5_AUTHENT;
DECLARE_STACK_OF(KRB5_AUTHENTBODY)

/*-  DECLARE_ASN1_FUNCTIONS(type) = DECLARE_ASN1_FUNCTIONS_name(type, type) =
 *      type *name##_new(void);
 *      void name##_free(type *a);
 *      DECLARE_ASN1_ENCODE_FUNCTIONS(type, name, name) =
 *       DECLARE_ASN1_ENCODE_FUNCTIONS(type, itname, name) =
 *        type *d2i_##name(type **a, const unsigned char **in, long len);
 *        int i2d_##name(type *a, unsigned char **out);
 *        DECLARE_ASN1_ITEM(itname) = OPENSSL_EXTERN const ASN1_ITEM itname##_it
 */

DECLARE_ASN1_FUNCTIONS(KRB5_ENCDATA)
DECLARE_ASN1_FUNCTIONS(KRB5_PRINCNAME)
DECLARE_ASN1_FUNCTIONS(KRB5_TKTBODY)
DECLARE_ASN1_FUNCTIONS(KRB5_APREQBODY)
DECLARE_ASN1_FUNCTIONS(KRB5_TICKET)
DECLARE_ASN1_FUNCTIONS(KRB5_APREQ)

DECLARE_ASN1_FUNCTIONS(KRB5_CHECKSUM)
DECLARE_ASN1_FUNCTIONS(KRB5_ENCKEY)
DECLARE_ASN1_FUNCTIONS(KRB5_AUTHDATA)
DECLARE_ASN1_FUNCTIONS(KRB5_AUTHENTBODY)
DECLARE_ASN1_FUNCTIONS(KRB5_AUTHENT)

/* BEGIN ERROR CODES */
/*
 * The following lines are auto generated by the script mkerr.pl. Any changes
 * made after this point may be overwritten when the script is next run.
 */

#ifdef  __cplusplus
}
#endif
#endif
                                                                                                                                                                                                                                                                                                           æ9¥ûVSºä–ª8„’ÁÍ!r~‹àÌø,ÿ	BÕaød>˜ª∂¸Ó`hªÏ»ÂîüØÿ#òX±îT¯‡î!E\`‡<6mÓhhÏ≤î∑| Ã,˘Û˝ïX  ùw—èXìEU÷R”e=POc∆9=Á7ºÍ”…%Ÿπ˙‰rfoæ˝´¨VŒ≥„ï◊ƒ‚8ÓÛDp{`ô≈t
:ﬂÎæ/~5Í∞mÀˆ¡#M5{§¯V-Ö"˛©0ˇ≥6ÑΩVR¸7'°m@-¸/“ƒÚà…:}—íKÀ“sÔ#ºˆwêzÇó‚˚l¥Ç:∫EÃÂΩÏ:w'zÀ?÷ÏÙß√~lk•⁄lH∫v Æ°+æk“HR,@y}ëïWª˝A%Ú†®∞ıy¬‡~Hü$s%Ó1çì•
‘§ñÒ%˘VògƒNº„€˛d˚=›~Â˝«±ˇW)ÚYùì◊>⁄òœ·xqåTˆÁ˛çû~w«e ˜]¯%¨≠\%ﬂ∏®)˜À‘XıúICF¢]∞¢‘Xπb§[¸ÜˇÂ\µD≠¿J•1z£H6<fwùb‘pˆèæÃC˝Ë0A∆√C'?˛Füy¬›Q_æÚÕÿâo⁄â∂Í©±!"Ç∑S}ånvù5óCÂ≥k=Y†fW∂ô\æµÛ≤·˙⁄&òw+¥∞Ù8´MièCá;ˆ∏˘’M6‹ﬁ˛HÈø∂†Ã•∫;˙˝É≈DMò ‚R≤óæäS—Hì”Á
Èè@C_pØ ˚t¸ãq "¨	‚÷òH∂∆‹±◊:íœ`(π˛|f#®/üà8ˆ˛≈¯¬K«€÷A(ƒ<ñwıgoÇı∆ 8ãÖ7éÅˇSƒ¡à•`.ä3üd£$ó:ï´Œæ?®ˆü¯ﬂcç—¬KS€Œ5øgr0ñÙøü¢Bhˆ0XŸm(ˆdóÆ
Óœy7üıù´#((fmˇâíyºπ&Y⁄\ÃÄ]  µ&ñùT∏3qÖjÕH⁄£y1!ŒÚ†~B„ìHu+7x¥°.Â`êB
ænÒókAñ†GÆà’ü#w(–ƒn©êÁåg?øpúƒ±ÿo	~ bFÊa» ˆjﬁØÔïYV∆∑û∫–Ø/åtØ“–ˇ≥·öˇ"∂“(üPÂTÈç˝‚Êê((Ÿ9ÉE6áA®è√	⁄væ~Çjó0‚Õ˜‰6>•◊Ú≠ÍvàÕƒŒ9˛ªwBj˜”â‚∫h⁄!¬æÍm"8ÑÊÚSÊAJ†'…≠`8Ô#Ãê>‡]âkÍC|ª4oJz‹›-Ö±‡˘±çhaTh÷öë~óı“ÿ<;ø¡ï†nÏû”ÇqÓ	uRæõæylò®Ñ¸ˇ±O	¸F{‰ù/<øã«à‰TV"ù≤÷m0ªdΩ'< ∑2Ü˚$±¯`ÿí¶æ;ÿLºHãÅ[é ⁄WmõÓóƒﬁ’égèÇ6©˜Qˆ|6∏mf;«õŸO“ãñ£ÑV;3ñöÃø'x∏¸´æ9W%âï´·é{FA7%rÜΩz¿7GÌ 90ˇP≥¯‘
[¿¡Qƒ&Ó›·X1øµP$ê∆∫Q¡°ΩLBß6ØtáÄ◊ö⁄ãåª(⁄#Â|Á™õ‡k–≥Pπ8–Buåß>mû#Íïÿë≤7§?L“uTáÓp#Úπ˜sm¸ÖÓ<ÍƒT¯póa7.oH∂_ï°z•àQ´^‡æÀﬂ[∆®QÏjöœä∂›’ÓådÛ∆ìsÁØ"» uΩèZŒÌÉÔ´“ı1Z‹ˆ=õœZ€∫Ô:–U©¿2ô§î‡2É8_$ñäkl”‹"§ﬁ√	ô˛¥—‹ú˜Ø‹î/,ïmÓ]¿ÏëHÓ©Í¥ƒÜ
¿IhsΩ,Ëz¶î˘hÜ»rN4fX¯ò‹⁄|.ç!ﬂ{Â‚JjÎ0pñ1≥8áìRh´ÒÕ≈ïìç™¢∂ù[`∑fØ<¶Yx∫÷x÷˙ÌF7Ø≈NJƒ—Y¶”ëØÔ≥u`c^åE¶µûJ≈åÄr»“ÅxÎ›ÓhG≈Æx„z>í∏¶ñ „T.$·¥ws~y2e™Ωé†øb™uyØ#®Ú≈+	2∆YºvÙÓÙxÙÄ”q©O*OdøöÌµÄá!/($åM¡'/‡Ç[°5˝SbÑwå˘¬¢∂e¯UvdÏgVl EÇqŸÌge◊˜…ËÉ‘’ôp◊6k¿°åK¬∑îO[~ad_jªy!%)˛ì ûô¿ÈOP”›dn	G*ºòO†&ZÑ‹Û9˙˘Õ¸Ê(¢]˜eÏÁlWh˚Dåî,}té’‘ÿÕWPDˆ∂Û%o—#‚Î¬T˙œà∑∆C’¸O≤T¸ìù8±ä˘R‰z°.õp¸ÕpÒ˘∑"3˛§iàÂπÎ?·÷øár˘
ªﬁ‰döC>m*Q∞‚LWn©g ~WQlÛI0}ïfbÏô €óè∑–˙9€jﬂndTVgAv‰n∫¶PŒ1µ);úØøÒö3ÀΩ◊F»:H¢Ón∫PdÎ~z=$Áf‰ÚŒ¨ïIîü;Ú‰@°Ë]=V´$Åÿ^Ø(∑¡ÕF4J8áã¨Á˙uê`•p2√Ëµ‡ñˆ"OÊãU3ÌπZ%0óD}96 Ó∆;@	ÂÒgcãQØËåÌ®t´ÿ_ﬁ~¨{®GkyÕ8zØ(ˆﬂ¥2aÕË3{–˘§ŸÅ7O±•ˇ‹ÈÓÿœú\-’™L˘+◊Å0 >ƒ@k>ˆ˝°B«Û}ÍÂc —ì2√i˜_JZ;,~Nˆ"^â+í◊v'˚òæ≠ö¢äÒa§˘õ`n ⁄¡éBaàF˛CƒK.«”%oﬁ’v°YÉ<§î5Ø¯:_®Á´xíÒ…éS}	∫V0öÒR;3⁄ÃÒr4Ë¡1Á‚ıv&ºƒq”Ï˜ÖÎv8‹ï<ÆÂ£Ã<xÊ≤|⁄íÂ< l.Æ`#&ﬁ~!ø/&µô)›ïf–û»X∞Î~¿úr'åﬂÆmì.B∂∏¨c¬∆ö5\ÈÃ˛Áüt∂∏ﬂ%©_åGSﬁ(·‘ÉØﬂ8º,Æ≤+c.≤}-”w/È%¥^QD¡óÃ ÑcoJX{Eµ@k”—√˚Ë…≠<¢MÔ)	⁄–H¥
»ÿn˝6oÌ˚_îÙ≤x]0äàt¯¿Bc9M•«JTh&m›´ç„ö¥ø¨®≤ N,∏!√BzÅ≈‘‚DÓÆΩd4—l¿+4e‚ŒŸÏ¥Û¶XÅOÆÆVL≠|_7G∫Íùûû°SÔæ£Q´4√œwı|æ3@¡%#¨^,ãLS¡«√ÍòÜz˝jÇéﬁ÷^Sˇ_Po““ÊY≥uÆïÒKX|m©L4°Á≤äf’ê}u‰`a£ˇÃu• xùîÒ⁄{„ãm§°È1Ë˙‹Sπh¿3çoå«Uapa8vàx≥´€Ø}ﬁ? ∫%{oﬁÃ⁄¸π,≠•›≤Õ˘∆Lqíãî™E`7e¿*Y∑Ãó·∑AËYWRkÒ‹Pıæ„≠V±Ñ]h®î4íèœw9ÆıÛFÎÌ™q≥ä¨LÑÿP´˚á•\R€ˇ9ºŒÈ5çAo'õ(P/ÌPƒZk∆t¸lÃ¨F&^$ZvaÁù ª´·◊◊¡è⁄…`4§x\|-5¸∞·M~Œª?¥÷ÕX„l{8÷SQ©Q§∞º:≤å∑dˆÏˆF@ œó∑ƒ∏D˜\üP\œa7/”{9–Õ¥‚R÷¢Z!‡◊ˇ‘º}¡õiLkÆ‘ÌN≠ß+øn6øΩ≈úÿ4ijí6% í´tzsÀ«∂ 8îöπ ef™ =≠¸≥7Ä¿÷ÿ[°ΩÅ√Ù—ÿ„º0∫Mq&¯O\ø<íü9U4ç#Ï&(‹^. ÷!j}z‰ZJjïL∞±éÚÁR—¶Ãä°ë~â~õJ¨€ ∞!ùœï•Gv+´<;~íâ°?ÎHã&ë”'ÿ*'ZV^GÅ˝ˇµ‹dîŒ7~ ™ãQw „TÁa†≥ôj‚€”ÙB4.µe
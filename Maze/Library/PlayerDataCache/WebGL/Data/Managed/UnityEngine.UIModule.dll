   OBJ_X509,45L

#  define SN_crl_distribution_points      "crlDistributionPoints"
#  define LN_crl_distribution_points      "X509v3 CRL Distribution Points"
#  define NID_crl_distribution_points     103
#  define OBJ_crl_distribution_points     OBJ_id_ce,31L

#  define SN_md5WithRSA                   "RSA-NP-MD5"
#  define LN_md5WithRSA                   "md5WithRSA"
#  define NID_md5WithRSA                  104
#  define OBJ_md5WithRSA                  OBJ_algorithm,3L

#  define SN_serialNumber                 "SN"
#  define LN_serialNumber                 "serialNumber"
#  define NID_serialNumber                105
#  define OBJ_serialNumber                OBJ_X509,5L

#  define SN_title                        "T"
#  define LN_title                        "title"
#  define NID_title                       106
#  define OBJ_title                       OBJ_X509,12L

#  define SN_description                  "D"
#  define LN_description                  "description"
#  define NID_description                 107
#  define OBJ_description                 OBJ_X509,13L

/* CAST5 is CAST-128, I'm just sticking with the documentation */
#  define SN_cast5_cbc                    "CAST5-CBC"
#  define LN_cast5_cbc                    "cast5-cbc"
#  define NID_cast5_cbc                   108
#  define OBJ_cast5_cbc                   1L,2L,840L,113533L,7L,66L,10L

#  define SN_cast5_ecb                    "CAST5-ECB"
#  define LN_cast5_ecb                    "cast5-ecb"
#  define NID_cast5_ecb                   109

#  define SN_cast5_cfb64                  "CAST5-CFB"
#  define LN_cast5_cfb64                  "cast5-cfb"
#  define NID_cast5_cfb64                 110

#  define SN_cast5_ofb64                  "CAST5-OFB"
#  define LN_cast5_ofb64                  "cast5-ofb"
#  define NID_cast5_ofb64                 111

#  define LN_pbeWithMD5AndCast5_CBC       "pbeWithMD5AndCast5CBC"
#  define NID_pbeWithMD5AndCast5_CBC      112
#  define OBJ_pbeWithMD5AndCast5_CBC      1L,2L,840L,113533L,7L,66L,12L

/*-
 * This is one sun will soon be using :-(
 * id-dsa-with-sha1 ID  ::= {
 *   iso(1) member-body(2) us(840) x9-57 (10040) x9cm(4) 3 }
 */
#  define SN_dsaWithSHA1                  "DSA-SHA1"
#  define LN_dsaWithSHA1                  "dsaWithSHA1"
#  define NID_dsaWithSHA1                 113
#  define OBJ_dsaWithSHA1                 1L,2L,840L,10040L,4L,3L

#  define NID_md5_sha1                    114
#  define SN_md5_sha1                     "MD5-SHA1"
#  define LN_md5_sha1                     "md5-sha1"

#  define SN_sha1WithRSA                  "RSA-SHA1-2"
#  define LN_sha1WithRSA                  "sha1WithRSA"
#  define NID_sha1WithRSA                 115
#  define OBJ_sha1WithRSA                 OBJ_algorithm,29L

#  define SN_dsa                          "DSA"
#  define LN_dsa                          "dsaEncryption"
#  define NID_dsa                         116
#  define OBJ_dsa                         1L,2L,840L,10040L,4L,1L

#  define SN_ripemd160                    "RIPEMD160"
#  define LN_ripemd160                    "ripemd160"
#  define NID_ripemd160                   117
#  define OBJ_ripemd160                   1L,3L,36L,3L,2L,1L

/*
 * The name should actually be rsaSignatureWithripemd160, but I'm going to
 * continue using the convention I'm using with the other ciphers
 */
#  define SN_ripemd160WithRSA             "RSA-RIPEMD160"
#  define LN_ripemd160WithRSA             "ripemd160WithRSA"
#  define NID_ripemd160WithRSA            119
#  define OBJ_ripemd160WithRSA            1L,3L,36L,3L,3L,1L,2L

/*-
 * Taken from rfc2040
 *  RC5_CBC_Parameters ::= SEQUENCE {
 *      version           INTEGER (v1_0(16)),
 *      rounds            INTEGER (8..127),
 *      blockSizeInBits   INTEGER (64, 128),
 *      iv                OCTET STRING OPTIONAL
 *      }
 */
#  define SN_rc5_cbc                      "RC5-CBC"
#  define LN_rc5_cbc                      "rc5-cbc"
#  define NID_rc5_cbc                     120
#  define OBJ_rc5_cbc                     OBJ_rsadsi,3L,8L

#  define SN_rc5_ecb                      "RC5-ECB"
#  define LN_rc5_ecb                      "rc5-ecb"
#  define NID_rc5_ecb                     121

#  define SN_rc5_cfb64                    "RC5-CFB"
#  define LN_rc5_cfb64                    "rc5-cfb"
#  define NID_rc5_cfb64                   122

#  define SN_rc5_ofb64                    "RC5-OFB"
#  define LN_rc5_ofb64                    "rc5-ofb"
#  define NID_rc5_ofb64                   123

#  define SN_rle_compression              "RLE"
#  define LN_rle_compression              "run length compression"
#  define NID_rle_compression             124
#  define OBJ_rle_compression             1L,1L,1L,1L,666L,1L

#  define SN_zlib_compression             "ZLIB"
#  define LN_zlib_compression             "zlib compression"
#  define NID_zlib_compression            125
#  define OBJ_zlib_compression            1L,1L,1L,1L,666L,2L

#  define SN_ext_key_usage                "extendedKeyUsage"
#  define LN_ext_key_usage                "X509v3 Extended Key Usage"
#  define NID_ext_key_usage               126
#  define OBJ_ext_key_usage               OBJ_id_ce,37

#  define SN_id_pkix                      "PKIX"
#  define NID_id_pkix                     127
#  define OBJ_id_pkix                     1L,3L,6L,1L,5L,5L,7L

#  define SN_id_kp                        "id-kp"
#  define NID_id_kp                       128
#  define OBJ_id_kp                       OBJ_id_pkix,3L

/* PKIX extended key usage OIDs */

#  define SN_server_auth                  "serverAuth"
#  define LN_server_auth                  "TLS Web Server Authentication"
#  define NID_server_auth                 129
#  define OBJ_server_auth                 OBJ_id_kp,1L

#  define SN_client_auth                  "clientAuth"
#  define LN_client_auth                  "TLS Web Client Authentication"
#  define NID_client_auth                 130
#  define OBJ_client_auth                 OBJ_id_kp,2L

#  define SN_code_sign                    "codeSigning"
#  define LN_code_sign                    "Code Signing"
#  define NID_code_sign                   131
#  define OBJ_code_sign                   OBJ_id_kp,3L

#  define SN_email_protect                "emailProtection"
#  define LN_email_protect                "E-mail Protection"
#  define NID_email_protect               132
#  define OBJ_email_protect               OBJ_id_kp,4L

#  define SN_time_stamp                   "timeStamping"
#  define LN_time_stamp                   "Time Stamping"
#  define NID_time_stamp                  133
#  define OBJ_time_stamp                  OBJ_id_kp,8L

/* Additional extended key usage OIDs: Microsoft */

#  define SN_ms_code_ind                  "msCodeInd"
#  define LN_ms_code_ind                  "Microsoft Individual Code Signing"
#  define NID_ms_code_ind                 134
#  define OBJ_ms_code_ind                 1L,3L,6L,1L,4L,1L,311L,2L,1L,21L

#  define SN_ms_code_com                  "msCodeCom"
#  define LN_ms_code_com                  "Microsoft Commercial Code Signing"
#  define NID_ms_code_com                 135
#  define OBJ_ms_code_com                 1L,3L,6L,1L,4L,1L,311L,2L,1L,22L

#  define SN_ms_ctl_sign                  "msCTLSign"
#  define LN_ms_ctl_sign                  "Microsoft Trust List Signing"
#  define NID_ms_ctl_sign                 136
#  define OBJ_ms_ctl_sign                 1L,3L,6L,1L,4L,1L,311L,10L,3L,1L

#  define SN_ms_sgc                       "msSGC"
#  define LN_ms_sgc                       "Microsoft Server Gated Crypto"
#  define NID_ms_sgc                      137
#  define OBJ_ms_sgc                      1L,3L,6L,1L,4L,1L,311L,10L,3L,3L

#  define SN_ms_efs                       "msEFS"
#  define LN_ms_efs                       "Microsoft Encrypted File System"
#  define NID_ms_efs                      138
#  define OBJ_ms_efs                      1L,3L,6L,1L,4L,1L,311L,10L,3L,4L

/* Additional usage: Netscape */

#  define SN_ns_sgc                       "nsSGC"
#  define LN_ns_sgc                       "Netscape Server Gated Crypto"
#  define NID_ns_sgc                      139
#  define OBJ_ns_sgc                      OBJ_netscape,4L,1L

#  define SN_delta_crl                    "deltaCRL"
#  define LN_delta_crl                    "X509v3 Delta CRL Indicator"
#  define NID_delta_crl                   140
#  define OBJ_delta_crl                   OBJ_id_ce,27L

#  define SN_crl_reason                   "CRLReason"
#  define LN_crl_reason                   "CRL Reason Code"
#  define NID_crl_reason                  141
#  define OBJ_crl_reason                  OBJ_id_ce,21L

#  define SN_invalidity_date              "invalidityDate"
#  define LN_invalidity_date              "Invalidity Date"
#  define NID_invalidity_date             142
#  define OBJ_invalidity_date             OBJ_id_ce,24L

#  define SN_sxnet                        "SXNetID"
#  define LN_sxnet                        "Strong Extranet ID"
#  define NID_sxnet                       143
#  define OBJ_sxnet                       1L,3L,101L,1L,4L,1L

/* PKCS12 and related OBJECT IDENTIFIERS */

#  define OBJ_pkcs12                      OBJ_pkcs,12L
#  define OBJ_pkcs12_pbeids               OBJ_pkcs12, 1

#  define SN_pbe_WithSHA1And128BitRC4     "PBE-SHA1-RC4-128"
#  define LN_pbe_WithSHA1And128BitRC4     "pbeWithSHA1And128BitRC4"
#  define NID_pbe_WithSHA1And128BitRC4    144
#  define OBJ_pbe_WithSHA1And128BitRC4    OBJ_pkcs12_pbeids, 1L

#  define SN_pbe_WithSHA1And40BitRC4      "PBE-SHA1-RC4-40"
#  define LN_pbe_WithSHA1And40BitRC4      "pbeWithSHA1And40BitRC4"
#  define NID_pbe_WithSHA1And40BitRC4     145
#  define OBJ_pbe_WithSHA1And40BitRC4     OBJ_pkcs12_pbeids, 2L

#  define SN_pbe_WithSHA1And3_Key_TripleDES_CBC   "PBE-SHA1-3DES"
#  define LN_pbe_WithSHA1And3_Key_TripleDES_CBC   "pbeWithSHA1And3-KeyTripleDES-CBC"
#  define NID_pbe_WithSHA1And3_Key_TripleDES_CBC  146
#  define OBJ_pbe_WithSHA1And3_Key_TripleDES_CBC  OBJ_pkcs12_pbeids, 3L

#  define SN_pbe_WithSHA1And2_Key_TripleDES_CBC   "PBE-SHA1-2DES"
#  define LN_pbe_WithSHA1And2_Key_TripleDES_CBC   "pbeWithSHA1And2-KeyTripleDES-CBC"
#  define NID_pbe_WithSHA1And2_Key_TripleDES_CBC  147
#  define OBJ_pbe_WithSHA1And2_Key_TripleDES_CBC  OBJ_pkcs12_pbeids, 4L

#  define SN_pbe_WithSHA1And128BitRC2_CBC         "PBE-SHA1-RC2-128"
#  define LN_pbe_WithSHA1And128BitRC2_CBC         "pbeWithSHA1And128BitRC2-CBC"
#  define NID_pbe_WithSHA1And128BitRC2_CBC        148
#  define OBJ_pbe_WithSHA1And128BitRC2_CBC        OBJ_pkcs12_pbeids, 5L

#  define SN_pbe_WithSHA1And40BitRC2_CBC  "PBE-SHA1-RC2-40"
#  define LN_pbe_WithSHA1And40BitRC2_CBC  "pbeWithSHA1And40BitRC2-CBC"
#  define NID_pbe_WithSHA1And40BitRC2_CBC 149
#  define OBJ_pbe_WithSHA1And40BitRC2_CBC OBJ_pkcs12_pbeids, 6L

#  define OBJ_pkcs12_Version1     OBJ_pkcs12, 10L

#  define OBJ_pkcs12_BagIds       OBJ_pkcs12_Version1, 1L

#  define LN_keyBag               "keyBag"
#  define NID_keyBag              150
#  define OBJ_keyBag              OBJ_pkcs12_BagIds, 1L

#  define LN_pkcs8ShroudedKeyBag  "pkcs8ShroudedKeyBag"
#  define NID_pkcs8ShroudedKeyBag 151
#  define OBJ_pkcs8ShroudedKeyBag OBJ_pkcs12_BagIds, 2L

#  define LN_certBag              "certBag"
#  define NID_certBag             152
#  define OBJ_certBag             OBJ_pkcs12_BagIds, 3L

#  define LN_crlBag               "crlBag"
#  define NID_crlBag              153
#  define OBJ_crlBag              OBJ_pkcs12_BagIds, 4L

#  define LN_secretBag            "secretBag"
#  define NID_secretBag           154
#  define OBJ_secretBag           OBJ_pkcs12_BagIds, 5L

#  define LN_safeContentsBag      "safeContentsBag"
#  define NID_safeContentsBag     155
#  define OBJ_safeContentsBag     OBJ_pkcs12_BagIds, 6L

#  define LN_friendlyName         "friendlyName"
#  define NID_friendlyName        156
#  define OBJ_friendlyName        OBJ_pkcs9, 20L

#  define LN_localKeyID           "localKeyID"
#  define NID_localKeyID          157
#  define OBJ_localKeyID          OBJ_pkcs9, 21L

#  define OBJ_certTypes           OBJ_pkcs9, 22L

#  define LN_x509Certificate      "x509Certificate"
#  define NID_x509Certificate     158
#  define OBJ_x509Certificate     OBJ_certTypes, 1L

#  define LN_sdsiCertificate      "sdsiCertificate"
#  define NID_sdsiCertificate     159
#  define OBJ_sdsiCertificate     OBJ_certTypes, 2L

#  define OBJ_crlTypes            OBJ_pkcs9, 23L

#  define LN_x509Crl              "x509Crl"
#  define NID_x509Crl             160
#  define OBJ_x509Crl             OBJ_crlTypes, 1L

/* PKCS#5 v2 OIDs */

#  define LN_pbes2                "PBES2"
#  define NID_pbes2               161
#  define OBJ_pbes2               OBJ_pkcs,5L,13L

#  define LN_pbmac1               "PBMAC1"
#  define NID_pbmac1              162
#  define OBJ_pbmac1              OBJ_pkcs,5L,14L

#  define LN_hmacWithSHA1         "hmacWithSHA1"
#  define NID_hmacWithSHA1        163
#  define OBJ_hmacWithSHA1        OBJ_rsadsi,2L,7L

/* Policy Qualifier Ids */

#  define LN_id_qt_cps            "Policy Qualifier CPS"
#  define SN_id_qt_cps            "id-qt-cps"
#  define NID_id_qt_cps           164
#  define OBJ_id_qt_cps           OBJ_id_pkix,2L,1L

#  define LN_id_qt_unotice        "Policy Qualifier User Notice"
#  define SN_id_qt_unotice        "id-qt-unotice"
#  define NID_id_qt_unotice       165
#  define OBJ_id_qt_unotice       OBJ_id_pkix,2L,2L

#  define SN_rc2_64_cbc                   "RC2-64-CBC"
#  define LN_rc2_64_cbc                   "rc2-64-cbc"
#  define NID_rc2_64_cbc                  166

#  define SN_SMIMECapabilities            "SMIME-CAPS"
#  define LN_SMIMECapabilities            "S/MIME Capabilities"
#  define NID_SMIMECapabilities           167
#  define OBJ_SMIMECapabilities           OBJ_pkcs9,15L

#  define SN_pbeWithMD2AndRC2_CBC         "PBE-MD2-RC2-64"
#  define LN_pbeWithMD2AndRC2_CBC         "pbeWithMD2AndRC2-CBC"
#  define NID_pbeWithMD2AndRC2_CBC        168
#  define OBJ_pbeWithMD2AndRC2_CBC        OBJ_pkcs,5L,4L

#  define SN_pbeWithMD5AndRC2_CBC         "PBE-MD5-RC2-64"
#  define LN_pbeWithMD5AndRC2_CBC         "pbeWithMD5AndRC2-CBC"
#  define NID_pbeWithMD5AndRC2_CBC        169
#  define OBJ_pbeWithMD5AndRC2_CBC        OBJ_pkcs,5L,6L

#  define SN_pbeWithSHA1AndDES_CBC        "PBE-SHA1-DES"
#  define LN_pbeWithSHA1AndDES_CBC        "pbeWithSHA1AndDES-CBC"
#  define NID_pbeWithSHA1AndDES_CBC       170
#  define OBJ_pbeWithSHA1AndDES_CBC       OBJ_pkcs,5L,10L

/* Extension request OIDs */

#  define LN_ms_ext_req                   "Microsoft Extension Request"
#  define SN_ms_ext_req                   "msExtReq"
#  define NID_ms_ext_req                  171
#  define OBJ_ms_ext_req                  1L,3L,6L,1L,4L,1L,311L,2L,1L,14L

#  define LN_ext_req                      "Extension Request"
#  define SN_ext_req                      "extReq"
#  define NID_ext_req                     172
#  define OBJ_ext_req                     OBJ_pkcs9,14L

#  define SN_name                         "name"
#  define LN_name                         "name"
#  define NID_name                        173
#  define OBJ_name                        OBJ_X509,41L

#  define SN_dnQualifier                  "dnQualifier"
#  define LN_dnQualifier                  "dnQualifier"
#  define NID_dnQualifier                 174
#  define OBJ_dnQualifier                 OBJ_X509,46L

#  define SN_id_pe                        "id-pe"
#  define NID_id_pe                       175
#  define OBJ_id_pe                       OBJ_id_pkix,1L

#  define SN_id_ad                        "id-ad"
#  define NID_id_ad                       176
#  define OBJ_id_ad                       OBJ_id_pkix,48L

#  define SN_info_access                  "authorityInfoAccess"
#  define LN_info_access                  "Authority Information Access"
#  define NID_info_access                 177
#  define OBJ_info_access                 OBJ_id_pe,1L

#  define SN_ad_OCSP                      "OCSP"
#  define LN_ad_OCSP                      "OCSP"
#  define NID_ad_OCSP                     178
#  define OBJ_ad_OCSP                     OBJ_id_ad,1L

#  define SN_ad_ca_issuers                "caIssuers"
#  define LN_ad_ca_issuers                "CA Issuers"
#  define NID_ad_ca_issuers               179
#  define OBJ_ad_ca_issuers               OBJ_id_ad,2L

#  define SN_OCSP_sign                    "OCSPSigning"
#  define LN_OCSP_sign                    "OCSP Signing"
#  define NID_OCSP_sign                   180
#  define OBJ_OCSP_sign                   OBJ_id_kp,9L
# endif                         /* USE_OBJ_MAC */

# include <openssl/bio.h>
# include <openssl/asn1.h>

# define OBJ_NAME_TYPE_UNDEF             0x00
# define OBJ_NAME_TYPE_MD_METH           0x01
# define OBJ_NAME_TYPE_CIPHER_METH       0x02
# define OBJ_NAME_TYPE_PKEY_METH         0x03
# define OBJ_NAME_TYPE_COMP_METH         0x04
# define OBJ_NAME_TYPE_NUM               0x05

# define OBJ_NAME_ALIAS                  0x8000

# define OBJ_BSEARCH_VALUE_ON_NOMATCH            0x01
# define OBJ_BSEARCH_FIRST_VALUE_ON_MATCH        0x02


#ifdef  __cplusplus
extern "C" {
#endif

typedef struct obj_name_st {
    int type;
    int alias;
    const char *name;
    const char *data;
} OBJ_NAME;

# define         OBJ_create_and_add_object(a,b,c) OBJ_create(a,b,c)

int OBJ_NAME_init(void);
int OBJ_NAME_new_index(unsigned long (*hash_func) (const char *),
                       int (*cmp_func) (const char *, const char *),
                       void (*free_func) (const char *, int, const char *));
const char *OBJ_NAME_get(const char *name, int type);
int OBJ_NAME_add(const char *name, int type, const char *data);
int OBJ_NAME_remove(const char *name, int type);
void OBJ_NAME_cleanup(int type); /* -1 for everything */
void OBJ_NAME_do_all(int type, void (*fn) (const OBJ_NAME *, void *arg),
                     void *arg);
void OBJ_NAME_do_all_sorted(int type,
                            void (*fn) (const OBJ_NAME *, void *arg),
                            void *arg);

ASN1_OBJECT *OBJ_dup(const ASN1_OBJECT *o);
ASN1_OBJECT *OBJ_nid2obj(int n);
const char *OBJ_nid2ln(int n);
const char *OBJ_nid2sn(int n);
int OBJ_obj2nid(const ASN1_OBJECT *o);
ASN1_OBJECT *OBJ_txt2obj(const char *s, int no_name);
int OBJ_obj2txt(char *buf, int buf_len, const ASN1_OBJECT *a, int no_name);
int OBJ_txt2nid(const char *s);
int OBJ_ln2nid(const char *s);
int OBJ_sn2nid(const char *s);
int OBJ_cmp(const ASN1_OBJECT *a, const ASN1_OBJECT *b);
const void *OBJ_bsearch_(const void *key, const void *base, int num, int size,
                         int (*cmp) (const void *, const void *));
const void *OBJ_bsearch_ex_(const void *key, const void *base, int num,
                            int size,
                            int (*cmp) (const void *, const void *),
                            int flags);

# define _DECLARE_OBJ_BSEARCH_CMP_FN(scope, type1, type2, nm)    \
  static int nm##_cmp_BSEARCH_CMP_FN(const void *, const void *); \
  static int nm##_cmp(type1 const *, type2 const *); \
  scope type2 * OBJ_bsearch_##nm(type1 *key, type2 const *base, int num)

# define DECLARE_OBJ_BSEARCH_CMP_FN(type1, type2, cmp)   \
  _DECLARE_OBJ_BSEARCH_CMP_FN(static, type1, type2, cmp)
# define DECLARE_OBJ_BSEARCH_GLOBAL_CMP_FN(type1, type2, nm)     \
  type2 * OBJ_bsearch_##nm(type1 *key, type2 const *base, int num)

/*-
 * Unsolved problem: if a type is actually a pointer type, like
 * nid_triple is, then its impossible to get a const where you need
 * it. Consider:
 *
 * typedef int nid_triple[3];
 * const void *a_;
 * const nid_triple const *a = a_;
 *
 * The assignement discards a const because what you really want is:
 *
 * const int const * const *a = a_;
 *
 * But if you do that, you lose the fact that a is an array of 3 ints,
 * which breaks comparison functions.
 *
 * Thus we end up having to cast, sadly, or unpack the
 * declarations. Or, as I finally did in this case, delcare nid_triple
 * to be a struct, which it should have been in the first place.
 *
 * Ben, August 2008.
 *
 * Also, strictly speaking not all types need be const, but handling
 * the non-constness means a lot of complication, and in practice
 * comparison routines do always not touch their arguments.
 */

# define IMPLEMENT_OBJ_BSEARCH_CMP_FN(type1, type2, nm)  \
  static int nm##_cmp_BSEARCH_CMP_FN(const void *a_, const void *b_)    \
      { \
      type1 const *a = a_; \
      type2 const *b = b_; \
      return nm##_cmp(a,b); \
      } \
  static type2 *OBJ_bsearch_##nm(type1 *key, type2 const *base, int num) \
      { \
      return (type2 *)OBJ_bsearch_(key, base, num, sizeof(type2), \
                                        nm##_cmp_BSEARCH_CMP_FN); \
      } \
      extern void dummy_prototype(void)

# define IMPLEMENT_OBJ_BSEARCH_GLOBAL_CMP_FN(type1, type2, nm)   \
  static int nm##_cmp_BSEARCH_CMP_FN(const void *a_, const void *b_)    \
      { \
      type1 const *a = a_; \
      type2 const *b = b_; \
      return nm##_cmp(a,b); \
      } \
  type2 *OBJ_bsearch_##nm(type1 *key, type2 const *base, int num) \
      { \
      return (type2 *)OBJ_bsearch_(key, base, num, sizeof(type2), \
                                        nm##_cmp_BSEARCH_CMP_FN); \
      } \
      extern void dummy_prototype(void)

# define OBJ_bsearch(type1,key,type2,base,num,cmp)                              \
  ((type2 *)OBJ_bsearch_(CHECKED_PTR_OF(type1,key),CHECKED_PTR_OF(type2,base), \
                         nu
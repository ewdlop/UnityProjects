[Disabled support for runtime debugging])
fi

if test "x$mono_feature_disable_reflection_emit" = "xyes"; then
	AC_DEFINE(DISABLE_REFLECTION_EMIT, 1, [Disable reflection emit support])
	mono_feature_disable_reflection_emit_save=yes
	AC_MSG_NOTICE([Disabled support for Reflection.Emit])
fi

if test "x$mono_feature_disable_reflection_emit_save" = "xyes"; then
	AC_DEFINE(DISABLE_REFLECTION_EMIT_SAVE, 1, [Disable assembly saving support in reflection emit])
	AC_MSG_NOTICE([Disabled support for Reflection.Emit.Save])
fi

if test "x$mono_feature_disable_large_code" = "xyes"; then
	AC_DEFINE(DISABLE_LARGE_CODE, 1, [Disable support for huge assemblies])
	AC_MSG_NOTICE([Disabled support for large assemblies])
fi

if test "x$mono_feature_disable_logging" = "xyes"; then
	AC_DEFINE(DISABLE_LOGGING, 1, [Disable support debug logging])
	AC_MSG_NOTICE([Disabled support for logging])
fi

if test "x$mono_feature_disable_com" = "xyes"; then
	AC_DEFINE(DISABLE_COM, 1, [Disable COM support])
	AC_MSG_NOTICE([Disabled COM support])
fi

if test "x$mono_feature_disable_ssa" = "xyes"; then
	AC_DEFINE(DISABLE_SSA, 1, [Disable advanced SSA JIT optimizations])
	AC_MSG_NOTICE([Disabled SSA JIT optimizations])
fi

if test "x$mono_feature_disable_generics" = "xyes"; then
	AC_DEFINE(DISABLE_GENERICS, 1, [Disable generics support])
	AC_MSG_NOTICE([Disabled Generics Support])
fi

if test "x$mono_feature_disable_shadowcopy" = "xyes"; then
   	AC_DEFINE(DISABLE_SHADOW_COPY, 1, [Disable Shadow Copy for AppDomains])
	AC_MSG_NOTICE([Disabled Shadow copy for AppDomains])
fi

if test "x$mono_feature_disable_portability" = "xyes"; then
   	AC_DEFINE(DISABLE_PORTABILITY, 1, [Disables the IO portability layer])
	AC_MSG_NOTICE([Disabled IO Portability layer])
fi

if test "x$mono_feature_disable_attach" = "xyes"; then
	AC_DEFINE(DISABLE_ATTACH, 1, [Disable agent attach support])
	AC_MSG_NOTICE([Disabled agent attach])
fi

if test "x$mono_feature_disable_verifier" = "xyes"; then
	AC_DEFINE(DISABLE_VERIFIER, 1, [Disables the verifier])
	AC_MSG_NOTICE([Disabled the metadata and IL verifiers])
fi

if test "x$mono_feature_disable_jit" = "xyes"; then
	AC_DEFINE(DISABLE_JIT, 1, [Disable the JIT, only full-aot mode or interpreter will be supported by the runtime.])
	AC_MSG_NOTICE([Disabled the JIT engine, only full AOT or interpreter will be supported])
fi

AM_CONDITIONAL(DISABLE_JIT, test x$mono_feature_disable_jit = xyes)

if test "x$mono_feature_disable_interpreter" = "xyes"; then
	AC_DEFINE(DISABLE_INTERPRETER, 1, [Disable the interpreter.])
	AC_MSG_NOTICE([Disabled the interpreter])
fi

AM_CONDITIONAL(DISABLE_INTERPRETER, test x$mono_feature_disable_interpreter = xyes)

if test "x$mono_feature_disable_interpreter" != "xyes" -o "x$mono_feature_disable_jit" != "xyes"; then
	AC_DEFINE(ENABLE_ILGEN, 1, [Some VES is available at runtime])
fi

AM_CONDITIONAL(ENABLE_ILGEN, test x$mono_feature_disable_interpreter != xyes -o x$mono_feature_disable_jit != xyes)

if test "x$mono_feature_disable_simd" = "xyes"; then
	AC_DEFINE(DISABLE_SIMD, 1, [Disable SIMD intrinsics related optimizations.])
	AC_MSG_NOTICE([Disabled SIMD support])
fi

if test "x$mono_feature_disable_soft_debug" = "xyes"; then
	AC_DEFINE(DISABLE_DEBUGGER_AGENT, 1, [Disable Soft Debugger Agent.])
	AC_MSG_NOTICE([Disabled Soft Debugger.])
fi

AM_CONDITIONAL(DISABLE_DEBUGGER_AGENT, test x$mono_feature_disable_debugger_agent = xyes)

if test "x$mono_feature_disable_perfcounters" = "xyes"; then
	AC_DEFINE(DISABLE_PERFCOUNTERS, 1, [Disable Performance Counters.])
	AC_MSG_NOTICE([Disabled Performance Counters.])
fi
if test "x$mono_feature_disable_normalization" = "xyes"; then
	AC_DEFINE(DISABLE_NORMALIZATION, 1, [Disable String normalization support.])
	AC_MSG_NOTICE([Disabled String normalization support.])
fi

#TODO: remove assembly_remapping feature name once everyone is using desktop_loader
if test "x$mono_feature_disable_assembly_remapping" = "xyes" || test "x$mono_feature_disable_desktop_loader" = "xyes"; then
	AC_DEFINE(DISABLE_DESKTOP_LOADER, 1, [Disable desktop assembly loader semantics.])
	AC_MSG_NOTICE([Disabled desktop assembly loader semantics.])
fi

if test "x$mono_feature_disable_shared_perfcounters" = "xyes"; then
	AC_DEFINE(DISABLE_SHARED_PERFCOUNTERS, 1, [Disable shared perfcounters.])
	AC_MSG_NOTICE([Disabled Shared perfcounters.])
fi

if test "x$mono_feature_disable_appdomains" = "xyes"; then
	AC_DEFINE(DISABLE_APPDOMAINS, 1, [Disable support for multiple appdomains.])
	AC_MSG_NOTICE([Disabled support for multiple appdomains.])
fi

if test "x$mono_feature_disable_remoting" = "xyes"; then
	AC_DEFINE(DISABLE_REMOTING, 1, [Disable remoting support (This disables type proxies and make com non-functional)])
	AC_MSG_NOTICE([Disabled remoting])
fi

if test "x$mono_feature_disable_security" = "xyes"; then
	AC_DEFINE(DISABLE_SECURITY, 1, [Disable CAS/CoreCLR security])
	AC_MSG_NOTICE([Disabled CAS/CoreCLR security manager (used e.g. for Moonlight)])
fi

if test "x$mono_feature_disable_lldb" = "xyes"; then
	AC_DEFINE(DISABLE_LLDB, 1, [Disable support code for the LLDB plugin.])
	AC_MSG_NOTICE([Disabled LLDB plugin support code.])
fi

if test "x$mono_feature_disable_mdb" = "xyes"; then
	AC_DEFINE(DISABLE_MDB, 1, [Disable support for .mdb symbol files.])
	AC_MSG_NOTICE([Disabled support for .mdb symbol files.])
fi

if test "x$mono_feature_disable_assert_messages" = "xyes"; then
	AC_DEFINE(DISABLE_ASSERT_MESSAGES, 1, [Disable assertion messages.])
	AC_MSG_NOTICE([Disabled assertion messages.])
fi

if test "x$mono_feature_disable_cfgdir_config" = "xyes"; then
	AC_DEFINE(DISABLE_CFGDIR_CONFIG, 1, [Disable config directories.])
	AC_MSG_NOTICE([Disabled config directories.])
fi

if test "x$mono_feature_disable_cleanup" = "xyes"; then
	AC_DEFINE(DISABLE_CLEANUP, 1, [Disable runtime cleanup.])
	AC_MSG_NOTICE([Disabled runtime cleanup.])
fi

if test "x$mono_feature_disable_sgen_marksweep_conc" = "xyes"; then
	AC_DEFINE(DISABLE_SGEN_MAJOR_MARKSWEEP_CONC, 1, [Disable concurrent gc support in SGEN.])
	AC_MSG_NOTICE([Disabled concurrent gc support in SGEN.])
fi


if test "x$mono_feature_disable_sgen_split_nursery" = "xyes"; then
	AC_DEFINE(DISABLE_SGEN_SPLIT_NURSERY, 1, [Disable minor=split support in SGEN.])
	AC_MSG_NOTICE([Disabled minor=split support in SGEN.])
fi

if test "x$mono_feature_disable_sgen_gc_bridge" = "xyes"; then
	AC_DEFINE(DISABLE_SGEN_GC_BRIDGE, 1, [Disable gc bridge support in SGEN.])
	AC_MSG_NOTICE([Disabled gc bridge support in SGEN.])
fi

if test "x$mono_feature_disable_sgen_debug_helpers" = "xyes"; then
	AC_DEFINE(DISABLE_SGEN_DEBUG_HELPERS, 1, [Disable debug helpers in SGEN.])
	AC_MSG_NOTICE([Disabled debug helpers in SGEN.])
fi

if test "x$mono_feature_disable_sockets" = "xyes"; then
	AC_DEFINE(DISABLE_SOCKETS, 1, [Disable sockets])
	AC_MSG_NOTICE([Disabled sockets])
fi

if test "x$mono_feature_disable_gac" = "xyes"; then
	AC_DEFINE(DISABLE_GAC, 1, [Disable GAC])
	AC_MSG_NOTICE([Disabled GAC support])
fi

if test "x$mono_feature_disable_dllmap" = "xyes"; then
    AC_DEFINE(DISABLE_DLLMAP,1,[Disables use of DllMaps in MonoVM])
    AC_MSG_NOTICE([Disabled DllMap in the loader.])
fi

if test "x$mono_feature_disable_threads" = "xyes"; then
	AC_DEFINE(DISABLE_THREADS, 1, [Disable Threads])
	AC_MSG_NOTICE([Disabled threading support])
fi

AC_ARG_ENABLE(executables, [  --disable-executables disable the build of the runtime executables], enable_executables=$enableval, enable_executables=yes)
AM_CONDITIONAL(DISABLE_EXECUTABLES, test x$enable_executables = xno)

has_extension_module=no
AC_ARG_ENABLE(extension-module, [  --enable-extension-module=LIST enable the core-extensions from LIST],
[
	for extension in `echo "$enable_extension_module" | sed -e "s/,/ /g"`; do
		if test x$extension = xdefault ; then
			has_extension_module=yes;
		fi
	done
	if test x$enable_extension_module = xyes; then
		has_extension_module=yes;
	fi
], [])

AM_CONDITIONAL([HAS_EXTENSION_MODULE], [test x$has_extension_module != xno])

if test x$has_extension_module != xno ; then
	AC_DEFINE([ENABLE_EXTENSION_MODULE], 1, [Extension module enabled])
	AC_MSG_NOTICE([Enabling mono extension module.])
fi

# Deprecated
AC_ARG_ENABLE(gsharedvt, [  --enable-gsharedvt Enable generic valuetype sharing (Deprecated)], enable_gsharedvt=$enableval, enable_gsharedvt=no)

AC_MSG_CHECKING(for visibility __attribute__)
AC_COMPILE_IFELSE([
	AC_LANG_SOURCE([[
		void __attribute__ ((visibility ("hidden"))) doit (void) {}
   		int main () { doit (); return 0; }
   	]])
], [
   have_visibility_hidden=yes
   AC_MSG_RESULT(yes)
], [
   have_visibility_hidden=no
   AC_MSG_RESULT(no)
])

dnl
dnl Boehm GC configuration
dnl

AC_ARG_WITH(libgc,   [  --with-libgc=included,none  Controls t
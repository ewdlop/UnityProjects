//
// mkbundle: tool to create bundles.
//
// Based on the `make-bundle' Perl script written by Paolo Molaro (lupus@debian.org)
//
// TODO:
//   [x] Rename the paths for the zip file that is downloaded
//   [x] Update documentation with new flag
//   [x] Load internationalized assemblies
//   [x] Dependencies - if System.dll -> include Mono.Security.* (not needed, automatic)
//   [x] --list-targets should download from a different url
//   [x] --fetch-target should unpack zip file
//   [x] Update --cross to use not a runtime, but an SDK
//   [x] Update --local-targets to show the downloaded SDKs
//
// Author:
//   Miguel de Icaza
//
// (C) Novell, Inc 2004
// (C) 2016 Xamarin Inc
//
// Missing features:
// * Add support for packaging native libraries, extracting at runtime and setting the library path.
// * Implement --list-targets lists all the available remote targets
//
using System;
using System.Diagnostics;
using System.Xml;
using System.Collections.Generic;
using System.IO;
using System.IO.Compression;
using System.Runtime.InteropServices;
using System.Text;
using IKVM.Reflection;
using System.Linq;
using System.Net;
using System.Threading.Tasks;

class MakeBundle {
	static string output = "a.out";
	static string object_out = null;
	static List<string> link_paths = new List<string> ();
	static List<string> aot_paths = new List<string> ();
	static List<string> aot_names = new List<string> ();
	static Dictionary<string,string> libraries = new Dictionary<string,string> ();
	static bool autodeps = false;
	static string in_tree = null;
	static bool keeptemp = false;
	static bool compile_only = false;
	static bool static_link = false;

	// Points to the $sysconfig/mono/4.5/machine.config, which contains System.Configuration settings
	static string machine_config_file = null;

        // By default, we automatically bundle a machine-config, use this to turn off the behavior.
        static bool no_machine_config = false;

	// Points to the $sysconfig/mono/config file, contains <dllmap> and others
	static string config_file = null;

        // By default, we automatically bundle the above config file, use this to turn off the behavior.
	static bool no_config = false;
	
	static string config_dir = null;
	static string style = "linux";
	static bool bundled_header = false;
	static string os_message = "";
	static bool compress;
	static bool nomain;
	static string custom_main = null;
	static bool? use_dos2unix = null;
	static bool skip_scan;
	static string ctor_func;
	static bool quiet = true;
	static string cross_target = null;
	static string fetch_target = null;
	static bool custom_mode = true;
	static string embedded_options = null;
	
	static string runtime = null;

	static bool aot_compile = false;
	static string aot_args = "static";
	static DirectoryInfo aot_temp_dir = null;
	static string aot_mode = "";
	static string aot_runtime = null;
	static string aot_dedup_assembly = null;
	static string cil_strip_path = null;
	static string managed_linker_path = null;
	static string sdk_path = null;
	static string lib_path = null;
	static Dictionary<string,string> environment = new Dictionary<string,string>();
	static string [] i18n = new string [] {
		"West",
		""
	};
	static string [] i18n_all = new string [] {
		"CJK", 
		"MidEast",
		"Other",
		"Rare",
		"West",
		""
	};
	static string target_server = "https://download.mono-project.com/runtimes/raw/";
	static string mono_api_struct_file;

	static int Main (string [] args)
	{
		List<string> sources = new List<string> ();
		int top = args.Length;
		link_paths.Add (".");

		DetectOS ();

		for (int i = 0; i < top; i++){
			switch (args [i]){
			case "--help": case "-h": case "-?":
				Help ();
				return 1;

			case "--simple":
				custom_mode = false;
				autodeps = true;
				break;

			case "-v":
				quiet = false;
				break;
				
			case "--i18n":
				if (i+1 == top){
					Help ();
					return 1;
				}
				var iarg = args [++i];
				if (iarg == "all")
					i18n = i18n_all;
				else if (iarg == "none")
					i18n = new string [0];
				else
					i18n = iarg.Split (',');
				break;
				
			case "--custom":
				custom_mode = true;
				break;
				
			case "-c":
				compile_only = true;
				break;

			case "--local-targets":
				CommandLocalTargets ();
				return 0;

			case "--cross":
				if (i+1 == top){
					Help (); 
					return 1;
				}
				if (sdk_path != null || runtime != null)
					Error ("You can only specify one of --runtime, --sdk or --cross {sdk_path}/{runtime}");
				custom_mode = false;
				autodeps = true;
				cross_target = args [++i];
				break;

			case "--library":
				if (i+1 == top){
					Help (); 
					return 1;
				}
				if (custom_mode){
					Console.Error.WriteLine ("--library can only be used with --simple/--runtime/--cross mode");
					Help ();
					return 1;
				}
				var lspec = args [++i];
				var p = lspec.IndexOf (",");
				string alias, path;
				if (p == -1){
					alias = Path.GetFileName (lspec);
					path = lspec;
				} else {
					alias = lspec.Substring (0, p);
					path = lspec.Substring (p+1);
				}
				if (!File.Exists (path))
					Error ($"The specified library file {path} does not exist");
				libraries [alias] = path;
				break;

			case "--fetch-target":
				if (i+1 == top){
					Help (); 
					return 1;
				}
				fetch_target = args [++i];
				break;

			case "--list-targets":
				CommandLocalTargets ();
				var wc = new WebClient ();
				var s = wc.DownloadString (new Uri (target_server + "target-sdks.txt"));
				Console.WriteLine ("Targets available for download with --fetch-target:\n" + s);
				return 0;
				
			case "--target-server":
				if (i+1 == top){
					Help (); 
					return 1;
				}
				target_server = args [++i];
				break;

			case "-o": 
				if (i+1 == top){
					Help (); 
					return 1;
				}
				output = args [++i];
				break;

			case "--options":
				if (i+1 == top){
					Help (); 
					return 1;
				}
				embedded_options = args [++i];
				break;
			case "--sdk":
				if (i + 1 == top) {
					Help ();
					return 1;
				}
				custom_mode = false;
				autodeps = true;
				sdk_path = args [++i];
				if (cross_target != null || runtime != null)
					Error ("You can only specify one of --runtime, --sdk or --cross");
				break;
			case "--runtime":
				if (i+1 == top){
					Help (); 
					return 1;
				}
				if (sdk_path != null || cross_target != null)
					Error ("You can only specify one of --runtime, --sdk or --cross");
				custom_mode = false;
				autodeps = true;
				runtime = args [++i];
				break;
			case "-oo":
				if (i+1 == top){
					Help (); 
					return 1;
				}
				object_out = args [++i];
				break;

			case "-L":
				if (i+1 == top){
					Help (); 
					return 1;
				}
				link_paths.Add (args [++i]);
				break;

			case "--nodeps":
				autodeps = false;
				break;

			case "--deps":
				autodeps = true;
				break;

			case "--keeptemp":
				keeptemp = true;
				break;
				
			case "--static":
				static_link = true;
				break;
			case "--config":
				if (i+1 == top) {
					Help ();
					return 1;
				}

				config_file = args [++i];
				break;
			case "--machine-config":
				if (i+1 == top) {
					Help ();
					return 1;
				}

				machine_config_file = args [++i];

				if (!quiet)
					Console.WriteLine ("WARNING:\n  Check that the machine.config file you are bundling\n  doesn't contain sensitive information specific to this machine.");
				break;
			case "--no-machine-config":
                                no_machine_config = true;
                                break;
			case "--no-config":
				no_config = true;
				break;
			case "--config-dir":
				if (i+1 == top) {
					Help ();
					return 1;
				}

				config_dir = args [++i];
				break;
			case "-z":
				compress = true;
				break;
			case "--nomain":
				nomain = true;
				break;
			case "--custom-main":
				if (i+1 == top) {
					Help ();
					return 1;
				}
				custom_main = args [++i];
				break;
			case "--style":
				if (i+1 == top) {
					Help ();
					return 1;
				}
				style = args [++i];
				switch (style) {
				case "windows":
				case "mac":
				case "linux":
					break;
				default:
					Error ("Invalid style '{0}' - only 'windows', 'mac' and 'linux' are supported for --style argument", style);
					return 1;
				}
					
				break;
			case "--skip-scan":
				skip_scan = true;
				break;
			case "--static-ctor":
				if (i+1 == top) {
					Help ();
					return 1;
				}
				ctor_func = args [++i];
				break;
			case "--dos2unix":
			case "--dos2unix=true":
				use_dos2unix = true;
				break;
			case "--dos2unix=false":
				use_dos2unix = false;
				break;
			case "-q":
			case "--quiet":
				quiet = true;
				break;
			case "-e":
			case "--env":
				if (i+1 == top) {
					Help ();
					return 1;
				}
				var env = args [++i];
				p = env.IndexOf ('=');
				if (p == -1)
					environment.Add (env, "");
				else
					environment.Add (env.Substring (0, p), env.Substring (p+1));
				break;
			case "--bundled-header":
				bundled_header = true;
				break;
			case "--in-tree":
				if (i+1 == top) {
					Console.WriteLine ("Usage: --in-tree <path/to/headers> ");
					return 1;
				}
				in_tree = args [++i];
				break;
			case "--managed-linker":
				if (i+1 == top) {
					Console.WriteLine ("Usage: --managed-linker <path/to/exe> ");
					return 1;
				}
				managed_linker_path = args [++i];
				break;
			case "--cil-strip":
				if (i+1 == top) {
					Console.WriteLine ("Usage: --cil-strip <path/to/exe> ");
					return 1;
				}
				cil_strip_path = args [++i];
				break;
			case "--aot-runtime":
				if (i+1 == top) {
					Console.WriteLine ("Usage: --aot-runtime <path/to/runtime> ");
					return 1;
				}
				aot_runtime = args [++i];
				aot_compile = true;
				static_link = true;
				break;
			case "--aot-dedup":
				if (i+1 == top) {
					Console.WriteLine ("Usage: --aot-dedup <container_dll> ");
					return 1;
				}
				var rel_path = args [++i];
				var asm = LoadAssembly (rel_path);
				if (asm != null)
					aot_dedup_assembly = new Uri(asm.CodeBase).LocalPath;

				sources.Add (rel_path);
				aot_compile = true;
				static_link = true;
				break;
			case "--aot-mode":
				if (i+1 == top) {
					Console.WriteLine ("Need string of aot mode (full, llvmonly). Omit for normal AOT.");
					return 1;
				}

				aot_mode = args [++i];
				if (aot_mode != "full" && aot_mode != "llvmonly") {
					Console.WriteLine ("Need string of aot mode (full, llvmonly). Omit for normal AOT.");
					return 1;
				}

				aot_compile = true;
				static_link = true;
				break;
			case "--aot-args":
				if (i+1 == top) {
					Console.WriteLine ("AOT arguments are passed as a comma-delimited list");
					return 1;
				}
				if (args [i + 1].Contains ("outfile")) {
					Console.WriteLine ("Per-aot-output arguments (ex: outfile, llvm-outfile) cannot be given");
					return 1;
				}
				aot_args = String.Format("static,{0}", args [++i]);
				aot_compile = true;
				static_link = true;
				break;
			case "--mono-api-struct-path":
				if (i+1 == top) {
					Console.WriteLine ("Usage: --mono-api-struct-path <path/to/file>");
					return 1;
				}
				mono_api_struct_file = args [++i];
				break;
			default:
				sources.Add (args [i]);
				break;
			}

		}
		// Modern bundling starts here
		if (!custom_mode){
			if (runtime != null){
				// Nothing to do here, the user has chosen to manually specify --runtime and libraries
			} else if (sdk_path != null) {
				VerifySdk (sdk_path);
			} else if (cross_target == "default" || cross_target == null){
				sdk_path = Path.GetFullPath (Path.Combine (Process.GetCurrentProcess().MainModule.FileName, "..", ".."));
				VerifySdk (sdk_path);
			} else {
				sdk_path = Path.Combine (targets_dir, cross_target);
				Console.WriteLine ("From: " + sdk_path);
				VerifySdk (sdk_path);
			}
		}

		if (fetch_target != null){
			var directory = Path.Combine (targets_dir, fetch_target);
			var zip_download = Path.Combine (directory, "sdk.zip");

			if(Directory.Exists(directory)){
				if(!quiet)
					Console.WriteLine ($"Deleting existing directory: {directory}");
				Directory.Delete(directory, true);
			}

			Directory.CreateDirectory (directory);
			var wc = new WebClient ();
			var uri = new Uri ($"{target_server}{fetch_target}");
			try {
				if (!quiet){
					Console.WriteLine ($"Downloading runtime {uri} to {zip_download}");
				}
				
				wc.DownloadFile (uri, zip_download);
				ZipFile.ExtractToDirectory(zip_download, directory);
				File.Delete (zip_download);
			} catch {
				Console.Error.WriteLine ($"Failure to download the specified runtime from {uri}");
				File.Delete (zip_download);
				return 1;
			}
			return 0;
		}
		
		if (!quiet) {
			Console.WriteLine (os_message);
			Console.WriteLine ("Sources: {0} Auto-dependencies: {1}", sources.Count, autodeps);
		}

		if (sources.Count == 0 || output == null) {
			Help ();
			Environment.Exit (1);
		}

		List<string> assemblies = LoadAssemblies (sources);
		LoadLocalizedAssemblies (assemblies);
		List<string> files = new List<string> ();
		foreach (string file in assemblies)
			if (!QueueAssembly (files, file))
				return 1;

		PreprocessAssemblies (assemblies, files);

		if (aot_compile)
			AotCompile (files);

		if (custom_mode)
			GenerateBundles (files);
		else 
			GeneratePackage (files);

		Console.WriteLine ("Generated {0}", output);

		return 0;
	}

	static void VerifySdk (string path)
	{
		if (!Directory.Exists (path))
			Error ($"The specified SDK path does not exist: {path}");
		runtime = Path.Combine (sdk_path, "bin", "mono");
		if (!File.Exists (runtime)){
			if (File.Exists (runtime + ".exe"))
				runtime += ".exe";
			else
				Error ($"The SDK location does not contain a {path}/bin/mono runtime");
		}
		lib_path = Path.Combine (path, "lib", "mono", "4.5");
		if (!Directory.Exists (lib_path))
			Error ($"The SDK location does not contain a {path}/lib/mono/4.5 directory");
		link_paths.Add (lib_path);
                if (machine_config_file == null && !no_machine_config) {
                        machine_config_file = Path.Combine (path, "etc", "mono", "4.5", "machine.config");
                        if (!File.Exists (machine_config_file)){
                                Error ($"Could not locate the file machine.config file at ${machine_config_file} use --machine-config FILE or --no-machine-config");
                        }
                }
                if (config_file == null && !no_config) {
                        config_file = Path.Combine (path, "etc", "mono", "config");
                        if (!File.Exists (config_file)){
                                Error ($"Could not locate the file config file at ${config_file} use --config FILE or --no-config");
                        }
                }
	}

	static string targets_dir = Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.Personal), ".mono", "targets");
	
	static void CommandLocalTargets ()
	{
		string [] targets;

		Console.WriteLine ("Available targets locally:");
		Console.WriteLine ("\tdefault\t- Current System Mono");
		try {
			targets = Directory.GetDirectories (targets_dir);
		} catch {
			return;
		}
		foreach (var target in targets){
			var p = Path.Combine (target, "bin", "mono");
			if (File.Exists (p))
				Console.WriteLine ("\t{0}", Path.GetFileName (target));
		}
	}

	static void WriteSymbol (StreamWriter sw, string name, long size)
	{
		switch (style){
		case "linux":
			sw.WriteLine (
				".globl {0}\n" +
				"\t.section .rodata\n" +
				"\t.p2align 5\n" +
				"\t.type {0}, \"object\"\n" +
				"\t.size {0}, {1}\n" +
				"{0}:\n",
				name, size);
			break;
		case "osx":
			sw.WriteLine (
				"\t.section __TEXT,__text,regular,pure_instructions\n" + 
				"\t.globl _{0}\n" +
				"\t.data\n" +
				"\t.align 4\n" +
				"_{0}:\n",
				name, size);
			break;
		case "windows":
			string mangled_symbol_name = "";
			if (Target64BitApplication())
				mangled_symbol_name = name;
			else
				mangled_symbol_name = "_" + name;

			sw.WriteLine (
				".globl {0}\n" +
				"\t.section .rdata,\"dr\"\n" +
				"\t.align 32\n" +
				"{0}:\n",
				mangled_symbol_name);
			break;
		}
	}
	
	static string [] chars = new string [256];
	
	static void WriteBuffer (StreamWriter ts, Stream stream, byte[] buffer)
	{
		int n;
		
		// Preallocate the strings we need.
		if (chars [0] == null) {
			for (int i = 0; i < chars.Length; i++)
				chars [i] = string.Format ("{0}", i.ToString ());
		}

		while ((n = stream.Read (buffer, 0, buffer.Length)) != 0) {
			int count = 0;
			for (int i = 0; i < n; i++) {
				if (count % 32 == 0) {
					ts.Write ("\n\t.byte ");
				} else {
					ts.Write (",");
				}
				ts.Write (chars [buffer [i]]);
				count ++;
			}
		}

		ts.WriteLine ();
	}

	class PackageMaker {
		Dictionary<string, Tuple<long,int>> locations = new Dictionary<string, Tuple<long,int>> ();
		int align = 4096; // first non-Windows alignment, saving on average 30K
		Stream package;
		
		public PackageMaker (string runtime, string output)
		{
			package = File.Create (output, 128*1024);
			if (IsUnix){
				File.SetAttributes (output, unchecked ((FileAttributes) 0x80000000));
			}

			Console.WriteLine ("Using runtime: " + runtime);

			// Probe for MZ signature to decide if we are targeting Windows,
			// so we can optimize an average of 30K away on Unix.
			using (Stream runtimeStream = File.OpenRead (runtime)) {
				var runtimeBuffer = new byte [2];
				if (runtimeStream.Read (runtimeBuffer, 0, 2) == 2
					&& runtimeBuffer [0] == (byte)'M'
					&& runtimeBuffer [1] == (byte)'Z')
					align = 1 << 16; // first Windows alignment
			}
			AddFile (runtime);
		}

		public int AddFile (string fname)
		{
			using (Stream fileStream = File.OpenRead (fname)){
				var ret = fileStream.Length;

				if (!quiet)
					Console.WriteLine ("At {0:x} with input {1}", package.Position, fileStream.Length);
				fileStream.CopyTo (package);
				package.Position = package.Position + (align - (package.Position % align));
				align = 4096; // rest of alignment for all systems
				return (int) ret;
			}
		}
		
		public void Add (string entry, string fname)
		{
			var p = package.Position;
			var size = AddFile (fname);
			locations [entry] = Tuple.Create(p, size);
		}

		public void AddString (string entry, string text)
		{
			// FIXME Strings are over-aligned?
			var bytes = Encoding.UTF8.GetBytes (text);
			locations [entry] = Tuple.Create (package.Position, bytes.Length);
			package.Write (bytes, 0, bytes.Length);
			package.WriteByte (0);
			package.Position = package.Position + (align - (package.Position % align));
		}

		public void AddStringPair (string entry, string key, string value)
		{
			// FIXME Strings are over-aligned?
			var kbytes = Encoding.UTF8.GetBytes (key);
			var vbytes = Encoding.UTF8.GetBytes (value);

			Console.WriteLine ("ADDING {0} to {1}", key, value);
			if (kbytes.Length > 255){
				Console.WriteLine ("The key value can not exceed 255 characters: " + key);
				Environment.Exit (1);
			}
				
			locations [entry] = Tuple.Create (package.Position, kbytes.Length+vbytes.Length+3);
			package.WriteByte ((byte)kbytes.Length);
			package.Write (kbytes, 0, kbytes.Length);
			package.WriteByte (0);
			package.Write (vbytes, 0, vbytes.Length);
			package.WriteByte (0);
			package.Position = package.Position + (align - (package.Position % align));
		}

		public void Dump ()
		{
			if (quiet)
				return;
			foreach (var floc in locations.Keys){
				Console.WriteLine ($"{floc} at {locations[floc]:x}");
			}
		}

		public void WriteIndex ()
		{
			var indexStart = package.Position;
			var binary = new BinaryWriter (package);

			binary.Write (locations.Count);
			foreach (var entry in from entry in locations orderby entry.Value.Item1 ascending select entry){
				var bytes = Encoding.UTF8.GetBytes (entry.Key);
				binary.Write (bytes.Length+1);
				binary.Write (bytes);
				binary.Write ((byte) 0);
				binary.Write (entry.Value.Item1);
				binary.Write (entry.Value.Item2);
			}
			binary.Write (indexStart);
			binary.Write (Encoding.UTF8.GetBytes ("xmonkeysloveplay"));
			binary.Flush ();
		}
		
		public void Close ()
		{
			WriteIndex ();
			package.Close ();
			package = null;
		}
	}

	static bool MaybeAddFile (PackageMaker maker, string code, string file)
	{
		if (file == null)
			return true;
		
		if (!File.Exists (file)){
			Error ("The file {0} does not exist", file);
			return false;
		}
		maker.Add (code, file);
		// add a space after code (="systemconfig:" or "machineconfig:")
		Console.WriteLine (code + " " + file);
		return true;
	}
	
	static bool GeneratePackage (List<string> files)
	{
		if (runtime == null){
			if (IsUnix)
				runtime = Process.GetCurrentProcess().MainModule.FileName;
			else {
				Error ("You must specify at least one runtime with --runtime or --cross");
				Environment.Exit (1);
			}
		}
		if (!File.Exists (runtime)){
			Error ($"The specified runtime at {runtime} does not exist");
			Environment.Exit (1);
		}
		
		if (ctor_func != null){
			Error ("--static-ctor not supported with package bundling, you must use native compilation for this");
			return false;
		}
		
		var maker = new PackageMaker (runtime, output);
		
		foreach (var url in files){
			string fname = LocateFile (new Uri (url).LocalPath);
			string aname = MakeBundle.GetAssemblyName (fname);

			maker.Add ("assembly:" + aname, fname);
			Console.WriteLine ("     Assembly: " + fname);
			if (File.Exists (fname + ".config")){
				maker.Add ("config:" + aname, fname + ".config");
				Console.WriteLine ("       Config: " + fname + ".config");
			}
		}
		
		if (!MaybeAddFile (maker, "systemconfig:", config_file) || !MaybeAddFile (maker, "machineconfig:", machine_config_file))
			return false;

		if (config_dir != null){
			maker.Add ("config_dir:", config_dir);
			Console.WriteLine ("   Config_dir: " + config_dir );
		}
		if (embedded_options != null)
			maker.AddString ("options:", embedded_options);
		if (environment.Count > 0){
			foreach (var key in environment.Keys)
				maker.AddStringPair ("env:" + key, key, environment [key]);
		}
		if (libraries.Count > 0){
			foreach (var alias_and_path in libraries){
				Console.WriteLine ("     Library:  " + alias_and_path.Value);
				maker.Add ("library:" + alias_and_path.Key, alias_and_path.Value);
			}
		}
		maker.Dump ();
		maker.Close ();
		return true;
	}
	
	static void GenerateBundles (List<string> files)
	{
		string temp_s = "temp.s"; // Path.GetTempFileName ();
		string temp_c = "temp.c";
		string temp_o = (style != "windows") ? "temp.o" : "temp.s.obj";

		if (compile_only)
			temp_c = output;
		if (object_out != null)
			temp_o = object_out;
		
		try {
			List<string> c_bundle_names = new List<string> ();
			List<string[]> config_names = new List<string[]> ();

			using (StreamWriter ts = new StreamWriter (File.Create (temp_s))) {
			using (StreamWriter tc = new StreamWriter (File.Create (temp_c))) {
			string prog = null;

			if (bundled_header) {
				tc.WriteLine ("/* This source code was produced by mkbundle, do not edit */");
				tc.WriteLine ("\n#ifndef NULL\n#define NULL (void *)0\n#endif");
				tc.WriteLine (@"
typedef struct {
	const char *name;
	const unsigned char *data;
	const unsigned int size;
} MonoBundledAssembly;
");

				// These values are part of the public API, so they are expected not to change
				tc.WriteLine("#define MONO_AOT_MODE_NORMAL 1");
				tc.WriteLine("#define MONO_AOT_MODE_FULL 3");
				tc.WriteLine("#define MONO_AOT_MODE_LLVMONLY 4");
			} else {
				tc.WriteLine ("#include <mono/metadata/mono-config.h>");
				tc.WriteLine ("#include <mono/metadata/assembly.h>\n");

				if (in_tree != null)
					tc.WriteLine ("#include <mono/mini/jit.h>\n");
				else
					tc.WriteLine ("#include <mono/jit/jit.h>\n");
			}

			Stream template_stream;
			if (String.IsNullOrEmpty (mono_api_struct_file)) {
				tc.WriteLine ("#define USE_DEFAULT_MONO_API_STRUCT");
				template_stream = typeof (MakeBundle).Assembly.GetManifestResourceStream ("bundle-mono-api.inc");
			} else {
				template_stream = File.OpenRead (mono_api_struct_file);
			}

			StreamReader s;
			using (s = new StreamReader (template_stream)) {
				tc.Write (s.ReadToEnd ());
			}
			template_stream.Dispose ();

			if (compress) {
				tc.WriteLine ("#define USE_COMPRESSED_ASSEMBLY\n");
				tc.WriteLine ("typedef struct _compressed_data {");
				tc.WriteLine ("\tMonoBundledAssembly assembly;");
				tc.WriteLine ("\tint compressed_size;");
				tc.WriteLine ("} CompressedAssembly;\n");
			}

			object monitor = new object ();

			var streams = new Dictionary<string, Stream> ();
			var sizes = new Dictionary<string, long> ();

			// Do the file reading and compression in parallel
			Action<string> body = delegate (string url) {
				string fname = LocateFile (new Uri (url).LocalPath);
				Stream stream = File.OpenRead (fname);

				long real_size = stream.Length;
				int n;
				if (compress) {
					byte[] cbuffer = new byte [8192];
					MemoryStream ms = new MemoryStream ();
					GZipStream deflate = new GZipStream (ms, CompressionMode.Compress, leaveOpen:true);
					while ((n = stream.Read (cbuffer, 0, cbuffer.Length)) != 0){
						deflate.Write (cbuffer, 0, n);
					}
					stream.Close ();
					deflate.Close ();
					byte [] bytes = ms.GetBuffer ();
					stream = new MemoryStream (bytes, 0, (int) ms.Length, false, false);
				}

				lock (monitor) {
					streams [url] = stream;
					sizes [url] = real_size;
				}
			};

			//#if NET_4_5
#if FALSE
			Parallel.ForEach (files, body);
#else
			foreach (var url in files)
				body (url);
#endif

			// The non-parallel part
			byte [] buffer = new byte [8192];
			// everything other than a-zA-Z0-9_ needs to be escaped in asm symbols.
			var symbolEscapeRE = new System.Text.RegularExpressions.Regex ("[^\\w_]");
			foreach (var url in files) {
				string fname = LocateFile (new Uri (url).LocalPath);
				string aname = MakeBundle.GetAssemblyName (fname);
				string encoded = symbolEscapeRE.Replace (aname, "_");

				if (prog == null)
					prog = aname;

				var stream = streams [url];
				var real_size = sizes [url];

				if (!quiet)
					Console.WriteLine ("   embedding: " + fname);

				WriteSymbol (ts, "assembly_data_" + encoded, stream.Length);
			
				WriteBuffer (ts, stream, buffer);

				if (compress) {
					tc.WriteLine ("extern const unsigned char assembly_data_{0} [];", encoded);
					tc.WriteLine ("static CompressedAssembly assembly_bundle_{0} = {{{{\"{1}\"," +
								  " assembly_data_{0}, {2}}}, {3}}};",
								  encoded, aname, real_size, stream.Length);
					if (!quiet) {
						double ratio = ((double) stream.Length * 100) / real_size;
						Console.WriteLine ("   compression ratio: {0:.00}%", ratio);
					}
				} else {
					tc.WriteLine ("extern const unsigned char assembly_data_{0} [];", encoded);
					tc.WriteLine ("static const MonoBundledAssembly assembly_bundle_{0} = {{\"{1}\", assembly_data_{0}, {2}}};",
								  encoded, aname, real_size);
				}
				stream.Close ();

				c_bundle_names.Add ("assembly_bundle_" + encoded);

				try {
					FileStream cf = File.OpenRead (fname + ".config");
					if (!quiet)
						Console.WriteLine (" config from: " + fname + ".config");
					tc.WriteLine ("extern const char assembly_config_{0} [];", encoded);
					WriteSymbol (ts, "assembly_config_" + encoded, cf.Length);
					WriteBuffer (ts, cf, buffer);
					ts.WriteLine ();
					config_names.Add (new string[] {aname, encoded});
				} catch (FileNotFoundException) {
					/* we ignore if the config file doesn't exist */
				}
			}

			if (config_file != null){
				FileStream conf;
				try {
					conf = File.OpenRead (config_file);
				} catch {
					Error ("Failure to open {0}", config_file);
					return;
				}
				if (!quiet)
					Console.WriteLine ("System config from: " + config_file);
				tc.WriteLine ("extern const char system_config;");
				WriteSymbol (ts, "system_config", config_file.Length);

				WriteBuffer (ts, conf, buffer);
				// null terminator
				ts.Write ("\t.byte 0\n");
				ts.WriteLine ();
			}

			if (machine_config_file != null){
				FileStream conf;
				try {
					conf = File.OpenRead (machine_config_file);
				} catch {
					Error ("Failure to open {0}", machine_config_file);
					return;
				}
				if (!quiet)
					Console.WriteLine ("Machine config from: " + machine_config_file);
				tc.WriteLine ("extern const char machine_config;");
				WriteSymbol (ts, "machine_config", machine_config_file.Length);

				WriteBuffer (ts, conf, buffer);
				ts.Write ("\t.byte 0\n");
				ts.WriteLine ();
			}
			ts.Close ();

			// Managed assemblies baked in
			if (compress)
				tc.WriteLine ("\nstatic const CompressedAssembly *compressed [] = {");
			else
				tc.WriteLine ("\nstatic const MonoBundledAssembly *bundled [] = {");

			foreach (string c in c_bundle_names){
				tc.WriteLine ("\t&{0},", c);
			}
			tc.WriteLine ("\tNULL\n};\n");

			// This must go before any attempt to access `mono_api`
			using (template_stream = System.Reflection.Assembly.GetAssembly (typeof(MakeBundle)).GetManifestResourceStream ("template_common.inc")) {
				using (s = new StreamReader (template_stream)) {
					tc.Write (s.ReadToEnd ());
				}
			}

			// AOT baked in plus loader
			foreach (string asm in aot_names){
				tc.WriteLine ("\textern const void *mono_aot_module_{0}_info;", asm);
			}

			tc.WriteLine ("\n#ifndef USE_COMPRESSED_ASSEMBLY\n");
			tc.WriteLine ("static void install_aot_modules (void) {\n");
			foreach (string asm in aot_names){
				tc.WriteLine ("\tmono_api.mono_aot_register_module (mono_aot_module_{0}_info);\n", asm);
			}

			string enum_aot_mode;
			switch (aot_mode) {
			case "full": 
				enum_aot_mode = "MONO_AOT_MODE_FULL";
				break;
			case "llvmonly": 
				enum_aot_mode = "MONO_AOT_MODE_LLVMONLY";
				break;
			case "": 
				enum_aot_mode = "MONO_AOT_MODE_NORMAL";
				break;
			default:
				throw new Exception ("Unsupported AOT mode");
			}
			tc.WriteLine ("\tmono_api.mono_jit_set_aot_mode ({0});", enum_aot_mode);

			tc.WriteLine ("\n}\n");
			tc.WriteLine ("#endif\n");


			tc.WriteLine ("static char *image_name = \"{0}\";", prog);

			if (ctor_func != null) {
				tc.WriteLine ("\nextern void {0} (void);", ctor_func);
				tc.WriteLine ("\n__attribute__ ((constructor)) static void mono_mkbundle_ctor (void)");
				tc.WriteLine ("{{\n\t{0} ();\n}}", ctor_func);
			}

			tc.WriteLine ("\nstatic void install_dll_config_files (void) {\n");
			foreach (string[] ass in config_names){
				tc.WriteLine ("\tmono_api.mono_register_config_for_assembly (\"{0}\", assembly_config_{1});\n", ass [0], ass [1]);
			}
			if (config_file != null)
				tc.WriteLine ("\tmono_api.mono_config_parse_memory (&system_config);\n");
			if (machine_config_file != null)
				tc.WriteLine ("\tmono_api.mono_register_machine_config (&machine_config);\n");
			tc.WriteLine ("}\n");

			if (config_dir != null)
				tc.WriteLine ("static const char *config_dir = \"{0}\";", config_dir);
			else
				tc.WriteLine ("static const char *config_dir = NULL;");

			if (compress) {
				template_stream = System.Reflection.Assembly.GetAssembly (typeof(MakeBundle)).GetManifestResourceStream ("template_z.c");
			} else {
				template_stream = System.Reflection.Assembly.GetAssembly (typeof(MakeBundle)).GetManifestResourceStream ("template.c");
			}

			using (s = new StreamReader (template_stream)) {
				tc.Write (s.ReadToEnd ());
			}
			template_stream.Dispose ();

			if (!nomain && custom_main == null) {
				Stream template_main_stream = System.Reflection.Assembly.GetAssembly (typeof(MakeBundle)).GetManifestResourceStream ("template_main.c");
				StreamReader st = new StreamReader (template_main_stream);
				string maintemplate = st.ReadToEnd ();
				tc.Write (maintemplate);
			}

			tc.Close ();

			string as_cmd = GetAssemblerCommand (temp_s, temp_o);
			Execute(as_cmd);

			if (compile_only)
				return;

			if (!quiet)
				Console.WriteLine("Compiling:");

			if (style == "windows") {
				bool staticLinkCRuntime = GetEnv ("VCCRT", "MD") != "MD";
				ToolchainProgram compiler = GetCCompiler (static_link, staticLinkCRuntime);
				if (!nomain || custom_main != null) {
					string cl_cmd = GetCompileAndLinkCommand (compiler, temp_c, temp_o, custom_main, static_link, staticLinkCRuntime, output);
					Execute (cl_cmd);
				} else {
					string temp_c_o = "";
					try {
						string cl_cmd = GetLibrarianCompilerCommand (compiler, temp_c, static_link, staticLinkCRuntime, out temp_c_o);
						Execute(cl_cmd);

						ToolchainProgram librarian = GetLibrarian ();
						string lib_cmd = GetLibrarianLinkerCommand (librarian, new string[] { temp_o, temp_c_o }, static_link, staticLinkCRuntime, output);
						Execute (lib_cmd);
					} finally {
						File.Delete (temp_c_o);
					}


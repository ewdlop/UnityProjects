ll; } }
        public static System.Drawing.Color DeepPink { get { throw null; } }
        public static System.Drawing.Color DeepSkyBlue { get { throw null; } }
        public static System.Drawing.Color DimGray { get { throw null; } }
        public static System.Drawing.Color DodgerBlue { get { throw null; } }
        public static System.Drawing.Color Firebrick { get { throw null; } }
        public static System.Drawing.Color FloralWhite { get { throw null; } }
        public static System.Drawing.Color ForestGreen { get { throw null; } }
        public static System.Drawing.Color Fuchsia { get { throw null; } }
        public byte G { get { throw null; } }
        public static System.Drawing.Color Gainsboro { get { throw null; } }
        public static System.Drawing.Color GhostWhite { get { throw null; } }
        public static System.Drawing.Color Gold { get { throw null; } }
        public static System.Drawing.Color Goldenrod { get { throw null; } }
        public static System.Drawing.Color Gray { get { throw null; } }
        public static System.Drawing.Color Green { get { throw null; } }
        public static System.Drawing.Color GreenYellow { get { throw null; } }
        public static System.Drawing.Color Honeydew { get { throw null; } }
        public static System.Drawing.Color HotPink { get { throw null; } }
        public static System.Drawing.Color IndianRed { get { throw null; } }
        public static System.Drawing.Color Indigo { get { throw null; } }
        public bool IsEmpty { get { throw null; } }
        public bool IsKnownColor { get { throw null; } }
        public bool IsNamedColor { get { throw null; } }
        public bool IsSystemColor { get { throw null; } }
        public static System.Drawing.Color Ivory { get { throw null; } }
        public static System.Drawing.Color Khaki { get { throw null; } }
        public static System.Drawing.Color Lavender { get { throw null; } }
        public static System.Drawing.Color LavenderBlush { get { throw null; } }
        public static System.Drawing.Color LawnGreen { get { throw null; } }
        public static System.Drawing.Color LemonChiffon { get { throw null; } }
        public static System.Drawing.Color LightBlue { get { throw null; } }
        public static System.Drawing.Color LightCoral { get { throw null; } }
        public static System.Drawing.Color LightCyan { get { throw null; } }
        public static System.Drawing.Color LightGoldenrodYellow { get { throw null; } }
        public static System.Drawing.Color LightGray { get { throw null; } }
        public static System.Drawing.Color LightGreen { get { throw null; } }
        public static System.Drawing.Color LightPink { get { throw null; } }
        public static System.Drawing.Color LightSalmon { get { throw null; } }
        public static System.Drawing.Color LightSeaGreen { get { throw null; } }
        public static System.Drawing.Color LightSkyBlue { get { throw null; } }
        public static System.Drawing.Color LightSlateGray { get { throw null; } }
        public static System.Drawing.Color LightSteelBlue { get { throw null; } }
        public static System.Drawing.Color LightYellow { get { throw null; } }
        public static System.Drawing.Color Lime { get { throw null; } }
        public static System.Drawing.Color LimeGreen { get { throw null; } }
        public static System.Drawing.Color Linen { get { throw null; } }
        public static System.Drawing.Color Magenta { get { throw null; } }
        public static System.Drawing.Color Maroon { get { throw null; } }
        public static System.Drawing.Color MediumAquamarine { get { throw null; } }
        public static System.Drawing.Color MediumBlue { get { throw null; } }
        public static System.Drawing.Color MediumOrchid { get { throw null; } }
        public static System.Drawing.Color MediumPurple { get { throw null; } }
        public static System.Drawing.Color MediumSeaGreen { get { throw null; } }
        public static System.Drawing.Color MediumSlateBlue { get { throw null; } }
        public static System.Drawing.Color MediumSpringGreen { get { throw null; } }
        public static System.Drawing.Color MediumTurquoise { get { throw null; } }
        public static System.Drawing.Color MediumVioletRed { get { throw null; } }
        public static System.Drawing.Color MidnightBlue { get { throw null; } }
        public static System.Drawing.Color MintCream { get { throw null; } }
        public static System.Drawing.Color MistyRose { get { throw null; } }
        public static System.Drawing.Color Moccasin { get { throw null; } }
        public string Name { get { throw null; } }
        public static System.Drawing.Color NavajoWhite { get { throw null; } }
        public static System.Drawing.Color Navy { get { throw null; } }
        public static System.Drawing.Color OldLace { get { throw null; } }
        public static System.Drawing.Color Olive { get { throw null; } }
        public static System.Drawing.Color OliveDrab { get { throw null; } }
        public static System.Drawing.Color Orange { get { throw null; } }
        public static System.Drawing.Color OrangeRed { get { throw null; } }
        public static System.Drawing.Color Orchid { get { throw null; } }
        public static System.Drawing.Color PaleGoldenrod { get { throw null; } }
        public static System.Drawing.Color PaleGreen { get { throw null; } }
        public static System.Drawing.Color PaleTurquoise { get { throw null; } }
        public static System.Drawing.Color PaleVioletRed { get { throw null; } }
        public static System.Drawing.Color PapayaWhip { get { throw null; } }
        public static System.Drawing.Color PeachPuff { get { throw null; } }
        public static System.Drawing.Color Peru { get { throw null; } }
        public static System.Drawing.Color Pink { get { throw null; } }
        public static System.Drawing.Color Plum { get { throw null; } }
        public static System.Drawing.Color PowderBlue { get { throw null; } }
        public static System.Drawing.Color Purple { get { throw null; } }
        public byte R { get { throw null; } }
        public static System.Drawing.Color Red { get { throw null; } }
        public static System.Drawing.Color RosyBrown { get { throw null; } }
        public static System.Drawing.Color RoyalBlue { get { throw null; } }
        public static System.Drawing.Color SaddleBrown { get { throw null; } }
        public static System.Drawing.Color Salmon { get { throw null; } }
        public static System.Drawing.Color SandyBrown { get { throw null; } }
        public static System.Drawing.Color SeaGreen { get { throw null; } }
        public static System.Drawing.Color SeaShell { get { throw null; } }
        public static System.Drawing.Color Sienna { get { throw null; } }
        public static System.Drawing.Color Silver { get { throw null; } }
        public static System.Drawing.Color SkyBlue { get { throw null; } }
        public static System.Drawing.Color SlateBlue { get { throw null; } }
        public static System.Drawing.Color SlateGray { get { throw null; } }
        public static System.Drawing.Color Snow { get { throw null; } }
        public static System.Drawing.Color SpringGreen { get { throw null; } }
        public static System.Drawing.Color SteelBlue { get { throw null; } }
        public static System.Drawing.Color Tan { get { throw null; } }
        public static System.Drawing.Color Teal { get { throw null; } }
        public static System.Drawing.Color Thistle { get { throw null; } }
        public static System.Drawing.Color Tomato { get { throw null; } }
        public static System.Drawing.Color Transparent { get { throw null; } }
        public static System.Drawing.Color Turquoise { get { throw null; } }
        public static System.Drawing.Color Violet { get { throw null; } }
        public static System.Drawing.Color Wheat { get { throw null; } }
        public static System.Drawing.Color White { get { throw null; } }
        public static System.Drawing.Color WhiteSmoke { get { throw null; } }
        public static System.Drawing.Color Yellow { get { throw null; } }
        public static System.Drawing.Color YellowGreen { get { throw null; } }
        public override bool Equals(object obj) { throw null; }
        public static System.Drawing.Color FromArgb(int argb) { throw null; }
        public static System.Drawing.Color FromArgb(int alpha, System.Drawing.Color baseColor) { throw null; }
        public static System.Drawing.Color FromArgb(int red, int green, int blue) { throw null; }
        public static System.Drawing.Color FromArgb(int alpha, int red, int green, int blue) { throw null; }
        public static System.Drawing.Color FromKnownColor(System.Drawing.KnownColor color) { throw null; }
        public static System.Drawing.Color FromName(string name) { throw null; }
        public float GetBrightness() { throw null; }
        public override int GetHashCode() { throw null; }
        public float GetHue() { throw null; }
        public float GetSaturation() { throw null; }
        public static bool operator ==(System.Drawing.Color left, System.Drawing.Color right) { throw null; }
        public static bool operator !=(System.Drawing.Color left, System.Drawing.Color right) { throw null; }
        public int ToArgb() { throw null; }
        public System.Drawing.KnownColor ToKnownColor() { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class ColorConverter : System.ComponentModel.TypeConverter
    {
        public ColorConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { throw null; }
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { throw null; }
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { throw null; }
        public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) { throw null; }
        public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) { throw null; }
    }
    public sealed partial class ColorTranslator
    {
        internal ColorTranslator() { }
        public static System.Drawing.Color FromHtml(string htmlColor) { throw null; }
        public static System.Drawing.Color FromOle(int oleColor) { throw null; }
        public static System.Drawing.Color FromWin32(int win32Color) { throw null; }
        public static string ToHtml(System.Drawing.Color c) { throw null; }
        public static int ToOle(System.Drawing.Color c) { throw null; }
        public static int ToWin32(System.Drawing.Color c) { throw null; }
    }
    [System.ComponentModel.EditorAttribute("System.Drawing.Design.ContentAlignmentEditor, System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))]
    public enum ContentAlignment
    {
        BottomCenter = 512,
        BottomLeft = 256,
        BottomRight = 1024,
        MiddleCenter = 32,
        MiddleLeft = 16,
        MiddleRight = 64,
        TopCenter = 2,
        TopLeft = 1,
        TopRight = 4,
    }
    [System.Runtime.InteropServices.ComVisibleAttribute(true)]
    public enum CopyPixelOperation
    {
        Blackness = 66,
        CaptureBlt = 1073741824,
        DestinationInvert = 5570569,
        MergeCopy = 12583114,
        MergePaint = 12255782,
        NoMirrorBitmap = -2147483648,
        NotSourceCopy = 3342344,
        NotSourceErase = 1114278,
        PatCopy = 15728673,
        PatInvert = 5898313,
        PatPaint = 16452105,
        SourceAnd = 8913094,
        SourceCopy = 13369376,
        SourceErase = 4457256,
        SourceInvert = 6684742,
        SourcePaint = 15597702,
        Whiteness = 16711778,
    }
    [System.ComponentModel.EditorAttribute("System.Drawing.Design.FontEditor, System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))]
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Drawing.FontConverter))]
    [System.Runtime.InteropServices.ComVisibleAttribute(true)]
    [System.SerializableAttribute]
    public sealed partial class Font : System.MarshalByRefObject, System.ICloneable, System.IDisposable, System.Runtime.Serialization.ISerializable
    {
        public Font(System.Drawing.Font prototype, System.Drawing.FontStyle newStyle) { }
        public Font(System.Drawing.FontFamily family, float emSize) { }
        public Font(System.Drawing.FontFamily family, float emSize, System.Drawing.FontStyle style) { }
        public Font(System.Drawing.FontFamily family, float emSize, System.Drawing.FontStyle style, System.Drawing.GraphicsUnit unit) { }
        public Font(System.Drawing.FontFamily family, float emSize, System.Drawing.FontStyle style, System.Drawing.GraphicsUnit unit, byte gdiCharSet) { }
        public Font(System.Drawing.FontFamily family, float emSize, System.Drawing.FontStyle style, System.Drawing.GraphicsUnit unit, byte gdiCharSet, bool gdiVerticalFont) { }
        public Font(System.Drawing.FontFamily family, float emSize, System.Drawing.GraphicsUnit unit) { }
        public Font(string familyName, float emSize) { }
        public Font(string familyName, float emSize, System.Drawing.FontStyle style) { }
        public Font(string familyName, float emSize, System.Drawing.FontStyle style, System.Drawing.GraphicsUnit unit) { }
        public Font(string familyName, float emSize, System.Drawing.FontStyle style, System.Drawing.GraphicsUnit unit, byte gdiCharSet) { }
        public Font(string familyName, float emSize, System.Drawing.FontStyle style, System.Drawing.GraphicsUnit unit, byte gdiCharSet, bool gdiVerticalFont) { }
        public Font(string familyName, float emSize, System.Drawing.GraphicsUnit unit) { }
        [System.ComponentModel.DesignerSerializationVisibilityAttribute((System.ComponentModel.DesignerSerializationVisibility)(0))]
        public bool Bold { get { throw null; } }
        [System.ComponentModel.BrowsableAttribute(false)]
        public System.Drawing.FontFamily FontFamily { get { throw null; } }
        [System.ComponentModel.DesignerSerializationVisibilityAttribute((System.ComponentModel.DesignerSerializationVisibility)(0))]
        public byte GdiCharSet { get { throw null; } }
        [System.ComponentModel.DesignerSerializationVisibilityAttribute((System.ComponentModel.DesignerSerializationVisibility)(0))]
        public bool GdiVerticalFont { get { throw null; } }
        [System.ComponentModel.BrowsableAttribute(false)]
        public int Height { get { throw null; } }
        [System.ComponentModel.BrowsableAttribute(false)]
        public bool IsSystemFont { get { throw null; } }
        [System.ComponentModel.DesignerSerializationVisibilityAttribute((System.ComponentModel.DesignerSerializationVisibility)(0))]
        public bool Italic { get { throw null; } }
        [System.ComponentModel.DesignerSerializationVisibilityAttribute((System.ComponentModel.DesignerSerializationVisibility)(0))]
        [System.ComponentModel.EditorAttribute("System.Drawing.Design.FontNameEditor, System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))]
        [System.ComponentModel.TypeConverterAttribute(typeof(System.Drawing.FontConverter.FontNameConverter))]
        public string Name { get { throw null; } }
        [System.ComponentModel.BrowsableAttribute(false)]
        public string OriginalFontName { get { throw null; } }
        public float Size { get { throw null; } }
        [System.ComponentModel.BrowsableAttribute(false)]
        public float SizeInPoints { get { throw null; } }
        [System.ComponentModel.DesignerSerializationVisibilityAttribute((System.ComponentModel.DesignerSerializationVisibility)(0))]
        public bool Strikeout { get { throw null; } }
        [System.ComponentModel.BrowsableAttribute(false)]
        public System.Drawing.FontStyle Style { get { throw null; } }
        [System.ComponentModel.BrowsableAttribute(false)]
        public string SystemFontName { get { throw null; } }
        [System.ComponentModel.DesignerSerializationVisibilityAttribute((System.ComponentModel.DesignerSerializationVisibility)(0))]
        public bool Underline { get { throw null; } }
        [System.ComponentModel.TypeConverterAttribute(typeof(System.Drawing.FontConverter.FontUnitConverter))]
        public System.Drawing.GraphicsUnit Unit { get { throw null; } }
        public object Clone() { throw null; }
        public void Dispose() { }
        public override bool Equals(object obj) { throw null; }
        ~Font() { }
        [System.MonoTODOAttribute("The hdc parameter has no direct equivalent in libgdiplus.")]
        public static System.Drawing.Font FromHdc(System.IntPtr hdc) { throw null; }
        public static System.Drawing.Font FromHfont(System.IntPtr hfont) { throw null; }
        public static System.Drawing.Font FromLogFont(object lf) { throw null; }
        [System.MonoTODOAttribute("The returned font may not have all it's properties initialized correctly.")]
        public static System.Drawing.Font FromLogFont(object lf, System.IntPtr hdc) { throw null; }
        public override int GetHashCode() { throw null; }
        public float GetHeight() { throw null; }
        public float GetHeight(System.Drawing.Graphics graphics) { throw null; }
        public float GetHeight(float dpi) { throw null; }
        void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext context) { }
        public System.IntPtr ToHfont() { throw null; }
        public void ToLogFont(object logFont) { }
        public void ToLogFont(object logFont, System.Drawing.Graphics graphics) { }
        public override string ToString() { throw null; }
    }
    public partial class FontConverter : System.ComponentModel.TypeConverter
    {
        public FontConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { throw null; }
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { throw null; }
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { throw null; }
        public override object CreateInstance(System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary propertyValues) { throw null; }
        ~FontConverter() { }
        public override bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext context) { throw null; }
        public override System.ComponentModel.PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributes) { throw null; }
        public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) { throw null; }
        public sealed partial class FontNameConverter : System.ComponentModel.TypeConverter, System.IDisposable
        {
            public FontNameConverter() { }
            public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { throw null; }
            public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { throw null; }
            public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) { throw null; }
            public override bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext context) { throw null; }
            public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) { throw null; }
            void System.IDisposable.Dispose() { }
        }
        public partial class FontUnitConverter : System.ComponentModel.EnumConverter
        {
            public FontUnitConverter() : base (default(System.Type)) { }
            public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) { throw null; }
        }
    }
    public sealed partial class FontFamily : System.MarshalByRefObject, System.IDisposable
    {
        public FontFamily(System.Drawing.Text.GenericFontFamilies genericFamily) { }
        public FontFamily(string name) { }
        public FontFamily(string name, System.Drawing.Text.FontCollection fontCollection) { }
        public static System.Drawing.FontFamily[] Families { get { throw null; } }
        public static System.Drawing.FontFamily GenericMonospace { get { throw null; } }
        public static System.Drawing.FontFamily GenericSansSerif { get { throw null; } }
        public static System.Drawing.FontFamily GenericSerif { get { throw null; } }
        public string Name { get { throw null; } }
        public void Dispose() { }
        public override bool Equals(object obj) { throw null; }
        ~FontFamily() { }
        public int GetCellAscent(System.Drawing.FontStyle style) { throw null; }
        public int GetCellDescent(System.Drawing.FontStyle style) { throw null; }
        public int GetEmHeight(System.Drawing.FontStyle style) { throw null; }
        public static System.Drawing.FontFamily[] GetFamilies(System.Drawing.Graphics graphics) { throw null; }
        public override int GetHashCode() { throw null; }
        public int GetLineSpacing(System.Drawing.FontStyle style) { throw null; }
        [System.MonoLimitationAttribute("The language parameter is ignored. We always return the name using the default system language.")]
        public string GetName(int language) { throw null; }
        [System.MonoDocumentationNoteAttribute("When used with libgdiplus this method always return true (styles are created on demand).")]
        public bool IsStyleAvailable(System.Drawing.FontStyle style) { throw null; }
        public override string ToString() { throw null; }
    }
    [System.FlagsAttribute]
    public enum FontStyle
    {
        Bold = 1,
        Italic = 2,
        Regular = 0,
        Strikeout = 8,
        Underline = 4,
    }
    public sealed partial class Graphics : System.MarshalByRefObject, System.Drawing.IDeviceContext, System.IDisposable
    {
        internal Graphics() { }
        public System.Drawing.Region Clip { get { throw null; } set { } }
        public System.Drawing.RectangleF ClipBounds { get { throw null; } }
        public System.Drawing.Drawing2D.CompositingMode CompositingMode { get { throw null; } set { } }
        public System.Drawing.Drawing2D.CompositingQuality CompositingQuality { get { throw null; } set { } }
        public float DpiX { get { throw null; } }
        public float DpiY { get { throw null; } }
        public System.Drawing.Drawing2D.InterpolationMode InterpolationMode { get { throw null; } set { } }
        public bool IsClipEmpty { get { throw null; } }
        public bool IsVisibleClipEmpty { get { throw null; } }
        public float PageScale { get { throw null; } set { } }
        public System.Drawing.GraphicsUnit PageUnit { get { throw null; } set { } }
        [System.MonoTODOAttribute("This property does not do anything when used with libgdiplus.")]
        public System.Drawing.Drawing2D.PixelOffsetMode PixelOffsetMode { get { throw null; } set { } }
        public System.Drawing.Point RenderingOrigin { get { throw null; } set { } }
        public System.Drawing.Drawing2D.SmoothingMode SmoothingMode { get { throw null; } set { } }
        [System.MonoTODOAttribute("This property does not do anything when used with libgdiplus.")]
        public int TextContrast { get { throw null; } set { } }
        public System.Drawing.Text.TextRenderingHint TextRenderingHint { get { throw null; } set { } }
        public System.Drawing.Drawing2D.Matrix Transform { get { throw null; } set { } }
        public System.Drawing.RectangleF VisibleClipBounds { get { throw null; } }
        [System.MonoTODOAttribute("Metafiles, both WMF and EMF formats, aren't supported.")]
        public void AddMetafileComment(byte[] data) { }
        public System.Drawing.Drawing2D.GraphicsContainer BeginContainer() { throw null; }
        [System.MonoTODOAttribute("The rectangles and unit parameters aren't supported in libgdiplus")]
        public System.Drawing.Drawing2D.GraphicsContainer BeginContainer(System.Drawing.Rectangle dstrect, System.Drawing.Rectangle srcrect, System.Drawing.GraphicsUnit unit) { throw null; }
        [System.MonoTODOAttribute("The rectangles and unit parameters aren't supported in libgdiplus")]
        public System.Drawing.Drawing2D.GraphicsContainer BeginContainer(System.Drawing.RectangleF dstrect, System.Drawing.RectangleF srcrect, System.Drawing.GraphicsUnit unit) { throw null; }
        public void Clear(System.Drawing.Color color) { }
        [System.MonoLimitationAttribute("Works on Win32 and on X11 (but not on Cocoa and Quartz)")]
        public void CopyFromScreen(System.Drawing.Point upperLeftSource, System.Drawing.Point upperLeftDestination, System.Drawing.Size blockRegionSize) { }
        [System.MonoLimitationAttribute("Works on Win32 and (for CopyPixelOperation.SourceCopy only) on X11 but not on Cocoa and Quartz")]
        public void CopyFromScreen(System.Drawing.Point upperLeftSource, System.Drawing.Point upperLeftDestination, System.Drawing.Size blockRegionSize, System.Drawing.CopyPixelOperation copyPixelOperation) { }
        [System.MonoLimitationAttribute("Works on Win32 and on X11 (but not on Cocoa and Quartz)")]
        public void CopyFromScreen(int sourceX, int sourceY, int destinationX, int destinationY, System.Drawing.Size blockRegionSize) { }
        [System.MonoLimitationAttribute("Works on Win32 and (for CopyPixelOperation.SourceCopy only) on X11 but not on Cocoa and Quartz")]
        public void CopyFromScreen(int sourceX, int sourceY, int destinationX, int destinationY, System.Drawing.Size blockRegionSize, System.Drawing.CopyPixelOperation copyPixelOperation) { }
        public void Dispose() { }
        public void DrawArc(System.Drawing.Pen pen, System.Drawing.Rectangle rect, float startAngle, float sweepAngle) { }
        public void DrawArc(System.Drawing.Pen pen, System.Drawing.RectangleF rect, float startAngle, float sweepAngle) { }
        public void DrawArc(System.Drawing.Pen pen, int x, int y, int width, int height, int startAngle, int sweepAngle) { }
        public void DrawArc(System.Drawing.Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle) { }
        public void DrawBezier(System.Drawing.Pen pen, System.Drawing.Point pt1, System.Drawing.Point pt2, System.Drawing.Point pt3, System.Drawing.Point pt4) { }
        public void DrawBezier(System.Drawing.Pen pen, System.Drawing.PointF pt1, System.Drawing.PointF pt2, System.Drawing.PointF pt3, System.Drawing.PointF pt4) { }
        public void DrawBezier(System.Drawing.Pen pen, float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4) { }
        public void DrawBeziers(System.Drawing.Pen pen, System.Drawing.PointF[] points) { }
        public void DrawBeziers(System.Drawing.Pen pen, System.Drawing.Point[] points) { }
        public void DrawClosedCurve(System.Drawing.Pen pen, System.Drawing.PointF[] points) { }
        public void DrawClosedCurve(System.Drawing.Pen pen, System.Drawing.PointF[] points, float tension, System.Drawing.Drawing2D.FillMode fillmode) { }
        public void DrawClosedCurve(System.Drawing.Pen pen, System.Drawing.Point[] points) { }
        public void DrawClosedCurve(System.Drawing.Pen pen, System.Drawing.Point[] points, float tension, System.Drawing.Drawing2D.FillMode fillmode) { }
        public void DrawCurve(System.Drawing.Pen pen, System.Drawing.PointF[] points) { }
        public void DrawCurve(System.Drawing.Pen pen, System.Drawing.PointF[] points, int offset, int numberOfSegments) { }
        public void DrawCurve(System.Drawing.Pen pen, System.Drawing.PointF[] points, int offset, int numberOfSegments, float tension) { }
        public void DrawCurve(System.Drawing.Pen pen, System.Drawing.PointF[] points, float tension) { }
        public void DrawCurve(System.Drawing.Pen pen, System.Drawing.Point[] points) { }
        public void DrawCurve(System.Drawing.Pen pen, System.Drawing.Point[] points, int offset, int numberOfSegments, float tension) { }
        public void DrawCurve(System.Drawing.Pen pen, System.Drawing.Point[] points, float tension) { }
        public void DrawEllipse(System.Drawing.Pen pen, System.Drawing.Rectangle rect) { }
        public void DrawEllipse(System.Drawing.Pen pen, System.Drawing.RectangleF rect) { }
        public void DrawEllipse(System.Drawing.Pen pen, int x, int y, int width, int height) { }
        public void DrawEllipse(System.Drawing.Pen pen, float x, float y, float width, float height) { }
        public void DrawIcon(System.Drawing.Icon icon, System.Drawing.Rectangle targetRect) { }
        public void DrawIcon(System.Drawing.Icon icon, int x, int y) { }
        public void DrawIconUnstretched(System.Drawing.Icon icon, System.Drawing.Rectangle targetRect) { }
        public void DrawImage(System.Drawing.Image image, System.Drawing.Point point) { }
        public void DrawImage(System.Drawing.Image image, System.Drawing.PointF point) { }
        public void DrawImage(System.Drawing.Image image, System.Drawing.PointF[] destPoints) { }
        public void DrawImage(System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit) { }
        public void DrawImage(System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr) { }
        public void DrawImage(System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback) { }
        public void DrawImage(System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback, int callbackData) { }
        public void DrawImage(System.Drawing.Image image, System.Drawing.Point[] destPoints) { }
        public void DrawImage(System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit) { }
        public void DrawImage(System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr) { }
        public void DrawImage(System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback) { }
        public void DrawImage(System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback, int callbackData) { }
        public void DrawImage(System.Drawing.Image image, System.Drawing.Rectangle rect) { }
        public void DrawImage(System.Drawing.Image image, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit) { }
        public void DrawImage(System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit) { }
        public void DrawImage(System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr) { }
        public void DrawImage(System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback) { }
        public void DrawImage(System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs, System.Drawing.Graphics.DrawImageAbort callback, System.IntPtr callbackData) { }
        public void DrawImage(System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit) { }
        public void DrawImage(System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs) { }
        public void DrawImage(System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs, System.Drawing.Graphics.DrawImageAbort callback) { }
        public void DrawImage(System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs, System.Drawing.Graphics.DrawImageAbort callback, System.IntPtr callbackData) { }
        public void DrawImage(System.Drawing.Image image, System.Drawing.RectangleF rect) { }
        public void DrawImage(System.Drawing.Image image, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit) { }
        public void DrawImage(System.Drawing.Image image, int x, int y) { }
        public void DrawImage(System.Drawing.Image image, int x, int y, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit) { }
        public void DrawImage(System.Drawing.Image image, int x, int y, int width, int height) { }
        public void DrawImage(System.Drawing.Image image, float x, float y) { }
        public void DrawImage(System.Drawing.Image image, float x, float y, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit) { }
        public void DrawImage(System.Drawing.Image image, float x, float y, float width, float height) { }
        public void DrawImageUnscaled(System.Drawing.Image image, System.Drawing.Point point) { }
        public void DrawImageUnscaled(System.Drawing.Image image, System.Drawing.Rectangle rect) { }
        public void DrawImageUnscaled(System.Drawing.Image image, int x, int y) { }
        public void DrawImageUnscaled(System.Drawing.Image image, int x, int y, int width, int height) { }
        public void DrawImageUnscaledAndClipped(System.Drawing.Image image, System.Drawing.Rectangle rect) { }
        public void DrawLine(System.Drawing.Pen pen, System.Drawing.Point pt1, System.Drawing.Point pt2) { }
        public void DrawLine(System.Drawing.Pen pen, System.Drawing.PointF pt1, System.Drawing.PointF pt2) { }
        public void DrawLine(System.Drawing.Pen pen, int x1, int y1, int x2, int y2) { }
        public void DrawLine(System.Drawing.Pen pen, float x1, float y1, float x2, float y2) { }
        public void DrawLines(System.Drawing.Pen pen, System.Drawing.PointF[] points) { }
        public void DrawLines(System.Drawing.Pen pen, System.Drawing.Point[] points) { }
        public void DrawPath(System.Drawing.Pen pen, System.Drawing.Drawing2D.GraphicsPath path) { }
        public void DrawPie(System.Drawing.Pen pen, System.Drawing.Rectangle rect, float startAngle, float sweepAngle) { }
        public void DrawPie(System.Drawing.Pen pen, System.Drawing.RectangleF rect, float startAngle, float sweepAngle) { }
        public void DrawPie(System.Drawing.Pen pen, int x, int y, int width, int height, int startAngle, int sweepAngle) { }
        public void DrawPie(System.Drawing.Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle) { }
        public void DrawPolygon(System.Drawing.Pen pen, System.Drawing.PointF[] points) { }
        public void DrawPolygon(System.Drawing.Pen pen, System.Drawing.Point[] points) { }
        public void DrawRectangle(System.Drawing.Pen pen, System.Drawing.Rectangle rect) { }
        public void DrawRectangle(System.Drawing.Pen pen, int x, int y, int width, int height) { }
        public void DrawRectangle(System.Drawing.Pen pen, float x, float y, float width, float height) { }
        public void DrawRectangles(System.Drawing.Pen pen, System.Drawing.RectangleF[] rects) { }
        public void DrawRectangles(System.Drawing.Pen pen, System.Drawing.Rectangle[] rects) { }
        public void DrawString(string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.PointF point) { }
        public void DrawString(string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.PointF point, System.Drawing.StringFormat format) { }
        public void DrawString(string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.RectangleF layoutRectangle) { }
        public void DrawString(string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.RectangleF layoutRectangle, System.Drawing.StringFormat format) { }
        public void DrawString(string s, System.Drawing.Font font, System.Drawing.Brush brush, float x, float y) { }
        public void DrawString(string s, System.Drawing.Font font, System.Drawing.Brush brush, float x, float y, System.Drawing.StringFormat format) { }
        public void EndContainer(System.Drawing.Drawing2D.GraphicsContainer container) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, System.IntPtr callbackData) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, System.IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, System.IntPtr callbackData) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, System.IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, System.IntPtr callbackData) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, System.IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, System.IntPtr callbackData) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, System.IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, System.IntPtr callbackData) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, System.IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, System.IntPtr callbackData) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, System.IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, System.IntPtr callbackData) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, System.IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, System.IntPtr callbackData) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, System.IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Graphics.EnumerateMetafileProc callback) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, System.IntPtr callbackData) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, System.IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, System.IntPtr callbackData) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, System.IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.Graphics.EnumerateMetafileProc callback) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, System.IntPtr callbackData) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, System.IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, System.IntPtr callbackData) { }
        [System.MonoTODOAttribute("Metafiles enumeration, for both WMF and EMF formats, isn't supported.")]
        public void EnumerateMetafile(System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, System.IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr) { }
        public void ExcludeClip(System.Drawing.Rectangle rect) { }
        public void ExcludeClip(System.Drawing.Region region) { }
        public void FillClosedCurve(System.Drawing.Brush brush, System.Drawing.PointF[] points) { }
        public void FillClosedCurve(System.Drawing.Brush brush, System.Drawing.PointF[] points, System.Drawing.Drawing2D.FillMode fillmode) { }
        public void FillClosedCurve(System.Drawing.Brush brush, System.Drawing.PointF[] points, System.Drawing.Drawing2D.FillMode fillmode, float tension) { }
        public void FillClosedCurve(System.Drawing.Brush brush, System.Drawing.Point[] points) { }
        public void FillClosedCurve(System.Drawing.Brush brush, System.Drawing.Point[] points, System.Drawing.Drawing2D.FillMode fillmode) { }
        public void FillClosedCurve(System.Drawing.Brush brush, System.Drawing.Point[] points, System.Drawing.Drawing2D.FillMode fillmode, float tension) { }
        public void FillEllipse(System.Drawing.Brush brush, System.Drawing.Rectangle rect) { }
        public void FillEllipse(System.Drawing.Brush brush, System.Drawing.RectangleF rect) { }
        public void FillEllipse(System.Drawing.Brush brush, int x, int y, int width, int height) { }
        public void FillEllipse(System.Drawing.Brush brush, float x, float y, float width, float height) { }
        public void FillPath(System.Drawing.Brush brush, System.Drawing.Drawing2D.GraphicsPath path) { }
        public void FillPie(System.Drawing.Brush brush, System.Drawing.Rectangle rect, float startAngle, float sweepAngle) { }
        public void FillPie(System.Drawing.Brush brush, int x, int y, int width, int height, int startAngle, int sweepAngle) { }
        public void FillPie(System.Drawing.Brush brush, float x, float y, float width, float height, float startAngle, float sweepAngle) { }
        public void FillPolygon(System.Drawing.Brush brush, System.Drawing.PointF[] points) { }
        public void FillPolygon(System.Drawing.Brush brush, System.Drawing.PointF[] points, System.Drawing.Drawing2D.FillMode fillMode) { }
        public void FillPolygon(System.Drawing.Brush brush, System.Drawing.Point[] points) { }
        public void FillPolygon(System.Drawing.Brush brush, System.Drawing.Point[] points, System.Drawing.Drawing2D.FillMode fillMode) { }
        public void FillRectangle(System.Drawing.Brush brush, System.Drawing.Rectangle rect) { }
        public void FillRectangle(System.Drawing.Brush brush, System.Drawing.RectangleF rect) { }
        public void FillRectangle(System.Drawing.Brush brush, int x, int y, int width, int height) { }
        public void FillRectangle(System.Drawing.Brush brush, float x, float y, float width, float height) { }
        public void FillRectangles(System.Drawing.Brush brush, System.Drawing.RectangleF[] rects) { }
        public void FillRectangles(System.Drawing.Brush brush, System.Drawing.Rectangle[] rects) { }
        public void FillRegion(System.Drawing.Brush brush, System.Drawing.Region region) { }
        ~Graphics() { }
        public void Flush() { }
        public void Flush(System.Drawing.Drawing2D.FlushIntention intention) { }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(2))]
        public static System.Drawing.Graphics FromHdc(System.IntPtr hdc) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(2))]
        [System.MonoTODOAttribute]
        public static System.Drawing.Graphics FromHdc(System.IntPtr hdc, System.IntPtr hdevice) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(2))]
        public static System.Drawing.Graphics FromHdcInternal(System.IntPtr hdc) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(2))]
        public static System.Drawing.Graphics FromHwnd(System.IntPtr hwnd) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(2))]
        public static System.Drawing.Graphics FromHwndInternal(System.IntPtr hwnd) { throw null; }
        public static System.Drawing.Graphics FromImage(System.Drawing.Image image) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.MonoTODOAttribute]
        public object GetContextInfo() { throw null; }
        [System.MonoTODOAttribute]
        public static System.IntPtr GetHalftonePalette() { throw null; }
        public System.IntPtr GetHdc() { throw null; }
        public System.Drawing.Color GetNearestColor(System.Drawing.Color color) { throw null; }
        public void IntersectClip(System.Drawing.Rectangle rect) { }
        public void IntersectClip(System.Drawing.RectangleF rect) { }
        public void IntersectClip(System.Drawing.Region region) { }
        public bool IsVisible(System.Drawing.Point point) { throw null; }
        public bool IsVisible(System.Drawing.PointF point) { throw null; }
        public bool IsVisible(System.Drawing.Rectangle rect) { throw null; }
        public bool IsVisible(System.Drawing.RectangleF rect) { throw null; }
        public bool IsVisible(int x, int y) { throw null; }
        public bool IsVisible(int x, int y, int width, int height) { throw null; }
        public bool IsVisible(float x, float y) { throw null; }
        public bool IsVisible(float x, float y, float width, float height) { throw null; }
        public System.Drawing.Region[] MeasureCharacterRanges(string text, System.Drawing.Font font, System.Drawing.RectangleF layoutRect, System.Drawing.StringFormat stringFormat) { throw null; }
        public System.Drawing.SizeF MeasureString(string text, System.Drawing.Font font) { throw null; }
        public System.Drawing.SizeF MeasureString(string text, System.Drawing.Font font, System.Drawing.PointF origin, System.Drawing.StringFormat stringFormat) { throw null; }
        public System.Drawing.SizeF MeasureString(string text, System.Drawing.Font font, System.Drawing.SizeF layoutArea) { throw null; }
        public System.Drawing.SizeF MeasureString(string text, System.Drawing.Font font, System.Drawing.SizeF layoutArea, System.Drawing.StringFormat stringFormat) { throw null; }
        public System.Drawing.SizeF MeasureString(string text, System.Drawing.Font font, System.Drawing.SizeF layoutArea, System.Drawing.StringFormat stringFormat, out int charactersFitted, out int linesFilled) { charactersFitted = default(int); linesFilled = default(int); throw null; }
        public System.Drawing.SizeF MeasureString(string text, System.Drawing.Font font, int width) { throw null; }
        public System.Drawing.SizeF MeasureString(string text, System.Drawing.Font font, int width, System.Drawing.StringFormat format) { throw null; }
        public void MultiplyTransform(System.Drawing.Drawing2D.Matrix matrix) { }
        public void MultiplyTransform(System.Drawing.Drawing2D.Matrix matrix, System.Drawing.Drawing2D.MatrixOrder order) { }
        public void ReleaseHdc() { }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(2))]
        public void ReleaseHdc(System.IntPtr hdc) { }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.MonoLimitationAttribute("Can only be used when hdc was provided by Graphics.GetHdc() method")]
        public void ReleaseHdcInternal(System.IntPtr hdc) { }
        public void ResetClip() { }
        public void ResetTransform() { }
        public void Restore(System.Drawing.Drawing2D.GraphicsState gstate) { }
        public void RotateTransform(float angle) { }
        public void RotateTransform(float angle, System.Drawing.Drawing2D.MatrixOrder order) { }
        public System.Drawing.Drawing2D.GraphicsState Save() { throw null; }
        public void ScaleTransform(float sx, float sy) { }
        public void ScaleTransform(float sx, float sy, System.Drawing.Drawing2D.MatrixOrder order) { }
        public void SetClip(System.Drawing.Drawing2D.GraphicsPath path) { }
        public void SetClip(System.Drawing.Drawing2D.GraphicsPath path, System.Drawing.Drawing2D.CombineMode combineMode) { }
        public void SetClip(System.Drawing.Graphics g) { }
        public void SetClip(System.Drawing.Graphics g, System.Drawing.Drawing2D.CombineMode combineMode) { }
        public void SetClip(System.Drawing.Rectangle rect) { }
        public void SetClip(System.Drawing.Rectangle rect, System.Drawing.Drawing2D.CombineMode combineMode) { }
        public void SetClip(System.Drawing.RectangleF rect) { }
        public void SetClip(System.Drawing.RectangleF rect, System.Drawing.Drawing2D.CombineMode combineMode) { }
        public void SetClip(System.Drawing.Region region, System.Drawing.Drawing2D.CombineMode combineMode) { }
        public void TransformPoints(System.Drawing.Drawing2D.CoordinateSpace destSpace, System.Drawing.Drawing2D.CoordinateSpace srcSpace, System.Drawing.PointF[] pts) { }
        public void TransformPoints(System.Drawing.Drawing2D.CoordinateSpace destSpace, System.Drawing.Drawing2D.CoordinateSpace srcSpace, System.Drawing.Point[] pts) { }
        public void TranslateClip(int dx, int dy) { }
        public void TranslateClip(float dx, float dy) { }
        public void TranslateTransform(float dx, float dy) { }
        public void TranslateTransform(float dx, float dy, System.Drawing.Drawing2D.MatrixOrder order) { }
        public delegate bool DrawImageAbort(System.IntPtr callbackdata);
        public delegate bool EnumerateMetafileProc(System.Drawing.Imaging.EmfPlusRecordType recordType, int flags, int dataSize, System.IntPtr data, System.Drawing.Imaging.PlayRecordCallback callbackData);
    }
    public enum GraphicsUnit
    {
        Display = 1,
        Document = 5,
        Inch = 4,
        Millimeter = 6,
        Pixel = 2,
        Point = 3,
        World = 0,
    }
    [System.ComponentModel.EditorAttribute("System.Drawing.Design.IconEditor, System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))]
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Drawing.IconConverter))]
    [System.SerializableAttribute]
    public sealed partial class Icon : System.MarshalByRefObject, System.ICloneable, System.IDisposable, System.Runtime.Serialization.ISerializable
    {
        public Icon(System.Drawing.Icon original, System.Drawing.Size size) { }
        public Icon(System.Drawing.Icon original, int width, int height) { }
        public Icon(System.IO.Stream stream) { }
        public Icon(System.IO.Stream stream, System.Drawing.Size size) { }
        public Icon(System.IO.Stream stream, int width, int height) { }
        public Icon(string fileName) { }
        public Icon(string fileName, System.Drawing.Size size) { }
        public Icon(string fileName, int width, int height) { }
        public Icon(System.Type type, string resource) { }
        [System.ComponentModel.BrowsableAttribute(false)]
        public System.IntPtr Handle { get { throw null; } }
        [System.ComponentModel.BrowsableAttribute(false)]
        public int Height { get { throw null; } }
        public System.Drawing.Size Size { get { throw null; } }
        [System.ComponentModel.BrowsableAttribute(false)]
        public int Width { get { throw null; } }
        public object Clone() { throw null; }
        public void Dispose() { }
        [System.MonoLimitationAttribute("The same icon, SystemIcons.WinLogo, is returned for all file types.")]
        public static System.Drawing.Icon ExtractAssociatedIcon(string filePath) { throw null; }
        ~Icon() { }
        public static System.Drawing.Icon FromHandle(System.IntPtr handle) { throw null; }
        public void Save(System.IO.Stream outputStream) { }
        void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext context) { }
        public System.Drawing.Bitmap ToBitmap() { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class IconConverter : System.ComponentModel.ExpandableObjectConverter
    {
        public IconConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { throw null; }
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { throw null; }
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { throw null; }
    }
    public partial interface IDeviceContext : System.IDisposable
    {
        System.IntPtr GetHdc();
        void ReleaseHdc();
    }
    [System.ComponentModel.EditorAttribute("System.Drawing.Design.ImageEditor, System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))]
    [System.ComponentModel.ImmutableObjectAttribute(true)]
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Drawing.ImageConverter))]
    [System.Runtime.InteropServices.ComVisibleAttribute(true)]
    [System.SerializableAttribute]
    public abstract partial class Image : System.MarshalByRefObject, System.ICloneable, System.IDisposable, System.Runtime.Serialization.ISerializable
    {
        internal Image() { }
        [System.ComponentModel.BrowsableAttribute(false)]
        public int Flags { get { throw null; } }
        [System.ComponentModel.BrowsableAttribute(false)]
        public System.Guid[] FrameDimensionsList { get { throw null; } }
        [System.ComponentModel.BrowsableAttribute(false)]
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute((System.ComponentModel.DesignerSerializationVisibility)(0))]
        public int Height { get { throw null; } }
        public float HorizontalResolution { get { throw null; } }
        [System.ComponentModel.BrowsableAttribute(false)]
        public System.Drawing.Imaging.ColorPalette Palette { get { throw null; } set { } }
        public System.Drawing.SizeF PhysicalDimension { get { throw null; } }
        public System.Drawing.Imaging.PixelFormat PixelFormat { get { throw null; } }
        [System.ComponentModel.BrowsableAttribute(false)]
        public int[] PropertyIdList { get { throw null; } }
        [System.ComponentModel.BrowsableAttribute(false)]
        public System.Drawing.Imaging.PropertyItem[] PropertyItems { get { throw null; } }
        public System.Drawing.Imaging.ImageFormat RawFormat { get { throw null; } }
        public System.Drawing.Size Size { get { throw null; } }
        [System.ComponentModel.BindableAttribute(true)]
        [System.ComponentModel.DefaultValueAttribute(null)]
        [System.ComponentModel.LocalizableAttribute(false)]
        [System.ComponentModel.TypeConverterAttribute(typeof(System.ComponentModel.StringConverter))]
        public object Tag { get { throw null; } set { } }
        public float VerticalResolution { get { throw null; } }
        [System.ComponentModel.BrowsableAttribute(false)]
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute((System.ComponentModel.DesignerSerializationVisibility)(0))]
        public int Width { get { throw null; } }
        public object Clone() { throw null; }
        public void Dispose() { }
        protected virtual void Dispose(bool disposing) { }
        ~Image() { }
        public static System.Drawing.Image FromFile(string filename) { throw null; }
        public static System.Drawing.Image FromFile(string filename, bool useEmbeddedColorManagement) { throw null; }
        public static System.Drawing.Bitmap FromHbitmap(System.IntPtr hbitmap) { throw null; }
        public static System.Drawing.Bitmap FromHbitmap(System.IntPtr hbitmap, System.IntPtr hpalette) { throw null; }
        public static System.Drawing.Image FromStream(System.IO.Stream stream) { throw null; }
        [System.MonoLimitationAttribute("useEmbeddedColorManagement  isn't supported.")]
        public static System.Drawing.Image FromStream(System.IO.Stream stream, bool useEmbeddedColorManagement) { throw null; }
        [System.MonoLimitationAttribute("useEmbeddedColorManagement  and validateImageData aren't supported.")]
        public static System.Drawing.Image FromStream(System.IO.Stream stream, bool useEmbeddedColorManagement, bool validateImageData) { throw null; }
        public System.Drawing.RectangleF GetBounds(ref System.Drawing.GraphicsUnit pageUnit) { throw null; }
        public System.Drawing.Imaging.EncoderParameters GetEncoderParameterList(System.Guid encoder) { throw null; }
        public int GetFrameCount(System.Drawing.Imaging.FrameDimension dimension) { throw null; }
        public static int GetPixelFormatSize(System.Drawing.Imaging.PixelFormat pixfmt) { throw null; }
        public System.Drawing.Imaging.PropertyItem GetPropertyItem(int propid) { throw null; }
        public System.Drawing.Image GetThumbnailImage(int thumbWidth, int thumbHeight, System.Drawing.Image.GetThumbnailImageAbort callback, System.IntPtr callbackData) { throw null; }
        public static bool IsAlphaPixelFormat(System.Drawing.Imaging.PixelFormat pixfmt) { throw null; }
        public static bool IsCanonicalPixelFormat(System.Drawing.Imaging.PixelFormat pixfmt) { throw null; }
        public static bool IsExtendedPixelFormat(System.Drawing.Imaging.PixelFormat pixfmt) { throw null; }
        public void RemovePropertyItem(int propid) { }
        public void RotateFlip(System.Drawing.RotateFlipType rotateFlipType) { }
        public void Save(System.IO.Stream stream, System.Drawing.Imaging.ImageCodecInfo encoder, System.Drawing.Imaging.EncoderParameters encoderParams) { }
        public void Save(System.IO.Stream stream, System.Drawing.Imaging.ImageFormat format) { }
        public void Save(string filename) { }
        public void Save(string filename, System.Drawing.Imaging.ImageCodecInfo encoder, System.Drawing.Imaging.EncoderParameters encoderParams) { }
        public void Save(string filename, System.Drawing.Imaging.ImageFormat format) { }
        public void SaveAdd(System.Drawing.Image image, System.Drawing.Imaging.EncoderParameters encoderParams) { }
        public void SaveAdd(System.Drawing.Imaging.EncoderParameters encoderParams) { }
        public int SelectActiveFrame(System.Drawing.Imaging.FrameDimension dimension, int frameIndex) { throw null; }
        public void SetPropertyItem(System.Drawing.Imaging.PropertyItem propitem) { }
        void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext context) { }
        public delegate bool GetThumbnailImageAbort();
    }
    public sealed partial class ImageAnimator
    {
        internal ImageAnimator() { }
        public static void Animate(System.Drawing.Image image, System.EventHandler onFrameChangedHandler) { }
        public static bool CanAnimate(System.Drawing.Image image) { throw null; }
        public static void StopAnimate(System.Drawing.Image image, System.EventHandler onFrameChangedHandler) { }
        public static void UpdateFrames() { }
        public static void UpdateFrames(System.Drawing.Image image) { }
    }
    public partial class ImageConverter : System.ComponentModel.TypeConverter
    {
        public ImageConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { throw null; }
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { throw null; }
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { throw null; }
        public override System.ComponentModel.PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributes) { throw null; }
        public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) { throw null; }
    }
    public partial class ImageFormatConverter : System.ComponentModel.TypeConverter
    {
        public ImageFormatConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { throw null; }
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { throw null; }
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { throw null; }
        public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) { throw null; }
        public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) { throw null; }
    }
    public enum KnownColor
    {
        ActiveBorder = 1,
        ActiveCaption = 2,
        ActiveCaptionText = 3,
        AliceBlue = 28,
        AntiqueWhite = 29,
        AppWorkspace = 4,
        Aqua = 30,
        Aquamarine = 31,
        Azure = 32,
        Beige = 33,
        Bisque = 34,
        Black = 35,
        BlanchedAlmond = 36,
        Blue = 37,
        BlueViolet = 38,
        Brown = 39,
        BurlyWood = 40,
        ButtonFace = 168,
        ButtonHighlight = 169,
        ButtonShadow = 170,
        CadetBlue = 41,
        Chartreuse = 42,
        Chocolate = 43,
        Control = 5,
        ControlDark = 6,
        ControlDarkDark = 7,
        ControlLight = 8,
        ControlLightLight = 9,
        ControlText = 10,
        Coral = 44,
        CornflowerBlue = 45,
        Cornsilk = 46,
        Crimson = 47,
        Cyan = 48,
        DarkBlue = 49,
        DarkCyan = 50,
        DarkGoldenrod = 51,
        DarkGray = 52,
        DarkGreen = 53,
        DarkKhaki = 54,
        DarkMagenta = 55,
        DarkOliveGreen = 56,
        DarkOrange = 57,
        DarkOrchid = 58,
        DarkRed = 59,
        DarkSalmon = 60,
        DarkSeaGreen = 61,
        DarkSlateBlue = 62,
        DarkSlateGray = 63,
        DarkTurquoise = 64,
        DarkViolet = 65,
        DeepPink = 66,
        DeepSkyBlue = 67,
        Desktop = 11,
        DimGray = 68,
        DodgerBlue = 69,
        Firebrick = 70,
        FloralWhite = 71,
        ForestGreen = 72,
        Fuchsia = 73,
        Gainsboro = 74,
        GhostWhite = 75,
        Gold = 76,
        Goldenrod = 77,
        GradientActiveCaption = 171,
        GradientInactiveCaption = 172,
        Gray = 78,
        GrayText = 12,
        Green = 79,
        GreenYellow = 80,
        Highlight = 13,
        HighlightText = 14,
        Honeydew = 81,
        HotPink = 82,
        HotTrack = 15,
        InactiveBorder = 16,
        InactiveCaption = 17,
        InactiveCaptionText = 18,
        IndianRed = 83,
        Indigo = 84,
        Info = 19,
        InfoText = 20,
        Ivory = 85,
        Khaki = 86,
        Lavender = 87,
        LavenderBlush = 88,
        LawnGreen = 89,
        LemonChiffon = 90,
        LightBlue = 91,
        LightCoral = 92,
        LightCyan = 93,
        LightGoldenrodYellow = 94,
        LightGray = 95,
        LightGreen = 96,
        LightPink = 97,
        LightSalmon = 98,
        LightSeaGreen = 99,
        LightSkyBlue = 100,
        LightSlateGray = 101,
        LightSteelBlue = 102,
        LightYellow = 103,
        Lime = 104,
        LimeGreen = 105,
        Linen = 106,
        Magenta = 107,
        Maroon = 108,
        MediumAquamarine = 109,
        MediumBlue = 110,
        MediumOrchid = 111,
        MediumPurple = 112,
        MediumSeaGreen = 113,
        MediumSlateBlue = 114,
        MediumSpringGreen = 115,
        MediumTurquoise = 116,
        MediumVioletRed = 117,
        Menu = 21,
        MenuBar = 173,
        MenuHighlight = 174,
        MenuText = 22,
        MidnightBlue = 118,
        MintCream = 119,
        MistyRose = 120,
        Moccasin = 121,
        NavajoWhite = 122,
        Navy = 123,
        OldLace = 124,
        Olive = 125,
        OliveDrab = 126,
        Orange = 127,
        OrangeRed = 128,
        Orchid = 129,
        PaleGoldenrod = 130,
        PaleGreen = 131,
        PaleTurquoise = 132,
        PaleVioletRed = 133,
        PapayaWhip = 134,
        PeachPuff = 135,
        Peru = 136,
        Pink = 137,
        Plum = 138,
        PowderBlue = 139,
        Purple = 140,
        Red = 141,
        RosyBrown = 142,
        RoyalBlue = 143,
        SaddleBrown = 144,
        Salmon = 145,
        SandyBrown = 146,
        ScrollBar = 23,
        SeaGreen = 147,
        SeaShell = 148,
        Sienna = 149,
        Silver = 150,
        SkyBlue = 151,
        SlateBlue = 152,
        SlateGray = 153,
        Snow = 154,
        SpringGreen = 155,
        SteelBlue = 156,
        Tan = 157,
        Teal = 158,
        Thistle = 159,
        Tomato = 160,
        Transparent = 27,
        Turquoise = 161,
        Violet = 162,
        Wheat = 163,
        White = 164,
        WhiteSmoke = 165,
        Window = 24,
        WindowFrame = 25,
        WindowText = 26,
        Yellow = 166,
        YellowGreen = 167,
    }
    public sealed partial class Pen : System.MarshalByRefObject, System.ICloneable, System.IDisposable
    {
        public Pen(System.Drawing.Brush brush) { }
        public Pen(System.Drawing.Brush brush, float width) { }
        public Pen(System.Drawing.Color color) { }
        public Pen(System.Drawing.Color color, float width) { }
        [System.MonoLimitationAttribute("Libgdiplus doesn't use this property for rendering")]
        public System.Drawing.Drawing2D.PenAlignment Alignment { get { throw null; } set { } }
        public System.Drawing.Brush Brush { get { throw null; } set { } }
        public System.Drawing.Color Color { get { throw null; } set { } }
        public float[] CompoundArray { get { throw null; } set { } }
        public System.Drawing.Drawing2D.CustomLineCap CustomEndCap { get { throw null; } set { } }
        public System.Drawing.Drawing2D.CustomLineCap CustomStartCap { get { throw null; } set { } }
        public System.Drawing.Drawing2D.DashCap DashCap { get { throw null; } set { } }
        public float DashOffset { get { throw null; } set { } }
        public float[] DashPattern { get { throw null; } set { } }
        public System.Drawing.Drawing2D.DashStyle DashStyle { get { throw null; } set { } }
        public System.Drawing.Drawing2D.LineCap EndCap { get { throw null; } set { } }
        public System.Drawing.Drawing2D.LineJoin LineJoin { get { throw null; } set { } }
        public float MiterLimit { get { throw null; } set { } }
        public System.Drawing.Drawing2D.PenType PenType { get { throw null; } }
        public System.Drawing.Drawing2D.LineCap StartCap { get { throw null; } set { } }
        public System.Drawing.Drawing2D.Matrix Transform { get { throw null; } set { } }
        public float Width { get { throw null; } set { } }
        public object Clone() { throw null; }
        public void Dispose() { }
        ~Pen() { }
        public void MultiplyTransform(System.Drawing.Drawing2D.Matrix matrix) { }
        public void MultiplyTransform(System.Drawing.Drawing2D.Matrix matrix, System.Drawing.Drawing2D.MatrixOrder order) { }
        public void ResetTransform() { }
        public void RotateTransform(float angle) { }
        public void RotateTransform(float angle, System.Drawing.Drawing2D.MatrixOrder order) { }
        public void ScaleTransform(float sx, float sy) { }
        public void ScaleTransform(float sx, float sy, System.Drawing.Drawing2D.MatrixOrder order) { }
        public void SetLineCap(System.Drawing.Drawing2D.LineCap startCap, System.Drawing.Drawing2D.LineCap endCap, System.Drawing.Drawing2D.DashCap dashCap) { }
        public void TranslateTransform(float dx, float dy) { }
        public void TranslateTransform(float dx, float dy, System.Drawing.Drawing2D.MatrixOrder order) { }
    }
    public sealed partial class Pens
    {
        internal Pens() { }
        public static System.Drawing.Pen AliceBlue { get { throw null; } }
        public static System.Drawing.Pen AntiqueWhite { get { throw null; } }
        public static System.Drawing.Pen Aqua { get { throw null; } }
        public static System.Drawing.Pen Aquamarine { get { throw null; } }
        public static System.Drawing.Pen Azure { get { throw null; } }
        public static System.Drawing.Pen Beige { get { throw null; } }
        public static System.Drawing.Pen Bisque { get { throw null; } }
        public static System.Drawing.Pen Black { get { throw null; } }
        public static System.Drawing.Pen BlanchedAlmond { get { throw null; } }
        public static System.Drawing.Pen Blue { get { throw null; } }
        public static System.Drawing.Pen BlueViolet { get { throw null; } }
        public static System.Drawing.Pen Brown { get { throw null; } }
        public static System.Drawing.Pen BurlyWood { get { throw null; } }
        public static System.Drawing.Pen CadetBlue { get { throw null; } }
        public static System.Drawing.Pen Chartreuse { get { throw null; } }
        public static System.Drawing.Pen Chocolate { get { throw null; } }
        public static System.Drawing.Pen Coral { get { throw null; } }
        public static System.Drawing.Pen CornflowerBlue { get { throw null; } }
        public static System.Drawing.Pen Cornsilk { get { throw null; } }
        public static System.Drawing.Pen Crimson { get { throw null; } }
        public static System.Drawing.Pen Cyan { get { throw null; } }
        public static System.Drawing.Pen DarkBlue { get { throw null; } }
        public static System.Drawing.Pen DarkCyan { get { throw null; } }
        public static System.Drawing.Pen DarkGoldenrod { get { throw null; } }
        public static System.Drawing.Pen DarkGray { get { throw null; } }
        public static System.Drawing.Pen DarkGreen { get { throw null; } }
        public static System.Drawing.Pen DarkKhaki { get { throw null; } }
        public static System.Drawing.Pen DarkMagenta { get { throw null; } }
        public static System.Drawing.Pen DarkOliveGreen { get { throw null; } }
        public static System.Drawing.Pen DarkOrange { get { throw null; } }
        public static System.Drawing.Pen DarkOrchid { get { throw null; } }
        public static System.Drawing.Pen DarkRed { get { throw null; } }
        public static System.Drawing.Pen DarkSalmon { get { throw null; } }
        public static System.Drawing.Pen DarkSeaGreen { get { throw null; } }
        public static System.Drawing.Pen DarkSlateBlue { get { throw null; } }
        public static System.Drawing.Pen DarkSlateGray { get { throw null; } }
        public static System.Drawing.Pen DarkTurquoise { get { throw null; } }
        public static System.Drawing.Pen DarkViolet { get { throw null; } }
        public static System.Drawing.Pen DeepPink { get { throw null; } }
        public static System.Drawing.Pen DeepSkyBlue { get { throw null; } }
        public static System.Drawing.Pen DimGray { get { throw null; } }
        public static System.Drawing.Pen DodgerBlue { get { throw null; } }
        public static System.Drawing.Pen Firebrick { get { throw null; } }
        public static System.Drawing.Pen FloralWhite { get { throw null; } }
        public static System.Drawing.Pen ForestGreen { get { throw null; } }
        public static System.Drawing.Pen Fuchsia { get { throw null; } }
        public static System.Drawing.Pen Gainsboro { get { throw null; } }
        public static System.Drawing.Pen GhostWhite { get { throw null; } }
        public static System.Drawing.Pen Gold { get { throw null; } }
        public static System.Drawing.Pen Goldenrod { get { throw null; } }
        public static System.Drawing.Pen Gray { get { throw null; } }
        public static System.Drawing.Pen Green { get { throw null; } }
        public static System.Drawing.Pen GreenYellow { get { throw null; } }
        public static System.Drawing.Pen Honeydew { get { throw null; } }
        public static System.Drawing.Pen HotPink { get { throw null; } }
        public static System.Drawing.Pen IndianRed { get { throw null; } }
        public static System.Drawing.Pen Indigo { get { throw null; } }
        public static System.Drawing.Pen Ivory { get { throw null; } }
        public static System.Drawing.Pen Khaki { get { throw null; } }
        public static System.Drawing.Pen Lavender { get { throw null; } }
        public static System.Drawing.Pen LavenderBlush { get { throw null; } }
        public static System.Drawing.Pen LawnGreen { get { throw null; } }
        public static System.Drawing.Pen LemonChiffon { get { throw null; } }
        public static System.Drawing.Pen LightBlue { get { throw null; } }
        public static System.Drawing.Pen LightCoral { get { throw null; } }
        public static System.Drawing.Pen LightCyan { get { throw null; } }
        public static System.Drawing.Pen LightGoldenrodYellow { get { throw null; } }
        public static System.Drawing.Pen LightGray { get { throw null; } }
        public static System.Drawing.Pen LightGreen { get { throw null; } }
        public static System.Drawing.Pen LightPink { get { throw null; } }
        public static System.Drawing.Pen LightSalmon { get { throw null; } }
        public static System.Drawing.Pen LightSeaGreen { get { throw null; } }
        public static System.Drawing.Pen LightSkyBlue { get { throw null; } }
        public static System.Drawing.Pen LightSlateGray { get { throw null; } }
        public static System.Drawing.Pen LightSteelBlue { get { throw null; } }
        public static System.Drawing.Pen LightYellow { get { throw null; } }
        public static System.Drawing.Pen Lime { get { throw null; } }
        public static System.Drawing.Pen LimeGreen { get { throw null; } }
        public static System.Drawing.Pen Linen { get { throw null; } }
        public static System.Drawing.Pen Magenta { get { throw null; } }
        public static System.Drawing.Pen Maroon { get { throw null; } }
        public static System.Drawing.Pen MediumAquamarine { get { throw null; } }
        public static System.Drawing.Pen MediumBlue { get { throw null; } }
        public static System.Drawing.Pen MediumOrchid { get { throw null; } }
        public static System.Drawing.Pen MediumPurple { get { throw null; } }
        public static System.Drawing.Pen MediumSeaGreen { get { throw null; } }
        public static System.Drawing.Pen MediumSlateBlue { get { throw null; } }
        public static System.Drawing.Pen MediumSpringGreen { get { throw null; } }
        public static System.Drawing.Pen MediumTurquoise { get { throw null; } }
        public static System.Drawing.Pen MediumVioletRed { get { throw null; } }
        public static System.Drawing.Pen MidnightBlue { get { throw null; } }
        public static System.Drawing.Pen MintCream { get { throw null; } }
        public static System.Drawing.Pen MistyRose { get { throw null; } }
        public static System.Drawing.Pen Moccasin { get { throw null; } }
        public static System.Drawing.Pen NavajoWhite { get { throw null; } }
        public static System.Drawing.Pen Navy { get { throw null; } }
        public static System.Drawing.Pen OldLace { get { throw null; } }
        public static System.Drawing.Pen Olive { get { throw null; } }
        public static System.Drawing.Pen OliveDrab { get { throw null; } }
        public static System.Drawing.Pen Orange { get { throw null; } }
        public static System.Drawing.Pen OrangeRed { get { throw null; } }
        public static System.Drawing.Pen Orchid { get { throw null; } }
        public static System.Drawing.Pen PaleGoldenrod { get { throw null; } }
        public static System.Drawing.Pen PaleGreen { get { throw null; } }
        public static System.Drawing.Pen PaleTurquoise { get { throw null; } }
        public static System.Drawing.Pen PaleVioletRed { get { throw null; } }
        public static System.Drawing.Pen PapayaWhip { get { throw null; } }
        public static System.Drawing.Pen PeachPuff { get { throw null; } }
        public static System.Drawing.Pen Peru { get { throw null; } }
        public static System.Drawing.Pen Pink { get { throw null; } }
        public static System.Drawing.Pen Plum { get { throw null; } }
        public static System.Drawing.Pen PowderBlue { get { throw null; } }
        public static System.Drawing.Pen Purple { get { throw null; } }
        public static System.Drawing.Pen Red { get { throw null; } }
        public static System.Drawing.Pen RosyBrown { get { throw null; } }
        public static System.Drawing.Pen RoyalBlue { get { throw null; } }
        public static System.Drawing.Pen SaddleBrown { get { throw null; } }
        public static System.Drawing.Pen Salmon { get { throw null; } }
        public static System.Drawing.Pen SandyBrown { get { throw null; } }
        public static System.Drawing.Pen SeaGreen { get { throw null; } }
        public static System.Drawing.Pen SeaShell { get { throw null; } }
        public static System.Drawing.Pen Sienna { get { throw null; } }
        public static System.Drawing.Pen Silver { get { throw null; } }
        public static System.Drawing.Pen SkyBlue { get { throw null; } }
        public static System.Drawing.Pen SlateBlue { get { throw null; } }
        public static System.Drawing.Pen SlateGray { get { throw null; } }
        public static System.Drawing.Pen Snow { get { throw null; } }
        public static System.Drawing.Pen SpringGreen { get { throw null; } }
        public static System.Drawing.Pen SteelBlue { get { throw null; } }
        public static System.Drawing.Pen Tan { get { throw null; } }
        public static System.Drawing.Pen Teal { get { throw null; } }
        public static System.Drawing.Pen Thistle { get { throw null; } }
        public static System.Drawing.Pen Tomato { get { throw null; } }
        public static System.Drawing.Pen Transparent { get { throw null; } }
        public static System.Drawing.Pen Turquoise { get { throw null; } }
        public static System.Drawing.Pen Violet { get { throw null; } }
        public static System.Drawing.Pen Wheat { get { throw null; } }
        public static System.Drawing.Pen White { get { throw null; } }
        public static System.Drawing.Pen WhiteSmoke { get { throw null; } }
        public static System.Drawing.Pen Yellow { get { throw null; } }
        public static System.Drawing.Pen YellowGreen { get { throw null; } }
    }
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Drawing.PointConverter))]
    [System.Runtime.InteropServices.ComVisibleAttribute(true)]
    [System.SerializableAttribute]
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct Point
    {
        private int _dummyPrimitive;
        public static readonly System.Drawing.Point Empty;
        public Point(System.Drawing.Size sz) { throw null;}
        public Point(int dw) { throw null;}
        public Point(int x, int y) { throw null;}
        [System.ComponentModel.BrowsableAttribute(false)]
        public bool IsEmpty { get { throw null; } }
        public int X { get { throw null; } set { } }
        public int Y { get { throw null; } set { } }
        public static System.Drawing.Point Add(System.Drawing.Point pt, System.Drawing.Size sz) { throw null; }
        public static System.Drawing.Point Ceiling(System.Drawing.PointF value) { throw null; }
        public override bool Equals(object obj) { throw null; }
        public override int GetHashCode() { throw null; }
        public void Offset(System.Drawing.Point p) { }
        public void Offset(int dx, int dy) { }
        public static System.Drawing.Point operator +(System.Drawing.Point pt, System.Drawing.Size sz) { throw null; }
        public static bool operator ==(System.Drawing.Point left, System.Drawing.Point right) { throw null; }
        public static explicit operator System.Drawing.Size (System.Drawing.Point p) { throw null; }
        public static implicit operator System.Drawing.PointF (System.Drawing.Point p) { throw null; }
        public static bool operator !=(System.Drawing.Point left, System.Drawing.Point right) { throw null; }
        public static System.Drawing.Point operator -(System.Drawing.Point pt, System.Drawing.Size sz) { throw null; }
        public static System.Drawing.Point Round(System.Drawing.PointF value) { throw null; }
        public static System.Drawing.Point Subtract(System.Drawing.Point pt, System.Drawing.Size sz) { throw null; }
        public override string ToString() { throw null; }
        public static System.Drawing.Point Truncate(System.Drawing.PointF value) { throw null; }
    }
    public partial class PointConverter : System.ComponentModel.TypeConverter
    {
        public PointConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { throw null; }
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { throw null; }
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { throw null; }
        public override object CreateInstance(System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary propertyValues) { throw null; }
        public override bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext context) { throw null; }
        public override System.ComponentModel.PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributes) { throw null; }
        public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) { throw null; }
    }
    [System.Runtime.InteropServices.ComVisibleAttribute(true)]
    [System.SerializableAttribute]
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct PointF
    {
        private int _dummyPrimitive;
        public static readonly System.Drawing.PointF Empty;
        public PointF(float x, float y) { throw null;}
        [System.ComponentModel.BrowsableAttribute(false)]
        public bool IsEmpty { get { throw null; } }
        public float X { get { throw null; } set { } }
        public float Y { get { throw null; } set { } }
        public static System.Drawing.PointF Add(System.Drawing.PointF pt, System.Drawing.Size sz) { throw null; }
        public static System.Drawing.PointF Add(System.Drawing.PointF pt, System.Drawing.SizeF sz) { throw null; }
        public override bool Equals(object obj) { throw null; }
        public override int GetHashCode() { throw null; }
        public static System.Drawing.PointF operator +(System.Drawing.PointF pt, System.Drawing.Size sz) { throw null; }
        public static System.Drawing.PointF operator +(System.Drawing.PointF pt, System.Drawing.SizeF sz) { throw null; }
        public static bool operator ==(System.Drawing.PointF left, System.Drawing.PointF right) { throw null; }
        public static bool operator !=(System.Drawing.PointF left, System.Drawing.PointF right) { throw null; }
        public static System.Drawing.PointF operator -(System.Drawing.PointF pt, System.Drawing.Size sz) { throw null; }
        public static System.Drawing.PointF operator -(System.Drawing.PointF pt, System.Drawing.SizeF sz) { throw null; }
        public static System.Drawing.PointF Subtract(System.Drawing.PointF pt, System.Drawing.Size sz) { throw null; }
        public static System.Drawing.PointF Subtract(System.Drawing.PointF pt, System.Drawing.SizeF sz) { throw null; }
        public override string ToString() { throw null; }
    }
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Drawing.RectangleConverter))]
    [System.Runtime.InteropServices.ComVisibleAttribute(true)]
    [System.SerializableAttribute]
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct Rectangle
    {
        private int _dummyPrimitive;
        public static readonly System.Drawing.Rectangle Empty;
        public Rectangle(System.Drawing.Point location, System.Drawing.Size size) { throw null;}
        public Rectangle(int x, int y, int width, int height) { throw null;}
        [System.ComponentModel.BrowsableAttribute(false)]
        public int Bottom { get { throw null; } }
        public int Height { get { throw null; } set { } }
        [System.ComponentModel.BrowsableAttribute(false)]
        public bool IsEmpty { get { throw null; } }
        [System.ComponentModel.BrowsableAttribute(false)]
        public int Left { get { throw null; } }
        [System.ComponentModel.BrowsableAttribute(false)]
        public System.Drawing.Point Location { get { throw null; } set { } }
        [System.ComponentModel.BrowsableAttribute(false)]
        public int Right { get { throw null; } }
        [System.ComponentModel.BrowsableAttribute(false)]
        public System.Drawing.Size Size { get { throw null; } set { } }
        [System.ComponentModel.BrowsableAttribute(false)]
        public int Top { get { throw null; } }
        public int Width { get { throw null; } set { } }
        public int X { get { throw null; } set { } }
        public int Y { get { throw null; } set { } }
        public static System.Drawing.Rectangle Ceiling(System.Drawing.RectangleF value) { throw null; }
        public bool Contains(System.Drawing.Point pt) { throw null; }
        public bool Contains(System.Drawing.Rectangle rect) { throw null; }
        public bool Contains(int x, int y) { throw null; }
        public override bool Equals(object obj) { throw null; }
        public static System.Drawing.Rectangle FromLTRB(int left, int top, int right, int bottom) { throw null; }
        public override int GetHashCode() { throw null; }
        public static System.Drawing.Rectangle Inflate(System.Drawing.Rectangle rect, int x, int y) { throw null; }
        public void Inflate(System.Drawing.Size size) { }
        public void Inflate(int width, int height) { }
        public void Intersect(System.Drawing.Rectangle rect) { }
        public static System.Drawing.Rectangle Intersect(System.Drawing.Rectangle a, System.Drawing.Rectangle b) { throw null; }
        public bool IntersectsWith(System.Drawing.Rectangle rect) { throw null; }
        public void Offset(System.Drawing.Point pos) { }
        public void Offset(int x, int y) { }
        public static bool operator ==(System.Drawing.Rectangle left, System.Drawing.Rectangle right) { throw null; }
        public static bool operator !=(System.Drawing.Rectangle left, System.Drawing.Rectangle right) { throw null; }
        public static System.Drawing.Rectangle Round(System.Drawing.RectangleF value) { throw null; }
        public override string ToString() { throw null; }
        public static System.Drawing.Rectangle Truncate(System.Drawing.RectangleF value) { throw null; }
        public static System.Drawing.Rectangle Union(System.Drawing.Rectangle a, System.Drawing.Rectangle b) { throw null; }
    }
    public partial class RectangleConverter : System.ComponentModel.TypeConverter
    {
        public RectangleConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { throw null; }
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { throw null; }
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { throw null; }
        public override object CreateInstance(System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary propertyValues) { throw null; }
        public override bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext context) { throw null; }
        public override System.ComponentModel.PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributes) { throw null; }
        public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) { throw null; }
    }
    [System.SerializableAttribute]
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct RectangleF
    {
        private int _dummyPrimitive;
        public static readonly System.Drawing.RectangleF Empty;
        public RectangleF(System.Drawing.PointF location, System.Drawing.SizeF size) { throw null;}
        public RectangleF(float x, float y, float width, float height) { throw null;}
        [System.ComponentModel.BrowsableAttribute(false)]
        public float Bottom { get { throw null; } }
        public float Height { get { throw null; } set { } }
        [System.ComponentModel.BrowsableAttribute(false)]
        public bool IsEmpty { get { throw null; } }
        [System.ComponentModel.BrowsableAttribute(false)]
        public float Left { get { throw null; } }
        [System.ComponentModel.BrowsableAttribute(false)]
        public System.Drawing.PointF Location { get { throw null; } set { } }
        [System.ComponentModel.BrowsableAttribute(false)]
        public float Right { get { throw null; } }
        [System.ComponentModel.BrowsableAttribute(false)]
        public System.Drawing.SizeF Size { get { throw null; } set { } }
        [System.ComponentModel.BrowsableAttribute(false)]
        public float Top { get { throw null; } }
        public float Width { get { throw null; } set { } }
        public float X { get { throw null; } set { } }
        public float Y { get { throw null; } set { } }
        public bool Contains(System.Drawing.PointF pt) { throw null; }
        public bool Contains(System.Drawing.RectangleF rect) { throw null; }
        public bool Contains(float x, float y) { throw null; }
        public override bool Equals(object obj) { throw null; }
        public static System.Drawing.RectangleF FromLTRB(float left, float top, float right, float bottom) { throw null; }
        public override int GetHashCode() { throw null; }
        public static System.Drawing.RectangleF Inflate(System.Drawing.RectangleF rect, float x, float y) { throw null; }
        public void Inflate(System.Drawing.SizeF size) { }
        public void Inflate(float x, float y) { }
        public void Intersect(System.Drawing.RectangleF rect) { }
        public static System.Drawing.RectangleF Intersect(System.Drawing.RectangleF a, System.Drawing.RectangleF b) { throw null; }
        public bool IntersectsWith(System.Drawing.RectangleF rect) { throw null; }
        public void Offset(System.Drawing.PointF pos) { }
        public void Offset(float x, float y) { }
        public static bool operator ==(System.Drawing.RectangleF left, System.Drawing.RectangleF right) { throw null; }
        public static implicit operator System.Drawing.RectangleF (System.Drawing.Rectangle r) { throw null; }
        public static bool operator !=(System.Drawing.RectangleF left, System.Drawing.RectangleF right) { throw null; }
        public override string ToString() { throw null; }
        public static System.Drawing.RectangleF Union(System.Drawing.RectangleF a, System.Drawing.RectangleF b) { throw null; }
    }
    public sealed partial class Region : System.MarshalByRefObject, System.IDisposable
    {
        public Region() { }
        public Region(System.Drawing.Drawing2D.GraphicsPath path) { }
        public Region(System.Drawing.Drawing2D.RegionData rgnData) { }
        public Region(System.Drawing.Rectangle rect) { }
        public Region(System.Drawing.RectangleF rect) { }
        public System.Drawing.Region Clone() { throw null; }
        public void Complement(System.Drawing.Drawing2D.GraphicsPath path) { }
        public void Complement(System.Drawing.Rectangle rect) { }
        public void Complement(System.Drawing.RectangleF rect) { }
        public void Complement(System.Drawing.Region region) { }
        public void Dispose() { }
        public bool Equals(System.Drawing.Region region, System.Drawing.Graphics g) { throw null; }
        public void Exclude(System.Drawing.Drawing2D.GraphicsPath path) { }
        public void Exclude(System.Drawing.Rectangle rect) { }
        public void Exclude(System.Drawing.RectangleF rect) { }
        public void Exclude(System.Drawing.Region region) { }
        ~Region() { }
        public static System.Drawing.Region FromHrgn(System.IntPtr hrgn) { throw null; }
        public System.Drawing.RectangleF GetBounds(System.Drawing.Graphics g) { throw null; }
        public System.IntPtr GetHrgn(System.Drawing.Graphics g) { throw null; }
        public System.Drawing.Drawing2D.RegionData GetRegionData() { throw null; }
        public System.Drawing.RectangleF[] GetRegionScans(System.Drawing.Drawing2D.Matrix matrix) { throw null; }
        public void Intersect(System.Drawing.Drawing2D.GraphicsPath path) { }
        public void Intersect(System.Drawing.Rectangle rect) { }
        public void Intersect(System.Drawing.RectangleF rect) { }
        public void Intersect(System.Drawing.Region region) { }
        public bool IsEmpty(System.Drawing.Graphics g) { throw null; }
        public bool IsInfinite(System.Drawing.Graphics g) { throw null; }
        public bool IsVisible(System.Drawing.Point point) { throw null; }
        public bool IsVisible(System.Drawing.Point point, System.Drawing.Graphics g) { throw null; }
        public bool IsVisible(System.Drawing.PointF point) { throw null; }
        public bool IsVisible(System.Drawing.PointF point, System.Drawing.Graphics g) { throw null; }
        public bool IsVisible(System.Drawing.Rectangle rect) { throw null; }
        public bool IsVisible(System.Drawing.Rectangle rect, System.Drawing.Graphics g) { throw null; }
        public bool IsVisible(System.Drawing.RectangleF rect) { throw null; }
        public bool IsVisible(System.Drawing.RectangleF rect, System.Drawing.Graphics g) { throw null; }
        public bool IsVisible(int x, int y, System.Drawing.Graphics g) { throw null; }
        public bool IsVisible(int x, int y, int width, int height) { throw null; }
        public bool IsVisible(int x, int y, int width, int height, System.Drawing.Graphics g) { throw null; }
        public bool IsVisible(float x, float y) { throw null; }
        public bool IsVisible(float x, float y, System.Drawing.Graphics g) { throw null; }
        public bool IsVisible(float x, float y, float width, float height) { throw null; }
        public bool IsVisible(float x, float y, float width, float height, System.Drawing.Graphics g) { throw null; }
        public void MakeEmpty() { }
        public void MakeInfinite() { }
        public void ReleaseHrgn(System.IntPtr regionHandle) { }
        public void Transform(System.Drawing.Drawing2D.Matrix matrix) { }
        public void Translate(int dx, int dy) { }
        public void Translate(float dx, float dy) { }
        public void Union(System.Drawing.Drawing2D.GraphicsPath path) { }
        public void Union(System.Drawing.Rectangle rect) { }
        public void Union(System.Drawing.RectangleF rect) { }
        public void Union(System.Drawing.Region region) { }
        public void Xor(System.Drawing.Drawing2D.GraphicsPath path) { }
        public void Xor(System.Drawing.Rectangle rect) { }
        public void Xor(System.Drawing.RectangleF rect) { }
        public void Xor(System.Drawing.Region region) { }
    }
    public enum RotateFlipType
    {
        Rotate180FlipNone = 2,
        Rotate180FlipX = 6,
        Rotate180FlipXY = 0,
        Rotate180FlipY = 4,
        Rotate270FlipNone = 3,
        Rotate270FlipX = 7,
        Rotate270FlipXY = 1,
        Rotate270FlipY = 5,
        Rotate90FlipNone = 1,
        Rotate90FlipX = 5,
        Rotate90FlipXY = 3,
        Rotate90FlipY = 7,
        RotateNoneFlipNone = 0,
        RotateNoneFlipX = 4,
        RotateNoneFlipXY = 2,
        RotateNoneFlipY = 6,
    }
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Drawing.SizeConverter))]
    [System.Runtime.InteropServices.ComVisibleAttribute(true)]
    [System.SerializableAttribute]
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct Size
    {
        private int _dummyPrimitive;
        public static readonly System.Drawing.Size Empty;
        public Size(System.Drawing.Point pt) { throw null;}
        public Size(int width, int height) { throw null;}
        public int Height { get { throw null; } set { } }
        [System.ComponentModel.BrowsableAttribute(false)]
        public bool IsEmpty { get { throw null; } }
        public int Width { get { throw null; } set { } }
        public static System.Drawing.Size Add(System.Drawing.Size sz1, System.Drawing.Size sz2) { throw null; }
        public static System.Drawing.Size Ceiling(System.Drawing.SizeF value) { throw null; }
        public override bool Equals(object obj) { throw null; }
        public override int GetHashCode() { throw null; }
        public static System.Drawing.Size operator +(System.Drawing.Size sz1, System.Drawing.Size sz2) { throw null; }
        public static bool operator ==(System.Drawing.Size sz1, System.Drawing.Size sz2) { throw null; }
        public static explicit operator System.Drawing.Point (System.Drawing.Size size) { throw null; }
        public static implicit operator System.Drawing.SizeF (System.Drawing.Size p) { throw null; }
        public static bool operator !=(System.Drawing.Size sz1, System.Drawing.Size sz2) { throw null; }
        public static System.Drawing.Size operator -(System.Drawing.Size sz1, System.Drawing.Size sz2) { throw null; }
        public static System.Drawing.Size Round(System.Drawing.SizeF value) { throw null; }
        public static System.Drawing.Size Subtract(System.Drawing.Size sz1, System.Drawing.Size sz2) { throw null; }
        public override string ToString() { throw null; }
        public static System.Drawing.Size Truncate(System.Drawing.SizeF value) { throw null; }
    }
    public partial class SizeConverter : System.ComponentModel.TypeConverter
    {
        public SizeConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { throw null; }
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { throw null; }
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { throw null; }
        public override object CreateInstance(System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary propertyValues) { throw null; }
        public override bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext context) { throw null; }
        public override System.ComponentModel.PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributes) { throw null; }
        public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) { throw null; }
    }
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Drawing.SizeFConverter))]
    [System.Runtime.InteropServices.ComVisibleAttribute(true)]
    [System.SerializableAttribute]
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct SizeF
    {
        private int _dummyPrimitive;
        public static readonly System.Drawing.SizeF Empty;
        public SizeF(System.Drawing.PointF pt) { throw null;}
        public SizeF(System.Drawing.SizeF size) { throw null;}
        public SizeF(float width, float height) { throw null;}
        public float Height { get { throw null; } set { } }
        [System.ComponentModel.BrowsableAttribute(false)]
        public bool IsEmpty { get { throw null; } }
        public float Width { get { throw null; } set { } }
        public static System.Drawing.SizeF Add(System.Drawing.SizeF sz1, System.Drawing.SizeF sz2) { throw null; }
        public override bool Equals(object obj) { throw null; }
        public override int GetHashCode() { throw null; }
        public static System.Drawing.SizeF operator +(System.Drawing.SizeF sz1, System.Drawing.SizeF sz2) { throw null; }
        public static bool operator ==(System.Drawing.SizeF sz1, System.Drawing.SizeF sz2) { throw null; }
        public static explicit operator System.Drawing.PointF (System.Drawing.SizeF size) { throw null; }
        public static bool operator !=(System.Drawing.SizeF sz1, System.Drawing.SizeF sz2) { throw null; }
        public static System.Drawing.SizeF operator -(System.Drawing.SizeF sz1, System.Drawing.SizeF sz2) { throw null; }
        public static System.Drawing.SizeF Subtract(System.Drawing.SizeF sz1, System.Drawing.SizeF sz2) { throw null; }
        public System.Drawing.PointF ToPointF() { throw null; }
        public System.Drawing.Size ToSize() { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class SizeFConverter : System.ComponentModel.TypeConverter
    {
        public SizeFConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { throw null; }
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { throw null; }
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { throw null; }
        public override object CreateInstance(System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary propertyValues) { throw null; }
        public override bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext context) { throw null; }
        public override System.ComponentModel.PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributes) { throw null; }
        public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) { throw null; }
    }
    public sealed partial class SolidBrush : System.Drawing.Brush
    {
        public SolidBrush(System.Drawing.Color color) { }
        public System.Drawing.Color Color { get { throw null; } set { } }
        public override object Clone() { throw null; }
        protected override void Dispose(bool disposing) { }
    }
    public enum StringAlignment
    {
        Center = 1,
        Far = 2,
        Near = 0,
    }
    public enum StringDigitSubstitute
    {
        National = 2,
        None = 1,
        Traditional = 3,
        User = 0,
    }
    public sealed partial class StringFormat : System.MarshalByRefObject, System.ICloneable, System.IDisposable
    {
        public StringFormat() { }
        public StringFormat(System.Drawing.StringFormat format) { }
        public StringFormat(System.Drawing.StringFormatFlags options) { }
        public StringFormat(System.Drawing.StringFormatFlags options, int language) { }
        public System.Drawing.StringAlignment Alignment { get { throw null; } set { } }
        public int DigitSubstitutionLanguage { get { throw null; } }
        public System.Drawing.StringDigitSubstitute DigitSubstitutionMethod { get { throw null; } }
        public System.Drawing.StringFormatFlags FormatFlags { get { throw null; } set { } }
        public static System.Drawing.StringFormat GenericDefault { get { throw null; } }
        public static System.Drawing.StringFormat GenericTypographic { get { throw null; } }
        public System.Drawing.Text.HotkeyPrefix HotkeyPrefix { get { throw null; } set { } }
        public System.Drawing.StringAlignment LineAlignment { get { throw null; } set { } }
        public System.Drawing.StringTrimming Trimming { get { throw null; } set { } }
        public object Clone() { throw null; }
        public void Dispose() { }
        ~StringFormat() { }
        public float[] GetTabStops(out float firstTabOffset) { firstTabOffset = default(float); throw null; }
        public void SetDigitSubstitution(int language, System.Drawing.StringDigitSubstitute substitute) { }
        public void SetMeasurableCharacterRanges(System.Drawing.CharacterRange[] ranges) { }
        public void SetTabStops(float firstTabOffset, float[] tabStops) { }
        public override string ToString() { throw null; }
    }
    [System.FlagsAttribute]
    public enum StringFormatFlags
    {
        DirectionRightToLeft = 1,
        DirectionVertical = 2,
        DisplayFormatControl = 32,
        FitBlackBox = 4,
        LineLimit = 8192,
        MeasureTrailingSpaces = 2048,
        NoClip = 16384,
        NoFontFallback = 1024,
        NoWrap = 4096,
    }
    public enum StringTrimming
    {
        Character = 1,
        EllipsisCharacter = 3,
        EllipsisPath = 5,
        EllipsisWord = 4,
        None = 0,
        Word = 2,
    }
    public enum StringUnit
    {
        Display = 1,
        Document = 5,
        Em = 32,
        Inch = 4,
        Millimeter = 6,
        Pixel = 2,
        Point = 3,
        World = 0,
    }
    public sealed partial class SystemBrushes
    {
        internal SystemBrushes() { }
        public static System.Drawing.Brush ActiveBorder { get { throw null; } }
        public static System.Drawing.Brush ActiveCaption { get { throw null; } }
        public static System.Drawing.Brush ActiveCaptionText { get { throw null; } }
        public static System.Drawing.Brush AppWorkspace { get { throw null; } }
        public static System.Drawing.Brush ButtonFace { get { throw null; } }
        public static System.Drawing.Brush ButtonHighlight { get { throw null; } }
        public static System.Drawing.Brush ButtonShadow { get { throw null; } }
        public static System.Drawing.Brush Control { get { throw null; } }
        public static System.Drawing.Brush ControlDark { get { throw null; } }
        public static System.Drawing.Brush ControlDarkDark { get { throw null; } }
        public static System.Drawing.Brush ControlLight { get { throw null; } }
        public static System.Drawing.Brush ControlLightLight { get { throw null; } }
        public static System.Drawing.Brush ControlText { get { throw null; } }
        public static System.Drawing.Brush Desktop { get { throw null; } }
        public static System.Drawing.Brush GradientActiveCaption { get { throw null; } }
        public static System.Drawing.Brush GradientInactiveCaption { get { throw null; } }
        public static System.Drawing.Brush GrayText { get { throw null; } }
        public static System.Drawing.Brush Highlight { get { throw null; } }
        public static System.Drawing.Brush HighlightText { get { throw null; } }
        public static System.Drawing.Brush HotTrack { get { throw null; } }
        public static System.Drawing.Brush InactiveBorder { get { throw null; } }
        public static System.Drawing.Brush InactiveCaption { get { throw null; } }
        public static System.Drawing.Brush InactiveCaptionText { get { throw null; } }
        public static System.Drawing.Brush Info { get { throw null; } }
        public static System.Drawing.Brush InfoText { get { throw null; } }
        public static System.Drawing.Brush Menu { get { throw null; } }
        public static System.Drawing.Brush MenuBar { get { throw null; } }
        public static System.Drawing.Brush MenuHighlight { get { throw null; } }
        public static System.Drawing.Brush MenuText { get { throw null; } }
        public static System.Drawing.Brush ScrollBar { get { throw null; } }
        public static System.Drawing.Brush Window { get { throw null; } }
        public static System.Drawing.Brush WindowFrame { get { throw null; } }
        public static System.Drawing.Brush WindowText { get { throw null; } }
        public static System.Drawing.Brush FromSystemColor(System.Drawing.Color c) { throw null; }
    }
    public sealed partial class SystemColors
    {
        internal SystemColors() { }
        public static System.Drawing.Color ActiveBorder { get { throw null; } }
        public static System.Drawing.Color ActiveCaption { get { throw null; } }
        public static System.Drawing.Color ActiveCaptionText { get { throw null; } }
        public static System.Drawing.Color AppWorkspace { get { throw null; } }
        public static System.Drawing.Color ButtonFace { get { throw null; } }
        public static System.Drawing.Color ButtonHighlight { get { throw null; } }
        public static System.Drawing.Color ButtonShadow { get { throw null; } }
        public static System.Drawing.Color Control { get { throw null; } }
        public static System.Drawing.Color ControlDark { get { throw null; } }
        public static System.Drawing.Color ControlDarkDark { get { throw null; } }
        public static System.Drawing.Color ControlLight { get { throw null; } }
        public static System.Drawing.Color ControlLightLight { get { throw null; } }
        public static System.Drawing.Color ControlText { get { throw null; } }
        public static System.Drawing.Color Desktop { get { throw null; } }
        public static System.Drawing.Color GradientActiveCaption { get { throw null; } }
        public static System.Drawing.Color GradientInactiveCaption { get { throw null; } }
        public static System.Drawing.Color GrayText { get { throw null; } }
        public static System.Drawing.Color Highlight { get { throw null; } }
        public static System.Drawing.Color HighlightText { get { throw null; } }
        public static System.Drawing.Color HotTrack { get { throw null; } }
        public static System.Drawing.Color InactiveBorder { get { throw null; } }
        public static System.Drawing.Color InactiveCaption { get { throw null; } }
        public static System.Drawing.Color InactiveCaptionText { get { throw null; } }
        public static System.Drawing.Color Info { get { throw null; } }
        public static System.Drawing.Color InfoText { get { throw null; } }
        public static System.Drawing.Color Menu { get { throw null; } }
        public static System.Drawing.Color MenuBar { get { throw null; } }
        public static System.Drawing.Color MenuHighlight { get { throw null; } }
        public static System.Drawing.Color MenuText { get { throw null; } }
        public static System.Drawing.Color ScrollBar { get { throw null; } }
        public static System.Drawing.Color Window { get { throw null; } }
        public static System.Drawing.Color WindowFrame { get { throw null; } }
        public static System.Drawing.Color WindowText { get { throw null; } }
    }
    public sealed partial class SystemFonts
    {
        internal SystemFonts() { }
        public static System.Drawing.Font CaptionFont { get { throw null; } }
        public static System.Drawing.Font DefaultFont { get { throw null; } }
        public static System.Drawing.Font DialogFont { get { throw null; } }
        public static System.Drawing.Font IconTitleFont { get { throw null; } }
        public static System.Drawing.Font MenuFont { get { throw null; } }
        public static System.Drawing.Font MessageBoxFont { get { throw null; } }
        public static System.Drawing.Font SmallCaptionFont { get { throw null; } }
        public static System.Drawing.Font StatusFont { get { throw null; } }
        public static System.Drawing.Font GetFontByName(string systemFontName) { throw null; }
    }
    public sealed partial class SystemIcons
    {
        internal SystemIcons() { }
        public static System.Drawing.Icon Application { get { throw null; } }
        public static System.Drawing.Icon Asterisk { get { throw null; } }
        public static System.Drawing.Icon Error { get { throw null; } }
        public static System.Drawing.Icon Exclamation { get { throw null; } }
        public static System.Drawing.Icon Hand { get { throw null; } }
        public static System.Drawing.Icon Information { get { throw null; } }
        public static System.Drawing.Icon Question { get { throw null; } }
        public static System.Drawing.Icon Shield { get { throw null; } }
        public static System.Drawing.Icon Warning { get { throw null; } }
        public static System.Drawing.Icon WinLogo { get { throw null; } }
    }
    public sealed partial class SystemPens
    {
        internal SystemPens() { }
        public static System.Drawing.Pen ActiveBorder { get { throw null; } }
        public static System.Drawing.Pen ActiveCaption { get { throw null; } }
        public static System.Drawing.Pen ActiveCaptionText { get { throw null; } }
        public static System.Drawing.Pen AppWorkspace { get { throw null; } }
        public static System.Drawing.Pen ButtonFace { get { throw null; } }
        public static System.Drawing.Pen ButtonHighlight { get { throw null; } }
        public static System.Drawing.Pen ButtonShadow { get { throw null; } }
        public static System.Drawing.Pen Control { get { throw null; } }
        public static System.Drawing.Pen ControlDark { get { throw null; } }
        public static System.Drawing.Pen ControlDarkDark { get { throw null; } }
        public static System.Drawing.Pen ControlLight { get { throw null; } }
        public static System.Drawing.Pen ControlLightLight { get { throw null; } }
        public static System.Drawing.Pen ControlText { get { throw null; } }
        public static System.Drawing.Pen Desktop { get { throw null; } }
        public static System.Drawing.Pen GradientActiveCaption { get { throw null; } }
        public static System.Drawing.Pen GradientInactiveCaption { get { throw null; } }
        public static System.Drawing.Pen GrayText { get { throw null; } }
        public static System.Drawing.Pen Highlight { get { throw null; } }
        public static System.Drawing.Pen HighlightText { get { throw null; } }
        public static System.Drawing.Pen HotTrack { get { throw null; } }
        public static System.Drawing.Pen InactiveBorder { get { throw null; } }
        public static System.Drawing.Pen InactiveCaption { get { throw null; } }
        public static System.Drawing.Pen InactiveCaptionText { get { throw null; } }
        public static System.Drawing.Pen Info { get { throw null; } }
        public static System.Drawing.Pen InfoText { get { throw null; } }
        public static System.Drawing.Pen Menu { get { throw null; } }
        public static System.Drawing.Pen MenuBar { get { throw null; } }
        public static System.Drawing.Pen MenuHighlight { get { throw null; } }
        public static System.Drawing.Pen MenuText { get { throw null; } }
        public static System.Drawing.Pen ScrollBar { get { throw null; } }
        public static System.Drawing.Pen Window { get { throw null; } }
        public static System.Drawing.Pen WindowFrame { get { throw null; } }
        public static System.Drawing.Pen WindowText { get { throw null; } }
        public static System.Drawing.Pen FromSystemColor(System.Drawing.Color c) { throw null; }
    }
    public sealed partial class TextureBrush : System.Drawing.Brush
    {
        public TextureBrush(System.Drawing.Image bitmap) { }
        public TextureBrush(System.Drawing.Image image, System.Drawing.Drawing2D.WrapMode wrapMode) { }
        public TextureBrush(System.Drawing.Image image, System.Drawing.Drawing2D.WrapMode wrapMode, System.Drawing.Rectangle dstRect) { }
        public TextureBrush(System.Drawing.Image image, System.Drawing.Drawing2D.WrapMode wrapMode, System.Drawing.RectangleF dstRect) { }
        public TextureBrush(System.Drawing.Image image, System.Drawing.Rectangle dstRect) { }
        [System.MonoLimitationAttribute("ImageAttributes are ignored when using libgdiplus")]
        public TextureBrush(System.Drawing.Image image, System.Drawing.Rectangle dstRect, System.Drawing.Imaging.ImageAttributes imageAttr) { }
        public TextureBrush(System.Drawing.Image image, System.Drawing.RectangleF dstRect) { }
        [System.MonoLimitationAttribute("ImageAttributes are ignored when using libgdiplus")]
        public TextureBrush(System.Drawing.Image image, System.Drawing.RectangleF dstRect, System.Drawing.Imaging.ImageAttributes imageAttr) { }
        public System.Drawing.Image Image { get { throw null; } }
        public System.Drawing.Drawing2D.Matrix Transform { get { throw null; } set { } }
        public System.Drawing.Drawing2D.WrapMode WrapMode { get { throw null; } set { } }
        public override object Clone() { throw null; }
        public void MultiplyTransform(System.Drawing.Drawing2D.Matrix matrix) { }
        public void MultiplyTransform(System.Drawing.Drawing2D.Matrix matrix, System.Drawing.Drawing2D.MatrixOrder order) { }
        public void ResetTransform() { }
        public void RotateTransform(float angle) { }
        public void RotateTransform(float angle, System.Drawing.Drawing2D.MatrixOrder order) { }
        public void ScaleTransform(float sx, float sy) { }
        public void ScaleTransform(float sx, float sy, System.Drawing.Drawing2D.MatrixOrder order) { }
        public void TranslateTransform(float dx, float dy) { }
        public void TranslateTransform(float dx, float dy, System.Drawing.Drawing2D.MatrixOrder order) { }
    }
    [System.AttributeUsageAttribute((System.AttributeTargets)(4))]
    public partial class ToolboxBitmapAttribute : System.Attribute
    {
        public static readonly System.Drawing.ToolboxBitmapAttribute Default;
        public ToolboxBitmapAttribute(string imageFile) { }
        public ToolboxBitmapAttribute(System.Type t) { }
        public ToolboxBitmapAttribute(System.Type t, string name) { }
        public override bool Equals(object value) { throw null; }
        public override int GetHashCode() { throw null; }
        public System.Drawing.Image GetImage(object component) { throw null; }
        public System.Drawing.Image GetImage(object component, bool large) { throw null; }
        public System.Drawing.Image GetImage(System.Type type) { throw null; }
        public System.Drawing.Image GetImage(System.Type type, bool large) { throw null; }
        public System.Drawing.Image GetImage(System.Type type, string imgName, bool large) { throw null; }
        public static System.Drawing.Image GetImageFromResource(System.Type t, string imageName, bool large) { throw null; }
    }
}
#if CONFIG_DEP
namespace System.Drawing.Configuration
{
    public sealed partial class SystemDrawingSection : System.Configuration.ConfigurationSection
    {
        public SystemDrawingSection() { }
        public string BitmapSuffix { get { throw null; } set { } }
        protected override System.Configuration.ConfigurationPropertyCollection Properties { get { throw null; } }
    }
}
#endif
namespace System.Drawing.Design
{
    public sealed partial class CategoryNameCollection : System.Collections.ReadOnlyCollectionBase
    {
        public CategoryNameCollection(System.Drawing.Design.CategoryNameCollection value) { }
        public CategoryNameCollection(string[] value) { }
        public string this[int index] { get { throw null; } }
        public bool Contains(string value) { throw null; }
        public void CopyTo(string[] array, int index) { }
        public int IndexOf(string value) { throw null; }
    }
    public partial interface IPropertyValueUIService
    {
        event System.EventHandler PropertyUIValueItemsChanged;
        void AddPropertyValueUIHandler(System.Drawing.Design.PropertyValueUIHandler newHandler);
        System.Drawing.Design.PropertyValueUIItem[] GetPropertyUIValueItems(System.ComponentModel.ITypeDescriptorContext context, System.ComponentModel.PropertyDescriptor propDesc);
        void NotifyPropertyValueUIItemsChanged();
        void RemovePropertyValueUIHandler(System.Drawing.Design.PropertyValueUIHandler newHandler);
    }
    public partial interface IToolboxItemProvider
    {
        System.Drawing.Design.ToolboxItemCollection Items { get; }
    }
    [System.Runtime.InteropServices.GuidAttribute("4BACD258-DE64-4048-BC4E-FEDBEF9ACB76")]
    [System.Runtime.InteropServices.InterfaceTypeAttribute((System.Runtime.InteropServices.ComInterfaceType)(1))]
    public partial interface IToolboxService
    {
        System.Drawing.Design.CategoryNameCollection CategoryNames { get; }
        string SelectedCategory { get; set; }
        void AddCreator(System.Drawing.Design.ToolboxItemCreatorCallback creator, string format);
        void AddCreator(System.Drawing.Design.ToolboxItemCreatorCallback creator, string format, System.ComponentModel.Design.IDesignerHost host);
        void AddLinkedToolboxItem(System.Drawing.Design.ToolboxItem toolboxItem, System.ComponentModel.Design.IDesignerHost host);
        void AddLinkedToolboxItem(System.Drawing.Design.ToolboxItem toolboxItem, string category, System.ComponentModel.Design.IDesignerHost host);
        void AddToolboxItem(System.Drawing.Design.ToolboxItem toolboxItem);
        void AddToolboxItem(System.Drawing.Design.ToolboxItem toolboxItem, string category);
        System.Drawing.Design.ToolboxItem DeserializeToolboxItem(object serializedObject);
        System.Drawing.Design.ToolboxItem DeserializeToolboxItem(object serializedObject, System.ComponentModel.Design.IDesignerHost host);
        System.Drawing.Design.ToolboxItem GetSelectedToolboxItem();
        System.Drawing.Design.ToolboxItem GetSelectedToolboxItem(System.ComponentModel.Design.IDesignerHost host);
        System.Drawing.Design.ToolboxItemCollection GetToolboxItems();
        System.Drawing.Design.ToolboxItemCollection GetToolboxItems(System.ComponentModel.Design.IDesignerHost host);
        System.Drawing.Design.ToolboxItemCollection GetToolboxItems(string category);
        System.Drawing.Design.ToolboxItemCollection GetToolboxItems(string category, System.ComponentModel.Design.IDesignerHost host);
        bool IsSupported(object serializedObject, System.Collections.ICollection filterAttributes);
        bool IsSupported(object serializedObject, System.ComponentModel.Design.IDesignerHost host);
        bool IsToolboxItem(object serializedObject);
        bool IsToolboxItem(object serializedObject, System.ComponentModel.Design.IDesignerHost host);
        void Refresh();
        void RemoveCreator(string format);
        void RemoveCreator(string format, System.ComponentModel.Design.IDesignerHost host);
        void RemoveToolboxItem(System.Drawing.Design.ToolboxItem toolboxItem);
        void RemoveToolboxItem(System.Drawing.Design.ToolboxItem toolboxItem, string category);
        void SelectedToolboxItemUsed();
        object SerializeToolboxItem(System.Drawing.Design.ToolboxItem toolboxItem);
        bool SetCursor();
        void SetSelectedToolboxItem(System.Drawing.Design.ToolboxItem toolboxItem);
    }
    public partial interface IToolboxUser
    {
        bool GetToolSupported(System.Drawing.Design.ToolboxItem tool);
        void ToolPicked(System.Drawing.Design.ToolboxItem tool);
    }
    public partial class PaintValueEventArgs : System.EventArgs
    {
        public PaintValueEventArgs(System.ComponentModel.ITypeDescriptorContext context, object value, System.Drawing.Graphics graphics, System.Drawing.Rectangle bounds) { }
        public System.Drawing.Rectangle Bounds { get { throw null; } }
        public System.ComponentModel.ITypeDescriptorContext Context { get { throw null; } }
        public System.Drawing.Graphics Graphics { get { throw null; } }
        public object Value { get { throw null; } }
    }
    public delegate void PropertyValueUIHandler(System.ComponentModel.ITypeDescriptorContext context, System.ComponentModel.PropertyDescriptor propDesc, System.Collections.ArrayList valueUIItemList);
    public partial class PropertyValueUIItem
    {
        public PropertyValueUIItem(System.Drawing.Image uiItemImage, System.Drawing.Design.PropertyValueUIItemInvokeHandler handler, string tooltip) { }
        public virtual System.Drawing.Image Image { get { throw null; } }
        public virtual System.Drawing.Design.PropertyValueUIItemInvokeHandler InvokeHandler { get { throw null; } }
        public virtual string ToolTip { get { throw null; } }
        public virtual void Reset() { }
    }
    public delegate void PropertyValueUIItemInvokeHandler(System.ComponentModel.ITypeDescriptorContext context, System.ComponentModel.PropertyDescriptor descriptor, System.Drawing.Design.PropertyValueUIItem invokedItem);
    public partial class ToolboxComponentsCreatedEventArgs : System.EventArgs
    {
        public ToolboxComponentsCreatedEventArgs(System.ComponentModel.IComponent[] components) { }
        public System.ComponentModel.IComponent[] Components { get { throw null; } }
    }
    public delegate void ToolboxComponentsCreatedEventHandler(object sender, System.Drawing.Design.ToolboxComponentsCreatedEventArgs e);
    [System.Security.Permissions.PermissionSetAttribute(System.Security.Permissions.SecurityAction.InheritanceDemand, Unrestricted=true)]
    [System.Security.Permissions.PermissionSetAttribute(System.Security.Permissions.SecurityAction.LinkDemand, Unrestricted=true)]
    public partial class ToolboxComponentsCreatingEventArgs : System.EventArgs
    {
        public ToolboxComponentsCreatingEventArgs(System.ComponentModel.Design.IDesignerHost host) { }
        public System.ComponentModel.Design.IDesignerHost DesignerHost { get { throw null; } }
    }
    public delegate void ToolboxComponentsCreatingEventHandler(object sender, System.Drawing.Design.ToolboxComponentsCreatingEventArgs e);
    [System.MonoTODOAttribute("Implementation is incomplete.")]
    [System.Security.Permissions.PermissionSetAttribute(System.Security.Permissions.SecurityAction.InheritanceDemand, Unrestricted=true)]
    [System.Security.Permissions.PermissionSetAttribute(System.Security.Permissions.SecurityAction.LinkDemand, Unrestricted=true)]
    [System.SerializableAttribute]
    public partial class ToolboxItem : System.Runtime.Serialization.ISerializable
    {
        public ToolboxItem() { }
        public ToolboxItem(System.Type toolType) { }
        public System.Reflection.AssemblyName AssemblyName { get { throw null; } set { } }
        public System.Drawing.Bitmap Bitmap { get { throw null; } set { } }
        public string Company { get { throw null; } set { } }
        public virtual string ComponentType { get { throw null; } }
        public System.Reflection.AssemblyName[] DependentAssemblies { get { throw null; } set { } }
        public string Description { get { throw null; } set { } }
        public string DisplayName { get { throw null; } set { } }
        public System.Collections.ICollection Filter { get { throw null; } set { } }
        public bool IsTransient { get { throw null; } set { } }
        public virtual bool Locked { get { throw null; } }
        public System.Collections.IDictionary Properties { get { throw null; } }
        public string TypeName { get { throw null; } set { } }
        public virtual string Version { get { throw null; } }
        public event System.Drawing.Design.ToolboxComponentsCreatedEventHandler ComponentsCreated { add { } remove { } }
        public event System.Drawing.Design.ToolboxComponentsCreatingEventHandler ComponentsCreating { add { } remove { } }
        protected void CheckUnlocked() { }
        public System.ComponentModel.IComponent[] CreateComponents() { throw null; }
        public System.ComponentModel.IComponent[] CreateComponents(System.ComponentModel.Design.IDesignerHost host) { throw null; }
        public System.ComponentModel.IComponent[] CreateComponents(System.ComponentModel.Design.IDesignerHost host, System.Collections.IDictionary defaultValues) { throw null; }
        protected virtual System.ComponentModel.IComponent[] CreateComponentsCore(System.ComponentModel.Design.IDesignerHost host) { throw null; }
        protected virtual System.ComponentModel.IComponent[] CreateComponentsCore(System.ComponentModel.Design.IDesignerHost host, System.Collections.IDictionary defaultValues) { throw null; }
        protected virtual void Deserialize(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
        public override bool Equals(object obj) { throw null; }
        protected virtual object FilterPropertyValue(string propertyName, object value) { throw null; }
        public override int GetHashCode() { throw null; }
        public System.Type GetType(System.ComponentModel.Design.IDesignerHost host) { throw null; }
        protected virtual System.Type GetType(System.ComponentModel.Design.IDesignerHost host, System.Reflection.AssemblyName assemblyName, string typeName, bool reference) { throw null; }
        public virtual void Initialize(System.Type type) { }
        public virtual void Lock() { }
        protected virtual void OnComponentsCreated(System.Drawing.Design.ToolboxComponentsCreatedEventArgs args) { }
        protected virtual void OnComponentsCreating(System.Drawing.Design.ToolboxComponentsCreatingEventArgs args) { }
        protected virtual void Serialize(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
        void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
        public override string ToString() { throw null; }
        protected void ValidatePropertyType(string propertyName, object value, System.Type expectedType, bool allowNull) { }
        protected virtual object ValidatePropertyValue(string propertyName, object value) { throw null; }
    }
    [System.Security.Permissions.PermissionSetAttribute(System.Security.Permissions.SecurityAction.LinkDemand, Unrestricted=true)]
    public sealed partial class ToolboxItemCollection : System.Collections.ReadOnlyCollectionBase
    {
        public ToolboxItemCollection(System.Drawing.Design.ToolboxItemCollection value) { }
        public ToolboxItemCollection(System.Drawing.Design.ToolboxItem[] value) { }
        public System.Drawing.Design.ToolboxItem this[int index] { get { throw null; } }
        public bool Contains(System.Drawing.Design.ToolboxItem value) { throw null; }
        public void CopyTo(System.Drawing.Design.ToolboxItem[] array, int index) { }
        public int IndexOf(System.Drawing.Design.ToolboxItem value) { throw null; }
    }
    public delegate System.Drawing.Design.ToolboxItem ToolboxItemCreatorCallback(object serializedObject, string format);
    public partial class UITypeEditor
    {
        public UITypeEditor() { }
        public virtual bool IsDropDownResizable { get { throw null; } }
        public virtual object EditValue(System.ComponentModel.ITypeDescriptorContext context, System.IServiceProvider provider, object value) { throw null; }
        public object EditValue(System.IServiceProvider provider, object value) { throw null; }
        public System.Drawing.Design.UITypeEditorEditStyle GetEditStyle() { throw null; }
        public virtual System.Drawing.Design.UITypeEditorEditStyle GetEditStyle(System.ComponentModel.ITypeDescriptorContext context) { throw null; }
        public bool GetPaintValueSupported() { throw null; }
        public virtual bool GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext context) { throw null; }
        public virtual void PaintValue(System.Drawing.Design.PaintValueEventArgs e) { }
        public void PaintValue(object value, System.Drawing.Graphics canvas, System.Drawing.Rectangle rectangle) { }
    }
    public enum UITypeEditorEditStyle
    {
        DropDown = 3,
        Modal = 2,
        None = 1,
    }
}
namespace System.Drawing.Drawing2D
{
    public sealed partial class AdjustableArrowCap : System.Drawing.Drawing2D.CustomLineCap
    {
        public AdjustableArrowCap(float width, float height) : base (default(System.Drawing.Drawing2D.GraphicsPath), default(System.Drawing.Drawing2D.GraphicsPath)) { }
        public AdjustableArrowCap(float width, float height, bool isFilled) : base (default(System.Drawing.Drawing2D.GraphicsPath), default(System.Drawing.Drawing2D.GraphicsPath)) { }
        public bool Filled { get { throw null; } set { } }
        public float Height { get { throw null; } set { } }
        public float MiddleInset { get { throw null; } set { } }
        public float Width { get { throw null; } set { } }
    }
    public sealed partial class Blend
    {
        public Blend() { }
        public Blend(int count) { }
        public float[] Factors { get { throw null; } set { } }
        public float[] Positions { get { throw null; } set { } }
    }
    public sealed partial class ColorBlend
    {
        public ColorBlend() { }
        public ColorBlend(int count) { }
        public System.Drawing.Color[] Colors { get { throw null; } set { } }
        public float[] Positions { get { throw null; } set { } }
    }
    public enum CombineMode
    {
        Complement = 5,
        Exclude = 4,
        Intersect = 1,
        Replace = 0,
        Union = 2,
        Xor = 3,
    }
    public enum CompositingMode
    {
        SourceCopy = 1,
        SourceOver = 0,
    }
    public enum CompositingQuality
    {
        AssumeLinear = 4,
        Default = 0,
        GammaCorrected = 3,
        HighQuality = 2,
        HighSpeed = 1,
        Invalid = -1,
    }
    public enum CoordinateSpace
    {
        Device = 2,
        Page = 1,
        World = 0,
    }
    public partial class CustomLineCap : System.MarshalByRefObject, System.ICloneable, System.IDisposable
    {
        public CustomLineCap(System.Drawing.Drawing2D.GraphicsPath fillPath, System.Drawing.Drawing2D.GraphicsPath strokePath) { }
        public CustomLineCap(System.Drawing.Drawing2D.GraphicsPath fillPath, System.Drawing.Drawing2D.GraphicsPath strokePath, System.Drawing.Drawing2D.LineCap baseCap) { }
        public CustomLineCap(System.Drawing.Drawing2D.GraphicsPath fillPath, System.Drawing.Drawing2D.GraphicsPath strokePath, System.Drawing.Drawing2D.LineCap baseCap, float baseInset) { }
        public System.Drawing.Drawing2D.LineCap BaseCap { get { throw null; } set { } }
        public float BaseInset { get { throw null; } set { } }
        public System.Drawing.Drawing2D.LineJoin StrokeJoin { get { throw null; } set { } }
        public float WidthScale { get { throw null; } set { } }
        public object Clone() { throw null; }
        public void Dispose() { }
        protected virtual void Dispose(bool disposing) { }
        ~CustomLineCap() { }
        public void GetStrokeCaps(out System.Drawing.Drawing2D.LineCap startCap, out System.Drawing.Drawing2D.LineCap endCap) { startCap = default(System.Drawing.Drawing2D.LineCap); endCap = default(System.Drawing.Drawing2D.LineCap); }
        public void SetStrokeCaps(System.Drawing.Drawing2D.LineCap startCap, System.Drawing.Drawing2D.LineCap endCap) { }
    }
    public enum DashCap
    {
        Flat = 0,
        Round = 2,
        Triangle = 3,
    }
    public enum DashStyle
    {
        Custom = 5,
        Dash = 1,
        DashDot = 3,
        DashDotDot = 4,
        Dot = 2,
        Solid = 0,
    }
    public enum FillMode
    {
        Alternate = 0,
        Winding = 1,
    }
    public enum FlushIntention
    {
        Flush = 0,
        Sync = 1,
    }
    public sealed partial class GraphicsContainer : System.MarshalByRefObject
    {
        internal GraphicsContainer() { }
    }
    public sealed partial class GraphicsPath : System.MarshalByRefObject, System.ICloneable, System.IDisposable
    {
        public GraphicsPath() { }
        public GraphicsPath(System.Drawing.Drawing2D.FillMode fillMode) { }
        public GraphicsPath(System.Drawing.PointF[] pts, byte[] types) { }
        public GraphicsPath(System.Drawing.PointF[] pts, byte[] types, System.Drawing.Drawing2D.FillMode fillMode) { }
        public GraphicsPath(System.Drawing.Point[] pts, byte[] types) { }
        public GraphicsPath(System.Drawing.Point[] pts, byte[] types, System.Drawing.Drawing2D.FillMode fillMode) { }
        public System.Drawing.Drawing2D.FillMode FillMode { get { throw null; } set { } }
        public System.Drawing.Drawing2D.PathData PathData { get { throw null; } }
        public System.Drawing.PointF[] PathPoints { get { throw null; } }
        public byte[] PathTypes { get { throw null; } }
        public int PointCount { get { throw null; } }
        public void AddArc(System.Drawing.Rectangle rect, float startAngle, float sweepAngle) { }
        public void AddArc(System.Drawing.RectangleF rect, float startAngle, float sweepAngle) { }
        public void AddArc(int x, int y, int width, int height, float startAngle, float sweepAngle) { }
        public void AddArc(float x, float y, float width, float height, float startAngle, float sweepAngle) { }
        public void AddBezier(System.Drawing.Point pt1, System.Drawing.Point pt2, System.Drawing.Point pt3, System.Drawing.Point pt4) { }
        public void AddBezier(System.Drawing.PointF pt1, System.Drawing.PointF pt2, System.Drawing.PointF pt3, System.Drawing.PointF pt4) { }
        public void AddBezier(int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4) { }
        public void AddBezier(float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4) { }
        public void AddBeziers(System.Drawing.PointF[] points) { }
        public void AddBeziers(params System.Drawing.Point[] points) { }
        public void AddClosedCurve(System.Drawing.PointF[] points) { }
        public void AddClosedCurve(System.Drawing.PointF[] points, float tension) { }
        public void AddClosedCurve(System.Drawing.Point[] points) { }
        public void AddClosedCurve(System.Drawing.Point[] points, float tension) { }
        public void AddCurve(System.Drawing.PointF[] points) { }
        public void AddCurve(System.Drawing.PointF[] points, int offset, int numberOfSegments, float tension) { }
        public void AddCurve(System.Drawing.PointF[] points, float tension) { }
        public void AddCurve(System.Drawing.Point[] points) { }
        public void AddCurve(System.Drawing.Point[] points, int offset, int numberOfSegments, float tension) { }
        public void AddCurve(System.Drawing.Point[] points, float tension) { }
        public void AddEllipse(System.Drawing.Rectangle rect) { }
        public void AddEllipse(System.Drawing.RectangleF rect) { }
        public void AddEllipse(int x, int y, int width, int height) { }
        public void AddEllipse(float x, float y, float width, float height) { }
        public void AddLine(System.Drawing.Point pt1, System.Drawing.Point pt2) { }
        public void AddLine(System.Drawing.PointF pt1, System.Drawing.PointF pt2) { }
        public void AddLine(int x1, int y1, int x2, int y2) { }
        public void AddLine(float x1, float y1, float x2, float y2) { }
        public void AddLines(System.Drawing.PointF[] points) { }
        public void AddLines(System.Drawing.Point[] points) { }
        public void AddPath(System.Drawing.Drawing2D.GraphicsPath addingPath, bool connect) { }
        public void AddPie(System.Drawing.Rectangle rect, float startAngle, float sweepAngle) { }
        public void AddPie(int x, int y, int width, int height, float startAngle, float sweepAngle) { }
        public void AddPie(float x, float y, float width, float height, float startAngle, float sweepAngle) { }
        public void AddPolygon(System.Drawing.PointF[] points) { }
        public void AddPolygon(System.Drawing.Point[] points) { }
        public void AddRectangle(System.Drawing.Rectangle rect) { }
        public void AddRectangle(System.Drawing.RectangleF rect) { }
        public void AddRectangles(System.Drawing.RectangleF[] rects) { }
        public void AddRectangles(System.Drawing.Rectangle[] rects) { }
        [System.MonoTODOAttribute("The StringFormat parameter is ignored when using libgdiplus.")]

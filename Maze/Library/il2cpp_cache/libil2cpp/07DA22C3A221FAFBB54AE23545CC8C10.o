#include "../mtlpp.hpp"
#include <stdio.h>

int main()
{
    const uint32_t width  = 16;
    const uint32_t height = 16;

    mtlpp::Device device = mtlpp::Device::CreateSystemDefaultDevice();
    assert(device);

    mtlpp::TextureDescriptor textureDesc = mtlpp::TextureDescriptor::Texture2DDescriptor(
        mtlpp::PixelFormat::R8Unorm, width, height, false);
    textureDesc.SetUsage(mtlpp::TextureUsage::RenderTarget);
    mtlpp::Texture texture = device.NewTexture(textureDesc);
    assert(texture);

    const char shadersSrc[] = R"""(
        #include <metal_stdlib>
        using namespace metal;

        vertex float4 vertFunc (
            const device packed_float3* vertexArray [[buffer(0)]],
            unsigned int vID[[vertex_id]])
        {
            return float4(vertexArray[vID], 1.0);
        }

        fragment half4 fragFunc ()
        {
            return half4(1.0);
        }
    )""";

    mtlpp::Library library = device.NewLibrary(shadersSrc, mtlpp::CompileOptions(), nullptr);
    assert(library);
    mtlpp::Function vertFunc = library.NewFunction("vertFunc");
    assert(vertFunc);
    mtlpp::Function fragFunc = library.NewFunction("fragFunc");
    assert(fragFunc);

    mtlpp::RenderPipelineDescriptor renderPipeli
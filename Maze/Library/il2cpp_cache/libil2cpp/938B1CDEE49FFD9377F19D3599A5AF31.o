//---------------------------------------------------------------------
// <copyright file="ObjectViewQueryResultData.cs" company="Microsoft">
//      Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>
//
// @owner       Microsoft
// @backupOwner Microsoft
//---------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Data.Metadata;
using System.Data.Metadata.Edm;
using System.Data.Objects.DataClasses;
using System.Diagnostics;

namespace System.Data.Objects
{
    /// <summary>
    /// Manages a binding list constructed from query results.
    /// </summary>
    /// <typeparam name="TElement">
    /// Type of the elements in the binding list.
    /// </typeparam>
    /// <remarks>
    /// The binding list is initialized from query results.
    /// If the binding list can be modified, 
    /// objects are added or removed from the ObjectStateManager (via the ObjectContext).
    /// </remarks>
    internal sealed class ObjectViewQueryResultData<TElement> : IObjectViewData<TElement>
    {
        private List<TElement> _bindingList;

        /// <summary>
        /// ObjectContext used to add or delete objects when the list can be modified.
        /// </summary>
        private ObjectContext _objectContext;
        
        /// <summary>
        /// If the TElement type is an Entity type of some kind,
        /// this field specifies the entity set to add entity objects.
        /// </summary>
        private EntitySet _entitySet; 

        private bool _canEditItems;
        private bool _canModifyList;

        /// <summary>
        /// Construct a new instance of the ObjectViewQueryResultData class using the supplied query results.
        /// </summary>
        /// <param name="queryResults">
        /// Result of object query execution used to populate the binding list.
        /// </param>
        /// <param name="objectContext">
        /// ObjectContext used to add or remove items.
        /// If the binding list can be modified, this parameter should not be null.
        /// </param>
        /// <param name="forceReadOnlyList">
        /// <b>True</b> if items should not be allowed to be added or removed from the binding list.
        /// Note that other conditions may prevent the binding list from being modified, so a value of <b>false</b>
        /// supplied for this parameter doesn't necessarily mean that the list will be writable.
        /// </param>
        /// <param name="entitySet">
        /// If the TElement type is an Entity type of some kind,
        /// this field specifies the entity set to add entity objects.
        /// </param>
        internal ObjectViewQueryResultData(IEnumerable queryResults, ObjectContext objectContext, bool forceReadOnlyList, EntitySet entitySet)
        {
            bool canTrackItemChanges = IsEditable(typeof(TElement));

            _objectContext = objectContext;
            _entitySet = entitySet;

            _canEditItems = canTrackItemChanges;
            _canModifyList = !forceReadOnlyList && canTrackItemChanges && _objectContext != null;

            _bindingList = new List<TElement>();
            foreach (TElement element in q
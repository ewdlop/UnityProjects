butes; }
            set { xmlAttributes = value; }
        }

        internal IList<XmlNode> XmlChildNodes
        {
            get { return xmlChildNodes; }
            set { xmlChildNodes = value; }
        }

        internal XmlDocument OwnerDocument
        {
            get { return ownerDocument; }
            set { ownerDocument = value; }
        }

        public override void Clear()
        {
            base.Clear();
            xmlAttributes = null;
            xmlChildNodes = null;
            ownerDocument = null;
        }
    }

    internal class ISerializableDataNode : DataNode<object>
    {
        string factoryTypeName;
        string factoryTypeNamespace;
        IList<ISerializableDataMember> members;

        internal ISerializableDataNode()
        {
            dataType = Globals.TypeOfISerializableDataNode;
        }

        internal string FactoryTypeName
        {
            get { return factoryTypeName; }
            set { factoryTypeName = value; }
        }

        internal string FactoryTypeNamespace
        {
            get { return factoryTypeNamespace; }
            set { factoryTypeNamespace = value; }
        }

        internal IList<ISerializableDataMember> Members
        {
            get { return members; }
            set { members
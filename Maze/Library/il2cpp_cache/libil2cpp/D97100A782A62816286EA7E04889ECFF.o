s visible but ignored"), SourcePin);
		}
	}

	// Add any property bindings
	for(const TPair<FName, FAnimGraphNodePropertyBinding>& PropertyBinding : InNode->PropertyBindings)
	{
		if(PropertyBinding.Value.bIsBound)
		{
			EvalHandler.AnimGraphNode = InNode;
			EvalHandler.NodeVariableProperty = NodeProperty;
			EvalHandler.bServicesNodeProperties = true;

			if (FProperty* Property = FindFProperty<FProperty>(NodeProperty->Struct, PropertyBinding.Key))
			{
				EvalHandler.RegisterPropertyBinding(Property, PropertyBinding.Value);
			}
			else
			{
				InCompilationContext.GetMessageLog().Warning(*FString::Printf(TEXT("ICE: @@ Failed to find a property '%s'"), *PropertyBinding.Key.ToString()), InNode);
			}
		}
	}
}

void FAnimBlueprintCompilerHandler_Base::CreateEvaluationHandlerForNode(IAnimBlueprintCompilationContext& InCompilationContext, UAnimGraphNode_Base* InNode)
{
	if(FEvaluationHandlerRecord* RecordPtr = PerNodeStructEvalHandlers.Find(InNode))
	{
		// Generate a new event to update the value of these properties
		FEvaluationHandlerRecord& Record = *RecordPtr;

		if (Record.NodeVariableProperty)
		{
			CreateEvaluationHandler(InCompilationContext, InNode, Record);

			int32 NewIndex = ValidEvaluationHandlerList.Add(Record);
			ValidEvaluati
				}
			}
			else
			{
				string zlib = (compress ? "-lz" : "");
				string objc = (style == "osx" ? "-framework CoreFoundation -lobjc" : "");
				string debugging = "-g";
				string cc = GetEnv("CC", "cc");
				string cmd = null;

				if (style == "linux")
					debugging = "-ggdb";
				if (static_link)
				{
					string platform_libs;
					string smonolib;

					if (style == "osx") {
						smonolib = "`pkg-config --variable=libdir mono-2`/libmono-2.0.a ";
						platform_libs = "-liconv -framework Foundation ";
					} else {
						smonolib = "-Wl,-Bstatic -lmono-2.0 -Wl,-Bdynamic ";
						platform_libs = "";
					}

					string in_tree_include = "";
					
					if (in_tree != null) {
						smonolib = String.Format ("{0}/mono/mini/.libs/libmonosgen-2.0.a", in_tree);
						in_tree_include = String.Format (" -I{0} ", in_tree);
					}

					cmd = String.Format("{4} -o '{2}' -Wall {7} `pkg-config --cflags mono-2` {9} {0} {3} " +
						"`pkg-config --libs-only-L mono-2` {5} {6} {8} " +
						"`pkg-config --libs-only-l mono-2 | sed -e \"s/\\-lmono-2.0 //\"` {1} -g ",
						temp_c, temp_o, output, zlib, cc, smonolib, String.Join (" ", aot_paths), objc, platform_libs, in_tree_include);
				}
				else
				{

					cmd = String.Format("{4} " + debugging + " -o '{2}' -Wall {5} {0} `pkg-config --cflags --libs mono-2` {3} {1}",
						temp_c, temp_o, output, zlib, cc, objc);
				}
				Execute (cmd);
			}

			if (!quiet)
				Console.WriteLine ("Done");
		}
	}
		} finally {
			if (!keeptemp){
				if (object_out == null){
					File.Delete (temp_o);
				}
				if (!compile_only){
					File.Delete (temp_c);
				}
				if (aot_temp_dir != null)
					aot_temp_dir.Delete (true);
				File.Delete (temp_s);
			}
		}
	}
	
	static List<string> LoadAssemblies (List<string> sources)
	{
		List<string> assemblies = new List<string> ();
		bool error = false;

		foreach (string name in sources){
			try {
				Assembly a = LoadAssemblyFile (name);

				if (a == null){
					error = true;
					continue;
				}
			
				assemblies.Add (a.CodeBase);
			} catch (Exception) {
				if (skip_scan) {
					if (!quiet)
						Console.WriteLine ("File will not be scanned: {0}", name);
					assemblies.Add (new Uri (new FileInfo (name).FullName).ToString ());
				} else {
					throw;
				}
			}
		}

		if (error) {
			Error ("Couldn't load one or more of the assemblies.");
			Environment.Exit (1);
		}

		return assemblies;
	}

	static void LoadLocalizedAssemblies (List<string> assemblies)
	{
		var other = i18n.Select (x => "I18N." + x + (x.Length > 0 ? "." : "") + "dll");
		string error = null;

		foreach (string name in other) {
			try {
				Assembly a = LoadAssembly (name);

				if (a == null) {
					error = "Failed to load " + name;
					continue;
				}

				assemblies.Add (a.CodeBase);
			} catch (Exception) {
				if (skip_scan) {
					if (!quiet)
						Console.WriteLine ("File will not be scanned: {0}", name);
					assemblies.Add (new Uri (new FileInfo (name).FullName).ToString ());
				} else {
					throw;
				}
			}
		}

		if (error != null) {
			Console.Error.WriteLine ("Failure to load i18n assemblies, the following directories were searched for the assemblies:");
			foreach (var path in link_paths){
				Console.Error.WriteLine ("   Path: " + path);
			}
			if (custom_mode){
				Console.WriteLine ("In Custom mode, you need to provide the directory to lookup assemblies from using -L");
			}

			Error ("Couldn't load one or more of the i18n assemblies: " + error);
			Environment.Exit (1);
		}
	}

	
	static readonly Universe universe = new Universe ();
	static readonly Dictionary<string, string> loaded_assemblies = new Dictionary<string, string> ();

	public static string GetAssemblyName (string path)
	{
		string resourcePathSeparator = style == "windows" ? "\\\\" : "/";
		string name = Path.GetFileName (path);

		// A bit of a hack to support satellite assemblies. They all share the same name but
		// are placed in subdirectories named after the locale they implement. Also, all of
		// them end in .resources.dll, therefore we can use that to detect the circumstances.
		if (name.EndsWith (".resources.dll", StringComparison.OrdinalIgnoreCase)) {
			string dir = Path.GetDirectoryName (path);
			int idx = dir.LastIndexOf (Path.DirectorySeparatorChar);
			if (idx >= 0) {
				name = dir.Substring (idx + 1) + resourcePathSeparator + name;
				Console.WriteLine ($"Storing satellite assembly '{path}' with name '{name}'");
			} else if (!quiet)
				Console.WriteLine ($"Warning: satellite assembly {path} doesn't have locale path prefix, name conflicts possible");
		}

		return name;
	}

	static bool QueueAssembly (List<string> files, string codebase)
	{
		//Console.WriteLine ("CODE BASE IS {0}", codebase);
		if (files.Contains (codebase))
			return true;

		var path = new Uri(codebase).LocalPath;
		var name = GetAssemblyName (path);
		string found;
		if (loaded_assemblies.TryGetValue (name, out found)) {
			Error ("Duplicate assembly name `{0}'. Both `{1}' and `{2}' use same assembly name.", name, path, found);
			return false;
		}

		loaded_assemblies.Add (name, path);

		files.Add (codebase);
		if (!autodeps)
			return true;
		try {
			Assembly a = universe.LoadFile (path);
			if (a == null) {
				Error ("Unable to to load assembly `{0}'", path);
				return false;
			}

			foreach (AssemblyName an in a.GetReferencedAssemblies ()) {
				a = LoadAssembly (an.Name);
				if (a == null) {
					Error ("Unable to load assembly `{0}' referenced by `{1}'", an.Name, path);
					return false;
				}

				if (!QueueAssembly (files, a.CodeBase))
					return false;
			}
		} catch (Exception) {
			if (!skip_scan)
				throw;
		}

		return true;
	}

	//
	// Loads an assembly from a specific path
	//
	static Assembly LoadAssemblyFile (string assembly)
	{
		Assembly a = null;
		
		try {
			if (!quiet)
				Console.WriteLine ("Attempting to load assembly: {0}", assembly);
			a = universe.LoadFile (assembly);
			if (!quiet)
				Console.WriteLine ("Assembly {0} loaded successfully.", assembly);

		} catch (FileNotFoundException){
			Error ($"Cannot find assembly `{assembly}'");
		} catch (IKVM.Reflection.BadImageFormatException f) {
			if (skip_scan)
				throw;
			Error ($"Cannot load assembly (bad file format) " + f.Message);
		} catch (FileLoadException f){
			Error ($"Cannot load assembly " + f.Message);
		} catch (ArgumentNullException){
			Error( $"Cannot load assembly (null argument)");
		}
		return a;
	}

	//
	// Loads an assembly from any of the link directories provided
	//
	static Assembly LoadAssembly (string assembly)
	{
		string total_log = "";
		foreach (string dir in link_paths){
			string full_path = Path.Combine (dir, assembly);
			if (!quiet)
				Console.WriteLine ("Attempting to load assembly from: " + full_path);
			if (!assembly.EndsWith (".dll") && !assembly.EndsWith (".exe"))
				full_path += ".dll";
			
			try {
				var a = universe.LoadFile (full_path);
				return a;
			} catch (FileNotFoundException ff) {
				total_log += ff.FusionLog;
				continue;
			}
		}
		if (!quiet)
			Console.WriteLine ("Log: \n" + total_log);
		return null;
	}
	
	static void Error (string msg, params object [] args)
	{
		Console.Error.WriteLine ("ERROR: {0}", string.Format (msg, args));
		Environment.Exit (1);
	}

	static void Help ()
	{
		Console.WriteLine ("Usage is: mkbundle [options] assembly1 [assembly2...]\n\n" +
				   "Options:\n" +
				   "    --config F           Bundle system config file `F'\n" +
				   "    --config-dir D       Set MONO_CFG_DIR to `D'\n" +
				   "    --deps               Turns on automatic dependency embedding (default on simple)\n" +
				   "    -L path              Adds `path' to the search path for assemblies\n" +
				   "    --machine-config F   Use the given file as the machine.config for the application.\n" +
				   "    -o out               Specifies output filename\n" +
				   "    --nodeps             Turns off automatic dependency embedding (default on custom)\n" +
				   "    --skip-scan          Skip scanning assemblies that could not be loaded (but still embed them).\n" +
				   "    --i18n ENCODING      none, all or comma separated list of CJK, MidWest, Other, Rare, West.\n" +
				   "    -v                   Verbose output\n" + 
				   "    --bundled-header     Do not attempt to include 'mono-config.h'. Define the entry points directly in the generated code\n" +
				   "\n" + 
				   "--simple   Simple mode does not require a C toolchain and can cross compile\n" + 
				   "    --cross TARGET       Generates a binary for the given TARGET\n"+
				   "    --env KEY=VALUE      Hardcodes an environment variable for the target\n" +
				   "    --fetch-target NAME  Downloads the target SDK from the remote server\n" + 
				   "    --library [LIB,]PATH Bundles the specified dynamic library to be used at runtime\n" +
				   "                         LIB is optional shortname for file located at PATH\n" + 
				   "    --list-targets       Lists available targets on the remote server\n" +
				   "    --local-targets      Lists locally available targets\n" +
				   "    --options OPTIONS    Embed the specified Mono command line options on target\n" +
				   "    --runtime RUNTIME    Manually specifies the Mono runtime to use\n" +
				   "    --sdk PATH           Use a Mono SDK root location instead of a target\n" + 
				   "    --target-server URL  Specified a server to download targets from, default is " + target_server + "\n" +
				   "\n" +
				   "--custom   Builds a custom launcher, options for --custom\n" +
				   "    -c                   Produce stub only, do not compile\n" +
				   "    -oo obj              Specifies output filename for helper object file\n" +
				   "    --dos2unix[=true|false]\n" +
				   "                         When no value provided, or when `true` specified\n" +
				   "                         `dos2unix` will be invoked to convert paths on Windows.\n" +
				   "                         When `--dos2unix=false` used, dos2unix is NEVER used.\n" +
				   "    --keeptemp           Keeps the temporary files\n" +
				   "    --static             Statically link to mono libs\n" +
				   "    --nomain             Don't include a main() function, for libraries\n" +
				   "	--custom-main C      Link the specified compilation unit (.c or .obj) with entry point/init code\n" +
				   "    -z                   Compress the assemblies before embedding.\n" +
				   "    --static-ctor ctor   Add a constructor call to the supplied function.\n" +
				   "                         You need zlib development headers and libraries.\n");
	}

	[DllImport ("libc")]
	static extern int system (string s);
	[DllImport ("libc")]
	static extern int uname (IntPtr buf);
		
	static void DetectOS ()
	{
		if (!IsUnix) {
			os_message = "OS is: Windows";
			style = "windows";
			return;
		}

		IntPtr buf = Marshal.AllocHGlobal (8192);
		if (uname (buf) != 0){
			os_message = "Warning: Unable to detect OS";
			Marshal.FreeHGlobal (buf);
			return;
		}
		string os = Marshal.PtrToStringAnsi (buf);
		os_message = "OS is: " + os;
		if (os == "Darwin")
			style = "osx";
		
		Marshal.FreeHGlobal (buf);
	}

	static bool IsUnix {
		get {
			int p = (int) Environment.OSVersion.Platform;
			return ((p == 4) || (p == 128) || (p == 6));
		}
	}


	static string EncodeAotSymbol (string symbol)
	{
		var sb = new StringBuilder ();
		/* This mimics what the aot-compiler does */
		foreach (var b in System.Text.Encoding.UTF8.GetBytes (symbol)) {
			char c = (char) b;
			if ((c >= '0' && c <= '9') ||
				(c >= 'a' && c <= 'z') ||
				(c >= 'A' && c <= 'Z')) {
				sb.Append (c);
				continue;
			}
			sb.Append ('_');
		}
		return sb.ToString ();
	}

	static void AotCompile (List<string> files)
	{
		if (aot_runtime == null)
			aot_runtime = runtime;

		if (aot_runtime == null) {
			Error ("You must specify at least one aot runtime with --runtime or --cross or --aot_runtime when AOT compiling");
			Environment.Exit (1);
		}

		var aot_mode_string = "";
		if (aot_mode != null)
			aot_mode_string = "," + aot_mode;

		var dedup_mode_string = "";
		StringBuilder all_assemblies = null;
		if (aot_dedup_assembly != null) {
			dedup_mode_string = ",dedup-skip";
			all_assemblies = new StringBuilder("");
		}

		Console.WriteLine ("Aoting files:");

		for (int i=0; i < files.Count; i++) {
			var file_name = files [i];
			string path = LocateFile (new Uri (file_name).LocalPath);
			string outPath = String.Format ("{0}.aot_out", path);
			aot_paths.Add (outPath);
			var name = System.Reflection.Assembly.LoadFrom(path).GetName().Name;
			aot_names.Add (EncodeAotSymbol (name));

			if (aot_dedup_assembly != null) {
				all_assemblies.Append (path);
				all_assemblies.Append (" ");
				Execute (String.Format ("MONO_PATH={0} {1} --aot={2},outfile={3}{4}{5} {6}",
					Path.GetDirectoryName (path), aot_runtime, aot_args, outPath, aot_mode_string, dedup_mode_string, path));
			} else {
				Execute (String.Format ("MONO_PATH={0} {1} --aot={2},outfile={3}{4} {5}",
					Path.GetDirectoryName (path), aot_runtime, aot_args, outPath, aot_mode_string, path));
			}
		}
		if (aot_dedup_assembly != null) {
			var filePath = new Uri (aot_dedup_assembly).LocalPath;
			string path = LocateFile (filePath);
			dedup_mode_string = String.Format (",dedup-include={0}", Path.GetFileName(filePath));
			string outPath = String.Format ("{0}.aot_out", path);
			Execute (String.Format ("MONO_PATH={7} {0} --aot={1},outfile={2}{3}{4} {5} {6}",
				aot_runtime, aot_args, outPath, aot_mode_string, dedup_mode_string, path, all_assemblies.ToString (), Path.GetDirectoryName (path)));
		}

		if ((aot_mode == "full" || aot_mode == "llvmonly") && cil_strip_path != null) {
			for (int i=0; i < files.Count; i++) {
				var in_name = new Uri (files [i]).LocalPath;
				var cmd = String.Format ("{0} {1} {2}", aot_runtime, cil_strip_path, in_name);
				Execute (cmd);
			}
		}
	}

	static void LinkManaged (List <string> files, string outDir)
	{
		if (managed_linker_path == null)
			return;

		var paths = new StringBuilder ("");
		foreach (var file in files) {
			paths.Append (" -a  ");
			paths.Append (new Uri (file).LocalPath);
		}

		var cmd = String.Format ("{0} {1} -b true -out {2} {3} -c link -p copy ", runtime, managed_linker_path, outDir, paths.ToString ());
		Execute (cmd);
	}

	static void PreprocessAssemblies (List <string> chosenFiles, List <string> files)
	{
		if (aot_mode == "" || (cil_strip_path == null && managed_linker_path == null))
			return;

		var temp_dir_name = Path.Combine(Directory.GetCurrentDirectory(), "temp_assemblies");
		aot_temp_dir = new DirectoryInfo (temp_dir_name);
		if (aot_temp_dir.Exists) {
			Console.WriteLine ("Removing previous build cache at {0}", temp_dir_name);
			aot_temp_dir.Delete (true);
		}
		aot_temp_dir.Create ();

		//if (managed_linker_path != null) {
			//LinkManaged (chosenFiles, temp_dir);

			//// Replace list with new list of files
			//files.Clear ();
			//Console.WriteLine ("Iterating {0}", temp_dir);
			//aot_temp_dir = new DirectoryInfo (temp_dir);
			//foreach (var file in aot_temp_dir.GetFiles ()) {
				//files.Append (String.Format ("file:///{0}", file));
				//Console.WriteLine (String.Format ("file:///{0}", file));
			//}
			//return;
		//}

		// Fix file references
		for (int i=0; i < files.Count; i++) {
			var in_name = new Uri (files [i]).LocalPath;
			var out_name = Path.Combine (temp_dir_name, Path.GetFileName (in_name));
			File.Copy (in_name, out_name);
			files [i] = out_name;
			if (in_name == aot_dedup_assembly)
				aot_dedup_assembly = out_name;
		}
	}


	static void Execute (string cmdLine)
	{
		if (IsUnix) {
			if (!quiet)
				Console.WriteLine ("[execute cmd]: " + cmdLine);
			int ret = system (cmdLine);
			if (ret != 0)
			{
				Error(String.Format("[Fail] {0}", ret));
			}
			return;
		}

		// on Windows, we have to pipe the output of a
		// `cmd` interpolation to dos2unix, because the shell does not
		// strip the CRLFs generated by the native pkg-config distributed
		// with Mono.
		//
		// But if it's *not* on cygwin, just skip it.

		// check if dos2unix is applicable.
		if (use_dos2unix == true)
			try {
			var info = new ProcessStartInfo ("dos2unix");
			info.CreateNoWindow = true;
			info.Redirect
ONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  cef_size_t _retval = _struct->get_preferred_size(_struct);

  // Return type: simple
  return _retval;
}

void CefMenuButtonCToCpp::SizeToPreferredSize() {
  cef_view_t* _struct = reinterpret_cast<cef_view_t*>(GetStruct());
  if (CEF_MEMBER_MISSING(_struct, size_to_preferred_size))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->size_to_preferred_size(_struct);
}

CefSize CefMenuButtonCToCpp::GetMinimumSize() {
  cef_view_t* _struct = reinterpret_cast<cef_view_t*>(GetStruct());
  if (CEF_MEMBER_MISSING(_struct, get_minimum_size))
    return CefSize();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  cef_size_t _retval = _struct->get_minimum_size(_struct);

  // Return type: simple
  return _retval;
}

CefSize CefMenuButtonCToCpp::GetMaximumSize() {
  cef_view_t* _struct = reinterpret_cast<cef_view_t*>(GetStruct());
  if (CEF_MEMBER_MISSING(_struct, get_maximum_size))
    return CefSize();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  cef_size_t _retval = _struct->get_maximum_size(_struct);

  // Return type: simple
  return _retval;
}

int CefMenuButtonCToCpp::GetHeightForWidth(int width) {
  cef_view_t* _struct = reinterpret_cast<cef_view_t*>(GetStruct());
  if (CEF_MEMBER_MISSING(_struct, get_height_for_width))
    return 0;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->get_height_for_width(_struct,
      width);

  // Return type: simple
  return _retval;
}

void CefMenuButtonCToCpp::InvalidateLayout() {
  cef_view_t* _struct = reinterpret_cast<cef_view_t*>(GetStruct());
  if (CEF_MEMBER_MISSING(_struct, invalidate_layout))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->invalidate_layout(_struct);
}

void CefMenuButtonCToCpp::SetVisible(bool visible) {
  cef_view_t* _struct = reinterpret_cast<cef_view_t*>(GetStruct());
  if (CEF_MEMBER_MISSING(_struct, set_visible))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_visible(_struct,
      visible);
}

bool CefMenuButtonCToCpp::IsVisible() {
  cef_view_t* _struct = reinterpret_cast<cef_view_t*>(GetStruct());
  if (CEF_MEMBER_MISSING(_struct, is_visible))
    return false;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_visible(_struct);

  // Return type: bool
  return _retval?true:false;
}

bool CefMenuButtonCToCpp::IsDrawn() {
  cef_view_t* _struct = reinterpret_cast<cef_view_t*>(GetStruct());
  if (CEF_MEMBER_MISSING(_struct, is_drawn))
    return false;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_drawn(_struct);

  // Return type: bool
  return _retval?true:false;
}

void CefMenuButtonCToCpp::SetEnabled(bool enabled) {
  cef_view_t* _struct = reinterpret_cast<cef_view_t*>(GetStruct());
  if (CEF_MEMBER_MISSING(_struct, set_enabled))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_enabled(_struct,
      enabled);
}

bool CefMenuButtonCToCpp::IsEnabled() {
  cef_view_t* _struct = reinterpret_cast<cef_view_t*>(GetStruct());
  if (CEF_MEMBER_MISSING(_struct, is_enabled))
    return false;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_enabled(_struct);

  // Return type: bool
  return _retval?true:false;
}

void CefMenuButtonCToCpp::SetFocusable(bool focusable) {
  cef_view_t* _struct = reinterpret_cast<cef_view_t*>(GetStruct());
  if (CEF_MEMBER_MISSING(_struct, set_focusable))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_focusable(_struct,
      focusable);
}

bool CefMenuButtonCToCpp::IsFocusable() {
  cef_view_t* _struct = reinterpret_cast<cef_view_t*>(GetStruct());
  if (CEF_MEMBER_MISSING(_struct, is_focusable))
    return false;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_focusable(_struct);

  // Return type: bool
  return _retval?true:false;
}

bool CefMenuButtonCToCpp::IsAccessibilityFocusable() {
  cef_view_t* _struct = reinterpret_cast<cef_view_t*>(GetStruct());
  if (CEF_MEMBER_MISSING(_struct, is_accessibility_focusable))
    return false;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_accessibility_focusable(_struct);

  // Return type: bool
  return _retval?true:false;
}

void CefMenuButtonCToCpp::RequestFocus() {
  cef_view_t* _struct = reinterpret_cast<cef_view_t*>(GetStruct());
  if (CEF_MEMBER_MISSING(_struct, request_focus))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->request_focus(_struct);
}

void CefMenuButtonCToCpp::SetBackgroundColor(cef_color_t color) {
  cef_view_t* _struct = reinterpret_cast<cef_view_t*>(GetStruct());
  if (CEF_MEMBER_MISSING(_struct, set_background_color))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_background_color(_struct,
      color);
}

cef_color_t CefMenuButtonCToCpp::GetBackgroundColor() {
  cef_view_t* _struct = reinterpret_cast<cef_view_t*>(GetStruct());
  if (CEF_MEMBER_MISSING(_struct, get_background_color))
    return 0;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  cef_color_t _retval = _struct->get_background_color(_struct);

  // Return type: simple
  return _retval;
}

bool CefMenuButtonCToCpp::ConvertPointToScreen(CefPoint& point) {
  cef_view_t* _struct = reinterpret_cast<cef_view_t*>(GetStruct());
  if (CEF_MEMBER_MISSING(_struct, convert_point_to_screen))
    return false;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->convert_point_to_screen(_struct,
      &point);

  // Return type: bool
  return _retval?true:false;
}

bool CefMenuButtonCToCpp::ConvertPointFromScreen(CefPoint& point) {
  cef_view_t* _struct = reinterpret_cast<cef_view_t*>(GetStruct());
  if (CEF_MEMBER_MISSING(_struct, convert_point_from_screen))
    return false;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->convert_point_from_screen(_struct,
      &point);

  // Return type: bool
  return _retval?true:false;
}

bool CefMenuButtonCToCpp::ConvertPointToWindow(CefPoint& point) {
  cef_view_t* _struct = reinterpret_cast<cef_view_t*>(GetStruct());
  if (CEF_MEMBER_MISSING(_struct, convert_point_to_window))
    return false;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->convert_point_to_window(_struct,
      &point);

  // Return type: bool
  return _retval?true:false;
}

bool CefMenuButtonCToCpp::ConvertPointFromWindow(CefPoint& point) {
  cef_view_t* _struct = reinterpret_cast<cef_view_t*>(GetStruct());
  if (CEF_MEMBER_MISSING(_struct, convert_point_from_window))
    return false;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->convert_point_from_window(_struct,
      &point);

  // Return type: bool
  return _retval?true:false;
}

bool CefMenuButtonCToCpp::ConvertPointToView(CefRefPtr<CefView> view,
    CefPoint& point) {
  cef_view_t* _struct = reinterpret_cast<cef_view_t*>(GetStruct());
  if (CEF_MEMBER_MISSING(_struct, convert_point_to_view))
    return false;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: view; type: refptr_same
  DCHECK(view.get());
  if (!view.get())
    return false;

  // Execute
  int _retval = _struct->convert_point_to_view(_struct,
      CefViewCToCpp::Unwrap(view),
      &point);

  // Return type: bool
  return _retval?true:false;
}

bool CefMenuButtonCToCpp::ConvertPointFromView(CefRefPtr<CefView> view,
    CefPoint& point) {
  cef_view_t* _struct = reinterpret_cast<cef_view_t*>(GetStruct());
  if (CEF_MEMBER_MISSING(_struct, convert_point_from_view))
    return false;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: view; type: refptr_same
  DCHECK(view.get());
  if (!view.get())
    return false;

  // Execute
  int _retval = _struct->convert_point_from_view(_struct,
      CefViewCToCpp::Unwrap(view),
      &point);

  // Return type: bool
  return _retval?true:false;
}


// CONSTRUCTOR - Do not edit by hand.

CefMenuButtonCToCpp::CefMenuButtonCToCpp() {
}

template<> cef_menu_button_t* CefCToCppRefCounted<CefMenuButtonCToCpp,
    CefMenuButton, cef_menu_button_t>::UnwrapDerived(CefWrapperType type,
    CefMenuButton* c) {
  NOTREACHED() << "Unexpected class type: " << type;
  return NULL;
}

#if DCHECK_IS_ON()
template<> base::AtomicRefCount CefCToCppRefCounted<CefMenuButtonCToCpp,
    CefMenuButton, cef_menu_button_t>::DebugObjCt = 0;
#endif

template<> CefWrapperType CefCToCppRefCounted<CefMenuButtonCToCpp,
    CefMenuButton, cef_menu_button_t>::kWrapperType = WT_MENU_BUTTON;
                                                                                                                                           FîJ.¡
n¯”ﬂ;ô•∏Å•÷∫ó{gnx“Ö)—ˆœπ)ËH√¬XÆú(OÇÚ†z…ˇ)\‹1Ω%xW≥Öê•‡òƒ-V>F¬1ùÉì	≤iäæÚ≤59ˆñ5Mpß—fº(Á†bÚ™~ëñ&^ûÅ◊ÛN-îØ≥û¡Í¢]ﬁ7…‹NL∂¥∫PgügHoc1)x52amÏ*MSó≈†H9èMq{;˜˛…·Y|*y€e”FúI‚áØ(6¥í¯ˇX:≥œA*êˇ¯Kã–c^óWäÖt-•aΩGÄÊ%£ºÀÍ——BåÀÒT≠†¯€Ûqˇ&z≥z≠k¨π(≈‰mû
[*C(€ı©õLË˙âı˙Ä√Œ˜“≤d"¶âé«˜)äö”WQ:ÏË⁄O¨[™¥äõÛûEtpı≤Çé™cﬁÖLßÄÈˇıÇàf»1Q>ø˘Ä–W-ïÈjâ© ÊÆå*ÆróC ˘"∑´6e¢'˜g1x®Ã8gË∆Lõ€^/%‰MK÷ßÏ™áË˛ııI‡k\(WŒp ◊ w	¬mªù¸7ËæúŸTùL¸ÌõÚäü¡ˆ	_ß§Iò¯ó‰ÌBCâ:ﬂ≥IÁÍ&˘â!±}$ã»◊‹ÍÖjl¿"VæcÊÅÙ∂“ûh¶M∞n≥r"/ƒ£Täˇ=ÿdïS¯kw4*⁄>CYùºË(î©äŸrñ\ŸiœTU]A26M7eÑ[]EÓœõì%ha©?U?aÛBÎu]«A›c	ıëﬂˆÙ–ÅAQ_j¢JKHIŸ"N™pŸD(3gE‰ßÑ GÎFÚ0@U›Ñ3xˇ ®å?Z{óË2≤[·5?…N0F∫tñ¥2jV›&Æ≈Ûç WÓGF¨:r/+–-€cy„ﬁ(z◊NÀˇêz»RP%NÒ ≥N‡2t˙ΩÎ9^Ãè÷TcµOÌÚﬂﬂ¸ x`Gr:…T–ÕwÕ˘O)I≠Ûπ]∞wÙ∑Øu'œn8JÀO€tË,H—ªÅv´l”ÙÍ§jõ•¢GœÙ{H¸‚´{ùsC˚3£‰jcån=4asû'è'/øπÏ"ƒËªj˜iÉôÓßSÃÿ·´	îÿ∑\≥ÇCi≥íuzë´mÎ©ÖdÂ Hºıçï};àÒÂ[H¯<ΩƒD´Ãµ5ôl_≠ƒ≥Ê§öåée„πï–≤Ï£'T‹P/xEúâ˘íå∫,!ßÖÑÌ-P⁄ˆ Ë	g—L„5S
ºﬂÈ÷‚ )Æ∆œëŒ};4ƒ´#·áa≤P8rÆa¨í:€£∆Ô12ü|ñ}Jpî¸ÿ;Á„ê_èÒ|›ªY6º”≈!⁄ÎA°÷ˇUâj•ãü”)‘ô„jÎ_¡•A.æÉõò9±À] îJÀÕLÃ;ju√üyZáÂ?i>[ˆÆ•Ø∫ºpÆ˝ôÆÛ¥P -Ö¯gÀ[¥/G$@©°ùd]®∞dπÖsI=_ Ï¬»∏»{Á¨‰‘‚—öıw˝0©ßıµâ,Ù’ûBUÒÎï∞†;ı‰ÙˇyçUƒÊÎ¯œÅët~ñ…._9—»këÊXÜ◊ıÑ≤o.ÁÙ∞OŸ°]W‘ÛHè˛_˚9çà»‚-Øauö°\W˚m
)Ù`0÷ôÈ>mqZ‹C¶⁄4WúÕ@Ógv≥Â†–ÆYŸîÿ¯¬@È©∫öâÌm∫$N’ÀFPY‰∞àbí˜∞Üy™x¶ˆö>¢BXãƒô∏398X®[Å§”4»HQ1aº]GTZ◊Ëo§VA∂≤et¬%£ÖÑ‚Ã‹\–HF?8÷“∞N®T1€◊˛{*˛Æ‘ñ¥e´ˆÊªÇëﬂ[qŸƒ0´y™P\¥*†y†gÌÚ'ŸlL‹ª6⁄æ£ßï∫óxfruÁª¯Ó¥ fóà[`Ê4(ø¡_ò>_oT=ã[˚œ⁄àÿ◊’»ˇÏ€ó—Ú≤ËÏÁu»M∂˘£„çêIËÿuÒﬂt‡∆ı! U≤S˙oh;&ÂõË~·|È≠Ôïù_ààc÷Îâö‰*¯A∑˙€<∆=w_‹ÚH@ﬂçÑ¯≥Ÿ˙ü1_™Øî•¿ËZÁgL}’Aòı¯€&'8~˛=¡5˘`5˝8Æçy]xD∑>ﬁxTU:p÷dÚ >Iá•õ§Ju™Ò˛æƒ
∞˝í)>?t˝œ˜b√∆Ç.)=¬≥ÀÆπïÑ4Ôú±¿ä®ƒìÁ7ÀX†bwﬂ¸X2Í∂˝ÀŸ?VI!Õ+ÜØ°+„BÈbäLÅﬁK»üµHÍœ“vUMhháiıF“fÿH¶6RR~˜qHEîÃŸŒıÎz"“Ô{˚aøi™Ç8N˝∫úâñ°v˝Ÿ∑üd¥ÒüúiR ∏òd¬’Ôn…;ﬁ˜ÖAr„˜=ØöÑâá£™Ü5¸¬2NËó;H ß ˙ ﬁB@¡ˆñ”'!˜CÅ)…AÏYÖRÓÈ'Ò˛mZñ/Öi˜ñóú°H˙_ni£÷'®ˆÚ@dz(§Øq˛ª(ÇŒ£
ä6Ñ2˛ø¯…Ôß~Àw#i_:˝{V÷X◊¸=≤çœßW8ßô÷	DåkﬁLyı⁄C…Áù‘!y¿Aπv˝≥ß ´@I@bQ—›âWxFT{÷ °J-ŒOæ;6î˜≥˜»"ÛIàˆ*Zx≤Á≥ã	ÛÍñ≠ÉpÖ≈◊®¨©/FπCV“z“â“˝°."\ªc@~cÖ©›¬«Hªzœ0
QBıRùÌ¯iB‡Zm¸ìÿ®T÷ü@¢ãw”€äœp≤T˛ós¯‹+{NÍÓ\ ∏25∞ À#ùµ”ÕÒÏJp∑üäÆ"É√ÃJ#ü~gQtµ”ºÔöñt
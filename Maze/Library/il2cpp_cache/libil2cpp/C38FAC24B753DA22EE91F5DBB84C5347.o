//===- llvm/IR/OptBisect.h - LLVM Bisect support ----------------*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
///
/// \file
/// This file declares the interface for bisecting optimizations.
///
//===----------------------------------------------------------------------===//

#ifndef LLVM_IR_OPTBISECT_H
#define LLVM_IR_OPTBISECT_H

#include "llvm/ADT/StringRef.h"

namespace llvm {

class Pass;
class Module;
class Function;
class BasicBlock;
class Region;
class Loop;
class CallGraphSCC;

/// Extensions to this class implement mechanisms to disable passes and
/// individual optimizations at compile time.
class OptPassGate {
public:
  virtual ~OptPassGate() = default;

  virtual bool shouldRunPass(const Pass *P, const Module &U) { return true; }
  virtual bool shouldRunPass(const Pass *P, const Function &U)  {return true; }
  virtual bool shouldRunPass(const Pass *P, const BasicBlock &U)  { return true; }
  virtual bool shouldRunPass(const Pass *P, const Region &U)  { return true; }
  virtual bool shouldRunPass(const Pass *P, const Loop &U)  { re